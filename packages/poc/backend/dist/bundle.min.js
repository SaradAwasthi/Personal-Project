(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["extensions"] = factory();
	else
		root["extensions"] = factory();
})(global, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 191);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(64); // utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString; // eslint-disable-next-line func-names

var kindOf = function (cache) {
  // eslint-disable-next-line func-names
  return function (thing) {
    var str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  };
}(Object.create(null));

function kindOfTest(type) {
  type = type.toLowerCase();
  return function isKindOf(thing) {
    return kindOf(thing) === type;
  };
}
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */


function isArray(val) {
  return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */


function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


var isArrayBuffer = kindOfTest('ArrayBuffer');
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && typeof val === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */


function isPlainObject(val) {
  if (kindOf(val) !== 'object') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


var isDate = kindOfTest('Date');
/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

var isFile = kindOfTest('File');
/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

var isBlob = kindOfTest('Blob');
/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

var isFileList = kindOfTest('FileList');
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(thing) {
  var pattern = '[object FormData]';
  return thing && (typeof FormData === 'function' && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
}
/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


var isURLSearchParams = kindOfTest('URLSearchParams');
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function
  /* obj1, obj2, obj3, ... */
merge() {
  var result = {};

  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */


function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }

  return content;
}
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */


function inherits(constructor, superConstructor, props, descriptors) {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  props && Object.assign(constructor.prototype, props);
}
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */


function toFlatObject(sourceObj, destObj, filter) {
  var props;
  var i;
  var prop;
  var merged = {};
  destObj = destObj || {};

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;

    while (i-- > 0) {
      prop = props[i];

      if (!merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }

    sourceObj = Object.getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}
/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */


function endsWith(str, searchString, position) {
  str = String(str);

  if (position === undefined || position > str.length) {
    position = str.length;
  }

  position -= searchString.length;
  var lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}
/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */


function toArray(thing) {
  if (!thing) return null;
  var i = thing.length;
  if (isUndefined(i)) return null;
  var arr = new Array(i);

  while (i-- > 0) {
    arr[i] = thing[i];
  }

  return arr;
} // eslint-disable-next-line func-names


var isTypedArray = function (TypedArray) {
  // eslint-disable-next-line func-names
  return function (thing) {
    return TypedArray && thing instanceof TypedArray;
  };
}(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM,
  inherits: inherits,
  toFlatObject: toFlatObject,
  kindOf: kindOf,
  kindOfTest: kindOfTest,
  endsWith: endsWith,
  toArray: toArray,
  isTypedArray: isTypedArray,
  isFileList: isFileList
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(54); // utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

function isArray(val) {
  return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */


function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */


function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && typeof val === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */


function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


function isDate(val) {
  return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */


function isFile(val) {
  return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */


function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */


function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */


function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function
  /* obj1, obj2, obj3, ... */
merge() {
  var result = {};

  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */


function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }

  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-console: 0 */


const urllib = __webpack_require__(1);

const util = __webpack_require__(12);

const fs = __webpack_require__(24);

const fetch = __webpack_require__(25);

const dns = __webpack_require__(45);

const net = __webpack_require__(26);

const os = __webpack_require__(27);

const DNS_TTL = 5 * 60 * 1000;
const networkInterfaces = module.exports.networkInterfaces = os.networkInterfaces();

const resolver = (family, hostname, callback) => {
  const familySupported = // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6
  Object.keys(networkInterfaces).map(key => networkInterfaces[key]) // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)
  .reduce((acc, val) => acc.concat(val), []).filter(i => !i.internal).filter(i => i.family === 'IPv' + family).length > 0;

  if (!familySupported) {
    return callback(null, []);
  }

  dns['resolve' + family](hostname, (err, addresses) => {
    if (err) {
      switch (err.code) {
        case dns.NODATA:
        case dns.NOTFOUND:
        case dns.NOTIMP:
        case dns.SERVFAIL:
        case dns.CONNREFUSED:
        case 'EAI_AGAIN':
          return callback(null, []);
      }

      return callback(err);
    }

    return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));
  });
};

const dnsCache = module.exports.dnsCache = new Map();

const formatDNSValue = (value, extra) => {
  if (!value) {
    return Object.assign({}, extra || {});
  }

  return Object.assign({
    servername: value.servername,
    host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]
  }, extra || {});
};

module.exports.resolveHostname = (options, callback) => {
  options = options || {};

  if (!options.host && options.servername) {
    options.host = options.servername;
  }

  if (!options.host || net.isIP(options.host)) {
    // nothing to do here
    let value = {
      addresses: [options.host],
      servername: options.servername || false
    };
    return callback(null, formatDNSValue(value, {
      cached: false
    }));
  }

  let cached;

  if (dnsCache.has(options.host)) {
    cached = dnsCache.get(options.host);

    if (!cached.expires || cached.expires >= Date.now()) {
      return callback(null, formatDNSValue(cached.value, {
        cached: true
      }));
    }
  }

  resolver(4, options.host, (err, addresses) => {
    if (err) {
      if (cached) {
        // ignore error, use expired value
        return callback(null, formatDNSValue(cached.value, {
          cached: true,
          error: err
        }));
      }

      return callback(err);
    }

    if (addresses && addresses.length) {
      let value = {
        addresses,
        servername: options.servername || options.host
      };
      dnsCache.set(options.host, {
        value,
        expires: Date.now() + DNS_TTL
      });
      return callback(null, formatDNSValue(value, {
        cached: false
      }));
    }

    resolver(6, options.host, (err, addresses) => {
      if (err) {
        if (cached) {
          // ignore error, use expired value
          return callback(null, formatDNSValue(cached.value, {
            cached: true,
            error: err
          }));
        }

        return callback(err);
      }

      if (addresses && addresses.length) {
        let value = {
          addresses,
          servername: options.servername || options.host
        };
        dnsCache.set(options.host, {
          value,
          expires: Date.now() + DNS_TTL
        });
        return callback(null, formatDNSValue(value, {
          cached: false
        }));
      }

      try {
        dns.lookup(options.host, {}, (err, address) => {
          if (err) {
            if (cached) {
              // ignore error, use expired value
              return callback(null, formatDNSValue(cached.value, {
                cached: true,
                error: err
              }));
            }

            return callback(err);
          }

          if (!address && cached) {
            // nothing was found, fallback to cached value
            return callback(null, formatDNSValue(cached.value, {
              cached: true
            }));
          }

          let value = {
            addresses: address ? [address] : [options.host],
            servername: options.servername || options.host
          };
          dnsCache.set(options.host, {
            value,
            expires: Date.now() + DNS_TTL
          });
          return callback(null, formatDNSValue(value, {
            cached: false
          }));
        });
      } catch (err) {
        if (cached) {
          // ignore error, use expired value
          return callback(null, formatDNSValue(cached.value, {
            cached: true,
            error: err
          }));
        }

        return callback(err);
      }
    });
  });
};
/**
 * Parses connection url to a structured configuration object
 *
 * @param {String} str Connection url
 * @return {Object} Configuration object
 */


module.exports.parseConnectionUrl = str => {
  str = str || '';
  let options = {};
  [urllib.parse(str, true)].forEach(url => {
    let auth;

    switch (url.protocol) {
      case 'smtp:':
        options.secure = false;
        break;

      case 'smtps:':
        options.secure = true;
        break;

      case 'direct:':
        options.direct = true;
        break;
    }

    if (!isNaN(url.port) && Number(url.port)) {
      options.port = Number(url.port);
    }

    if (url.hostname) {
      options.host = url.hostname;
    }

    if (url.auth) {
      auth = url.auth.split(':');

      if (!options.auth) {
        options.auth = {};
      }

      options.auth.user = auth.shift();
      options.auth.pass = auth.join(':');
    }

    Object.keys(url.query || {}).forEach(key => {
      let obj = options;
      let lKey = key;
      let value = url.query[key];

      if (!isNaN(value)) {
        value = Number(value);
      }

      switch (value) {
        case 'true':
          value = true;
          break;

        case 'false':
          value = false;
          break;
      } // tls is nested object


      if (key.indexOf('tls.') === 0) {
        lKey = key.substr(4);

        if (!options.tls) {
          options.tls = {};
        }

        obj = options.tls;
      } else if (key.indexOf('.') >= 0) {
        // ignore nested properties besides tls
        return;
      }

      if (!(lKey in obj)) {
        obj[lKey] = value;
      }
    });
  });
  return options;
};

module.exports._logFunc = (logger, level, defaults, data, message, ...args) => {
  let entry = {};
  Object.keys(defaults || {}).forEach(key => {
    if (key !== 'level') {
      entry[key] = defaults[key];
    }
  });
  Object.keys(data || {}).forEach(key => {
    if (key !== 'level') {
      entry[key] = data[key];
    }
  });
  logger[level](entry, message, ...args);
};
/**
 * Returns a bunyan-compatible logger interface. Uses either provided logger or
 * creates a default console logger
 *
 * @param {Object} [options] Options object that might include 'logger' value
 * @return {Object} bunyan compatible logger
 */


module.exports.getLogger = (options, defaults) => {
  options = options || {};
  let response = {};
  let levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];

  if (!options.logger) {
    // use vanity logger
    levels.forEach(level => {
      response[level] = () => false;
    });
    return response;
  }

  let logger = options.logger;

  if (options.logger === true) {
    // create console logger
    logger = createDefaultLogger(levels);
  }

  levels.forEach(level => {
    response[level] = (data, message, ...args) => {
      module.exports._logFunc(logger, level, defaults, data, message, ...args);
    };
  });
  return response;
};
/**
 * Wrapper for creating a callback that either resolves or rejects a promise
 * based on input
 *
 * @param {Function} resolve Function to run if callback is called
 * @param {Function} reject Function to run if callback ends with an error
 */


module.exports.callbackPromise = (resolve, reject) => function () {
  let args = Array.from(arguments);
  let err = args.shift();

  if (err) {
    reject(err);
  } else {
    resolve(...args);
  }
};
/**
 * Resolves a String or a Buffer value for content value. Useful if the value
 * is a Stream or a file or an URL. If the value is a Stream, overwrites
 * the stream object with the resolved value (you can't stream a value twice).
 *
 * This is useful when you want to create a plugin that needs a content value,
 * for example the `html` or `text` value as a String or a Buffer but not as
 * a file path or an URL.
 *
 * @param {Object} data An object or an Array you want to resolve an element for
 * @param {String|Number} key Property name or an Array index
 * @param {Function} callback Callback function with (err, value)
 */


module.exports.resolveContent = (data, key, callback) => {
  let promise;

  if (!callback) {
    promise = new Promise((resolve, reject) => {
      callback = module.exports.callbackPromise(resolve, reject);
    });
  }

  let content = data && data[key] && data[key].content || data[key];
  let contentStream;
  let encoding = (typeof data[key] === 'object' && data[key].encoding || 'utf8').toString().toLowerCase().replace(/[-_\s]/g, '');

  if (!content) {
    return callback(null, content);
  }

  if (typeof content === 'object') {
    if (typeof content.pipe === 'function') {
      return resolveStream(content, (err, value) => {
        if (err) {
          return callback(err);
        } // we can't stream twice the same content, so we need
        // to replace the stream object with the streaming result


        if (data[key].content) {
          data[key].content = value;
        } else {
          data[key] = value;
        }

        callback(null, value);
      });
    } else if (/^https?:\/\//i.test(content.path || content.href)) {
      contentStream = fetch(content.path || content.href);
      return resolveStream(contentStream, callback);
    } else if (/^data:/i.test(content.path || content.href)) {
      let parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);

      if (!parts) {
        return callback(null, Buffer.from(0));
      }

      return callback(null, /\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2])));
    } else if (content.path) {
      return resolveStream(fs.createReadStream(content.path), callback);
    }
  }

  if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {
    content = Buffer.from(data[key].content, encoding);
  } // default action, return as is


  setImmediate(() => callback(null, content));
  return promise;
};
/**
 * Copies properties from source objects to target objects
 */


module.exports.assign = function
  /* target, ... sources */
() {
  let args = Array.from(arguments);
  let target = args.shift() || {};
  args.forEach(source => {
    Object.keys(source || {}).forEach(key => {
      if (['tls', 'auth'].includes(key) && source[key] && typeof source[key] === 'object') {
        // tls and auth are special keys that need to be enumerated separately
        // other objects are passed as is
        if (!target[key]) {
          // ensure that target has this key
          target[key] = {};
        }

        Object.keys(source[key]).forEach(subKey => {
          target[key][subKey] = source[key][subKey];
        });
      } else {
        target[key] = source[key];
      }
    });
  });
  return target;
};

module.exports.encodeXText = str => {
  // ! 0x21
  // + 0x2B
  // = 0x3D
  // ~ 0x7E
  if (!/[^\x21-\x2A\x2C-\x3C\x3E-\x7E]/.test(str)) {
    return str;
  }

  let buf = Buffer.from(str);
  let result = '';

  for (let i = 0, len = buf.length; i < len; i++) {
    let c = buf[i];

    if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {
      result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();
    } else {
      result += String.fromCharCode(c);
    }
  }

  return result;
};
/**
 * Streams a stream value into a Buffer
 *
 * @param {Object} stream Readable stream
 * @param {Function} callback Callback function with (err, value)
 */


function resolveStream(stream, callback) {
  let responded = false;
  let chunks = [];
  let chunklen = 0;
  stream.on('error', err => {
    if (responded) {
      return;
    }

    responded = true;
    callback(err);
  });
  stream.on('readable', () => {
    let chunk;

    while ((chunk = stream.read()) !== null) {
      chunks.push(chunk);
      chunklen += chunk.length;
    }
  });
  stream.on('end', () => {
    if (responded) {
      return;
    }

    responded = true;
    let value;

    try {
      value = Buffer.concat(chunks, chunklen);
    } catch (E) {
      return callback(E);
    }

    callback(null, value);
  });
}
/**
 * Generates a bunyan-like logger that prints to console
 *
 * @returns {Object} Bunyan logger instance
 */


function createDefaultLogger(levels) {
  let levelMaxLen = 0;
  let levelNames = new Map();
  levels.forEach(level => {
    if (level.length > levelMaxLen) {
      levelMaxLen = level.length;
    }
  });
  levels.forEach(level => {
    let levelName = level.toUpperCase();

    if (levelName.length < levelMaxLen) {
      levelName += ' '.repeat(levelMaxLen - levelName.length);
    }

    levelNames.set(level, levelName);
  });

  let print = (level, entry, message, ...args) => {
    let prefix = '';

    if (entry) {
      if (entry.tnx === 'server') {
        prefix = 'S: ';
      } else if (entry.tnx === 'client') {
        prefix = 'C: ';
      }

      if (entry.sid) {
        prefix = '[' + entry.sid + '] ' + prefix;
      }

      if (entry.cid) {
        prefix = '[#' + entry.cid + '] ' + prefix;
      }
    }

    message = util.format(message, ...args);
    message.split(/\r?\n/).forEach(line => {
      console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);
    });
  };

  let logger = {};
  levels.forEach(level => {
    logger[level] = print.bind(null, level);
  });
  return logger;
}

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return copy; });
var toStringFunction = Function.prototype.toString;
var create = Object.create,
    defineProperty = Object.defineProperty,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    getOwnPropertyNames = Object.getOwnPropertyNames,
    getOwnPropertySymbols = Object.getOwnPropertySymbols,
    getPrototypeOf$1 = Object.getPrototypeOf;
var _a = Object.prototype,
    hasOwnProperty = _a.hasOwnProperty,
    propertyIsEnumerable = _a.propertyIsEnumerable;
var SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === 'function';
var WEAK_MAP = typeof WeakMap === 'function';
/**
 * @function createCache
 *
 * @description
 * get a new cache object to prevent circular references
 *
 * @returns the new cache object
 */

var createCache = function () {
  if (WEAK_MAP) {
    return function () {
      return new WeakMap();
    };
  }

  var Cache =
  /** @class */
  function () {
    function Cache() {
      this._keys = [];
      this._values = [];
    }

    Cache.prototype.has = function (key) {
      return !!~this._keys.indexOf(key);
    };

    Cache.prototype.get = function (key) {
      return this._values[this._keys.indexOf(key)];
    };

    Cache.prototype.set = function (key, value) {
      this._keys.push(key);

      this._values.push(value);
    };

    return Cache;
  }();

  return function () {
    return new Cache();
  };
}();
/**
 * @function getCleanClone
 *
 * @description
 * get an empty version of the object with the same prototype it has
 *
 * @param object the object to build a clean clone from
 * @param realm the realm the object resides in
 * @returns the empty cloned object
 */


var getCleanClone = function (object, realm) {
  var prototype = object.__proto__ || getPrototypeOf$1(object);

  if (!prototype) {
    return create(null);
  }

  var Constructor = prototype.constructor;

  if (Constructor === realm.Object) {
    return prototype === realm.Object.prototype ? {} : create(prototype);
  }

  if (~toStringFunction.call(Constructor).indexOf('[native code]')) {
    try {
      return new Constructor();
    } catch (_a) {}
  }

  return create(prototype);
};
/**
 * @function getObjectCloneLoose
 *
 * @description
 * get a copy of the object based on loose rules, meaning all enumerable keys
 * and symbols are copied, but property descriptors are not considered
 *
 * @param object the object to clone
 * @param realm the realm the object resides in
 * @param handleCopy the function that handles copying the object
 * @returns the copied object
 */


var getObjectCloneLoose = function (object, realm, handleCopy, cache) {
  var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively

  cache.set(object, clone);

  for (var key in object) {
    if (hasOwnProperty.call(object, key)) {
      clone[key] = handleCopy(object[key], cache);
    }
  }

  if (SYMBOL_PROPERTIES) {
    var symbols = getOwnPropertySymbols(object);

    for (var index = 0, length_1 = symbols.length, symbol = void 0; index < length_1; ++index) {
      symbol = symbols[index];

      if (propertyIsEnumerable.call(object, symbol)) {
        clone[symbol] = handleCopy(object[symbol], cache);
      }
    }
  }

  return clone;
};
/**
 * @function getObjectCloneStrict
 *
 * @description
 * get a copy of the object based on strict rules, meaning all keys and symbols
 * are copied based on the original property descriptors
 *
 * @param object the object to clone
 * @param realm the realm the object resides in
 * @param handleCopy the function that handles copying the object
 * @returns the copied object
 */


var getObjectCloneStrict = function (object, realm, handleCopy, cache) {
  var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively

  cache.set(object, clone);
  var properties = SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);

  for (var index = 0, length_2 = properties.length, property = void 0, descriptor = void 0; index < length_2; ++index) {
    property = properties[index];

    if (property !== 'callee' && property !== 'caller') {
      descriptor = getOwnPropertyDescriptor(object, property);

      if (descriptor) {
        // Only clone the value if actually a value, not a getter / setter.
        if (!descriptor.get && !descriptor.set) {
          descriptor.value = handleCopy(object[property], cache);
        }

        try {
          defineProperty(clone, property, descriptor);
        } catch (error) {
          // Tee above can fail on node in edge cases, so fall back to the loose assignment.
          clone[property] = descriptor.value;
        }
      } else {
        // In extra edge cases where the property descriptor cannot be retrived, fall back to
        // the loose assignment.
        clone[property] = handleCopy(object[property], cache);
      }
    }
  }

  return clone;
};
/**
 * @function getRegExpFlags
 *
 * @description
 * get the flags to apply to the copied regexp
 *
 * @param regExp the regexp to get the flags of
 * @returns the flags for the regexp
 */


var getRegExpFlags = function (regExp) {
  var flags = '';

  if (regExp.global) {
    flags += 'g';
  }

  if (regExp.ignoreCase) {
    flags += 'i';
  }

  if (regExp.multiline) {
    flags += 'm';
  }

  if (regExp.unicode) {
    flags += 'u';
  }

  if (regExp.sticky) {
    flags += 'y';
  }

  return flags;
}; // utils


var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf;

var GLOBAL_THIS = function () {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  }

  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof global !== 'undefined') {
    return global;
  }

  if (console && console.error) {
    console.error('Unable to locate global object, returning "this".');
  }

  return this;
}();
/**
 * @function copy
 *
 * @description
 * copy an value deeply as much as possible
 *
 * If `strict` is applied, then all properties (including non-enumerable ones)
 * are copied with their original property descriptors on both objects and arrays.
 *
 * The value is compared to the global constructors in the `realm` provided,
 * and the native constructor is always used to ensure that extensions of native
 * objects (allows in ES2015+) are maintained.
 *
 * @param value the value to copy
 * @param [options] the options for copying with
 * @param [options.isStrict] should the copy be strict
 * @param [options.realm] the realm (this) value the value is copied from
 * @returns the copied value
 */


function copy(value, options) {
  // manually coalesced instead of default parameters for performance
  var isStrict = !!(options && options.isStrict);
  var realm = options && options.realm || GLOBAL_THIS;
  var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
  /**
   * @function handleCopy
   *
   * @description
   * copy the value recursively based on its type
   *
   * @param value the value to copy
   * @returns the copied value
   */

  var handleCopy = function (value, cache) {
    if (!value || typeof value !== 'object') {
      return value;
    }

    if (cache.has(value)) {
      return cache.get(value);
    }

    var prototype = value.__proto__ || getPrototypeOf(value);
    var Constructor = prototype && prototype.constructor; // plain objects

    if (!Constructor || Constructor === realm.Object) {
      return getObjectClone(value, realm, handleCopy, cache);
    }

    var clone; // arrays

    if (isArray(value)) {
      // if strict, include non-standard properties
      if (isStrict) {
        return getObjectCloneStrict(value, realm, handleCopy, cache);
      }

      clone = new Constructor();
      cache.set(value, clone);

      for (var index = 0, length_1 = value.length; index < length_1; ++index) {
        clone[index] = handleCopy(value[index], cache);
      }

      return clone;
    } // dates


    if (value instanceof realm.Date) {
      return new Constructor(value.getTime());
    } // regexps


    if (value instanceof realm.RegExp) {
      clone = new Constructor(value.source, value.flags || getRegExpFlags(value));
      clone.lastIndex = value.lastIndex;
      return clone;
    } // maps


    if (realm.Map && value instanceof realm.Map) {
      clone = new Constructor();
      cache.set(value, clone);
      value.forEach(function (value, key) {
        clone.set(key, handleCopy(value, cache));
      });
      return clone;
    } // sets


    if (realm.Set && value instanceof realm.Set) {
      clone = new Constructor();
      cache.set(value, clone);
      value.forEach(function (value) {
        clone.add(handleCopy(value, cache));
      });
      return clone;
    } // blobs


    if (realm.Blob && value instanceof realm.Blob) {
      return value.slice(0, value.size, value.type);
    } // buffers (node-only)


    if (realm.Buffer && realm.Buffer.isBuffer(value)) {
      clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(value.length) : new Constructor(value.length);
      cache.set(value, clone);
      value.copy(clone);
      return clone;
    } // arraybuffers / dataviews


    if (realm.ArrayBuffer) {
      // dataviews
      if (realm.ArrayBuffer.isView(value)) {
        clone = new Constructor(value.buffer.slice(0));
        cache.set(value, clone);
        return clone;
      } // arraybuffers


      if (value instanceof realm.ArrayBuffer) {
        clone = value.slice(0);
        cache.set(value, clone);
        return clone;
      }
    } // if the value cannot / should not be cloned, don't


    if ( // promise-like
    typeof value.then === 'function' || // errors
    value instanceof Error || // weakmaps
    realm.WeakMap && value instanceof realm.WeakMap || // weaksets
    realm.WeakSet && value instanceof realm.WeakSet) {
      return value;
    } // assume anything left is a custom constructor


    return getObjectClone(value, realm, handleCopy, cache);
  };

  return handleCopy(value, createCache());
} // Adding reference to allow usage in CommonJS libraries compiled using TSC, which
// expects there to be a default property on the exported value. See
// [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.


copy.default = copy;
/**
 * @function strictCopy
 *
 * @description
 * copy the value with `strict` option pre-applied
 *
 * @param value the value to copy
 * @param [options] the options for copying with
 * @param [options.realm] the realm (this) value the value is copied from
 * @returns the copied value
 */

copy.strict = function strictCopy(value, options) {
  return copy(value, {
    isStrict: true,
    realm: options ? options.realm : void 0
  });
};



/***/ }),
/* 8 */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"nodemailer\",\"version\":\"6.7.3\",\"description\":\"Easy as cake e-mail sending from your Node.js applications\",\"main\":\"lib/nodemailer.js\",\"scripts\":{\"test\":\"grunt\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/nodemailer/nodemailer.git\"},\"keywords\":[\"Nodemailer\"],\"author\":\"Andris Reinman\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/nodemailer/nodemailer/issues\"},\"homepage\":\"https://nodemailer.com/\",\"devDependencies\":{\"@aws-sdk/client-ses\":\"3.54.1\",\"aws-sdk\":\"2.1096.0\",\"bunyan\":\"1.8.15\",\"chai\":\"4.3.6\",\"eslint-config-nodemailer\":\"1.2.0\",\"eslint-config-prettier\":\"8.5.0\",\"grunt\":\"1.4.1\",\"grunt-cli\":\"1.4.3\",\"grunt-eslint\":\"24.0.0\",\"grunt-mocha-test\":\"0.13.3\",\"libbase64\":\"1.2.1\",\"libmime\":\"5.0.0\",\"libqp\":\"1.1.0\",\"mocha\":\"9.2.2\",\"nodemailer-ntlm-auth\":\"1.0.1\",\"proxy\":\"1.0.2\",\"proxy-test-server\":\"1.0.0\",\"sinon\":\"13.0.1\",\"smtp-server\":\"3.10.0\"},\"engines\":{\"node\":\">=6.0.0\"}}");

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createHttpClient", function() { return createHttpClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createRequestConfig", function() { return createRequestConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enforceObjPath", function() { return enforceObjPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "errorHandler", function() { return errorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "freezeSys", function() { return freezeSys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUserAgentHeader", function() { return getUserAgentHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toPlainObject", function() { return toPlainObject; });
/* harmony import */ var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81);
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(qs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_isstring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(44);
/* harmony import */ var lodash_isstring__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isstring__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var p_throttle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82);
/* harmony import */ var p_throttle__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(p_throttle__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash_isplainobject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22);
/* harmony import */ var lodash_isplainobject__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isplainobject__WEBPACK_IMPORTED_MODULE_4__);






function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _wrapRegExp() {
  _wrapRegExp = function (re, groups) {
    return new BabelRegExp(re, void 0, groups);
  };

  var _super = RegExp.prototype,
      _groups = new WeakMap();

  function BabelRegExp(re, flags, groups) {
    var _this = new RegExp(re, flags);

    return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
  }

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(g).reduce(function (groups, name) {
      return groups[name] = result[g[name]], groups;
    }, Object.create(null));
  }

  return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    return result && (result.groups = buildGroups(result, this)), result;
  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if ("string" == typeof substitution) {
      var groups = _groups.get(this);

      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
    }

    if ("function" == typeof substitution) {
      var _this = this;

      return _super[Symbol.replace].call(this, str, function () {
        var args = arguments;
        return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
      });
    }

    return _super[Symbol.replace].call(this, str, substitution);
  }, _wrapRegExp.apply(this, arguments);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function isNode() {
  /**
   * Polyfills of 'process' might set process.browser === true
   *
   * See:
   * https://github.com/webpack/node-libs-browser/blob/master/mock/process.js#L8
   * https://github.com/defunctzombie/node-process/blob/master/browser.js#L156
   **/
  return typeof process !== 'undefined' && !process.browser;
}

function isReactNative() {
  return typeof window !== 'undefined' && 'navigator' in window && 'product' in window.navigator && window.navigator.product === 'ReactNative';
}

function getNodeVersion() {
  return process.versions && process.versions.node ? "v".concat(process.versions.node) : process.version;
}

function getWindow() {
  return window;
}

function noop() {
  return undefined;
}

var PERCENTAGE_REGEX = /*#__PURE__*/_wrapRegExp(/(\d+)(%)/, {
  value: 1
});

function calculateLimit(type) {
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7;
  var limit = max;

  if (PERCENTAGE_REGEX.test(type)) {
    var _type$match;

    var groups = (_type$match = type.match(PERCENTAGE_REGEX)) === null || _type$match === void 0 ? void 0 : _type$match.groups;

    if (groups && groups.value) {
      var percentage = parseInt(groups.value) / 100;
      limit = Math.round(max * percentage);
    }
  }

  return Math.min(30, Math.max(1, limit));
}

function createThrottle(limit, logger) {
  logger('info', "Throttle request to ".concat(limit, "/s"));
  return p_throttle__WEBPACK_IMPORTED_MODULE_3___default()({
    limit: limit,
    interval: 1000,
    strict: false
  });
}

var rateLimitThrottle = function (axiosInstance) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';
  var _axiosInstance$defaul = axiosInstance.defaults.logHandler,
      logHandler = _axiosInstance$defaul === void 0 ? noop : _axiosInstance$defaul;
  var limit = lodash_isstring__WEBPACK_IMPORTED_MODULE_2___default()(type) ? calculateLimit(type) : calculateLimit('auto', type);
  var throttle = createThrottle(limit, logHandler);
  var isCalculated = false;
  var requestInterceptorId = axiosInstance.interceptors.request.use(function (config) {
    return throttle(function () {
      return config;
    })();
  }, function (error) {
    return Promise.reject(error);
  });
  var responseInterceptorId = axiosInstance.interceptors.response.use(function (response) {
    if (!isCalculated && lodash_isstring__WEBPACK_IMPORTED_MODULE_2___default()(type) && (type === 'auto' || PERCENTAGE_REGEX.test(type)) && response.headers && response.headers['x-contentful-ratelimit-second-limit']) {
      var rawLimit = parseInt(response.headers['x-contentful-ratelimit-second-limit']);
      var nextLimit = calculateLimit(type, rawLimit);

      if (nextLimit !== limit) {
        if (requestInterceptorId) {
          axiosInstance.interceptors.request.eject(requestInterceptorId);
        }

        limit = nextLimit;
        throttle = createThrottle(nextLimit, logHandler);
        requestInterceptorId = axiosInstance.interceptors.request.use(function (config) {
          return throttle(function () {
            return config;
          })();
        }, function (error) {
          return Promise.reject(error);
        });
      }

      isCalculated = true;
    }

    return response;
  }, function (error) {
    return Promise.reject(error);
  });
  return function () {
    axiosInstance.interceptors.request.eject(requestInterceptorId);
    axiosInstance.interceptors.response.eject(responseInterceptorId);
  };
};

var delay = function delay(ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
};

var defaultWait = function defaultWait(attempts) {
  return Math.pow(Math.SQRT2, attempts);
};

function rateLimit(instance) {
  var maxRetry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
  var _instance$defaults = instance.defaults,
      _instance$defaults$re = _instance$defaults.responseLogger,
      responseLogger = _instance$defaults$re === void 0 ? noop : _instance$defaults$re,
      _instance$defaults$re2 = _instance$defaults.requestLogger,
      requestLogger = _instance$defaults$re2 === void 0 ? noop : _instance$defaults$re2;
  instance.interceptors.request.use(function (config) {
    requestLogger(config);
    return config;
  }, function (error) {
    requestLogger(error);
    return Promise.reject(error);
  });
  instance.interceptors.response.use(function (response) {
    // we don't need to do anything here
    responseLogger(response);
    return response;
  }, function (error) {
    var response = error.response;
    var config = error.config;
    responseLogger(error); // Do not retry if it is disabled or no request config exists (not an axios error)

    if (!config || !instance.defaults.retryOnError) {
      return Promise.reject(error);
    } // Retried already for max attempts


    var doneAttempts = config.attempts || 1;

    if (doneAttempts > maxRetry) {
      error.attempts = config.attempts;
      return Promise.reject(error);
    }

    var retryErrorType = null;
    var wait = defaultWait(doneAttempts); // Errors without response did not receive anything from the server

    if (!response) {
      retryErrorType = 'Connection';
    } else if (response.status >= 500 && response.status < 600) {
      // 5** errors are server related
      retryErrorType = "Server ".concat(response.status);
    } else if (response.status === 429) {
      // 429 errors are exceeded rate limit exceptions
      retryErrorType = 'Rate limit'; // all headers are lowercased by axios https://github.com/mzabriskie/axios/issues/413

      if (response.headers && error.response.headers['x-contentful-ratelimit-reset']) {
        wait = response.headers['x-contentful-ratelimit-reset'];
      }
    }

    if (retryErrorType) {
      // convert to ms and add jitter
      wait = Math.floor(wait * 1000 + Math.random() * 200 + 500);
      instance.defaults.logHandler('warning', "".concat(retryErrorType, " error occurred. Waiting for ").concat(wait, " ms before retrying...")); // increase attempts counter

      config.attempts = doneAttempts + 1;
      /* Somehow between the interceptor and retrying the request the httpAgent/httpsAgent gets transformed from an Agent-like object
       to a regular object, causing failures on retries after rate limits. Removing these properties here fixes the error, but retry
       requests still use the original http/httpsAgent property */

      delete config.httpAgent;
      delete config.httpsAgent;
      return delay(wait).then(function () {
        return instance(config);
      });
    }

    return Promise.reject(error);
  });
}

function asyncToken(instance, getToken) {
  instance.interceptors.request.use(function (config) {
    return getToken().then(function (accessToken) {
      config.headers = _objectSpread2(_objectSpread2({}, config.headers), {}, {
        Authorization: "Bearer ".concat(accessToken)
      });
      return config;
    });
  });
} // Also enforces toplevel domain specified, no spaces and no protocol


var HOST_REGEX = /^(?!\w+:\/\/)([^\s:]+\.?[^\s:]+)(?::(\d+))?(?!:)$/;
/**
 * Create pre configured axios instance
 * @private
 * @param {AxiosStatic} axios - Axios library
 * @param {CreateHttpClientParams} options - Initialization parameters for the HTTP client
 * @return {ContentfulAxiosInstance} Initialized axios instance
 */

function createHttpClient(axios, options) {
  var defaultConfig = {
    insecure: false,
    retryOnError: true,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    logHandler: function logHandler(level, data) {
      if (level === 'error' && data) {
        var title = [data.name, data.message].filter(function (a) {
          return a;
        }).join(' - ');
        console.error("[error] ".concat(title));
        console.error(data);
        return;
      }

      console.log("[".concat(level, "] ").concat(data));
    },
    // Passed to axios
    headers: {},
    httpAgent: false,
    httpsAgent: false,
    timeout: 30000,
    throttle: 0,
    proxy: false,
    basePath: '',
    adapter: undefined,
    maxContentLength: 1073741824,
    // 1GB
    maxBodyLength: 1073741824 // 1GB

  };

  var config = _objectSpread2(_objectSpread2({}, defaultConfig), options);

  if (!config.accessToken) {
    var missingAccessTokenError = new TypeError('Expected parameter accessToken');
    config.logHandler('error', missingAccessTokenError);
    throw missingAccessTokenError;
  } // Construct axios baseURL option


  var protocol = config.insecure ? 'http' : 'https';
  var space = config.space ? "".concat(config.space, "/") : '';
  var hostname = config.defaultHostname;
  var port = config.insecure ? 80 : 443;

  if (config.host && HOST_REGEX.test(config.host)) {
    var parsed = config.host.split(':');

    if (parsed.length === 2) {
      var _parsed = _slicedToArray(parsed, 2);

      hostname = _parsed[0];
      port = _parsed[1];
    } else {
      hostname = parsed[0];
    }
  } // Ensure that basePath does start but not end with a slash


  if (config.basePath) {
    config.basePath = "/".concat(config.basePath.split('/').filter(Boolean).join('/'));
  }

  var baseURL = options.baseURL || "".concat(protocol, "://").concat(hostname, ":").concat(port).concat(config.basePath, "/spaces/").concat(space);

  if (!config.headers.Authorization && typeof config.accessToken !== 'function') {
    config.headers.Authorization = 'Bearer ' + config.accessToken;
  } // Set these headers only for node because browsers don't like it when you
  // override user-agent or accept-encoding.
  // The SDKs should set their own X-Contentful-User-Agent.


  if (isNode()) {
    config.headers['user-agent'] = 'node.js/' + getNodeVersion();
    config.headers['Accept-Encoding'] = 'gzip';
  }

  var axiosOptions = {
    // Axios
    baseURL: baseURL,
    headers: config.headers,
    httpAgent: config.httpAgent,
    httpsAgent: config.httpsAgent,
    paramsSerializer: qs__WEBPACK_IMPORTED_MODULE_1___default.a.stringify,
    proxy: config.proxy,
    timeout: config.timeout,
    adapter: config.adapter,
    maxContentLength: config.maxContentLength,
    maxBodyLength: config.maxBodyLength,
    // Contentful
    logHandler: config.logHandler,
    responseLogger: config.responseLogger,
    requestLogger: config.requestLogger,
    retryOnError: config.retryOnError
  };
  var instance = axios.create(axiosOptions);
  instance.httpClientParams = options;
  /**
   * Creates a new axios instance with the same default base parameters as the
   * current one, and with any overrides passed to the newParams object
   * This is useful as the SDKs use dependency injection to get the axios library
   * and the version of the library comes from different places depending
   * on whether it's a browser build or a node.js build.
   * @private
   * @param {CreateHttpClientParams} httpClientParams - Initialization parameters for the HTTP client
   * @return {ContentfulAxiosInstance} Initialized axios instance
   */

  instance.cloneWithNewParams = function (newParams) {
    return createHttpClient(axios, _objectSpread2(_objectSpread2({}, Object(fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(options)), newParams));
  };
  /**
   * Apply interceptors.
   * Please note that the order of interceptors is important
   */


  if (config.onBeforeRequest) {
    instance.interceptors.request.use(config.onBeforeRequest);
  }

  if (typeof config.accessToken === 'function') {
    asyncToken(instance, config.accessToken);
  }

  if (config.throttle) {
    rateLimitThrottle(instance, config.throttle);
  }

  rateLimit(instance, config.retryLimit);

  if (config.onError) {
    instance.interceptors.response.use(function (response) {
      return response;
    }, config.onError);
  }

  return instance;
}
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * Creates request parameters configuration by parsing an existing query object
 * @private
 * @param {Object} query
 * @return {Object} Config object with `params` property, ready to be used in axios
 */


function createRequestConfig(_ref) {
  var query = _ref.query;
  var config = {};
  delete query.resolveLinks;
  config.params = Object(fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(query);
  return config;
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function enforceObjPath(obj, path) {
  if (!(path in obj)) {
    var err = new Error();
    err.name = 'PropertyMissing';
    err.message = "Required property ".concat(path, " missing from:\n\n").concat(JSON.stringify(obj), "\n\n");
    throw err;
  }

  return true;
} // copied from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze


function deepFreeze(object) {
  var propNames = Object.getOwnPropertyNames(object);

  var _iterator = _createForOfIteratorHelper(propNames),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var name = _step.value;
      var value = object[name];

      if (value && _typeof(value) === 'object') {
        deepFreeze(value);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return Object.freeze(object);
}

function freezeSys(obj) {
  deepFreeze(obj.sys || {});
  return obj;
}

function getBrowserOS() {
  var win = getWindow();

  if (!win) {
    return null;
  }

  var userAgent = win.navigator.userAgent; // TODO: platform is deprecated.

  var platform = win.navigator.platform;
  var macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];
  var windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];
  var iosPlatforms = ['iPhone', 'iPad', 'iPod'];

  if (macosPlatforms.indexOf(platform) !== -1) {
    return 'macOS';
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    return 'iOS';
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    return 'Windows';
  } else if (/Android/.test(userAgent)) {
    return 'Android';
  } else if (/Linux/.test(platform)) {
    return 'Linux';
  }

  return null;
}

function getNodeOS() {
  var platform = process.platform || 'linux';
  var version = process.version || '0.0.0';
  var platformMap = {
    android: 'Android',
    aix: 'Linux',
    darwin: 'macOS',
    freebsd: 'Linux',
    linux: 'Linux',
    openbsd: 'Linux',
    sunos: 'Linux',
    win32: 'Windows'
  };

  if (platform in platformMap) {
    return "".concat(platformMap[platform] || 'Linux', "/").concat(version);
  }

  return null;
}

function getUserAgentHeader(sdk, application, integration, feature) {
  var headerParts = [];

  if (application) {
    headerParts.push("app ".concat(application));
  }

  if (integration) {
    headerParts.push("integration ".concat(integration));
  }

  if (feature) {
    headerParts.push('feature ' + feature);
  }

  headerParts.push("sdk ".concat(sdk));
  var platform = null;

  try {
    if (isReactNative()) {
      platform = getBrowserOS();
      headerParts.push('platform ReactNative');
    } else if (isNode()) {
      platform = getNodeOS();
      headerParts.push("platform node.js/".concat(getNodeVersion()));
    } else {
      platform = getBrowserOS();
      headerParts.push('platform browser');
    }
  } catch (e) {
    platform = null;
  }

  if (platform) {
    headerParts.push("os ".concat(platform));
  }

  return "".concat(headerParts.filter(function (item) {
    return item !== '';
  }).join('; '), ";");
}
/**
 * Mixes in a method to return just a plain object with no additional methods
 * @private
 * @param data - Any plain JSON response returned from the API
 * @return Enhanced object with toPlainObject method
 */


function toPlainObject(data) {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  return Object.defineProperty(data, 'toPlainObject', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      return Object(fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(this);
    }
  });
}
/**
 * Handles errors received from the server. Parses the error into a more useful
 * format, places it in an exception and throws it.
 * See https://www.contentful.com/developers/docs/references/errors/
 * for more details on the data received on the errorResponse.data property
 * and the expected error codes.
 * @private
 */


function errorHandler(errorResponse) {
  var config = errorResponse.config,
      response = errorResponse.response;
  var errorName; // Obscure the Management token

  if (config && config.headers && config.headers['Authorization']) {
    var token = "...".concat(config.headers['Authorization'].toString().substr(-5));
    config.headers['Authorization'] = "Bearer ".concat(token);
  }

  if (!lodash_isplainobject__WEBPACK_IMPORTED_MODULE_4___default()(response) || !lodash_isplainobject__WEBPACK_IMPORTED_MODULE_4___default()(config)) {
    throw errorResponse;
  }

  var data = response === null || response === void 0 ? void 0 : response.data;
  var errorData = {
    status: response === null || response === void 0 ? void 0 : response.status,
    statusText: response === null || response === void 0 ? void 0 : response.statusText,
    message: '',
    details: {}
  };

  if (lodash_isplainobject__WEBPACK_IMPORTED_MODULE_4___default()(config)) {
    errorData.request = {
      url: config.url,
      headers: config.headers,
      method: config.method,
      payloadData: config.data
    };
  }

  if (data && lodash_isplainobject__WEBPACK_IMPORTED_MODULE_4___default()(data)) {
    if ('requestId' in data) {
      errorData.requestId = data.requestId || 'UNKNOWN';
    }

    if ('message' in data) {
      errorData.message = data.message || '';
    }

    if ('details' in data) {
      errorData.details = data.details || {};
    }

    if ('sys' in data) {
      if ('id' in data.sys) {
        errorName = data.sys.id;
      }
    }
  }

  var error = new Error();
  error.name = errorName && errorName !== 'Unknown' ? errorName : "".concat(response === null || response === void 0 ? void 0 : response.status, " ").concat(response === null || response === void 0 ? void 0 : response.statusText);

  try {
    error.message = JSON.stringify(errorData, null, '  ');
  } catch (_unused) {
    var _errorData$message;

    error.message = (_errorData$message = errorData === null || errorData === void 0 ? void 0 : errorData.message) !== null && _errorData$message !== void 0 ? _errorData$message : '';
  }

  throw error;
}



/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const punycode = __webpack_require__(23);

const tr46 = __webpack_require__(87);

const specialSchemes = {
  ftp: 21,
  file: null,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};
const failure = Symbol("failure");

function countSymbols(str) {
  return punycode.ucs2.decode(str).length;
}

function at(input, idx) {
  const c = input[idx];
  return isNaN(c) ? undefined : String.fromCodePoint(c);
}

function isASCIIDigit(c) {
  return c >= 0x30 && c <= 0x39;
}

function isASCIIAlpha(c) {
  return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;
}

function isASCIIAlphanumeric(c) {
  return isASCIIAlpha(c) || isASCIIDigit(c);
}

function isASCIIHex(c) {
  return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;
}

function isSingleDot(buffer) {
  return buffer === "." || buffer.toLowerCase() === "%2e";
}

function isDoubleDot(buffer) {
  buffer = buffer.toLowerCase();
  return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
}

function isWindowsDriveLetterCodePoints(cp1, cp2) {
  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
}

function isWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
}

function isNormalizedWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
}

function containsForbiddenHostCodePoint(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function containsForbiddenHostCodePointExcludingPercent(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function isSpecialScheme(scheme) {
  return specialSchemes[scheme] !== undefined;
}

function isSpecial(url) {
  return isSpecialScheme(url.scheme);
}

function defaultPort(scheme) {
  return specialSchemes[scheme];
}

function percentEncode(c) {
  let hex = c.toString(16).toUpperCase();

  if (hex.length === 1) {
    hex = "0" + hex;
  }

  return "%" + hex;
}

function utf8PercentEncode(c) {
  const buf = new Buffer(c);
  let str = "";

  for (let i = 0; i < buf.length; ++i) {
    str += percentEncode(buf[i]);
  }

  return str;
}

function utf8PercentDecode(str) {
  const input = new Buffer(str);
  const output = [];

  for (let i = 0; i < input.length; ++i) {
    if (input[i] !== 37) {
      output.push(input[i]);
    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
      i += 2;
    } else {
      output.push(input[i]);
    }
  }

  return new Buffer(output).toString();
}

function isC0ControlPercentEncode(c) {
  return c <= 0x1F || c > 0x7E;
}

const extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);

function isPathPercentEncode(c) {
  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
}

const extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);

function isUserinfoPercentEncode(c) {
  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
}

function percentEncodeChar(c, encodeSetPredicate) {
  const cStr = String.fromCodePoint(c);

  if (encodeSetPredicate(c)) {
    return utf8PercentEncode(cStr);
  }

  return cStr;
}

function parseIPv4Number(input) {
  let R = 10;

  if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
    input = input.substring(2);
    R = 16;
  } else if (input.length >= 2 && input.charAt(0) === "0") {
    input = input.substring(1);
    R = 8;
  }

  if (input === "") {
    return 0;
  }

  const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;

  if (regex.test(input)) {
    return failure;
  }

  return parseInt(input, R);
}

function parseIPv4(input) {
  const parts = input.split(".");

  if (parts[parts.length - 1] === "") {
    if (parts.length > 1) {
      parts.pop();
    }
  }

  if (parts.length > 4) {
    return input;
  }

  const numbers = [];

  for (const part of parts) {
    if (part === "") {
      return input;
    }

    const n = parseIPv4Number(part);

    if (n === failure) {
      return input;
    }

    numbers.push(n);
  }

  for (let i = 0; i < numbers.length - 1; ++i) {
    if (numbers[i] > 255) {
      return failure;
    }
  }

  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
    return failure;
  }

  let ipv4 = numbers.pop();
  let counter = 0;

  for (const n of numbers) {
    ipv4 += n * Math.pow(256, 3 - counter);
    ++counter;
  }

  return ipv4;
}

function serializeIPv4(address) {
  let output = "";
  let n = address;

  for (let i = 1; i <= 4; ++i) {
    output = String(n % 256) + output;

    if (i !== 4) {
      output = "." + output;
    }

    n = Math.floor(n / 256);
  }

  return output;
}

function parseIPv6(input) {
  const address = [0, 0, 0, 0, 0, 0, 0, 0];
  let pieceIndex = 0;
  let compress = null;
  let pointer = 0;
  input = punycode.ucs2.decode(input);

  if (input[pointer] === 58) {
    if (input[pointer + 1] !== 58) {
      return failure;
    }

    pointer += 2;
    ++pieceIndex;
    compress = pieceIndex;
  }

  while (pointer < input.length) {
    if (pieceIndex === 8) {
      return failure;
    }

    if (input[pointer] === 58) {
      if (compress !== null) {
        return failure;
      }

      ++pointer;
      ++pieceIndex;
      compress = pieceIndex;
      continue;
    }

    let value = 0;
    let length = 0;

    while (length < 4 && isASCIIHex(input[pointer])) {
      value = value * 0x10 + parseInt(at(input, pointer), 16);
      ++pointer;
      ++length;
    }

    if (input[pointer] === 46) {
      if (length === 0) {
        return failure;
      }

      pointer -= length;

      if (pieceIndex > 6) {
        return failure;
      }

      let numbersSeen = 0;

      while (input[pointer] !== undefined) {
        let ipv4Piece = null;

        if (numbersSeen > 0) {
          if (input[pointer] === 46 && numbersSeen < 4) {
            ++pointer;
          } else {
            return failure;
          }
        }

        if (!isASCIIDigit(input[pointer])) {
          return failure;
        }

        while (isASCIIDigit(input[pointer])) {
          const number = parseInt(at(input, pointer));

          if (ipv4Piece === null) {
            ipv4Piece = number;
          } else if (ipv4Piece === 0) {
            return failure;
          } else {
            ipv4Piece = ipv4Piece * 10 + number;
          }

          if (ipv4Piece > 255) {
            return failure;
          }

          ++pointer;
        }

        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;
        ++numbersSeen;

        if (numbersSeen === 2 || numbersSeen === 4) {
          ++pieceIndex;
        }
      }

      if (numbersSeen !== 4) {
        return failure;
      }

      break;
    } else if (input[pointer] === 58) {
      ++pointer;

      if (input[pointer] === undefined) {
        return failure;
      }
    } else if (input[pointer] !== undefined) {
      return failure;
    }

    address[pieceIndex] = value;
    ++pieceIndex;
  }

  if (compress !== null) {
    let swaps = pieceIndex - compress;
    pieceIndex = 7;

    while (pieceIndex !== 0 && swaps > 0) {
      const temp = address[compress + swaps - 1];
      address[compress + swaps - 1] = address[pieceIndex];
      address[pieceIndex] = temp;
      --pieceIndex;
      --swaps;
    }
  } else if (compress === null && pieceIndex !== 8) {
    return failure;
  }

  return address;
}

function serializeIPv6(address) {
  let output = "";
  const seqResult = findLongestZeroSequence(address);
  const compress = seqResult.idx;
  let ignore0 = false;

  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
    if (ignore0 && address[pieceIndex] === 0) {
      continue;
    } else if (ignore0) {
      ignore0 = false;
    }

    if (compress === pieceIndex) {
      const separator = pieceIndex === 0 ? "::" : ":";
      output += separator;
      ignore0 = true;
      continue;
    }

    output += address[pieceIndex].toString(16);

    if (pieceIndex !== 7) {
      output += ":";
    }
  }

  return output;
}

function parseHost(input, isSpecialArg) {
  if (input[0] === "[") {
    if (input[input.length - 1] !== "]") {
      return failure;
    }

    return parseIPv6(input.substring(1, input.length - 1));
  }

  if (!isSpecialArg) {
    return parseOpaqueHost(input);
  }

  const domain = utf8PercentDecode(input);
  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);

  if (asciiDomain === null) {
    return failure;
  }

  if (containsForbiddenHostCodePoint(asciiDomain)) {
    return failure;
  }

  const ipv4Host = parseIPv4(asciiDomain);

  if (typeof ipv4Host === "number" || ipv4Host === failure) {
    return ipv4Host;
  }

  return asciiDomain;
}

function parseOpaqueHost(input) {
  if (containsForbiddenHostCodePointExcludingPercent(input)) {
    return failure;
  }

  let output = "";
  const decoded = punycode.ucs2.decode(input);

  for (let i = 0; i < decoded.length; ++i) {
    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
  }

  return output;
}

function findLongestZeroSequence(arr) {
  let maxIdx = null;
  let maxLen = 1; // only find elements > 1

  let currStart = null;
  let currLen = 0;

  for (let i = 0; i < arr.length; ++i) {
    if (arr[i] !== 0) {
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }

      currStart = null;
      currLen = 0;
    } else {
      if (currStart === null) {
        currStart = i;
      }

      ++currLen;
    }
  } // if trailing zeros


  if (currLen > maxLen) {
    maxIdx = currStart;
    maxLen = currLen;
  }

  return {
    idx: maxIdx,
    len: maxLen
  };
}

function serializeHost(host) {
  if (typeof host === "number") {
    return serializeIPv4(host);
  } // IPv6 serializer


  if (host instanceof Array) {
    return "[" + serializeIPv6(host) + "]";
  }

  return host;
}

function trimControlChars(url) {
  return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
}

function trimTabAndNewline(url) {
  return url.replace(/\u0009|\u000A|\u000D/g, "");
}

function shortenPath(url) {
  const path = url.path;

  if (path.length === 0) {
    return;
  }

  if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
    return;
  }

  path.pop();
}

function includesCredentials(url) {
  return url.username !== "" || url.password !== "";
}

function cannotHaveAUsernamePasswordPort(url) {
  return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
}

function isNormalizedWindowsDriveLetter(string) {
  return /^[A-Za-z]:$/.test(string);
}

function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
  this.pointer = 0;
  this.input = input;
  this.base = base || null;
  this.encodingOverride = encodingOverride || "utf-8";
  this.stateOverride = stateOverride;
  this.url = url;
  this.failure = false;
  this.parseError = false;

  if (!this.url) {
    this.url = {
      scheme: "",
      username: "",
      password: "",
      host: null,
      port: null,
      path: [],
      query: null,
      fragment: null,
      cannotBeABaseURL: false
    };
    const res = trimControlChars(this.input);

    if (res !== this.input) {
      this.parseError = true;
    }

    this.input = res;
  }

  const res = trimTabAndNewline(this.input);

  if (res !== this.input) {
    this.parseError = true;
  }

  this.input = res;
  this.state = stateOverride || "scheme start";
  this.buffer = "";
  this.atFlag = false;
  this.arrFlag = false;
  this.passwordTokenSeenFlag = false;
  this.input = punycode.ucs2.decode(this.input);

  for (; this.pointer <= this.input.length; ++this.pointer) {
    const c = this.input[this.pointer];
    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c); // exec state machine

    const ret = this["parse " + this.state](c, cStr);

    if (!ret) {
      break; // terminate algorithm
    } else if (ret === failure) {
      this.failure = true;
      break;
    }
  }
}

URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
  if (isASCIIAlpha(c)) {
    this.buffer += cStr.toLowerCase();
    this.state = "scheme";
  } else if (!this.stateOverride) {
    this.state = "no scheme";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
    this.buffer += cStr.toLowerCase();
  } else if (c === 58) {
    if (this.stateOverride) {
      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
        return false;
      }

      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
        return false;
      }

      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
        return false;
      }

      if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
        return false;
      }
    }

    this.url.scheme = this.buffer;
    this.buffer = "";

    if (this.stateOverride) {
      return false;
    }

    if (this.url.scheme === "file") {
      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
        this.parseError = true;
      }

      this.state = "file";
    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
      this.state = "special relative or authority";
    } else if (isSpecial(this.url)) {
      this.state = "special authority slashes";
    } else if (this.input[this.pointer + 1] === 47) {
      this.state = "path or authority";
      ++this.pointer;
    } else {
      this.url.cannotBeABaseURL = true;
      this.url.path.push("");
      this.state = "cannot-be-a-base-URL path";
    }
  } else if (!this.stateOverride) {
    this.buffer = "";
    this.state = "no scheme";
    this.pointer = -1;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
  if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
    return failure;
  } else if (this.base.cannotBeABaseURL && c === 35) {
    this.url.scheme = this.base.scheme;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.url.cannotBeABaseURL = true;
    this.state = "fragment";
  } else if (this.base.scheme === "file") {
    this.state = "file";
    --this.pointer;
  } else {
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
  if (c === 47) {
    this.state = "authority";
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
  this.url.scheme = this.base.scheme;

  if (isNaN(c)) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
  } else if (c === 47) {
    this.state = "relative slash";
  } else if (c === 63) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.state = "fragment";
  } else if (isSpecial(this.url) && c === 92) {
    this.parseError = true;
    this.state = "relative slash";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice(0, this.base.path.length - 1);
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
  if (isSpecial(this.url) && (c === 47 || c === 92)) {
    if (c === 92) {
      this.parseError = true;
    }

    this.state = "special authority ignore slashes";
  } else if (c === 47) {
    this.state = "authority";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "special authority ignore slashes";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
  if (c !== 47 && c !== 92) {
    this.state = "authority";
    --this.pointer;
  } else {
    this.parseError = true;
  }

  return true;
};

URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
  if (c === 64) {
    this.parseError = true;

    if (this.atFlag) {
      this.buffer = "%40" + this.buffer;
    }

    this.atFlag = true; // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars

    const len = countSymbols(this.buffer);

    for (let pointer = 0; pointer < len; ++pointer) {
      const codePoint = this.buffer.codePointAt(pointer);

      if (codePoint === 58 && !this.passwordTokenSeenFlag) {
        this.passwordTokenSeenFlag = true;
        continue;
      }

      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);

      if (this.passwordTokenSeenFlag) {
        this.url.password += encodedCodePoints;
      } else {
        this.url.username += encodedCodePoints;
      }
    }

    this.buffer = "";
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
    if (this.atFlag && this.buffer === "") {
      this.parseError = true;
      return failure;
    }

    this.pointer -= countSymbols(this.buffer) + 1;
    this.buffer = "";
    this.state = "host";
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
  if (this.stateOverride && this.url.scheme === "file") {
    --this.pointer;
    this.state = "file host";
  } else if (c === 58 && !this.arrFlag) {
    if (this.buffer === "") {
      this.parseError = true;
      return failure;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));

    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "port";

    if (this.stateOverride === "hostname") {
      return false;
    }
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
    --this.pointer;

    if (isSpecial(this.url) && this.buffer === "") {
      this.parseError = true;
      return failure;
    } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
      this.parseError = true;
      return false;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));

    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "path start";

    if (this.stateOverride) {
      return false;
    }
  } else {
    if (c === 91) {
      this.arrFlag = true;
    } else if (c === 93) {
      this.arrFlag = false;
    }

    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
  if (isASCIIDigit(c)) {
    this.buffer += cStr;
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
    if (this.buffer !== "") {
      const port = parseInt(this.buffer);

      if (port > Math.pow(2, 16) - 1) {
        this.parseError = true;
        return failure;
      }

      this.url.port = port === defaultPort(this.url.scheme) ? null : port;
      this.buffer = "";
    }

    if (this.stateOverride) {
      return false;
    }

    this.state = "path start";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

const fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);

URLStateMachine.prototype["parse file"] = function parseFile(c) {
  this.url.scheme = "file";

  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }

    this.state = "file slash";
  } else if (this.base !== null && this.base.scheme === "file") {
    if (isNaN(c)) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 63) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
      !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
      !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        shortenPath(this.url);
      } else {
        this.parseError = true;
      }

      this.state = "path";
      --this.pointer;
    }
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }

    this.state = "file host";
  } else {
    if (this.base !== null && this.base.scheme === "file") {
      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
        this.url.path.push(this.base.path[0]);
      } else {
        this.url.host = this.base.host;
      }
    }

    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
    --this.pointer;

    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
      this.parseError = true;
      this.state = "path";
    } else if (this.buffer === "") {
      this.url.host = "";

      if (this.stateOverride) {
        return false;
      }

      this.state = "path start";
    } else {
      let host = parseHost(this.buffer, isSpecial(this.url));

      if (host === failure) {
        return failure;
      }

      if (host === "localhost") {
        host = "";
      }

      this.url.host = host;

      if (this.stateOverride) {
        return false;
      }

      this.buffer = "";
      this.state = "path start";
    }
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
  if (isSpecial(this.url)) {
    if (c === 92) {
      this.parseError = true;
    }

    this.state = "path";

    if (c !== 47 && c !== 92) {
      --this.pointer;
    }
  } else if (!this.stateOverride && c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (!this.stateOverride && c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else if (c !== undefined) {
    this.state = "path";

    if (c !== 47) {
      --this.pointer;
    }
  }

  return true;
};

URLStateMachine.prototype["parse path"] = function parsePath(c) {
  if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
    if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
    }

    if (isDoubleDot(this.buffer)) {
      shortenPath(this.url);

      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      }
    } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
      this.url.path.push("");
    } else if (!isSingleDot(this.buffer)) {
      if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
        if (this.url.host !== "" && this.url.host !== null) {
          this.parseError = true;
          this.url.host = "";
        }

        this.buffer = this.buffer[0] + ":";
      }

      this.url.path.push(this.buffer);
    }

    this.buffer = "";

    if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
      while (this.url.path.length > 1 && this.url.path[0] === "") {
        this.parseError = true;
        this.url.path.shift();
      }
    }

    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    }

    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += percentEncodeChar(c, isPathPercentEncode);
  }

  return true;
};

URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
  if (c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else {
    // TODO: Add: not a URL code point
    if (!isNaN(c) && c !== 37) {
      this.parseError = true;
    }

    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    if (!isNaN(c)) {
      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
    }
  }

  return true;
};

URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
  if (isNaN(c) || !this.stateOverride && c === 35) {
    if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
      this.encodingOverride = "utf-8";
    }

    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead

    for (let i = 0; i < buffer.length; ++i) {
      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E) {
        this.url.query += percentEncode(buffer[i]);
      } else {
        this.url.query += String.fromCodePoint(buffer[i]);
      }
    }

    this.buffer = "";

    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
  if (isNaN(c)) {// do nothing
  } else if (c === 0x0) {
    this.parseError = true;
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
  }

  return true;
};

function serializeURL(url, excludeFragment) {
  let output = url.scheme + ":";

  if (url.host !== null) {
    output += "//";

    if (url.username !== "" || url.password !== "") {
      output += url.username;

      if (url.password !== "") {
        output += ":" + url.password;
      }

      output += "@";
    }

    output += serializeHost(url.host);

    if (url.port !== null) {
      output += ":" + url.port;
    }
  } else if (url.host === null && url.scheme === "file") {
    output += "//";
  }

  if (url.cannotBeABaseURL) {
    output += url.path[0];
  } else {
    for (const string of url.path) {
      output += "/" + string;
    }
  }

  if (url.query !== null) {
    output += "?" + url.query;
  }

  if (!excludeFragment && url.fragment !== null) {
    output += "#" + url.fragment;
  }

  return output;
}

function serializeOrigin(tuple) {
  let result = tuple.scheme + "://";
  result += serializeHost(tuple.host);

  if (tuple.port !== null) {
    result += ":" + tuple.port;
  }

  return result;
}

module.exports.serializeURL = serializeURL;

module.exports.serializeURLOrigin = function (url) {
  // https://url.spec.whatwg.org/#concept-url-origin
  switch (url.scheme) {
    case "blob":
      try {
        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
      } catch (e) {
        // serializing an opaque origin returns "null"
        return "null";
      }

    case "ftp":
    case "gopher":
    case "http":
    case "https":
    case "ws":
    case "wss":
      return serializeOrigin({
        scheme: url.scheme,
        host: url.host,
        port: url.port
      });

    case "file":
      // spec says "exercise to the reader", chrome says "file://"
      return "file://";

    default:
      // serializing an opaque origin returns "null"
      return "null";
  }
};

module.exports.basicURLParse = function (input, options) {
  if (options === undefined) {
    options = {};
  }

  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);

  if (usm.failure) {
    return "failure";
  }

  return usm.url;
};

module.exports.setTheUsername = function (url, username) {
  url.username = "";
  const decoded = punycode.ucs2.decode(username);

  for (let i = 0; i < decoded.length; ++i) {
    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.setThePassword = function (url, password) {
  url.password = "";
  const decoded = punycode.ucs2.decode(password);

  for (let i = 0; i < decoded.length; ++i) {
    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.serializeHost = serializeHost;
module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;

module.exports.serializeInteger = function (integer) {
  return String(integer);
};

module.exports.parseURL = function (input, options) {
  if (options === undefined) {
    options = {};
  } // We don't handle blobs, so this just delegates:


  return module.exports.basicURLParse(input, {
    baseURL: options.baseURL,
    encodingOverride: options.encodingOverride
  });
};

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


function AxiosError(message, code, config, request, response) {
  Error.call(this);
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED' // eslint-disable-next-line func-names
].forEach(function (code) {
  descriptors[code] = {
    value: code
  };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {
  value: true
}); // eslint-disable-next-line func-names

AxiosError.from = function (error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);
  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};

module.exports = AxiosError;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("querystring");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.2
(function () {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if (typeof performance !== "undefined" && performance !== null && performance.now) {
    module.exports = function () {
      return performance.now();
    };
  } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
    module.exports = function () {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };

    hrtime = process.hrtime;

    getNanoSeconds = function () {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };

    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function () {
      return Date.now() - loadTime;
    };

    loadTime = Date.now();
  } else {
    module.exports = function () {
      return new Date().getTime() - loadTime;
    };

    loadTime = new Date().getTime();
  }
}).call(this);

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

var normalizeHeaderName = __webpack_require__(116);

var enhanceError = __webpack_require__(33);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(117);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(123);
  }

  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    if (utils.isObject(data) || headers && headers['Content-Type'] === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }

          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AxiosError = __webpack_require__(14);

var utils = __webpack_require__(3);
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */


function CanceledError(message) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);
  this.name = 'CanceledError';
}

utils.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});
module.exports = CanceledError;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.URL = __webpack_require__(83).interface;
exports.serializeURL = __webpack_require__(11).serializeURL;
exports.serializeURLOrigin = __webpack_require__(11).serializeURLOrigin;
exports.basicURLParse = __webpack_require__(11).basicURLParse;
exports.setTheUsername = __webpack_require__(11).setTheUsername;
exports.setThePassword = __webpack_require__(11).setThePassword;
exports.serializeHost = __webpack_require__(11).serializeHost;
exports.serializeInteger = __webpack_require__(11).serializeInteger;
exports.parseURL = __webpack_require__(11).parseURL;

/***/ }),
/* 22 */
/***/ (function(module, exports) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** `Object#toString` result references. */
var objectTag = '[object Object]';
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */

function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;

  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }

  return result;
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */


function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}
/** Used for built-in method references. */


var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */

var objectCtorString = funcToString.call(Object);
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/** Built-in value references. */

var getPrototype = overArg(Object.getPrototypeOf, Object);
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */


function isPlainObject(value) {
  if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
    return false;
  }

  var proto = getPrototype(value);

  if (proto === null) {
    return true;
  }

  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("punycode");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const http = __webpack_require__(6);

const https = __webpack_require__(10);

const urllib = __webpack_require__(1);

const zlib = __webpack_require__(2);

const PassThrough = __webpack_require__(0).PassThrough;

const Cookies = __webpack_require__(90);

const packageData = __webpack_require__(8);

const MAX_REDIRECTS = 5;

module.exports = function (url, options) {
  return fetch(url, options);
};

module.exports.Cookies = Cookies;

function fetch(url, options) {
  options = options || {};
  options.fetchRes = options.fetchRes || new PassThrough();
  options.cookies = options.cookies || new Cookies();
  options.redirects = options.redirects || 0;
  options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;

  if (options.cookie) {
    [].concat(options.cookie || []).forEach(cookie => {
      options.cookies.set(cookie, url);
    });
    options.cookie = false;
  }

  let fetchRes = options.fetchRes;
  let parsed = urllib.parse(url);
  let method = (options.method || '').toString().trim().toUpperCase() || 'GET';
  let finished = false;
  let cookies;
  let body;
  let handler = parsed.protocol === 'https:' ? https : http;
  let headers = {
    'accept-encoding': 'gzip,deflate',
    'user-agent': 'nodemailer/' + packageData.version
  };
  Object.keys(options.headers || {}).forEach(key => {
    headers[key.toLowerCase().trim()] = options.headers[key];
  });

  if (options.userAgent) {
    headers['user-agent'] = options.userAgent;
  }

  if (parsed.auth) {
    headers.Authorization = 'Basic ' + Buffer.from(parsed.auth).toString('base64');
  }

  if (cookies = options.cookies.get(url)) {
    headers.cookie = cookies;
  }

  if (options.body) {
    if (options.contentType !== false) {
      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';
    }

    if (typeof options.body.pipe === 'function') {
      // it's a stream
      headers['Transfer-Encoding'] = 'chunked';
      body = options.body;
      body.on('error', err => {
        if (finished) {
          return;
        }

        finished = true;
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
      });
    } else {
      if (options.body instanceof Buffer) {
        body = options.body;
      } else if (typeof options.body === 'object') {
        try {
          // encodeURIComponent can fail on invalid input (partial emoji etc.)
          body = Buffer.from(Object.keys(options.body).map(key => {
            let value = options.body[key].toString().trim();
            return encodeURIComponent(key) + '=' + encodeURIComponent(value);
          }).join('&'));
        } catch (E) {
          if (finished) {
            return;
          }

          finished = true;
          E.type = 'FETCH';
          E.sourceUrl = url;
          fetchRes.emit('error', E);
          return;
        }
      } else {
        body = Buffer.from(options.body.toString().trim());
      }

      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';
      headers['Content-Length'] = body.length;
    } // if method is not provided, use POST instead of GET


    method = (options.method || '').toString().trim().toUpperCase() || 'POST';
  }

  let req;
  let reqOptions = {
    method,
    host: parsed.hostname,
    path: parsed.path,
    port: parsed.port ? parsed.port : parsed.protocol === 'https:' ? 443 : 80,
    headers,
    rejectUnauthorized: false,
    agent: false
  };

  if (options.tls) {
    Object.keys(options.tls).forEach(key => {
      reqOptions[key] = options.tls[key];
    });
  }

  try {
    req = handler.request(reqOptions);
  } catch (E) {
    finished = true;
    setImmediate(() => {
      E.type = 'FETCH';
      E.sourceUrl = url;
      fetchRes.emit('error', E);
    });
    return fetchRes;
  }

  if (options.timeout) {
    req.setTimeout(options.timeout, () => {
      if (finished) {
        return;
      }

      finished = true;
      req.abort();
      let err = new Error('Request Timeout');
      err.type = 'FETCH';
      err.sourceUrl = url;
      fetchRes.emit('error', err);
    });
  }

  req.on('error', err => {
    if (finished) {
      return;
    }

    finished = true;
    err.type = 'FETCH';
    err.sourceUrl = url;
    fetchRes.emit('error', err);
  });
  req.on('response', res => {
    let inflate;

    if (finished) {
      return;
    }

    switch (res.headers['content-encoding']) {
      case 'gzip':
      case 'deflate':
        inflate = zlib.createUnzip();
        break;
    }

    if (res.headers['set-cookie']) {
      [].concat(res.headers['set-cookie'] || []).forEach(cookie => {
        options.cookies.set(cookie, url);
      });
    }

    if ([301, 302, 303, 307, 308].includes(res.statusCode) && res.headers.location) {
      // redirect
      options.redirects++;

      if (options.redirects > options.maxRedirects) {
        finished = true;
        let err = new Error('Maximum redirect count exceeded');
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
        req.abort();
        return;
      } // redirect does not include POST body


      options.method = 'GET';
      options.body = false;
      return fetch(urllib.resolve(url, res.headers.location), options);
    }

    fetchRes.statusCode = res.statusCode;
    fetchRes.headers = res.headers;

    if (res.statusCode >= 300 && !options.allowErrorResponse) {
      finished = true;
      let err = new Error('Invalid status code ' + res.statusCode);
      err.type = 'FETCH';
      err.sourceUrl = url;
      fetchRes.emit('error', err);
      req.abort();
      return;
    }

    res.on('error', err => {
      if (finished) {
        return;
      }

      finished = true;
      err.type = 'FETCH';
      err.sourceUrl = url;
      fetchRes.emit('error', err);
      req.abort();
    });

    if (inflate) {
      res.pipe(inflate).pipe(fetchRes);
      inflate.on('error', err => {
        if (finished) {
          return;
        }

        finished = true;
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
        req.abort();
      });
    } else {
      res.pipe(fetchRes);
    }
  });
  setImmediate(() => {
    if (body) {
      try {
        if (typeof body.pipe === 'function') {
          return body.pipe(req);
        } else {
          req.write(body);
        }
      } catch (err) {
        finished = true;
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
        return;
      }
    }

    req.end();
  });
  return fetchRes;
}

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-control-regex:0 */


const base64 = __webpack_require__(48);

const qp = __webpack_require__(49);

const mimeTypes = __webpack_require__(46);

module.exports = {
  /**
   * Checks if a value is plaintext string (uses only printable 7bit chars)
   *
   * @param {String} value String to be tested
   * @returns {Boolean} true if it is a plaintext string
   */
  isPlainText(value, isParam) {
    const re = isParam ? /[\x00-\x08\x0b\x0c\x0e-\x1f"\u0080-\uFFFF]/ : /[\x00-\x08\x0b\x0c\x0e-\x1f\u0080-\uFFFF]/;

    if (typeof value !== 'string' || re.test(value)) {
      return false;
    } else {
      return true;
    }
  },

  /**
   * Checks if a multi line string containes lines longer than the selected value.
   *
   * Useful when detecting if a mail message needs any processing at all –
   * if only plaintext characters are used and lines are short, then there is
   * no need to encode the values in any way. If the value is plaintext but has
   * longer lines then allowed, then use format=flowed
   *
   * @param {Number} lineLength Max line length to check for
   * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars
   */
  hasLongerLines(str, lineLength) {
    if (str.length > 128 * 1024) {
      // do not test strings longer than 128kB
      return true;
    }

    return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);
  },

  /**
   * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)
   *
   * @param {String|Buffer} data String to be encoded
   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
   * @return {String} Single or several mime words joined together
   */
  encodeWord(data, mimeWordEncoding, maxLength) {
    mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);
    maxLength = maxLength || 0;
    let encodedStr;
    let toCharset = 'UTF-8';

    if (maxLength && maxLength > 7 + toCharset.length) {
      maxLength -= 7 + toCharset.length;
    }

    if (mimeWordEncoding === 'Q') {
      // https://tools.ietf.org/html/rfc2047#section-5 rule (3)
      encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\-/=]/gi, chr => {
        let ord = chr.charCodeAt(0).toString(16).toUpperCase();

        if (chr === ' ') {
          return '_';
        } else {
          return '=' + (ord.length === 1 ? '0' + ord : ord);
        }
      });
    } else if (mimeWordEncoding === 'B') {
      encodedStr = typeof data === 'string' ? data : base64.encode(data);
      maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;
    }

    if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : base64.encode(data)).length > maxLength) {
      if (mimeWordEncoding === 'Q') {
        encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');
      } else {
        // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences
        let parts = [];
        let lpart = '';

        for (let i = 0, len = encodedStr.length; i < len; i++) {
          let chr = encodedStr.charAt(i); // check if we can add this character to the existing string
          // without breaking byte length limit

          if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {
            lpart += chr;
          } else {
            // we hit the length limit, so push the existing string and start over
            parts.push(base64.encode(lpart));
            lpart = chr;
          }
        }

        if (lpart) {
          parts.push(base64.encode(lpart));
        }

        if (parts.length > 1) {
          encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');
        } else {
          encodedStr = parts.join('');
        }
      }
    } else if (mimeWordEncoding === 'B') {
      encodedStr = base64.encode(data);
    }

    return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');
  },

  /**
   * Finds word sequences with non ascii text and converts these to mime words
   *
   * @param {String} value String to be encoded
   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
   * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match
   * @return {String} String with possible mime words
   */
  encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {
    maxLength = maxLength || 0;
    let encodedValue; // find first word with a non-printable ascii or special symbol in it

    let firstMatch = value.match(/(?:^|\s)([^\s]*["\u0080-\uFFFF])/);

    if (!firstMatch) {
      return value;
    }

    if (encodeAll) {
      // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything
      return this.encodeWord(value, mimeWordEncoding, maxLength);
    } // find the last word with a non-printable ascii in it


    let lastMatch = value.match(/(["\u0080-\uFFFF][^\s]*)[^"\u0080-\uFFFF]*$/);

    if (!lastMatch) {
      // should not happen
      return value;
    }

    let startIndex = firstMatch.index + (firstMatch[0].match(/[^\s]/) || {
      index: 0
    }).index;
    let endIndex = lastMatch.index + (lastMatch[1] || '').length;
    encodedValue = (startIndex ? value.substr(0, startIndex) : '') + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) + (endIndex < value.length ? value.substr(endIndex) : '');
    return encodedValue;
  },

  /**
   * Joins parsed header value together as 'value; param1=value1; param2=value2'
   * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.
   *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
   * @param {Object} structured Parsed header value
   * @return {String} joined header value
   */
  buildHeaderValue(structured) {
    let paramsArray = [];
    Object.keys(structured.params || {}).forEach(param => {
      // filename might include unicode characters so it is a special case
      // other values probably do not
      let value = structured.params[param];

      if (!this.isPlainText(value, true) || value.length >= 75) {
        this.buildHeaderParam(param, value, 50).forEach(encodedParam => {
          if (!/[\s"\\;:/=(),<>@[\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {
            paramsArray.push(encodedParam.key + '=' + encodedParam.value);
          } else {
            paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));
          }
        });
      } else if (/[\s'"\\;:/=(),<>@[\]?]|^-/.test(value)) {
        paramsArray.push(param + '=' + JSON.stringify(value));
      } else {
        paramsArray.push(param + '=' + value);
      }
    });
    return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');
  },

  /**
   * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)
   * Useful for splitting long parameter values.
   *
   * For example
   *      title="unicode string"
   * becomes
   *     title*0*=utf-8''unicode
   *     title*1*=%20string
   *
   * @param {String|Buffer} data String to be encoded
   * @param {Number} [maxLength=50] Max length for generated chunks
   * @param {String} [fromCharset='UTF-8'] Source sharacter set
   * @return {Array} A list of encoded keys and headers
   */
  buildHeaderParam(key, data, maxLength) {
    let list = [];
    let encodedStr = typeof data === 'string' ? data : (data || '').toString();
    let encodedStrArr;
    let chr, ord;
    let line;
    let startPos = 0;
    let i, len;
    maxLength = maxLength || 50; // process ascii only text

    if (this.isPlainText(data, true)) {
      // check if conversion is even needed
      if (encodedStr.length <= maxLength) {
        return [{
          key,
          value: encodedStr
        }];
      }

      encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), str => {
        list.push({
          line: str
        });
        return '';
      });

      if (encodedStr) {
        list.push({
          line: encodedStr
        });
      }
    } else {
      if (/[\uD800-\uDBFF]/.test(encodedStr)) {
        // string containts surrogate pairs, so normalize it to an array of bytes
        encodedStrArr = [];

        for (i = 0, len = encodedStr.length; i < len; i++) {
          chr = encodedStr.charAt(i);
          ord = chr.charCodeAt(0);

          if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {
            chr += encodedStr.charAt(i + 1);
            encodedStrArr.push(chr);
            i++;
          } else {
            encodedStrArr.push(chr);
          }
        }

        encodedStr = encodedStrArr;
      } // first line includes the charset and language info and needs to be encoded
      // even if it does not contain any unicode characters


      line = 'utf-8\x27\x27';
      let encoded = true;
      startPos = 0; // process text with unicode or special chars

      for (i = 0, len = encodedStr.length; i < len; i++) {
        chr = encodedStr[i];

        if (encoded) {
          chr = this.safeEncodeURIComponent(chr);
        } else {
          // try to urlencode current char
          chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr); // By default it is not required to encode a line, the need
          // only appears when the string contains unicode or special chars
          // in this case we start processing the line over and encode all chars

          if (chr !== encodedStr[i]) {
            // Check if it is even possible to add the encoded char to the line
            // If not, there is no reason to use this line, just push it to the list
            // and start a new line with the char that needs encoding
            if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {
              list.push({
                line,
                encoded
              });
              line = '';
              startPos = i - 1;
            } else {
              encoded = true;
              i = startPos;
              line = '';
              continue;
            }
          }
        } // if the line is already too long, push it to the list and start a new one


        if ((line + chr).length >= maxLength) {
          list.push({
            line,
            encoded
          });
          line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);

          if (chr === encodedStr[i]) {
            encoded = false;
            startPos = i - 1;
          } else {
            encoded = true;
          }
        } else {
          line += chr;
        }
      }

      if (line) {
        list.push({
          line,
          encoded
        });
      }
    }

    return list.map((item, i) => ({
      // encoded lines: {name}*{part}*
      // unencoded lines: {name}*{part}
      // if any line needs to be encoded then the first line (part==0) is always encoded
      key: key + '*' + i + (item.encoded ? '*' : ''),
      value: item.line
    }));
  },

  /**
   * Parses a header value with key=value arguments into a structured
   * object.
   *
   *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->
   *   {
   *     'value': 'text/plain',
   *     'params': {
   *       'charset': 'UTF-8'
   *     }
   *   }
   *
   * @param {String} str Header value
   * @return {Object} Header value as a parsed structure
   */
  parseHeaderValue(str) {
    let response = {
      value: false,
      params: {}
    };
    let key = false;
    let value = '';
    let type = 'value';
    let quote = false;
    let escaped = false;
    let chr;

    for (let i = 0, len = str.length; i < len; i++) {
      chr = str.charAt(i);

      if (type === 'key') {
        if (chr === '=') {
          key = value.trim().toLowerCase();
          type = 'value';
          value = '';
          continue;
        }

        value += chr;
      } else {
        if (escaped) {
          value += chr;
        } else if (chr === '\\') {
          escaped = true;
          continue;
        } else if (quote && chr === quote) {
          quote = false;
        } else if (!quote && chr === '"') {
          quote = chr;
        } else if (!quote && chr === ';') {
          if (key === false) {
            response.value = value.trim();
          } else {
            response.params[key] = value.trim();
          }

          type = 'key';
          value = '';
        } else {
          value += chr;
        }

        escaped = false;
      }
    }

    if (type === 'value') {
      if (key === false) {
        response.value = value.trim();
      } else {
        response.params[key] = value.trim();
      }
    } else if (value.trim()) {
      response.params[value.trim().toLowerCase()] = '';
    } // handle parameter value continuations
    // https://tools.ietf.org/html/rfc2231#section-3
    // preprocess values


    Object.keys(response.params).forEach(key => {
      let actualKey, nr, match, value;

      if (match = key.match(/(\*(\d+)|\*(\d+)\*|\*)$/)) {
        actualKey = key.substr(0, match.index);
        nr = Number(match[2] || match[3]) || 0;

        if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {
          response.params[actualKey] = {
            charset: false,
            values: []
          };
        }

        value = response.params[key];

        if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {
          response.params[actualKey].charset = match[1] || 'iso-8859-1';
          value = match[2];
        }

        response.params[actualKey].values[nr] = value; // remove the old reference

        delete response.params[key];
      }
    }); // concatenate split rfc2231 strings and convert encoded strings to mime encoded words

    Object.keys(response.params).forEach(key => {
      let value;

      if (response.params[key] && Array.isArray(response.params[key].values)) {
        value = response.params[key].values.map(val => val || '').join('');

        if (response.params[key].charset) {
          // convert "%AB" to "=?charset?Q?=AB?="
          response.params[key] = '=?' + response.params[key].charset + '?Q?' + value // fix invalidly encoded chars
          .replace(/[=?_\s]/g, s => {
            let c = s.charCodeAt(0).toString(16);

            if (s === ' ') {
              return '_';
            } else {
              return '%' + (c.length < 2 ? '0' : '') + c;
            }
          }) // change from urlencoding to percent encoding
          .replace(/%/g, '=') + '?=';
        } else {
          response.params[key] = value;
        }
      }
    });
    return response;
  },

  /**
   * Returns file extension for a content type string. If no suitable extensions
   * are found, 'bin' is used as the default extension
   *
   * @param {String} mimeType Content type to be checked for
   * @return {String} File extension
   */
  detectExtension: mimeType => mimeTypes.detectExtension(mimeType),

  /**
   * Returns content type for a file extension. If no suitable content types
   * are found, 'application/octet-stream' is used as the default content type
   *
   * @param {String} extension Extension to be checked for
   * @return {String} File extension
   */
  detectMimeType: extension => mimeTypes.detectMimeType(extension),

  /**
   * Folds long lines, useful for folding header lines (afterSpace=false) and
   * flowed text (afterSpace=true)
   *
   * @param {String} str String to be folded
   * @param {Number} [lineLength=76] Maximum length of a line
   * @param {Boolean} afterSpace If true, leave a space in th end of a line
   * @return {String} String with folded lines
   */
  foldLines(str, lineLength, afterSpace) {
    str = (str || '').toString();
    lineLength = lineLength || 76;
    let pos = 0,
        len = str.length,
        result = '',
        line,
        match;

    while (pos < len) {
      line = str.substr(pos, lineLength);

      if (line.length < lineLength) {
        result += line;
        break;
      }

      if (match = line.match(/^[^\n\r]*(\r?\n|\r)/)) {
        line = match[0];
        result += line;
        pos += line.length;
        continue;
      } else if ((match = line.match(/(\s+)[^\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {
        line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));
      } else if (match = str.substr(pos + line.length).match(/^[^\s]+(\s*)/)) {
        line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));
      }

      result += line;
      pos += line.length;

      if (pos < len) {
        result += '\r\n';
      }
    }

    return result;
  },

  /**
   * Splits a mime encoded string. Needed for dividing mime words into smaller chunks
   *
   * @param {String} str Mime encoded string to be split up
   * @param {Number} maxlen Maximum length of characters for one part (minimum 12)
   * @return {Array} Split string
   */
  splitMimeEncodedString: (str, maxlen) => {
    let curLine,
        match,
        chr,
        done,
        lines = []; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences

    maxlen = Math.max(maxlen || 0, 12);

    while (str.length) {
      curLine = str.substr(0, maxlen); // move incomplete escaped char back to main

      if (match = curLine.match(/[=][0-9A-F]?$/i)) {
        curLine = curLine.substr(0, match.index);
      }

      done = false;

      while (!done) {
        done = true; // check if not middle of a unicode char sequence

        if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {
          chr = parseInt(match[1], 16); // invalid sequence, move one char back anc recheck

          if (chr < 0xc2 && chr > 0x7f) {
            curLine = curLine.substr(0, curLine.length - 3);
            done = false;
          }
        }
      }

      if (curLine.length) {
        lines.push(curLine);
      }

      str = str.substr(curLine.length);
    }

    return lines;
  },
  encodeURICharComponent: chr => {
    let res = '';
    let ord = chr.charCodeAt(0).toString(16).toUpperCase();

    if (ord.length % 2) {
      ord = '0' + ord;
    }

    if (ord.length > 2) {
      for (let i = 0, len = ord.length / 2; i < len; i++) {
        res += '%' + ord.substr(i, 2);
      }
    } else {
      res += '%' + ord;
    }

    return res;
  },

  safeEncodeURIComponent(str) {
    str = (str || '').toString();

    try {
      // might throw if we try to encode invalid sequences, eg. partial emoji
      str = encodeURIComponent(str);
    } catch (E) {
      // should never run
      return str.replace(/[^\x00-\x1F *'()<>@,;:\\"[\]?=\u007F-\uFFFF]+/g, '');
    } // ensure chars that are not handled by encodeURICompent are converted as well


    return str.replace(/[\x00-\x1F *'()<>@,;:\\"[\]?=\u007F-\uFFFF]/g, chr => this.encodeURICharComponent(chr));
  }

};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Mailer = __webpack_require__(89);

const shared = __webpack_require__(5);

const SMTPPool = __webpack_require__(101);

const SMTPTransport = __webpack_require__(105);

const SendmailTransport = __webpack_require__(106);

const StreamTransport = __webpack_require__(108);

const JSONTransport = __webpack_require__(109);

const SESTransport = __webpack_require__(110);

const fetch = __webpack_require__(25);

const packageData = __webpack_require__(8);

const ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\/+$/, '');
const ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\/+$/, '');
const ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());
let testAccount = false;

module.exports.createTransport = function (transporter, defaults) {
  let urlConfig;
  let options;
  let mailer;

  if ( // provided transporter is a configuration object, not transporter plugin
  typeof transporter === 'object' && typeof transporter.send !== 'function' || // provided transporter looks like a connection url
  typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter)) {
    if (urlConfig = typeof transporter === 'string' ? transporter : transporter.url) {
      // parse a configuration URL into configuration options
      options = shared.parseConnectionUrl(urlConfig);
    } else {
      options = transporter;
    }

    if (options.pool) {
      transporter = new SMTPPool(options);
    } else if (options.sendmail) {
      transporter = new SendmailTransport(options);
    } else if (options.streamTransport) {
      transporter = new StreamTransport(options);
    } else if (options.jsonTransport) {
      transporter = new JSONTransport(options);
    } else if (options.SES) {
      transporter = new SESTransport(options);
    } else {
      transporter = new SMTPTransport(options);
    }
  }

  mailer = new Mailer(transporter, options, defaults);
  return mailer;
};

module.exports.createTestAccount = function (apiUrl, callback) {
  let promise;

  if (!callback && typeof apiUrl === 'function') {
    callback = apiUrl;
    apiUrl = false;
  }

  if (!callback) {
    promise = new Promise((resolve, reject) => {
      callback = shared.callbackPromise(resolve, reject);
    });
  }

  if (ETHEREAL_CACHE && testAccount) {
    setImmediate(() => callback(null, testAccount));
    return promise;
  }

  apiUrl = apiUrl || ETHEREAL_API;
  let chunks = [];
  let chunklen = 0;
  let req = fetch(apiUrl + '/user', {
    contentType: 'application/json',
    method: 'POST',
    body: Buffer.from(JSON.stringify({
      requestor: packageData.name,
      version: packageData.version
    }))
  });
  req.on('readable', () => {
    let chunk;

    while ((chunk = req.read()) !== null) {
      chunks.push(chunk);
      chunklen += chunk.length;
    }
  });
  req.once('error', err => callback(err));
  req.once('end', () => {
    let res = Buffer.concat(chunks, chunklen);
    let data;
    let err;

    try {
      data = JSON.parse(res.toString());
    } catch (E) {
      err = E;
    }

    if (err) {
      return callback(err);
    }

    if (data.status !== 'success' || data.error) {
      return callback(new Error(data.error || 'Request failed'));
    }

    delete data.status;
    testAccount = data;
    callback(null, testAccount);
  });
  return promise;
};

module.exports.getTestMessageUrl = function (info) {
  if (!info || !info.response) {
    return false;
  }

  let infoProps = new Map();
  info.response.replace(/\[([^\]]+)\]$/, (m, props) => {
    props.replace(/\b([A-Z0-9]+)=([^\s]+)/g, (m, key, value) => {
      infoProps.set(key, value);
    });
  });

  if (infoProps.has('STATUS') && infoProps.has('MSGID')) {
    return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');
  }

  return false;
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const packageInfo = __webpack_require__(8);

const EventEmitter = __webpack_require__(15).EventEmitter;

const net = __webpack_require__(26);

const tls = __webpack_require__(51);

const os = __webpack_require__(27);

const crypto = __webpack_require__(13);

const DataStream = __webpack_require__(103);

const PassThrough = __webpack_require__(0).PassThrough;

const shared = __webpack_require__(5); // default timeout values in ms


const CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established

const SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client

const GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved

/**
 * Generates a SMTP connection object
 *
 * Optional options object takes the following possible properties:
 *
 *  * **port** - is the port to connect to (defaults to 587 or 465)
 *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')
 *  * **secure** - use SSL
 *  * **ignoreTLS** - ignore server support for STARTTLS
 *  * **requireTLS** - forces the client to use STARTTLS
 *  * **name** - the name of the client server
 *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)
 *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)
 *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish
 *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)
 *  * **lmtp** - if true, uses LMTP instead of SMTP protocol
 *  * **logger** - bunyan compatible logger interface
 *  * **debug** - if true pass SMTP traffic to the logger
 *  * **tls** - options for createCredentials
 *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)
 *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls
 *
 * @constructor
 * @namespace SMTP Client module
 * @param {Object} [options] Option properties
 */

class SMTPConnection extends EventEmitter {
  constructor(options) {
    super(options);
    this.id = crypto.randomBytes(8).toString('base64').replace(/\W/g, '');
    this.stage = 'init';
    this.options = options || {};
    this.secureConnection = !!this.options.secure;
    this.alreadySecured = !!this.options.secured;
    this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);
    this.host = this.options.host || 'localhost';

    if (typeof this.options.secure === 'undefined' && this.port === 465) {
      // if secure option is not set but port is 465, then default to secure
      this.secureConnection = true;
    }

    this.name = this.options.name || this._getHostname();
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'smtp-connection',
      sid: this.id
    });
    this.customAuth = new Map();
    Object.keys(this.options.customAuth || {}).forEach(key => {
      let mapKey = (key || '').toString().trim().toUpperCase();

      if (!mapKey) {
        return;
      }

      this.customAuth.set(mapKey, this.options.customAuth[key]);
    });
    /**
     * Expose version nr, just for the reference
     * @type {String}
     */

    this.version = packageInfo.version;
    /**
     * If true, then the user is authenticated
     * @type {Boolean}
     */

    this.authenticated = false;
    /**
     * If set to true, this instance is no longer active
     * @private
     */

    this.destroyed = false;
    /**
     * Defines if the current connection is secure or not. If not,
     * STARTTLS can be used if available
     * @private
     */

    this.secure = !!this.secureConnection;
    /**
     * Store incomplete messages coming from the server
     * @private
     */

    this._remainder = '';
    /**
     * Unprocessed responses from the server
     * @type {Array}
     */

    this._responseQueue = [];
    this.lastServerResponse = false;
    /**
     * The socket connecting to the server
     * @publick
     */

    this._socket = false;
    /**
     * Lists supported auth mechanisms
     * @private
     */

    this._supportedAuth = [];
    /**
     * Set to true, if EHLO response includes "AUTH".
     * If false then authentication is not tried
     */

    this.allowsAuth = false;
    /**
     * Includes current envelope (from, to)
     * @private
     */

    this._envelope = false;
    /**
     * Lists supported extensions
     * @private
     */

    this._supportedExtensions = [];
    /**
     * Defines the maximum allowed size for a single message
     * @private
     */

    this._maxAllowedSize = 0;
    /**
     * Function queue to run if a data chunk comes from the server
     * @private
     */

    this._responseActions = [];
    this._recipientQueue = [];
    /**
     * Timeout variable for waiting the greeting
     * @private
     */

    this._greetingTimeout = false;
    /**
     * Timeout variable for waiting the connection to start
     * @private
     */

    this._connectionTimeout = false;
    /**
     * If the socket is deemed already closed
     * @private
     */

    this._destroyed = false;
    /**
     * If the socket is already being closed
     * @private
     */

    this._closing = false;
    /**
     * Callbacks for socket's listeners
     */

    this._onSocketData = chunk => this._onData(chunk);

    this._onSocketError = error => this._onError(error, 'ESOCKET', false, 'CONN');

    this._onSocketClose = () => this._onClose();

    this._onSocketEnd = () => this._onEnd();

    this._onSocketTimeout = () => this._onTimeout();
  }
  /**
   * Creates a connection to a SMTP server and sets up connection
   * listener
   */


  connect(connectCallback) {
    if (typeof connectCallback === 'function') {
      this.once('connect', () => {
        this.logger.debug({
          tnx: 'smtp'
        }, 'SMTP handshake finished');
        connectCallback();
      });

      const isDestroyedMessage = this._isDestroyedMessage('connect');

      if (isDestroyedMessage) {
        return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));
      }
    }

    let opts = {
      port: this.port,
      host: this.host
    };

    if (this.options.localAddress) {
      opts.localAddress = this.options.localAddress;
    }

    let setupConnectionHandlers = () => {
      this._connectionTimeout = setTimeout(() => {
        this._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');
      }, this.options.connectionTimeout || CONNECTION_TIMEOUT);

      this._socket.on('error', this._onSocketError);
    };

    if (this.options.connection) {
      // connection is already opened
      this._socket = this.options.connection;

      if (this.secureConnection && !this.alreadySecured) {
        setImmediate(() => this._upgradeConnection(err => {
          if (err) {
            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');

            return;
          }

          this._onConnect();
        }));
      } else {
        setImmediate(() => this._onConnect());
      }

      return;
    } else if (this.options.socket) {
      // socket object is set up but not yet connected
      this._socket = this.options.socket;
      return shared.resolveHostname(opts, (err, resolved) => {
        if (err) {
          return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));
        }

        this.logger.debug({
          tnx: 'dns',
          source: opts.host,
          resolved: resolved.host,
          cached: !!resolved.cached
        }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');
        Object.keys(resolved).forEach(key => {
          if (key.charAt(0) !== '_' && resolved[key]) {
            opts[key] = resolved[key];
          }
        });

        try {
          this._socket.connect(this.port, this.host, () => {
            this._socket.setKeepAlive(true);

            this._onConnect();
          });

          setupConnectionHandlers();
        } catch (E) {
          return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));
        }
      });
    } else if (this.secureConnection) {
      // connect using tls
      if (this.options.tls) {
        Object.keys(this.options.tls).forEach(key => {
          opts[key] = this.options.tls[key];
        });
      }

      return shared.resolveHostname(opts, (err, resolved) => {
        if (err) {
          return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));
        }

        this.logger.debug({
          tnx: 'dns',
          source: opts.host,
          resolved: resolved.host,
          cached: !!resolved.cached
        }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');
        Object.keys(resolved).forEach(key => {
          if (key.charAt(0) !== '_' && resolved[key]) {
            opts[key] = resolved[key];
          }
        });

        try {
          this._socket = tls.connect(opts, () => {
            this._socket.setKeepAlive(true);

            this._onConnect();
          });
          setupConnectionHandlers();
        } catch (E) {
          return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));
        }
      });
    } else {
      // connect using plaintext
      return shared.resolveHostname(opts, (err, resolved) => {
        if (err) {
          return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));
        }

        this.logger.debug({
          tnx: 'dns',
          source: opts.host,
          resolved: resolved.host,
          cached: !!resolved.cached
        }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');
        Object.keys(resolved).forEach(key => {
          if (key.charAt(0) !== '_' && resolved[key]) {
            opts[key] = resolved[key];
          }
        });

        try {
          this._socket = net.connect(opts, () => {
            this._socket.setKeepAlive(true);

            this._onConnect();
          });
          setupConnectionHandlers();
        } catch (E) {
          return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));
        }
      });
    }
  }
  /**
   * Sends QUIT
   */


  quit() {
    this._sendCommand('QUIT');

    this._responseActions.push(this.close);
  }
  /**
   * Closes the connection to the server
   */


  close() {
    clearTimeout(this._connectionTimeout);
    clearTimeout(this._greetingTimeout);
    this._responseActions = []; // allow to run this function only once

    if (this._closing) {
      return;
    }

    this._closing = true;
    let closeMethod = 'end';

    if (this.stage === 'init') {
      // Close the socket immediately when connection timed out
      closeMethod = 'destroy';
    }

    this.logger.debug({
      tnx: 'smtp'
    }, 'Closing connection to the server using "%s"', closeMethod);
    let socket = this._socket && this._socket.socket || this._socket;

    if (socket && !socket.destroyed) {
      try {
        this._socket[closeMethod]();
      } catch (E) {// just ignore
      }
    }

    this._destroy();
  }
  /**
   * Authenticate user
   */


  login(authData, callback) {
    const isDestroyedMessage = this._isDestroyedMessage('login');

    if (isDestroyedMessage) {
      return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));
    }

    this._auth = authData || {}; // Select SASL authentication method

    this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;

    if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {
      this._authMethod = 'XOAUTH2';
    } else if (!this._authMethod || this._authMethod === 'XOAUTH2' && !this._auth.oauth2) {
      // use first supported
      this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();
    }

    if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {
      if (this._auth.user && this._auth.pass) {
        this._auth.credentials = {
          user: this._auth.user,
          pass: this._auth.pass,
          options: this._auth.options
        };
      } else {
        return callback(this._formatError('Missing credentials for "' + this._authMethod + '"', 'EAUTH', false, 'API'));
      }
    }

    if (this.customAuth.has(this._authMethod)) {
      let handler = this.customAuth.get(this._authMethod);
      let lastResponse;
      let returned = false;

      let resolve = () => {
        if (returned) {
          return;
        }

        returned = true;
        this.logger.info({
          tnx: 'smtp',
          username: this._auth.user,
          action: 'authenticated',
          method: this._authMethod
        }, 'User %s authenticated', JSON.stringify(this._auth.user));
        this.authenticated = true;
        callback(null, true);
      };

      let reject = err => {
        if (returned) {
          return;
        }

        returned = true;
        callback(this._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + this._authMethod));
      };

      let handlerResponse = handler({
        auth: this._auth,
        method: this._authMethod,
        extensions: [].concat(this._supportedExtensions),
        authMethods: [].concat(this._supportedAuth),
        maxAllowedSize: this._maxAllowedSize || false,
        sendCommand: (cmd, done) => {
          let promise;

          if (!done) {
            promise = new Promise((resolve, reject) => {
              done = shared.callbackPromise(resolve, reject);
            });
          }

          this._responseActions.push(str => {
            lastResponse = str;
            let codes = str.match(/^(\d+)(?:\s(\d+\.\d+\.\d+))?\s/);
            let data = {
              command: cmd,
              response: str
            };

            if (codes) {
              data.status = Number(codes[1]) || 0;

              if (codes[2]) {
                data.code = codes[2];
              }

              data.text = str.substr(codes[0].length);
            } else {
              data.text = str;
              data.status = 0; // just in case we need to perform numeric comparisons
            }

            done(null, data);
          });

          setImmediate(() => this._sendCommand(cmd));
          return promise;
        },
        resolve,
        reject
      });

      if (handlerResponse && typeof handlerResponse.catch === 'function') {
        // a promise was returned
        handlerResponse.then(resolve).catch(reject);
      }

      return;
    }

    switch (this._authMethod) {
      case 'XOAUTH2':
        this._handleXOauth2Token(false, callback);

        return;

      case 'LOGIN':
        this._responseActions.push(str => {
          this._actionAUTH_LOGIN_USER(str, callback);
        });

        this._sendCommand('AUTH LOGIN');

        return;

      case 'PLAIN':
        this._responseActions.push(str => {
          this._actionAUTHComplete(str, callback);
        });

        this._sendCommand('AUTH PLAIN ' + Buffer.from( //this._auth.user+'\u0000'+
        '\u0000' + // skip authorization identity as it causes problems with some servers
        this._auth.credentials.user + '\u0000' + this._auth.credentials.pass, 'utf-8').toString('base64'), // log entry without passwords
        'AUTH PLAIN ' + Buffer.from( //this._auth.user+'\u0000'+
        '\u0000' + // skip authorization identity as it causes problems with some servers
        this._auth.credentials.user + '\u0000' + '/* secret */', 'utf-8').toString('base64'));

        return;

      case 'CRAM-MD5':
        this._responseActions.push(str => {
          this._actionAUTH_CRAM_MD5(str, callback);
        });

        this._sendCommand('AUTH CRAM-MD5');

        return;
    }

    return callback(this._formatError('Unknown authentication method "' + this._authMethod + '"', 'EAUTH', false, 'API'));
  }
  /**
   * Sends a message
   *
   * @param {Object} envelope Envelope object, {from: addr, to: [addr]}
   * @param {Object} message String, Buffer or a Stream
   * @param {Function} callback Callback to return once sending is completed
   */


  send(envelope, message, done) {
    if (!message) {
      return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));
    }

    const isDestroyedMessage = this._isDestroyedMessage('send message');

    if (isDestroyedMessage) {
      return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));
    } // reject larger messages than allowed


    if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {
      return setImmediate(() => {
        done(this._formatError('Message size larger than allowed ' + this._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));
      });
    } // ensure that callback is only called once


    let returned = false;

    let callback = function () {
      if (returned) {
        return;
      }

      returned = true;
      done(...arguments);
    };

    if (typeof message.on === 'function') {
      message.on('error', err => callback(this._formatError(err, 'ESTREAM', false, 'API')));
    }

    let startTime = Date.now();

    this._setEnvelope(envelope, (err, info) => {
      if (err) {
        return callback(err);
      }

      let envelopeTime = Date.now();

      let stream = this._createSendStream((err, str) => {
        if (err) {
          return callback(err);
        }

        info.envelopeTime = envelopeTime - startTime;
        info.messageTime = Date.now() - envelopeTime;
        info.messageSize = stream.outByteCount;
        info.response = str;
        return callback(null, info);
      });

      if (typeof message.pipe === 'function') {
        message.pipe(stream);
      } else {
        stream.write(message);
        stream.end();
      }
    });
  }
  /**
   * Resets connection state
   *
   * @param {Function} callback Callback to return once connection is reset
   */


  reset(callback) {
    this._sendCommand('RSET');

    this._responseActions.push(str => {
      if (str.charAt(0) !== '2') {
        return callback(this._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));
      }

      this._envelope = false;
      return callback(null, true);
    });
  }
  /**
   * Connection listener that is run when the connection to
   * the server is opened
   *
   * @event
   */


  _onConnect() {
    clearTimeout(this._connectionTimeout);
    this.logger.info({
      tnx: 'network',
      localAddress: this._socket.localAddress,
      localPort: this._socket.localPort,
      remoteAddress: this._socket.remoteAddress,
      remotePort: this._socket.remotePort
    }, '%s established to %s:%s', this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);

    if (this._destroyed) {
      // Connection was established after we already had canceled it
      this.close();
      return;
    }

    this.stage = 'connected'; // clear existing listeners for the socket

    this._socket.removeListener('data', this._onSocketData);

    this._socket.removeListener('timeout', this._onSocketTimeout);

    this._socket.removeListener('close', this._onSocketClose);

    this._socket.removeListener('end', this._onSocketEnd);

    this._socket.on('data', this._onSocketData);

    this._socket.once('close', this._onSocketClose);

    this._socket.once('end', this._onSocketEnd);

    this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);

    this._socket.on('timeout', this._onSocketTimeout);

    this._greetingTimeout = setTimeout(() => {
      // if still waiting for greeting, give up
      if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {
        this._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');
      }
    }, this.options.greetingTimeout || GREETING_TIMEOUT);

    this._responseActions.push(this._actionGreeting); // we have a 'data' listener set up so resume socket if it was paused


    this._socket.resume();
  }
  /**
   * 'data' listener for data coming from the server
   *
   * @event
   * @param {Buffer} chunk Data chunk coming from the server
   */


  _onData(chunk) {
    if (this._destroyed || !chunk || !chunk.length) {
      return;
    }

    let data = (chunk || '').toString('binary');
    let lines = (this._remainder + data).split(/\r?\n/);
    let lastline;
    this._remainder = lines.pop();

    for (let i = 0, len = lines.length; i < len; i++) {
      if (this._responseQueue.length) {
        lastline = this._responseQueue[this._responseQueue.length - 1];

        if (/^\d+-/.test(lastline.split('\n').pop())) {
          this._responseQueue[this._responseQueue.length - 1] += '\n' + lines[i];
          continue;
        }
      }

      this._responseQueue.push(lines[i]);
    }

    if (this._responseQueue.length) {
      lastline = this._responseQueue[this._responseQueue.length - 1];

      if (/^\d+-/.test(lastline.split('\n').pop())) {
        return;
      }
    }

    this._processResponse();
  }
  /**
   * 'error' listener for the socket
   *
   * @event
   * @param {Error} err Error object
   * @param {String} type Error name
   */


  _onError(err, type, data, command) {
    clearTimeout(this._connectionTimeout);
    clearTimeout(this._greetingTimeout);

    if (this._destroyed) {
      // just ignore, already closed
      // this might happen when a socket is canceled because of reached timeout
      // but the socket timeout error itself receives only after
      return;
    }

    err = this._formatError(err, type, data, command);
    this.logger.error(data, err.message);
    this.emit('error', err);
    this.close();
  }

  _formatError(message, type, response, command) {
    let err;

    if (/Error\]$/i.test(Object.prototype.toString.call(message))) {
      err = message;
    } else {
      err = new Error(message);
    }

    if (type && type !== 'Error') {
      err.code = type;
    }

    if (response) {
      err.response = response;
      err.message += ': ' + response;
    }

    let responseCode = typeof response === 'string' && Number((response.match(/^\d+/) || [])[0]) || false;

    if (responseCode) {
      err.responseCode = responseCode;
    }

    if (command) {
      err.command = command;
    }

    return err;
  }
  /**
   * 'close' listener for the socket
   *
   * @event
   */


  _onClose() {
    this.logger.info({
      tnx: 'network'
    }, 'Connection closed');

    if (this.upgrading && !this._destroyed) {
      return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', false, 'CONN');
    } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {
      return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');
    }

    this._destroy();
  }
  /**
   * 'end' listener for the socket
   *
   * @event
   */


  _onEnd() {
    if (this._socket && !this._socket.destroyed) {
      this._socket.destroy();
    }
  }
  /**
   * 'timeout' listener for the socket
   *
   * @event
   */


  _onTimeout() {
    return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');
  }
  /**
   * Destroys the client, emits 'end'
   */


  _destroy() {
    if (this._destroyed) {
      return;
    }

    this._destroyed = true;
    this.emit('end');
  }
  /**
   * Upgrades the connection to TLS
   *
   * @param {Function} callback Callback function to run when the connection
   *        has been secured
   */


  _upgradeConnection(callback) {
    // do not remove all listeners or it breaks node v0.10 as there's
    // apparently a 'finish' event set that would be cleared as well
    // we can safely keep 'error', 'end', 'close' etc. events
    this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards


    this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object


    let socketPlain = this._socket;
    let opts = {
      socket: this._socket,
      host: this.host
    };
    Object.keys(this.options.tls || {}).forEach(key => {
      opts[key] = this.options.tls[key];
    });
    this.upgrading = true; // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch

    try {
      this._socket = tls.connect(opts, () => {
        this.secure = true;
        this.upgrading = false;

        this._socket.on('data', this._onSocketData);

        socketPlain.removeListener('close', this._onSocketClose);
        socketPlain.removeListener('end', this._onSocketEnd);
        return callback(null, true);
      });
    } catch (err) {
      return callback(err);
    }

    this._socket.on('error', this._onSocketError);

    this._socket.once('close', this._onSocketClose);

    this._socket.once('end', this._onSocketEnd);

    this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.


    this._socket.on('timeout', this._onSocketTimeout); // resume in case the socket was paused


    socketPlain.resume();
  }
  /**
   * Processes queued responses from the server
   *
   * @param {Boolean} force If true, ignores _processing flag
   */


  _processResponse() {
    if (!this._responseQueue.length) {
      return false;
    }

    let str = this.lastServerResponse = (this._responseQueue.shift() || '').toString();

    if (/^\d+-/.test(str.split('\n').pop())) {
      // keep waiting for the final part of multiline response
      return;
    }

    if (this.options.debug || this.options.transactionLog) {
      this.logger.debug({
        tnx: 'server'
      }, str.replace(/\r?\n$/, ''));
    }

    if (!str.trim()) {
      // skip unexpected empty lines
      setImmediate(() => this._processResponse(true));
    }

    let action = this._responseActions.shift();

    if (typeof action === 'function') {
      action.call(this, str);
      setImmediate(() => this._processResponse(true));
    } else {
      return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');
    }
  }
  /**
   * Send a command to the server, append \r\n
   *
   * @param {String} str String to be sent to the server
   * @param {String} logStr Optional string to be used for logging instead of the actual string
   */


  _sendCommand(str, logStr) {
    if (this._destroyed) {
      // Connection already closed, can't send any more data
      return;
    }

    if (this._socket.destroyed) {
      return this.close();
    }

    if (this.options.debug || this.options.transactionLog) {
      this.logger.debug({
        tnx: 'client'
      }, (logStr || str || '').toString().replace(/\r?\n$/, ''));
    }

    this._socket.write(Buffer.from(str + '\r\n', 'utf-8'));
  }
  /**
   * Initiates a new message by submitting envelope data, starting with
   * MAIL FROM: command
   *
   * @param {Object} envelope Envelope object in the form of
   *        {from:'...', to:['...']}
   *        or
   *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}
   */


  _setEnvelope(envelope, callback) {
    let args = [];
    let useSmtpUtf8 = false;
    this._envelope = envelope || {};
    this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();
    this._envelope.to = [].concat(this._envelope.to || []).map(to => (to && to.address || to || '').toString().trim());

    if (!this._envelope.to.length) {
      return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));
    }

    if (this._envelope.from && /[\r\n<>]/.test(this._envelope.from)) {
      return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));
    } // check if the sender address uses only ASCII characters,
    // otherwise require usage of SMTPUTF8 extension


    if (/[\x80-\uFFFF]/.test(this._envelope.from)) {
      useSmtpUtf8 = true;
    }

    for (let i = 0, len = this._envelope.to.length; i < len; i++) {
      if (!this._envelope.to[i] || /[\r\n<>]/.test(this._envelope.to[i])) {
        return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));
      } // check if the recipients addresses use only ASCII characters,
      // otherwise require usage of SMTPUTF8 extension


      if (/[\x80-\uFFFF]/.test(this._envelope.to[i])) {
        useSmtpUtf8 = true;
      }
    } // clone the recipients array for latter manipulation


    this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));
    this._envelope.rejected = [];
    this._envelope.rejectedErrors = [];
    this._envelope.accepted = [];

    if (this._envelope.dsn) {
      try {
        this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);
      } catch (err) {
        return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));
      }
    }

    this._responseActions.push(str => {
      this._actionMAIL(str, callback);
    }); // If the server supports SMTPUTF8 and the envelope includes an internationalized
    // email address then append SMTPUTF8 keyword to the MAIL FROM command


    if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {
      args.push('SMTPUTF8');
      this._usingSmtpUtf8 = true;
    } // If the server supports 8BITMIME and the message might contain non-ascii bytes
    // then append the 8BITMIME keyword to the MAIL FROM command


    if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {
      args.push('BODY=8BITMIME');
      this._using8BitMime = true;
    }

    if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {
      args.push('SIZE=' + this._envelope.size);
    } // If the server supports DSN and the envelope includes an DSN prop
    // then append DSN params to the MAIL FROM command


    if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {
      if (this._envelope.dsn.ret) {
        args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));
      }

      if (this._envelope.dsn.envid) {
        args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));
      }
    }

    this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));
  }

  _setDsnEnvelope(params) {
    let ret = (params.ret || params.return || '').toString().toUpperCase() || null;

    if (ret) {
      switch (ret) {
        case 'HDRS':
        case 'HEADERS':
          ret = 'HDRS';
          break;

        case 'FULL':
        case 'BODY':
          ret = 'FULL';
          break;
      }
    }

    if (ret && !['FULL', 'HDRS'].includes(ret)) {
      throw new Error('ret: ' + JSON.stringify(ret));
    }

    let envid = (params.envid || params.id || '').toString() || null;
    let notify = params.notify || null;

    if (notify) {
      if (typeof notify === 'string') {
        notify = notify.split(',');
      }

      notify = notify.map(n => n.trim().toUpperCase());
      let validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];
      let invaliNotify = notify.filter(n => !validNotify.includes(n));

      if (invaliNotify.length || notify.length > 1 && notify.includes('NEVER')) {
        throw new Error('notify: ' + JSON.stringify(notify.join(',')));
      }

      notify = notify.join(',');
    }

    let orcpt = (params.recipient || params.orcpt || '').toString() || null;

    if (orcpt && orcpt.indexOf(';') < 0) {
      orcpt = 'rfc822;' + orcpt;
    }

    return {
      ret,
      envid,
      notify,
      orcpt
    };
  }

  _getDsnRcptToArgs() {
    let args = []; // If the server supports DSN and the envelope includes an DSN prop
    // then append DSN params to the RCPT TO command

    if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {
      if (this._envelope.dsn.notify) {
        args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));
      }

      if (this._envelope.dsn.orcpt) {
        args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));
      }
    }

    return args.length ? ' ' + args.join(' ') : '';
  }

  _createSendStream(callback) {
    let dataStream = new DataStream();
    let logStream;

    if (this.options.lmtp) {
      this._envelope.accepted.forEach((recipient, i) => {
        let final = i === this._envelope.accepted.length - 1;

        this._responseActions.push(str => {
          this._actionLMTPStream(recipient, final, str, callback);
        });
      });
    } else {
      this._responseActions.push(str => {
        this._actionSMTPStream(str, callback);
      });
    }

    dataStream.pipe(this._socket, {
      end: false
    });

    if (this.options.debug) {
      logStream = new PassThrough();
      logStream.on('readable', () => {
        let chunk;

        while (chunk = logStream.read()) {
          this.logger.debug({
            tnx: 'message'
          }, chunk.toString('binary').replace(/\r?\n$/, ''));
        }
      });
      dataStream.pipe(logStream);
    }

    dataStream.once('end', () => {
      this.logger.info({
        tnx: 'message',
        inByteCount: dataStream.inByteCount,
        outByteCount: dataStream.outByteCount
      }, '<%s bytes encoded mime message (source size %s bytes)>', dataStream.outByteCount, dataStream.inByteCount);
    });
    return dataStream;
  }
  /** ACTIONS **/

  /**
   * Will be run after the connection is created and the server sends
   * a greeting. If the incoming message starts with 220 initiate
   * SMTP session by sending EHLO command
   *
   * @param {String} str Message from the server
   */


  _actionGreeting(str) {
    clearTimeout(this._greetingTimeout);

    if (str.substr(0, 3) !== '220') {
      this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');

      return;
    }

    if (this.options.lmtp) {
      this._responseActions.push(this._actionLHLO);

      this._sendCommand('LHLO ' + this.name);
    } else {
      this._responseActions.push(this._actionEHLO);

      this._sendCommand('EHLO ' + this.name);
    }
  }
  /**
   * Handles server response for LHLO command. If it yielded in
   * error, emit 'error', otherwise treat this as an EHLO response
   *
   * @param {String} str Message from the server
   */


  _actionLHLO(str) {
    if (str.charAt(0) !== '2') {
      this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');

      return;
    }

    this._actionEHLO(str);
  }
  /**
   * Handles server response for EHLO command. If it yielded in
   * error, try HELO instead, otherwise initiate TLS negotiation
   * if STARTTLS is supported by the server or move into the
   * authentication phase.
   *
   * @param {String} str Message from the server
   */


  _actionEHLO(str) {
    let match;

    if (str.substr(0, 3) === '421') {
      this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');

      return;
    }

    if (str.charAt(0) !== '2') {
      if (this.options.requireTLS) {
        this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');

        return;
      } // Try HELO instead


      this._responseActions.push(this._actionHELO);

      this._sendCommand('HELO ' + this.name);

      return;
    } // Detect if the server supports STARTTLS


    if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\b/im.test(str) || this.options.requireTLS)) {
      this._sendCommand('STARTTLS');

      this._responseActions.push(this._actionSTARTTLS);

      return;
    } // Detect if the server supports SMTPUTF8


    if (/[ -]SMTPUTF8\b/im.test(str)) {
      this._supportedExtensions.push('SMTPUTF8');
    } // Detect if the server supports DSN


    if (/[ -]DSN\b/im.test(str)) {
      this._supportedExtensions.push('DSN');
    } // Detect if the server supports 8BITMIME


    if (/[ -]8BITMIME\b/im.test(str)) {
      this._supportedExtensions.push('8BITMIME');
    } // Detect if the server supports PIPELINING


    if (/[ -]PIPELINING\b/im.test(str)) {
      this._supportedExtensions.push('PIPELINING');
    } // Detect if the server supports AUTH


    if (/[ -]AUTH\b/i.test(str)) {
      this.allowsAuth = true;
    } // Detect if the server supports PLAIN auth


    if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)PLAIN/i.test(str)) {
      this._supportedAuth.push('PLAIN');
    } // Detect if the server supports LOGIN auth


    if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)LOGIN/i.test(str)) {
      this._supportedAuth.push('LOGIN');
    } // Detect if the server supports CRAM-MD5 auth


    if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)CRAM-MD5/i.test(str)) {
      this._supportedAuth.push('CRAM-MD5');
    } // Detect if the server supports XOAUTH2 auth


    if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)XOAUTH2/i.test(str)) {
      this._supportedAuth.push('XOAUTH2');
    } // Detect if the server supports SIZE extensions (and the max allowed size)


    if (match = str.match(/[ -]SIZE(?:[ \t]+(\d+))?/im)) {
      this._supportedExtensions.push('SIZE');

      this._maxAllowedSize = Number(match[1]) || 0;
    }

    this.emit('connect');
  }
  /**
   * Handles server response for HELO command. If it yielded in
   * error, emit 'error', otherwise move into the authentication phase.
   *
   * @param {String} str Message from the server
   */


  _actionHELO(str) {
    if (str.charAt(0) !== '2') {
      this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');

      return;
    } // assume that authentication is enabled (most probably is not though)


    this.allowsAuth = true;
    this.emit('connect');
  }
  /**
   * Handles server response for STARTTLS command. If there's an error
   * try HELO instead, otherwise initiate TLS upgrade. If the upgrade
   * succeedes restart the EHLO
   *
   * @param {String} str Message from the server
   */


  _actionSTARTTLS(str) {
    if (str.charAt(0) !== '2') {
      if (this.options.opportunisticTLS) {
        this.logger.info({
          tnx: 'smtp'
        }, 'Failed STARTTLS upgrade, continuing unencrypted');
        return this.emit('connect');
      }

      this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');

      return;
    }

    this._upgradeConnection((err, secured) => {
      if (err) {
        this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');

        return;
      }

      this.logger.info({
        tnx: 'smtp'
      }, 'Connection upgraded with STARTTLS');

      if (secured) {
        // restart session
        if (this.options.lmtp) {
          this._responseActions.push(this._actionLHLO);

          this._sendCommand('LHLO ' + this.name);
        } else {
          this._responseActions.push(this._actionEHLO);

          this._sendCommand('EHLO ' + this.name);
        }
      } else {
        this.emit('connect');
      }
    });
  }
  /**
   * Handle the response for AUTH LOGIN command. We are expecting
   * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as
   * response needs to be base64 encoded username. We do not need
   * exact match but settle with 334 response in general as some
   * hosts invalidly use a longer message than VXNlcm5hbWU6
   *
   * @param {String} str Message from the server
   */


  _actionAUTH_LOGIN_USER(str, callback) {
    if (!/^334[ -]/.test(str)) {
      // expecting '334 VXNlcm5hbWU6'
      callback(this._formatError('Invalid login sequence while waiting for "334 VXNlcm5hbWU6"', 'EAUTH', str, 'AUTH LOGIN'));
      return;
    }

    this._responseActions.push(str => {
      this._actionAUTH_LOGIN_PASS(str, callback);
    });

    this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));
  }
  /**
   * Handle the response for AUTH CRAM-MD5 command. We are expecting
   * '334 <challenge string>'. Data to be sent as response needs to be
   * base64 decoded challenge string, MD5 hashed using the password as
   * a HMAC key, prefixed by the username and a space, and finally all
   * base64 encoded again.
   *
   * @param {String} str Message from the server
   */


  _actionAUTH_CRAM_MD5(str, callback) {
    let challengeMatch = str.match(/^334\s+(.+)$/);
    let challengeString = '';

    if (!challengeMatch) {
      return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));
    } else {
      challengeString = challengeMatch[1];
    } // Decode from base64


    let base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),
        hmacMD5 = crypto.createHmac('md5', this._auth.credentials.pass);
    hmacMD5.update(base64decoded);
    let prepended = this._auth.credentials.user + ' ' + hmacMD5.digest('hex');

    this._responseActions.push(str => {
      this._actionAUTH_CRAM_MD5_PASS(str, callback);
    });

    this._sendCommand(Buffer.from(prepended).toString('base64'), // hidden hash for logs
    Buffer.from(this._auth.credentials.user + ' /* secret */').toString('base64'));
  }
  /**
   * Handles the response to CRAM-MD5 authentication, if there's no error,
   * the user can be considered logged in. Start waiting for a message to send
   *
   * @param {String} str Message from the server
   */


  _actionAUTH_CRAM_MD5_PASS(str, callback) {
    if (!str.match(/^235\s+/)) {
      return callback(this._formatError('Invalid login sequence while waiting for "235"', 'EAUTH', str, 'AUTH CRAM-MD5'));
    }

    this.logger.info({
      tnx: 'smtp',
      username: this._auth.user,
      action: 'authenticated',
      method: this._authMethod
    }, 'User %s authenticated', JSON.stringify(this._auth.user));
    this.authenticated = true;
    callback(null, true);
  }
  /**
   * Handle the response for AUTH LOGIN command. We are expecting
   * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as
   * response needs to be base64 encoded password.
   *
   * @param {String} str Message from the server
   */


  _actionAUTH_LOGIN_PASS(str, callback) {
    if (!/^334[ -]/.test(str)) {
      // expecting '334 UGFzc3dvcmQ6'
      return callback(this._formatError('Invalid login sequence while waiting for "334 UGFzc3dvcmQ6"', 'EAUTH', str, 'AUTH LOGIN'));
    }

    this._responseActions.push(str => {
      this._actionAUTHComplete(str, callback);
    });

    this._sendCommand(Buffer.from((this._auth.credentials.pass || '').toString(), 'utf-8').toString('base64'), // Hidden pass for logs
    Buffer.from('/* secret */', 'utf-8').toString('base64'));
  }
  /**
   * Handles the response for authentication, if there's no error,
   * the user can be considered logged in. Start waiting for a message to send
   *
   * @param {String} str Message from the server
   */


  _actionAUTHComplete(str, isRetry, callback) {
    if (!callback && typeof isRetry === 'function') {
      callback = isRetry;
      isRetry = false;
    }

    if (str.substr(0, 3) === '334') {
      this._responseActions.push(str => {
        if (isRetry || this._authMethod !== 'XOAUTH2') {
          this._actionAUTHComplete(str, true, callback);
        } else {
          // fetch a new OAuth2 access token
          setImmediate(() => this._handleXOauth2Token(true, callback));
        }
      });

      this._sendCommand('');

      return;
    }

    if (str.charAt(0) !== '2') {
      this.logger.info({
        tnx: 'smtp',
        username: this._auth.user,
        action: 'authfail',
        method: this._authMethod
      }, 'User %s failed to authenticate', JSON.stringify(this._auth.user));
      return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));
    }

    this.logger.info({
      tnx: 'smtp',
      username: this._auth.user,
      action: 'authenticated',
      method: this._authMethod
    }, 'User %s authenticated', JSON.stringify(this._auth.user));
    this.authenticated = true;
    callback(null, true);
  }
  /**
   * Handle response for a MAIL FROM: command
   *
   * @param {String} str Message from the server
   */


  _actionMAIL(str, callback) {
    let message, curRecipient;

    if (Number(str.charAt(0)) !== 2) {
      if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\x80-\uFFFF]/.test(this._envelope.from)) {
        message = 'Internationalized mailbox name not allowed';
      } else {
        message = 'Mail command failed';
      }

      return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));
    }

    if (!this._envelope.rcptQueue.length) {
      return callback(this._formatError('Can\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));
    } else {
      this._recipientQueue = [];

      if (this._supportedExtensions.includes('PIPELINING')) {
        while (this._envelope.rcptQueue.length) {
          curRecipient = this._envelope.rcptQueue.shift();

          this._recipientQueue.push(curRecipient);

          this._responseActions.push(str => {
            this._actionRCPT(str, callback);
          });

          this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());
        }
      } else {
        curRecipient = this._envelope.rcptQueue.shift();

        this._recipientQueue.push(curRecipient);

        this._responseActions.push(str => {
          this._actionRCPT(str, callback);
        });

        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());
      }
    }
  }
  /**
   * Handle response for a RCPT TO: command
   *
   * @param {String} str Message from the server
   */


  _actionRCPT(str, callback) {
    let message,
        err,
        curRecipient = this._recipientQueue.shift();

    if (Number(str.charAt(0)) !== 2) {
      // this is a soft error
      if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\x80-\uFFFF]/.test(curRecipient)) {
        message = 'Internationalized mailbox name not allowed';
      } else {
        message = 'Recipient command failed';
      }

      this._envelope.rejected.push(curRecipient); // store error for the failed recipient


      err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');
      err.recipient = curRecipient;

      this._envelope.rejectedErrors.push(err);
    } else {
      this._envelope.accepted.push(curRecipient);
    }

    if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {
      if (this._envelope.rejected.length < this._envelope.to.length) {
        this._responseActions.push(str => {
          this._actionDATA(str, callback);
        });

        this._sendCommand('DATA');
      } else {
        err = this._formatError('Can\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');
        err.rejected = this._envelope.rejected;
        err.rejectedErrors = this._envelope.rejectedErrors;
        return callback(err);
      }
    } else if (this._envelope.rcptQueue.length) {
      curRecipient = this._envelope.rcptQueue.shift();

      this._recipientQueue.push(curRecipient);

      this._responseActions.push(str => {
        this._actionRCPT(str, callback);
      });

      this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());
    }
  }
  /**
   * Handle response for a DATA command
   *
   * @param {String} str Message from the server
   */


  _actionDATA(str, callback) {
    // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24
    // some servers might use 250 instead, so lets check for 2 or 3 as the first digit
    if (!/^[23]/.test(str)) {
      return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));
    }

    let response = {
      accepted: this._envelope.accepted,
      rejected: this._envelope.rejected
    };

    if (this._envelope.rejectedErrors.length) {
      response.rejectedErrors = this._envelope.rejectedErrors;
    }

    callback(null, response);
  }
  /**
   * Handle response for a DATA stream when using SMTP
   * We expect a single response that defines if the sending succeeded or failed
   *
   * @param {String} str Message from the server
   */


  _actionSMTPStream(str, callback) {
    if (Number(str.charAt(0)) !== 2) {
      // Message failed
      return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));
    } else {
      // Message sent succesfully
      return callback(null, str);
    }
  }
  /**
   * Handle response for a DATA stream
   * We expect a separate response for every recipient. All recipients can either
   * succeed or fail separately
   *
   * @param {String} recipient The recipient this response applies to
   * @param {Boolean} final Is this the final recipient?
   * @param {String} str Message from the server
   */


  _actionLMTPStream(recipient, final, str, callback) {
    let err;

    if (Number(str.charAt(0)) !== 2) {
      // Message failed
      err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');
      err.recipient = recipient;

      this._envelope.rejected.push(recipient);

      this._envelope.rejectedErrors.push(err);

      for (let i = 0, len = this._envelope.accepted.length; i < len; i++) {
        if (this._envelope.accepted[i] === recipient) {
          this._envelope.accepted.splice(i, 1);
        }
      }
    }

    if (final) {
      return callback(null, str);
    }
  }

  _handleXOauth2Token(isRetry, callback) {
    this._auth.oauth2.getToken(isRetry, (err, accessToken) => {
      if (err) {
        this.logger.info({
          tnx: 'smtp',
          username: this._auth.user,
          action: 'authfail',
          method: this._authMethod
        }, 'User %s failed to authenticate', JSON.stringify(this._auth.user));
        return callback(this._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));
      }

      this._responseActions.push(str => {
        this._actionAUTHComplete(str, isRetry, callback);
      });

      this._sendCommand('AUTH XOAUTH2 ' + this._auth.oauth2.buildXOAuth2Token(accessToken), //  Hidden for logs
      'AUTH XOAUTH2 ' + this._auth.oauth2.buildXOAuth2Token('/* secret */'));
    });
  }
  /**
   *
   * @param {string} command
   * @private
   */


  _isDestroyedMessage(command) {
    if (this._destroyed) {
      return 'Cannot ' + command + ' - smtp connection is already destroyed.';
    }

    if (this._socket) {
      if (this._socket.destroyed) {
        return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';
      }

      if (!this._socket.writable) {
        return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';
      }
    }
  }

  _getHostname() {
    // defaul hostname is machine hostname or [IP]
    let defaultHostname = os.hostname() || ''; // ignore if not FQDN

    if (defaultHostname.indexOf('.') < 0) {
      defaultHostname = '[127.0.0.1]';
    } // IP should be enclosed in []


    if (defaultHostname.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/)) {
      defaultHostname = '[' + defaultHostname + ']';
    }

    return defaultHostname;
  }

}

module.exports = SMTPConnection;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;

  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };

  return error;
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(33);
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = {
  "version": "0.24.0"
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

var normalizeHeaderName = __webpack_require__(140);

var AxiosError = __webpack_require__(14);

var transitionalDefaults = __webpack_require__(38);

var toFormData = __webpack_require__(65);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(141);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(148);
  }

  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {
  transitional: transitionalDefaults,
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    var isObjectPayload = utils.isObject(data);
    var contentType = headers && headers['Content-Type'];
    var isFileList;

    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {
      var _FormData = this.env && this.env.FormData;

      return toFormData(isFileList ? {
        'files[]': data
      } : data, _FormData && new _FormData());
    } else if (isObjectPayload || contentType === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }

          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: __webpack_require__(150)
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(143);

var combineURLs = __webpack_require__(144);
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */


module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }

  return requestedURL;
};

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = {
  "version": "0.27.2"
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError; // eslint-disable-next-line consistent-return

var getEvalledConstructor = function (expressionSyntax) {
  try {
    return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  } catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;

if ($gOPD) {
  try {
    $gOPD({}, '');
  } catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
  }
}

var throwTypeError = function () {
  throw new $TypeError();
};

var ThrowTypeError = $gOPD ? function () {
  try {
    // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    arguments.callee; // IE 8 does not throw here

    return throwTypeError;
  } catch (calleeThrows) {
    try {
      // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
      return $gOPD(arguments, 'callee').get;
    } catch (gOPDthrows) {
      return throwTypeError;
    }
  }
}() : throwTypeError;

var hasSymbols = __webpack_require__(168)();

var getProto = Object.getPrototypeOf || function (x) {
  return x.__proto__;
}; // eslint-disable-line no-proto


var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
var INTRINSICS = {
  '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
  '%Array%': Array,
  '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
  '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
  '%AsyncFromSyncIteratorPrototype%': undefined,
  '%AsyncFunction%': needsEval,
  '%AsyncGenerator%': needsEval,
  '%AsyncGeneratorFunction%': needsEval,
  '%AsyncIteratorPrototype%': needsEval,
  '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
  '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
  '%Boolean%': Boolean,
  '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
  '%Date%': Date,
  '%decodeURI%': decodeURI,
  '%decodeURIComponent%': decodeURIComponent,
  '%encodeURI%': encodeURI,
  '%encodeURIComponent%': encodeURIComponent,
  '%Error%': Error,
  '%eval%': eval,
  // eslint-disable-line no-eval
  '%EvalError%': EvalError,
  '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
  '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
  '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
  '%Function%': $Function,
  '%GeneratorFunction%': needsEval,
  '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
  '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
  '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
  '%isFinite%': isFinite,
  '%isNaN%': isNaN,
  '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
  '%JSON%': typeof JSON === 'object' ? JSON : undefined,
  '%Map%': typeof Map === 'undefined' ? undefined : Map,
  '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
  '%Math%': Math,
  '%Number%': Number,
  '%Object%': Object,
  '%parseFloat%': parseFloat,
  '%parseInt%': parseInt,
  '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
  '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
  '%RangeError%': RangeError,
  '%ReferenceError%': ReferenceError,
  '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
  '%RegExp%': RegExp,
  '%Set%': typeof Set === 'undefined' ? undefined : Set,
  '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
  '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
  '%String%': String,
  '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
  '%Symbol%': hasSymbols ? Symbol : undefined,
  '%SyntaxError%': $SyntaxError,
  '%ThrowTypeError%': ThrowTypeError,
  '%TypedArray%': TypedArray,
  '%TypeError%': $TypeError,
  '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
  '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
  '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
  '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
  '%URIError%': URIError,
  '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
  '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
  '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
  var value;

  if (name === '%AsyncFunction%') {
    value = getEvalledConstructor('async function () {}');
  } else if (name === '%GeneratorFunction%') {
    value = getEvalledConstructor('function* () {}');
  } else if (name === '%AsyncGeneratorFunction%') {
    value = getEvalledConstructor('async function* () {}');
  } else if (name === '%AsyncGenerator%') {
    var fn = doEval('%AsyncGeneratorFunction%');

    if (fn) {
      value = fn.prototype;
    }
  } else if (name === '%AsyncIteratorPrototype%') {
    var gen = doEval('%AsyncGenerator%');

    if (gen) {
      value = getProto(gen.prototype);
    }
  }

  INTRINSICS[name] = value;
  return value;
};

var LEGACY_ALIASES = {
  '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  '%ArrayPrototype%': ['Array', 'prototype'],
  '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  '%ArrayProto_values%': ['Array', 'prototype', 'values'],
  '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  '%BooleanPrototype%': ['Boolean', 'prototype'],
  '%DataViewPrototype%': ['DataView', 'prototype'],
  '%DatePrototype%': ['Date', 'prototype'],
  '%ErrorPrototype%': ['Error', 'prototype'],
  '%EvalErrorPrototype%': ['EvalError', 'prototype'],
  '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  '%FunctionPrototype%': ['Function', 'prototype'],
  '%Generator%': ['GeneratorFunction', 'prototype'],
  '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  '%JSONParse%': ['JSON', 'parse'],
  '%JSONStringify%': ['JSON', 'stringify'],
  '%MapPrototype%': ['Map', 'prototype'],
  '%NumberPrototype%': ['Number', 'prototype'],
  '%ObjectPrototype%': ['Object', 'prototype'],
  '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  '%PromisePrototype%': ['Promise', 'prototype'],
  '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  '%Promise_all%': ['Promise', 'all'],
  '%Promise_reject%': ['Promise', 'reject'],
  '%Promise_resolve%': ['Promise', 'resolve'],
  '%RangeErrorPrototype%': ['RangeError', 'prototype'],
  '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  '%RegExpPrototype%': ['RegExp', 'prototype'],
  '%SetPrototype%': ['Set', 'prototype'],
  '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  '%StringPrototype%': ['String', 'prototype'],
  '%SymbolPrototype%': ['Symbol', 'prototype'],
  '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  '%TypeErrorPrototype%': ['TypeError', 'prototype'],
  '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  '%URIErrorPrototype%': ['URIError', 'prototype'],
  '%WeakMapPrototype%': ['WeakMap', 'prototype'],
  '%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(42);

var hasOwn = __webpack_require__(171);

var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g;
/** Used to match backslashes in property paths. */

var stringToPath = function stringToPath(string) {
  var first = $strSlice(string, 0, 1);
  var last = $strSlice(string, -1);

  if (first === '%' && last !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
  } else if (last === '%' && first !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
  }

  var result = [];
  $replace(string, rePropName, function (match, number, quote, subString) {
    result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  });
  return result;
};
/* end adaptation */


var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  var intrinsicName = name;
  var alias;

  if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
    alias = LEGACY_ALIASES[intrinsicName];
    intrinsicName = '%' + alias[0] + '%';
  }

  if (hasOwn(INTRINSICS, intrinsicName)) {
    var value = INTRINSICS[intrinsicName];

    if (value === needsEval) {
      value = doEval(intrinsicName);
    }

    if (typeof value === 'undefined' && !allowMissing) {
      throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    }

    return {
      alias: alias,
      name: intrinsicName,
      value: value
    };
  }

  throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
  if (typeof name !== 'string' || name.length === 0) {
    throw new $TypeError('intrinsic name must be a non-empty string');
  }

  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    throw new $TypeError('"allowMissing" argument must be a boolean');
  }

  var parts = stringToPath(name);
  var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
  var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  var intrinsicRealName = intrinsic.name;
  var value = intrinsic.value;
  var skipFurtherCaching = false;
  var alias = intrinsic.alias;

  if (alias) {
    intrinsicBaseName = alias[0];
    $spliceApply(parts, $concat([0, 1], alias));
  }

  for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    var part = parts[i];
    var first = $strSlice(part, 0, 1);
    var last = $strSlice(part, -1);

    if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
      throw new $SyntaxError('property names with quotes must have matching quotes');
    }

    if (part === 'constructor' || !isOwn) {
      skipFurtherCaching = true;
    }

    intrinsicBaseName += '.' + part;
    intrinsicRealName = '%' + intrinsicBaseName + '%';

    if (hasOwn(INTRINSICS, intrinsicRealName)) {
      value = INTRINSICS[intrinsicRealName];
    } else if (value != null) {
      if (!(part in value)) {
        if (!allowMissing) {
          throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
        }

        return void undefined;
      }

      if ($gOPD && i + 1 >= parts.length) {
        var desc = $gOPD(value, part);
        isOwn = !!desc; // By convention, when a data property is converted to an accessor
        // property to emulate a data property that does not suffer from
        // the override mistake, that accessor's getter is marked with
        // an `originalValue` property. Here, when we detect this, we
        // uphold the illusion by pretending to see that original data
        // property, i.e., returning the value rather than the getter
        // itself.

        if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
          value = desc.get;
        } else {
          value = value[part];
        }
      } else {
        isOwn = hasOwn(value, part);
        value = value[part];
      }

      if (isOwn && !skipFurtherCaching) {
        INTRINSICS[intrinsicRealName] = value;
      }
    }
  }

  return value;
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(170);

module.exports = Function.prototype.bind || implementation;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;
var Format = {
  RFC1738: 'RFC1738',
  RFC3986: 'RFC3986'
};
module.exports = {
  'default': Format.RFC3986,
  formatters: {
    RFC1738: function (value) {
      return replace.call(value, percentTwenties, '+');
    },
    RFC3986: function (value) {
      return String(value);
    }
  },
  RFC1738: Format.RFC1738,
  RFC3986: Format.RFC3986
};

/***/ }),
/* 44 */
/***/ (function(module, exports) {

/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var stringTag = '[object String]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray = Array.isArray;
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */


function isString(value) {
  return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
}

module.exports = isString;

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("dns");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint quote-props: 0 */


const path = __webpack_require__(28);

const defaultMimeType = 'application/octet-stream';
const defaultExtension = 'bin';
const mimeTypes = new Map([['application/acad', 'dwg'], ['application/applixware', 'aw'], ['application/arj', 'arj'], ['application/atom+xml', 'xml'], ['application/atomcat+xml', 'atomcat'], ['application/atomsvc+xml', 'atomsvc'], ['application/base64', ['mm', 'mme']], ['application/binhex', 'hqx'], ['application/binhex4', 'hqx'], ['application/book', ['book', 'boo']], ['application/ccxml+xml,', 'ccxml'], ['application/cdf', 'cdf'], ['application/cdmi-capability', 'cdmia'], ['application/cdmi-container', 'cdmic'], ['application/cdmi-domain', 'cdmid'], ['application/cdmi-object', 'cdmio'], ['application/cdmi-queue', 'cdmiq'], ['application/clariscad', 'ccad'], ['application/commonground', 'dp'], ['application/cu-seeme', 'cu'], ['application/davmount+xml', 'davmount'], ['application/drafting', 'drw'], ['application/dsptype', 'tsp'], ['application/dssc+der', 'dssc'], ['application/dssc+xml', 'xdssc'], ['application/dxf', 'dxf'], ['application/ecmascript', ['js', 'es']], ['application/emma+xml', 'emma'], ['application/envoy', 'evy'], ['application/epub+zip', 'epub'], ['application/excel', ['xls', 'xl', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']], ['application/exi', 'exi'], ['application/font-tdpfr', 'pfr'], ['application/fractals', 'fif'], ['application/freeloader', 'frl'], ['application/futuresplash', 'spl'], ['application/gnutar', 'tgz'], ['application/groupwise', 'vew'], ['application/hlp', 'hlp'], ['application/hta', 'hta'], ['application/hyperstudio', 'stk'], ['application/i-deas', 'unv'], ['application/iges', ['iges', 'igs']], ['application/inf', 'inf'], ['application/internet-property-stream', 'acx'], ['application/ipfix', 'ipfix'], ['application/java', 'class'], ['application/java-archive', 'jar'], ['application/java-byte-code', 'class'], ['application/java-serialized-object', 'ser'], ['application/java-vm', 'class'], ['application/javascript', 'js'], ['application/json', 'json'], ['application/lha', 'lha'], ['application/lzx', 'lzx'], ['application/mac-binary', 'bin'], ['application/mac-binhex', 'hqx'], ['application/mac-binhex40', 'hqx'], ['application/mac-compactpro', 'cpt'], ['application/macbinary', 'bin'], ['application/mads+xml', 'mads'], ['application/marc', 'mrc'], ['application/marcxml+xml', 'mrcx'], ['application/mathematica', 'ma'], ['application/mathml+xml', 'mathml'], ['application/mbedlet', 'mbd'], ['application/mbox', 'mbox'], ['application/mcad', 'mcd'], ['application/mediaservercontrol+xml', 'mscml'], ['application/metalink4+xml', 'meta4'], ['application/mets+xml', 'mets'], ['application/mime', 'aps'], ['application/mods+xml', 'mods'], ['application/mp21', 'm21'], ['application/mp4', 'mp4'], ['application/mspowerpoint', ['ppt', 'pot', 'pps', 'ppz']], ['application/msword', ['doc', 'dot', 'w6w', 'wiz', 'word']], ['application/mswrite', 'wri'], ['application/mxf', 'mxf'], ['application/netmc', 'mcp'], ['application/octet-stream', ['*']], ['application/oda', 'oda'], ['application/oebps-package+xml', 'opf'], ['application/ogg', 'ogx'], ['application/olescript', 'axs'], ['application/onenote', 'onetoc'], ['application/patch-ops-error+xml', 'xer'], ['application/pdf', 'pdf'], ['application/pgp-encrypted', 'asc'], ['application/pgp-signature', 'pgp'], ['application/pics-rules', 'prf'], ['application/pkcs-12', 'p12'], ['application/pkcs-crl', 'crl'], ['application/pkcs10', 'p10'], ['application/pkcs7-mime', ['p7c', 'p7m']], ['application/pkcs7-signature', 'p7s'], ['application/pkcs8', 'p8'], ['application/pkix-attr-cert', 'ac'], ['application/pkix-cert', ['cer', 'crt']], ['application/pkix-crl', 'crl'], ['application/pkix-pkipath', 'pkipath'], ['application/pkixcmp', 'pki'], ['application/plain', 'text'], ['application/pls+xml', 'pls'], ['application/postscript', ['ps', 'ai', 'eps']], ['application/powerpoint', 'ppt'], ['application/pro_eng', ['part', 'prt']], ['application/prs.cww', 'cww'], ['application/pskc+xml', 'pskcxml'], ['application/rdf+xml', 'rdf'], ['application/reginfo+xml', 'rif'], ['application/relax-ng-compact-syntax', 'rnc'], ['application/resource-lists+xml', 'rl'], ['application/resource-lists-diff+xml', 'rld'], ['application/ringing-tones', 'rng'], ['application/rls-services+xml', 'rs'], ['application/rsd+xml', 'rsd'], ['application/rss+xml', 'xml'], ['application/rtf', ['rtf', 'rtx']], ['application/sbml+xml', 'sbml'], ['application/scvp-cv-request', 'scq'], ['application/scvp-cv-response', 'scs'], ['application/scvp-vp-request', 'spq'], ['application/scvp-vp-response', 'spp'], ['application/sdp', 'sdp'], ['application/sea', 'sea'], ['application/set', 'set'], ['application/set-payment-initiation', 'setpay'], ['application/set-registration-initiation', 'setreg'], ['application/shf+xml', 'shf'], ['application/sla', 'stl'], ['application/smil', ['smi', 'smil']], ['application/smil+xml', 'smi'], ['application/solids', 'sol'], ['application/sounder', 'sdr'], ['application/sparql-query', 'rq'], ['application/sparql-results+xml', 'srx'], ['application/srgs', 'gram'], ['application/srgs+xml', 'grxml'], ['application/sru+xml', 'sru'], ['application/ssml+xml', 'ssml'], ['application/step', ['step', 'stp']], ['application/streamingmedia', 'ssm'], ['application/tei+xml', 'tei'], ['application/thraud+xml', 'tfi'], ['application/timestamped-data', 'tsd'], ['application/toolbook', 'tbk'], ['application/vda', 'vda'], ['application/vnd.3gpp.pic-bw-large', 'plb'], ['application/vnd.3gpp.pic-bw-small', 'psb'], ['application/vnd.3gpp.pic-bw-var', 'pvb'], ['application/vnd.3gpp2.tcap', 'tcap'], ['application/vnd.3m.post-it-notes', 'pwn'], ['application/vnd.accpac.simply.aso', 'aso'], ['application/vnd.accpac.simply.imp', 'imp'], ['application/vnd.acucobol', 'acu'], ['application/vnd.acucorp', 'atc'], ['application/vnd.adobe.air-application-installer-package+zip', 'air'], ['application/vnd.adobe.fxp', 'fxp'], ['application/vnd.adobe.xdp+xml', 'xdp'], ['application/vnd.adobe.xfdf', 'xfdf'], ['application/vnd.ahead.space', 'ahead'], ['application/vnd.airzip.filesecure.azf', 'azf'], ['application/vnd.airzip.filesecure.azs', 'azs'], ['application/vnd.amazon.ebook', 'azw'], ['application/vnd.americandynamics.acc', 'acc'], ['application/vnd.amiga.ami', 'ami'], ['application/vnd.android.package-archive', 'apk'], ['application/vnd.anser-web-certificate-issue-initiation', 'cii'], ['application/vnd.anser-web-funds-transfer-initiation', 'fti'], ['application/vnd.antix.game-component', 'atx'], ['application/vnd.apple.installer+xml', 'mpkg'], ['application/vnd.apple.mpegurl', 'm3u8'], ['application/vnd.aristanetworks.swi', 'swi'], ['application/vnd.audiograph', 'aep'], ['application/vnd.blueice.multipass', 'mpm'], ['application/vnd.bmi', 'bmi'], ['application/vnd.businessobjects', 'rep'], ['application/vnd.chemdraw+xml', 'cdxml'], ['application/vnd.chipnuts.karaoke-mmd', 'mmd'], ['application/vnd.cinderella', 'cdy'], ['application/vnd.claymore', 'cla'], ['application/vnd.cloanto.rp9', 'rp9'], ['application/vnd.clonk.c4group', 'c4g'], ['application/vnd.cluetrust.cartomobile-config', 'c11amc'], ['application/vnd.cluetrust.cartomobile-config-pkg', 'c11amz'], ['application/vnd.commonspace', 'csp'], ['application/vnd.contact.cmsg', 'cdbcmsg'], ['application/vnd.cosmocaller', 'cmc'], ['application/vnd.crick.clicker', 'clkx'], ['application/vnd.crick.clicker.keyboard', 'clkk'], ['application/vnd.crick.clicker.palette', 'clkp'], ['application/vnd.crick.clicker.template', 'clkt'], ['application/vnd.crick.clicker.wordbank', 'clkw'], ['application/vnd.criticaltools.wbs+xml', 'wbs'], ['application/vnd.ctc-posml', 'pml'], ['application/vnd.cups-ppd', 'ppd'], ['application/vnd.curl.car', 'car'], ['application/vnd.curl.pcurl', 'pcurl'], ['application/vnd.data-vision.rdz', 'rdz'], ['application/vnd.denovo.fcselayout-link', 'fe_launch'], ['application/vnd.dna', 'dna'], ['application/vnd.dolby.mlp', 'mlp'], ['application/vnd.dpgraph', 'dpg'], ['application/vnd.dreamfactory', 'dfac'], ['application/vnd.dvb.ait', 'ait'], ['application/vnd.dvb.service', 'svc'], ['application/vnd.dynageo', 'geo'], ['application/vnd.ecowin.chart', 'mag'], ['application/vnd.enliven', 'nml'], ['application/vnd.epson.esf', 'esf'], ['application/vnd.epson.msf', 'msf'], ['application/vnd.epson.quickanime', 'qam'], ['application/vnd.epson.salt', 'slt'], ['application/vnd.epson.ssf', 'ssf'], ['application/vnd.eszigno3+xml', 'es3'], ['application/vnd.ezpix-album', 'ez2'], ['application/vnd.ezpix-package', 'ez3'], ['application/vnd.fdf', 'fdf'], ['application/vnd.fdsn.seed', 'seed'], ['application/vnd.flographit', 'gph'], ['application/vnd.fluxtime.clip', 'ftc'], ['application/vnd.framemaker', 'fm'], ['application/vnd.frogans.fnc', 'fnc'], ['application/vnd.frogans.ltf', 'ltf'], ['application/vnd.fsc.weblaunch', 'fsc'], ['application/vnd.fujitsu.oasys', 'oas'], ['application/vnd.fujitsu.oasys2', 'oa2'], ['application/vnd.fujitsu.oasys3', 'oa3'], ['application/vnd.fujitsu.oasysgp', 'fg5'], ['application/vnd.fujitsu.oasysprs', 'bh2'], ['application/vnd.fujixerox.ddd', 'ddd'], ['application/vnd.fujixerox.docuworks', 'xdw'], ['application/vnd.fujixerox.docuworks.binder', 'xbd'], ['application/vnd.fuzzysheet', 'fzs'], ['application/vnd.genomatix.tuxedo', 'txd'], ['application/vnd.geogebra.file', 'ggb'], ['application/vnd.geogebra.tool', 'ggt'], ['application/vnd.geometry-explorer', 'gex'], ['application/vnd.geonext', 'gxt'], ['application/vnd.geoplan', 'g2w'], ['application/vnd.geospace', 'g3w'], ['application/vnd.gmx', 'gmx'], ['application/vnd.google-earth.kml+xml', 'kml'], ['application/vnd.google-earth.kmz', 'kmz'], ['application/vnd.grafeq', 'gqf'], ['application/vnd.groove-account', 'gac'], ['application/vnd.groove-help', 'ghf'], ['application/vnd.groove-identity-message', 'gim'], ['application/vnd.groove-injector', 'grv'], ['application/vnd.groove-tool-message', 'gtm'], ['application/vnd.groove-tool-template', 'tpl'], ['application/vnd.groove-vcard', 'vcg'], ['application/vnd.hal+xml', 'hal'], ['application/vnd.handheld-entertainment+xml', 'zmm'], ['application/vnd.hbci', 'hbci'], ['application/vnd.hhe.lesson-player', 'les'], ['application/vnd.hp-hpgl', ['hgl', 'hpg', 'hpgl']], ['application/vnd.hp-hpid', 'hpid'], ['application/vnd.hp-hps', 'hps'], ['application/vnd.hp-jlyt', 'jlt'], ['application/vnd.hp-pcl', 'pcl'], ['application/vnd.hp-pclxl', 'pclxl'], ['application/vnd.hydrostatix.sof-data', 'sfd-hdstx'], ['application/vnd.hzn-3d-crossword', 'x3d'], ['application/vnd.ibm.minipay', 'mpy'], ['application/vnd.ibm.modcap', 'afp'], ['application/vnd.ibm.rights-management', 'irm'], ['application/vnd.ibm.secure-container', 'sc'], ['application/vnd.iccprofile', 'icc'], ['application/vnd.igloader', 'igl'], ['application/vnd.immervision-ivp', 'ivp'], ['application/vnd.immervision-ivu', 'ivu'], ['application/vnd.insors.igm', 'igm'], ['application/vnd.intercon.formnet', 'xpw'], ['application/vnd.intergeo', 'i2g'], ['application/vnd.intu.qbo', 'qbo'], ['application/vnd.intu.qfx', 'qfx'], ['application/vnd.ipunplugged.rcprofile', 'rcprofile'], ['application/vnd.irepository.package+xml', 'irp'], ['application/vnd.is-xpr', 'xpr'], ['application/vnd.isac.fcs', 'fcs'], ['application/vnd.jam', 'jam'], ['application/vnd.jcp.javame.midlet-rms', 'rms'], ['application/vnd.jisp', 'jisp'], ['application/vnd.joost.joda-archive', 'joda'], ['application/vnd.kahootz', 'ktz'], ['application/vnd.kde.karbon', 'karbon'], ['application/vnd.kde.kchart', 'chrt'], ['application/vnd.kde.kformula', 'kfo'], ['application/vnd.kde.kivio', 'flw'], ['application/vnd.kde.kontour', 'kon'], ['application/vnd.kde.kpresenter', 'kpr'], ['application/vnd.kde.kspread', 'ksp'], ['application/vnd.kde.kword', 'kwd'], ['application/vnd.kenameaapp', 'htke'], ['application/vnd.kidspiration', 'kia'], ['application/vnd.kinar', 'kne'], ['application/vnd.koan', 'skp'], ['application/vnd.kodak-descriptor', 'sse'], ['application/vnd.las.las+xml', 'lasxml'], ['application/vnd.llamagraphics.life-balance.desktop', 'lbd'], ['application/vnd.llamagraphics.life-balance.exchange+xml', 'lbe'], ['application/vnd.lotus-1-2-3', '123'], ['application/vnd.lotus-approach', 'apr'], ['application/vnd.lotus-freelance', 'pre'], ['application/vnd.lotus-notes', 'nsf'], ['application/vnd.lotus-organizer', 'org'], ['application/vnd.lotus-screencam', 'scm'], ['application/vnd.lotus-wordpro', 'lwp'], ['application/vnd.macports.portpkg', 'portpkg'], ['application/vnd.mcd', 'mcd'], ['application/vnd.medcalcdata', 'mc1'], ['application/vnd.mediastation.cdkey', 'cdkey'], ['application/vnd.mfer', 'mwf'], ['application/vnd.mfmp', 'mfm'], ['application/vnd.micrografx.flo', 'flo'], ['application/vnd.micrografx.igx', 'igx'], ['application/vnd.mif', 'mif'], ['application/vnd.mobius.daf', 'daf'], ['application/vnd.mobius.dis', 'dis'], ['application/vnd.mobius.mbk', 'mbk'], ['application/vnd.mobius.mqy', 'mqy'], ['application/vnd.mobius.msl', 'msl'], ['application/vnd.mobius.plc', 'plc'], ['application/vnd.mobius.txf', 'txf'], ['application/vnd.mophun.application', 'mpn'], ['application/vnd.mophun.certificate', 'mpc'], ['application/vnd.mozilla.xul+xml', 'xul'], ['application/vnd.ms-artgalry', 'cil'], ['application/vnd.ms-cab-compressed', 'cab'], ['application/vnd.ms-excel', ['xls', 'xla', 'xlc', 'xlm', 'xlt', 'xlw', 'xlb', 'xll']], ['application/vnd.ms-excel.addin.macroenabled.12', 'xlam'], ['application/vnd.ms-excel.sheet.binary.macroenabled.12', 'xlsb'], ['application/vnd.ms-excel.sheet.macroenabled.12', 'xlsm'], ['application/vnd.ms-excel.template.macroenabled.12', 'xltm'], ['application/vnd.ms-fontobject', 'eot'], ['application/vnd.ms-htmlhelp', 'chm'], ['application/vnd.ms-ims', 'ims'], ['application/vnd.ms-lrm', 'lrm'], ['application/vnd.ms-officetheme', 'thmx'], ['application/vnd.ms-outlook', 'msg'], ['application/vnd.ms-pki.certstore', 'sst'], ['application/vnd.ms-pki.pko', 'pko'], ['application/vnd.ms-pki.seccat', 'cat'], ['application/vnd.ms-pki.stl', 'stl'], ['application/vnd.ms-pkicertstore', 'sst'], ['application/vnd.ms-pkiseccat', 'cat'], ['application/vnd.ms-pkistl', 'stl'], ['application/vnd.ms-powerpoint', ['ppt', 'pot', 'pps', 'ppa', 'pwz']], ['application/vnd.ms-powerpoint.addin.macroenabled.12', 'ppam'], ['application/vnd.ms-powerpoint.presentation.macroenabled.12', 'pptm'], ['application/vnd.ms-powerpoint.slide.macroenabled.12', 'sldm'], ['application/vnd.ms-powerpoint.slideshow.macroenabled.12', 'ppsm'], ['application/vnd.ms-powerpoint.template.macroenabled.12', 'potm'], ['application/vnd.ms-project', 'mpp'], ['application/vnd.ms-word.document.macroenabled.12', 'docm'], ['application/vnd.ms-word.template.macroenabled.12', 'dotm'], ['application/vnd.ms-works', ['wks', 'wcm', 'wdb', 'wps']], ['application/vnd.ms-wpl', 'wpl'], ['application/vnd.ms-xpsdocument', 'xps'], ['application/vnd.mseq', 'mseq'], ['application/vnd.musician', 'mus'], ['application/vnd.muvee.style', 'msty'], ['application/vnd.neurolanguage.nlu', 'nlu'], ['application/vnd.noblenet-directory', 'nnd'], ['application/vnd.noblenet-sealer', 'nns'], ['application/vnd.noblenet-web', 'nnw'], ['application/vnd.nokia.configuration-message', 'ncm'], ['application/vnd.nokia.n-gage.data', 'ngdat'], ['application/vnd.nokia.n-gage.symbian.install', 'n-gage'], ['application/vnd.nokia.radio-preset', 'rpst'], ['application/vnd.nokia.radio-presets', 'rpss'], ['application/vnd.nokia.ringing-tone', 'rng'], ['application/vnd.novadigm.edm', 'edm'], ['application/vnd.novadigm.edx', 'edx'], ['application/vnd.novadigm.ext', 'ext'], ['application/vnd.oasis.opendocument.chart', 'odc'], ['application/vnd.oasis.opendocument.chart-template', 'otc'], ['application/vnd.oasis.opendocument.database', 'odb'], ['application/vnd.oasis.opendocument.formula', 'odf'], ['application/vnd.oasis.opendocument.formula-template', 'odft'], ['application/vnd.oasis.opendocument.graphics', 'odg'], ['application/vnd.oasis.opendocument.graphics-template', 'otg'], ['application/vnd.oasis.opendocument.image', 'odi'], ['application/vnd.oasis.opendocument.image-template', 'oti'], ['application/vnd.oasis.opendocument.presentation', 'odp'], ['application/vnd.oasis.opendocument.presentation-template', 'otp'], ['application/vnd.oasis.opendocument.spreadsheet', 'ods'], ['application/vnd.oasis.opendocument.spreadsheet-template', 'ots'], ['application/vnd.oasis.opendocument.text', 'odt'], ['application/vnd.oasis.opendocument.text-master', 'odm'], ['application/vnd.oasis.opendocument.text-template', 'ott'], ['application/vnd.oasis.opendocument.text-web', 'oth'], ['application/vnd.olpc-sugar', 'xo'], ['application/vnd.oma.dd2+xml', 'dd2'], ['application/vnd.openofficeorg.extension', 'oxt'], ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'pptx'], ['application/vnd.openxmlformats-officedocument.presentationml.slide', 'sldx'], ['application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'ppsx'], ['application/vnd.openxmlformats-officedocument.presentationml.template', 'potx'], ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlsx'], ['application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'xltx'], ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'docx'], ['application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'dotx'], ['application/vnd.osgeo.mapguide.package', 'mgp'], ['application/vnd.osgi.dp', 'dp'], ['application/vnd.palm', 'pdb'], ['application/vnd.pawaafile', 'paw'], ['application/vnd.pg.format', 'str'], ['application/vnd.pg.osasli', 'ei6'], ['application/vnd.picsel', 'efif'], ['application/vnd.pmi.widget', 'wg'], ['application/vnd.pocketlearn', 'plf'], ['application/vnd.powerbuilder6', 'pbd'], ['application/vnd.previewsystems.box', 'box'], ['application/vnd.proteus.magazine', 'mgz'], ['application/vnd.publishare-delta-tree', 'qps'], ['application/vnd.pvi.ptid1', 'ptid'], ['application/vnd.quark.quarkxpress', 'qxd'], ['application/vnd.realvnc.bed', 'bed'], ['application/vnd.recordare.musicxml', 'mxl'], ['application/vnd.recordare.musicxml+xml', 'musicxml'], ['application/vnd.rig.cryptonote', 'cryptonote'], ['application/vnd.rim.cod', 'cod'], ['application/vnd.rn-realmedia', 'rm'], ['application/vnd.rn-realplayer', 'rnx'], ['application/vnd.route66.link66+xml', 'link66'], ['application/vnd.sailingtracker.track', 'st'], ['application/vnd.seemail', 'see'], ['application/vnd.sema', 'sema'], ['application/vnd.semd', 'semd'], ['application/vnd.semf', 'semf'], ['application/vnd.shana.informed.formdata', 'ifm'], ['application/vnd.shana.informed.formtemplate', 'itp'], ['application/vnd.shana.informed.interchange', 'iif'], ['application/vnd.shana.informed.package', 'ipk'], ['application/vnd.simtech-mindmapper', 'twd'], ['application/vnd.smaf', 'mmf'], ['application/vnd.smart.teacher', 'teacher'], ['application/vnd.solent.sdkm+xml', 'sdkm'], ['application/vnd.spotfire.dxp', 'dxp'], ['application/vnd.spotfire.sfs', 'sfs'], ['application/vnd.stardivision.calc', 'sdc'], ['application/vnd.stardivision.draw', 'sda'], ['application/vnd.stardivision.impress', 'sdd'], ['application/vnd.stardivision.math', 'smf'], ['application/vnd.stardivision.writer', 'sdw'], ['application/vnd.stardivision.writer-global', 'sgl'], ['application/vnd.stepmania.stepchart', 'sm'], ['application/vnd.sun.xml.calc', 'sxc'], ['application/vnd.sun.xml.calc.template', 'stc'], ['application/vnd.sun.xml.draw', 'sxd'], ['application/vnd.sun.xml.draw.template', 'std'], ['application/vnd.sun.xml.impress', 'sxi'], ['application/vnd.sun.xml.impress.template', 'sti'], ['application/vnd.sun.xml.math', 'sxm'], ['application/vnd.sun.xml.writer', 'sxw'], ['application/vnd.sun.xml.writer.global', 'sxg'], ['application/vnd.sun.xml.writer.template', 'stw'], ['application/vnd.sus-calendar', 'sus'], ['application/vnd.svd', 'svd'], ['application/vnd.symbian.install', 'sis'], ['application/vnd.syncml+xml', 'xsm'], ['application/vnd.syncml.dm+wbxml', 'bdm'], ['application/vnd.syncml.dm+xml', 'xdm'], ['application/vnd.tao.intent-module-archive', 'tao'], ['application/vnd.tmobile-livetv', 'tmo'], ['application/vnd.trid.tpt', 'tpt'], ['application/vnd.triscape.mxs', 'mxs'], ['application/vnd.trueapp', 'tra'], ['application/vnd.ufdl', 'ufd'], ['application/vnd.uiq.theme', 'utz'], ['application/vnd.umajin', 'umj'], ['application/vnd.unity', 'unityweb'], ['application/vnd.uoml+xml', 'uoml'], ['application/vnd.vcx', 'vcx'], ['application/vnd.visio', 'vsd'], ['application/vnd.visionary', 'vis'], ['application/vnd.vsf', 'vsf'], ['application/vnd.wap.wbxml', 'wbxml'], ['application/vnd.wap.wmlc', 'wmlc'], ['application/vnd.wap.wmlscriptc', 'wmlsc'], ['application/vnd.webturbo', 'wtb'], ['application/vnd.wolfram.player', 'nbp'], ['application/vnd.wordperfect', 'wpd'], ['application/vnd.wqd', 'wqd'], ['application/vnd.wt.stf', 'stf'], ['application/vnd.xara', ['web', 'xar']], ['application/vnd.xfdl', 'xfdl'], ['application/vnd.yamaha.hv-dic', 'hvd'], ['application/vnd.yamaha.hv-script', 'hvs'], ['application/vnd.yamaha.hv-voice', 'hvp'], ['application/vnd.yamaha.openscoreformat', 'osf'], ['application/vnd.yamaha.openscoreformat.osfpvg+xml', 'osfpvg'], ['application/vnd.yamaha.smaf-audio', 'saf'], ['application/vnd.yamaha.smaf-phrase', 'spf'], ['application/vnd.yellowriver-custom-menu', 'cmp'], ['application/vnd.zul', 'zir'], ['application/vnd.zzazz.deck+xml', 'zaz'], ['application/vocaltec-media-desc', 'vmd'], ['application/vocaltec-media-file', 'vmf'], ['application/voicexml+xml', 'vxml'], ['application/widget', 'wgt'], ['application/winhlp', 'hlp'], ['application/wordperfect', ['wp', 'wp5', 'wp6', 'wpd']], ['application/wordperfect6.0', ['w60', 'wp5']], ['application/wordperfect6.1', 'w61'], ['application/wsdl+xml', 'wsdl'], ['application/wspolicy+xml', 'wspolicy'], ['application/x-123', 'wk1'], ['application/x-7z-compressed', '7z'], ['application/x-abiword', 'abw'], ['application/x-ace-compressed', 'ace'], ['application/x-aim', 'aim'], ['application/x-authorware-bin', 'aab'], ['application/x-authorware-map', 'aam'], ['application/x-authorware-seg', 'aas'], ['application/x-bcpio', 'bcpio'], ['application/x-binary', 'bin'], ['application/x-binhex40', 'hqx'], ['application/x-bittorrent', 'torrent'], ['application/x-bsh', ['bsh', 'sh', 'shar']], ['application/x-bytecode.elisp', 'elc'], ['applicaiton/x-bytecode.python', 'pyc'], ['application/x-bzip', 'bz'], ['application/x-bzip2', ['boz', 'bz2']], ['application/x-cdf', 'cdf'], ['application/x-cdlink', 'vcd'], ['application/x-chat', ['cha', 'chat']], ['application/x-chess-pgn', 'pgn'], ['application/x-cmu-raster', 'ras'], ['application/x-cocoa', 'cco'], ['application/x-compactpro', 'cpt'], ['application/x-compress', 'z'], ['application/x-compressed', ['tgz', 'gz', 'z', 'zip']], ['application/x-conference', 'nsc'], ['application/x-cpio', 'cpio'], ['application/x-cpt', 'cpt'], ['application/x-csh', 'csh'], ['application/x-debian-package', 'deb'], ['application/x-deepv', 'deepv'], ['application/x-director', ['dir', 'dcr', 'dxr']], ['application/x-doom', 'wad'], ['application/x-dtbncx+xml', 'ncx'], ['application/x-dtbook+xml', 'dtb'], ['application/x-dtbresource+xml', 'res'], ['application/x-dvi', 'dvi'], ['application/x-elc', 'elc'], ['application/x-envoy', ['env', 'evy']], ['application/x-esrehber', 'es'], ['application/x-excel', ['xls', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']], ['application/x-font-bdf', 'bdf'], ['application/x-font-ghostscript', 'gsf'], ['application/x-font-linux-psf', 'psf'], ['application/x-font-otf', 'otf'], ['application/x-font-pcf', 'pcf'], ['application/x-font-snf', 'snf'], ['application/x-font-ttf', 'ttf'], ['application/x-font-type1', 'pfa'], ['application/x-font-woff', 'woff'], ['application/x-frame', 'mif'], ['application/x-freelance', 'pre'], ['application/x-futuresplash', 'spl'], ['application/x-gnumeric', 'gnumeric'], ['application/x-gsp', 'gsp'], ['application/x-gss', 'gss'], ['application/x-gtar', 'gtar'], ['application/x-gzip', ['gz', 'gzip']], ['application/x-hdf', 'hdf'], ['application/x-helpfile', ['help', 'hlp']], ['application/x-httpd-imap', 'imap'], ['application/x-ima', 'ima'], ['application/x-internet-signup', ['ins', 'isp']], ['application/x-internett-signup', 'ins'], ['application/x-inventor', 'iv'], ['application/x-ip2', 'ip'], ['application/x-iphone', 'iii'], ['application/x-java-class', 'class'], ['application/x-java-commerce', 'jcm'], ['application/x-java-jnlp-file', 'jnlp'], ['application/x-javascript', 'js'], ['application/x-koan', ['skd', 'skm', 'skp', 'skt']], ['application/x-ksh', 'ksh'], ['application/x-latex', ['latex', 'ltx']], ['application/x-lha', 'lha'], ['application/x-lisp', 'lsp'], ['application/x-livescreen', 'ivy'], ['application/x-lotus', 'wq1'], ['application/x-lotusscreencam', 'scm'], ['application/x-lzh', 'lzh'], ['application/x-lzx', 'lzx'], ['application/x-mac-binhex40', 'hqx'], ['application/x-macbinary', 'bin'], ['application/x-magic-cap-package-1.0', 'mc$'], ['application/x-mathcad', 'mcd'], ['application/x-meme', 'mm'], ['application/x-midi', ['mid', 'midi']], ['application/x-mif', 'mif'], ['application/x-mix-transfer', 'nix'], ['application/x-mobipocket-ebook', 'prc'], ['application/x-mplayer2', 'asx'], ['application/x-ms-application', 'application'], ['application/x-ms-wmd', 'wmd'], ['application/x-ms-wmz', 'wmz'], ['application/x-ms-xbap', 'xbap'], ['application/x-msaccess', 'mdb'], ['application/x-msbinder', 'obd'], ['application/x-mscardfile', 'crd'], ['application/x-msclip', 'clp'], ['application/x-msdownload', ['exe', 'dll']], ['application/x-msexcel', ['xls', 'xla', 'xlw']], ['application/x-msmediaview', ['mvb', 'm13', 'm14']], ['application/x-msmetafile', 'wmf'], ['application/x-msmoney', 'mny'], ['application/x-mspowerpoint', 'ppt'], ['application/x-mspublisher', 'pub'], ['application/x-msschedule', 'scd'], ['application/x-msterminal', 'trm'], ['application/x-mswrite', 'wri'], ['application/x-navi-animation', 'ani'], ['application/x-navidoc', 'nvd'], ['application/x-navimap', 'map'], ['application/x-navistyle', 'stl'], ['application/x-netcdf', ['cdf', 'nc']], ['application/x-newton-compatible-pkg', 'pkg'], ['application/x-nokia-9000-communicator-add-on-software', 'aos'], ['application/x-omc', 'omc'], ['application/x-omcdatamaker', 'omcd'], ['application/x-omcregerator', 'omcr'], ['application/x-pagemaker', ['pm4', 'pm5']], ['application/x-pcl', 'pcl'], ['application/x-perfmon', ['pma', 'pmc', 'pml', 'pmr', 'pmw']], ['application/x-pixclscript', 'plx'], ['application/x-pkcs10', 'p10'], ['application/x-pkcs12', ['p12', 'pfx']], ['application/x-pkcs7-certificates', ['p7b', 'spc']], ['application/x-pkcs7-certreqresp', 'p7r'], ['application/x-pkcs7-mime', ['p7m', 'p7c']], ['application/x-pkcs7-signature', ['p7s', 'p7a']], ['application/x-pointplus', 'css'], ['application/x-portable-anymap', 'pnm'], ['application/x-project', ['mpc', 'mpt', 'mpv', 'mpx']], ['application/x-qpro', 'wb1'], ['application/x-rar-compressed', 'rar'], ['application/x-rtf', 'rtf'], ['application/x-sdp', 'sdp'], ['application/x-sea', 'sea'], ['application/x-seelogo', 'sl'], ['application/x-sh', 'sh'], ['application/x-shar', ['shar', 'sh']], ['application/x-shockwave-flash', 'swf'], ['application/x-silverlight-app', 'xap'], ['application/x-sit', 'sit'], ['application/x-sprite', ['spr', 'sprite']], ['application/x-stuffit', 'sit'], ['application/x-stuffitx', 'sitx'], ['application/x-sv4cpio', 'sv4cpio'], ['application/x-sv4crc', 'sv4crc'], ['application/x-tar', 'tar'], ['application/x-tbook', ['sbk', 'tbk']], ['application/x-tcl', 'tcl'], ['application/x-tex', 'tex'], ['application/x-tex-tfm', 'tfm'], ['application/x-texinfo', ['texi', 'texinfo']], ['application/x-troff', ['roff', 't', 'tr']], ['application/x-troff-man', 'man'], ['application/x-troff-me', 'me'], ['application/x-troff-ms', 'ms'], ['application/x-troff-msvideo', 'avi'], ['application/x-ustar', 'ustar'], ['application/x-visio', ['vsd', 'vst', 'vsw']], ['application/x-vnd.audioexplosion.mzz', 'mzz'], ['application/x-vnd.ls-xpix', 'xpix'], ['application/x-vrml', 'vrml'], ['application/x-wais-source', ['src', 'wsrc']], ['application/x-winhelp', 'hlp'], ['application/x-wintalk', 'wtk'], ['application/x-world', ['wrl', 'svr']], ['application/x-wpwin', 'wpd'], ['application/x-wri', 'wri'], ['application/x-x509-ca-cert', ['cer', 'crt', 'der']], ['application/x-x509-user-cert', 'crt'], ['application/x-xfig', 'fig'], ['application/x-xpinstall', 'xpi'], ['application/x-zip-compressed', 'zip'], ['application/xcap-diff+xml', 'xdf'], ['application/xenc+xml', 'xenc'], ['application/xhtml+xml', 'xhtml'], ['application/xml', 'xml'], ['application/xml-dtd', 'dtd'], ['application/xop+xml', 'xop'], ['application/xslt+xml', 'xslt'], ['application/xspf+xml', 'xspf'], ['application/xv+xml', 'mxml'], ['application/yang', 'yang'], ['application/yin+xml', 'yin'], ['application/ynd.ms-pkipko', 'pko'], ['application/zip', 'zip'], ['audio/adpcm', 'adp'], ['audio/aiff', ['aiff', 'aif', 'aifc']], ['audio/basic', ['snd', 'au']], ['audio/it', 'it'], ['audio/make', ['funk', 'my', 'pfunk']], ['audio/make.my.funk', 'pfunk'], ['audio/mid', ['mid', 'rmi']], ['audio/midi', ['midi', 'kar', 'mid']], ['audio/mod', 'mod'], ['audio/mp4', 'mp4a'], ['audio/mpeg', ['mpga', 'mp3', 'm2a', 'mp2', 'mpa', 'mpg']], ['audio/mpeg3', 'mp3'], ['audio/nspaudio', ['la', 'lma']], ['audio/ogg', 'oga'], ['audio/s3m', 's3m'], ['audio/tsp-audio', 'tsi'], ['audio/tsplayer', 'tsp'], ['audio/vnd.dece.audio', 'uva'], ['audio/vnd.digital-winds', 'eol'], ['audio/vnd.dra', 'dra'], ['audio/vnd.dts', 'dts'], ['audio/vnd.dts.hd', 'dtshd'], ['audio/vnd.lucent.voice', 'lvp'], ['audio/vnd.ms-playready.media.pya', 'pya'], ['audio/vnd.nuera.ecelp4800', 'ecelp4800'], ['audio/vnd.nuera.ecelp7470', 'ecelp7470'], ['audio/vnd.nuera.ecelp9600', 'ecelp9600'], ['audio/vnd.qcelp', 'qcp'], ['audio/vnd.rip', 'rip'], ['audio/voc', 'voc'], ['audio/voxware', 'vox'], ['audio/wav', 'wav'], ['audio/webm', 'weba'], ['audio/x-aac', 'aac'], ['audio/x-adpcm', 'snd'], ['audio/x-aiff', ['aiff', 'aif', 'aifc']], ['audio/x-au', 'au'], ['audio/x-gsm', ['gsd', 'gsm']], ['audio/x-jam', 'jam'], ['audio/x-liveaudio', 'lam'], ['audio/x-mid', ['mid', 'midi']], ['audio/x-midi', ['midi', 'mid']], ['audio/x-mod', 'mod'], ['audio/x-mpeg', 'mp2'], ['audio/x-mpeg-3', 'mp3'], ['audio/x-mpegurl', 'm3u'], ['audio/x-mpequrl', 'm3u'], ['audio/x-ms-wax', 'wax'], ['audio/x-ms-wma', 'wma'], ['audio/x-nspaudio', ['la', 'lma']], ['audio/x-pn-realaudio', ['ra', 'ram', 'rm', 'rmm', 'rmp']], ['audio/x-pn-realaudio-plugin', ['ra', 'rmp', 'rpm']], ['audio/x-psid', 'sid'], ['audio/x-realaudio', 'ra'], ['audio/x-twinvq', 'vqf'], ['audio/x-twinvq-plugin', ['vqe', 'vql']], ['audio/x-vnd.audioexplosion.mjuicemediafile', 'mjf'], ['audio/x-voc', 'voc'], ['audio/x-wav', 'wav'], ['audio/xm', 'xm'], ['chemical/x-cdx', 'cdx'], ['chemical/x-cif', 'cif'], ['chemical/x-cmdf', 'cmdf'], ['chemical/x-cml', 'cml'], ['chemical/x-csml', 'csml'], ['chemical/x-pdb', ['pdb', 'xyz']], ['chemical/x-xyz', 'xyz'], ['drawing/x-dwf', 'dwf'], ['i-world/i-vrml', 'ivr'], ['image/bmp', ['bmp', 'bm']], ['image/cgm', 'cgm'], ['image/cis-cod', 'cod'], ['image/cmu-raster', ['ras', 'rast']], ['image/fif', 'fif'], ['image/florian', ['flo', 'turbot']], ['image/g3fax', 'g3'], ['image/gif', 'gif'], ['image/ief', ['ief', 'iefs']], ['image/jpeg', ['jpeg', 'jpe', 'jpg', 'jfif', 'jfif-tbnl']], ['image/jutvision', 'jut'], ['image/ktx', 'ktx'], ['image/naplps', ['nap', 'naplps']], ['image/pict', ['pic', 'pict']], ['image/pipeg', 'jfif'], ['image/pjpeg', ['jfif', 'jpe', 'jpeg', 'jpg']], ['image/png', ['png', 'x-png']], ['image/prs.btif', 'btif'], ['image/svg+xml', 'svg'], ['image/tiff', ['tif', 'tiff']], ['image/vasa', 'mcf'], ['image/vnd.adobe.photoshop', 'psd'], ['image/vnd.dece.graphic', 'uvi'], ['image/vnd.djvu', 'djvu'], ['image/vnd.dvb.subtitle', 'sub'], ['image/vnd.dwg', ['dwg', 'dxf', 'svf']], ['image/vnd.dxf', 'dxf'], ['image/vnd.fastbidsheet', 'fbs'], ['image/vnd.fpx', 'fpx'], ['image/vnd.fst', 'fst'], ['image/vnd.fujixerox.edmics-mmr', 'mmr'], ['image/vnd.fujixerox.edmics-rlc', 'rlc'], ['image/vnd.ms-modi', 'mdi'], ['image/vnd.net-fpx', ['fpx', 'npx']], ['image/vnd.rn-realflash', 'rf'], ['image/vnd.rn-realpix', 'rp'], ['image/vnd.wap.wbmp', 'wbmp'], ['image/vnd.xiff', 'xif'], ['image/webp', 'webp'], ['image/x-cmu-raster', 'ras'], ['image/x-cmx', 'cmx'], ['image/x-dwg', ['dwg', 'dxf', 'svf']], ['image/x-freehand', 'fh'], ['image/x-icon', 'ico'], ['image/x-jg', 'art'], ['image/x-jps', 'jps'], ['image/x-niff', ['niff', 'nif']], ['image/x-pcx', 'pcx'], ['image/x-pict', ['pct', 'pic']], ['image/x-portable-anymap', 'pnm'], ['image/x-portable-bitmap', 'pbm'], ['image/x-portable-graymap', 'pgm'], ['image/x-portable-greymap', 'pgm'], ['image/x-portable-pixmap', 'ppm'], ['image/x-quicktime', ['qif', 'qti', 'qtif']], ['image/x-rgb', 'rgb'], ['image/x-tiff', ['tif', 'tiff']], ['image/x-windows-bmp', 'bmp'], ['image/x-xbitmap', 'xbm'], ['image/x-xbm', 'xbm'], ['image/x-xpixmap', ['xpm', 'pm']], ['image/x-xwd', 'xwd'], ['image/x-xwindowdump', 'xwd'], ['image/xbm', 'xbm'], ['image/xpm', 'xpm'], ['message/rfc822', ['eml', 'mht', 'mhtml', 'nws', 'mime']], ['model/iges', ['iges', 'igs']], ['model/mesh', 'msh'], ['model/vnd.collada+xml', 'dae'], ['model/vnd.dwf', 'dwf'], ['model/vnd.gdl', 'gdl'], ['model/vnd.gtw', 'gtw'], ['model/vnd.mts', 'mts'], ['model/vnd.vtu', 'vtu'], ['model/vrml', ['vrml', 'wrl', 'wrz']], ['model/x-pov', 'pov'], ['multipart/x-gzip', 'gzip'], ['multipart/x-ustar', 'ustar'], ['multipart/x-zip', 'zip'], ['music/crescendo', ['mid', 'midi']], ['music/x-karaoke', 'kar'], ['paleovu/x-pv', 'pvu'], ['text/asp', 'asp'], ['text/calendar', 'ics'], ['text/css', 'css'], ['text/csv', 'csv'], ['text/ecmascript', 'js'], ['text/h323', '323'], ['text/html', ['html', 'htm', 'stm', 'acgi', 'htmls', 'htx', 'shtml']], ['text/iuls', 'uls'], ['text/javascript', 'js'], ['text/mcf', 'mcf'], ['text/n3', 'n3'], ['text/pascal', 'pas'], ['text/plain', ['txt', 'bas', 'c', 'h', 'c++', 'cc', 'com', 'conf', 'cxx', 'def', 'f', 'f90', 'for', 'g', 'hh', 'idc', 'jav', 'java', 'list', 'log', 'lst', 'm', 'mar', 'pl', 'sdml', 'text']], ['text/plain-bas', 'par'], ['text/prs.lines.tag', 'dsc'], ['text/richtext', ['rtx', 'rt', 'rtf']], ['text/scriplet', 'wsc'], ['text/scriptlet', 'sct'], ['text/sgml', ['sgm', 'sgml']], ['text/tab-separated-values', 'tsv'], ['text/troff', 't'], ['text/turtle', 'ttl'], ['text/uri-list', ['uni', 'unis', 'uri', 'uris']], ['text/vnd.abc', 'abc'], ['text/vnd.curl', 'curl'], ['text/vnd.curl.dcurl', 'dcurl'], ['text/vnd.curl.mcurl', 'mcurl'], ['text/vnd.curl.scurl', 'scurl'], ['text/vnd.fly', 'fly'], ['text/vnd.fmi.flexstor', 'flx'], ['text/vnd.graphviz', 'gv'], ['text/vnd.in3d.3dml', '3dml'], ['text/vnd.in3d.spot', 'spot'], ['text/vnd.rn-realtext', 'rt'], ['text/vnd.sun.j2me.app-descriptor', 'jad'], ['text/vnd.wap.wml', 'wml'], ['text/vnd.wap.wmlscript', 'wmls'], ['text/webviewhtml', 'htt'], ['text/x-asm', ['asm', 's']], ['text/x-audiosoft-intra', 'aip'], ['text/x-c', ['c', 'cc', 'cpp']], ['text/x-component', 'htc'], ['text/x-fortran', ['for', 'f', 'f77', 'f90']], ['text/x-h', ['h', 'hh']], ['text/x-java-source', ['java', 'jav']], ['text/x-java-source,java', 'java'], ['text/x-la-asf', 'lsx'], ['text/x-m', 'm'], ['text/x-pascal', 'p'], ['text/x-script', 'hlb'], ['text/x-script.csh', 'csh'], ['text/x-script.elisp', 'el'], ['text/x-script.guile', 'scm'], ['text/x-script.ksh', 'ksh'], ['text/x-script.lisp', 'lsp'], ['text/x-script.perl', 'pl'], ['text/x-script.perl-module', 'pm'], ['text/x-script.phyton', 'py'], ['text/x-script.rexx', 'rexx'], ['text/x-script.scheme', 'scm'], ['text/x-script.sh', 'sh'], ['text/x-script.tcl', 'tcl'], ['text/x-script.tcsh', 'tcsh'], ['text/x-script.zsh', 'zsh'], ['text/x-server-parsed-html', ['shtml', 'ssi']], ['text/x-setext', 'etx'], ['text/x-sgml', ['sgm', 'sgml']], ['text/x-speech', ['spc', 'talk']], ['text/x-uil', 'uil'], ['text/x-uuencode', ['uu', 'uue']], ['text/x-vcalendar', 'vcs'], ['text/x-vcard', 'vcf'], ['text/xml', 'xml'], ['video/3gpp', '3gp'], ['video/3gpp2', '3g2'], ['video/animaflex', 'afl'], ['video/avi', 'avi'], ['video/avs-video', 'avs'], ['video/dl', 'dl'], ['video/fli', 'fli'], ['video/gl', 'gl'], ['video/h261', 'h261'], ['video/h263', 'h263'], ['video/h264', 'h264'], ['video/jpeg', 'jpgv'], ['video/jpm', 'jpm'], ['video/mj2', 'mj2'], ['video/mp4', 'mp4'], ['video/mpeg', ['mpeg', 'mp2', 'mpa', 'mpe', 'mpg', 'mpv2', 'm1v', 'm2v', 'mp3']], ['video/msvideo', 'avi'], ['video/ogg', 'ogv'], ['video/quicktime', ['mov', 'qt', 'moov']], ['video/vdo', 'vdo'], ['video/vivo', ['viv', 'vivo']], ['video/vnd.dece.hd', 'uvh'], ['video/vnd.dece.mobile', 'uvm'], ['video/vnd.dece.pd', 'uvp'], ['video/vnd.dece.sd', 'uvs'], ['video/vnd.dece.video', 'uvv'], ['video/vnd.fvt', 'fvt'], ['video/vnd.mpegurl', 'mxu'], ['video/vnd.ms-playready.media.pyv', 'pyv'], ['video/vnd.rn-realvideo', 'rv'], ['video/vnd.uvvu.mp4', 'uvu'], ['video/vnd.vivo', ['viv', 'vivo']], ['video/vosaic', 'vos'], ['video/webm', 'webm'], ['video/x-amt-demorun', 'xdr'], ['video/x-amt-showrun', 'xsr'], ['video/x-atomic3d-feature', 'fmf'], ['video/x-dl', 'dl'], ['video/x-dv', ['dif', 'dv']], ['video/x-f4v', 'f4v'], ['video/x-fli', 'fli'], ['video/x-flv', 'flv'], ['video/x-gl', 'gl'], ['video/x-isvideo', 'isu'], ['video/x-la-asf', ['lsf', 'lsx']], ['video/x-m4v', 'm4v'], ['video/x-motion-jpeg', 'mjpg'], ['video/x-mpeg', ['mp3', 'mp2']], ['video/x-mpeq2a', 'mp2'], ['video/x-ms-asf', ['asf', 'asr', 'asx']], ['video/x-ms-asf-plugin', 'asx'], ['video/x-ms-wm', 'wm'], ['video/x-ms-wmv', 'wmv'], ['video/x-ms-wmx', 'wmx'], ['video/x-ms-wvx', 'wvx'], ['video/x-msvideo', 'avi'], ['video/x-qtc', 'qtc'], ['video/x-scm', 'scm'], ['video/x-sgi-movie', ['movie', 'mv']], ['windows/metafile', 'wmf'], ['www/mime', 'mime'], ['x-conference/x-cooltalk', 'ice'], ['x-music/x-midi', ['mid', 'midi']], ['x-world/x-3dmf', ['3dm', '3dmf', 'qd3', 'qd3d']], ['x-world/x-svr', 'svr'], ['x-world/x-vrml', ['flr', 'vrml', 'wrl', 'wrz', 'xaf', 'xof']], ['x-world/x-vrt', 'vrt'], ['xgl/drawing', 'xgz'], ['xgl/movie', 'xmz']]);
const extensions = new Map([['123', 'application/vnd.lotus-1-2-3'], ['323', 'text/h323'], ['*', 'application/octet-stream'], ['3dm', 'x-world/x-3dmf'], ['3dmf', 'x-world/x-3dmf'], ['3dml', 'text/vnd.in3d.3dml'], ['3g2', 'video/3gpp2'], ['3gp', 'video/3gpp'], ['7z', 'application/x-7z-compressed'], ['a', 'application/octet-stream'], ['aab', 'application/x-authorware-bin'], ['aac', 'audio/x-aac'], ['aam', 'application/x-authorware-map'], ['aas', 'application/x-authorware-seg'], ['abc', 'text/vnd.abc'], ['abw', 'application/x-abiword'], ['ac', 'application/pkix-attr-cert'], ['acc', 'application/vnd.americandynamics.acc'], ['ace', 'application/x-ace-compressed'], ['acgi', 'text/html'], ['acu', 'application/vnd.acucobol'], ['acx', 'application/internet-property-stream'], ['adp', 'audio/adpcm'], ['aep', 'application/vnd.audiograph'], ['afl', 'video/animaflex'], ['afp', 'application/vnd.ibm.modcap'], ['ahead', 'application/vnd.ahead.space'], ['ai', 'application/postscript'], ['aif', ['audio/aiff', 'audio/x-aiff']], ['aifc', ['audio/aiff', 'audio/x-aiff']], ['aiff', ['audio/aiff', 'audio/x-aiff']], ['aim', 'application/x-aim'], ['aip', 'text/x-audiosoft-intra'], ['air', 'application/vnd.adobe.air-application-installer-package+zip'], ['ait', 'application/vnd.dvb.ait'], ['ami', 'application/vnd.amiga.ami'], ['ani', 'application/x-navi-animation'], ['aos', 'application/x-nokia-9000-communicator-add-on-software'], ['apk', 'application/vnd.android.package-archive'], ['application', 'application/x-ms-application'], ['apr', 'application/vnd.lotus-approach'], ['aps', 'application/mime'], ['arc', 'application/octet-stream'], ['arj', ['application/arj', 'application/octet-stream']], ['art', 'image/x-jg'], ['asf', 'video/x-ms-asf'], ['asm', 'text/x-asm'], ['aso', 'application/vnd.accpac.simply.aso'], ['asp', 'text/asp'], ['asr', 'video/x-ms-asf'], ['asx', ['video/x-ms-asf', 'application/x-mplayer2', 'video/x-ms-asf-plugin']], ['atc', 'application/vnd.acucorp'], ['atomcat', 'application/atomcat+xml'], ['atomsvc', 'application/atomsvc+xml'], ['atx', 'application/vnd.antix.game-component'], ['au', ['audio/basic', 'audio/x-au']], ['avi', ['video/avi', 'video/msvideo', 'application/x-troff-msvideo', 'video/x-msvideo']], ['avs', 'video/avs-video'], ['aw', 'application/applixware'], ['axs', 'application/olescript'], ['azf', 'application/vnd.airzip.filesecure.azf'], ['azs', 'application/vnd.airzip.filesecure.azs'], ['azw', 'application/vnd.amazon.ebook'], ['bas', 'text/plain'], ['bcpio', 'application/x-bcpio'], ['bdf', 'application/x-font-bdf'], ['bdm', 'application/vnd.syncml.dm+wbxml'], ['bed', 'application/vnd.realvnc.bed'], ['bh2', 'application/vnd.fujitsu.oasysprs'], ['bin', ['application/octet-stream', 'application/mac-binary', 'application/macbinary', 'application/x-macbinary', 'application/x-binary']], ['bm', 'image/bmp'], ['bmi', 'application/vnd.bmi'], ['bmp', ['image/bmp', 'image/x-windows-bmp']], ['boo', 'application/book'], ['book', 'application/book'], ['box', 'application/vnd.previewsystems.box'], ['boz', 'application/x-bzip2'], ['bsh', 'application/x-bsh'], ['btif', 'image/prs.btif'], ['bz', 'application/x-bzip'], ['bz2', 'application/x-bzip2'], ['c', ['text/plain', 'text/x-c']], ['c++', 'text/plain'], ['c11amc', 'application/vnd.cluetrust.cartomobile-config'], ['c11amz', 'application/vnd.cluetrust.cartomobile-config-pkg'], ['c4g', 'application/vnd.clonk.c4group'], ['cab', 'application/vnd.ms-cab-compressed'], ['car', 'application/vnd.curl.car'], ['cat', ['application/vnd.ms-pkiseccat', 'application/vnd.ms-pki.seccat']], ['cc', ['text/plain', 'text/x-c']], ['ccad', 'application/clariscad'], ['cco', 'application/x-cocoa'], ['ccxml', 'application/ccxml+xml,'], ['cdbcmsg', 'application/vnd.contact.cmsg'], ['cdf', ['application/cdf', 'application/x-cdf', 'application/x-netcdf']], ['cdkey', 'application/vnd.mediastation.cdkey'], ['cdmia', 'application/cdmi-capability'], ['cdmic', 'application/cdmi-container'], ['cdmid', 'application/cdmi-domain'], ['cdmio', 'application/cdmi-object'], ['cdmiq', 'application/cdmi-queue'], ['cdx', 'chemical/x-cdx'], ['cdxml', 'application/vnd.chemdraw+xml'], ['cdy', 'application/vnd.cinderella'], ['cer', ['application/pkix-cert', 'application/x-x509-ca-cert']], ['cgm', 'image/cgm'], ['cha', 'application/x-chat'], ['chat', 'application/x-chat'], ['chm', 'application/vnd.ms-htmlhelp'], ['chrt', 'application/vnd.kde.kchart'], ['cif', 'chemical/x-cif'], ['cii', 'application/vnd.anser-web-certificate-issue-initiation'], ['cil', 'application/vnd.ms-artgalry'], ['cla', 'application/vnd.claymore'], ['class', ['application/octet-stream', 'application/java', 'application/java-byte-code', 'application/java-vm', 'application/x-java-class']], ['clkk', 'application/vnd.crick.clicker.keyboard'], ['clkp', 'application/vnd.crick.clicker.palette'], ['clkt', 'application/vnd.crick.clicker.template'], ['clkw', 'application/vnd.crick.clicker.wordbank'], ['clkx', 'application/vnd.crick.clicker'], ['clp', 'application/x-msclip'], ['cmc', 'application/vnd.cosmocaller'], ['cmdf', 'chemical/x-cmdf'], ['cml', 'chemical/x-cml'], ['cmp', 'application/vnd.yellowriver-custom-menu'], ['cmx', 'image/x-cmx'], ['cod', ['image/cis-cod', 'application/vnd.rim.cod']], ['com', ['application/octet-stream', 'text/plain']], ['conf', 'text/plain'], ['cpio', 'application/x-cpio'], ['cpp', 'text/x-c'], ['cpt', ['application/mac-compactpro', 'application/x-compactpro', 'application/x-cpt']], ['crd', 'application/x-mscardfile'], ['crl', ['application/pkix-crl', 'application/pkcs-crl']], ['crt', ['application/pkix-cert', 'application/x-x509-user-cert', 'application/x-x509-ca-cert']], ['cryptonote', 'application/vnd.rig.cryptonote'], ['csh', ['text/x-script.csh', 'application/x-csh']], ['csml', 'chemical/x-csml'], ['csp', 'application/vnd.commonspace'], ['css', ['text/css', 'application/x-pointplus']], ['csv', 'text/csv'], ['cu', 'application/cu-seeme'], ['curl', 'text/vnd.curl'], ['cww', 'application/prs.cww'], ['cxx', 'text/plain'], ['dae', 'model/vnd.collada+xml'], ['daf', 'application/vnd.mobius.daf'], ['davmount', 'application/davmount+xml'], ['dcr', 'application/x-director'], ['dcurl', 'text/vnd.curl.dcurl'], ['dd2', 'application/vnd.oma.dd2+xml'], ['ddd', 'application/vnd.fujixerox.ddd'], ['deb', 'application/x-debian-package'], ['deepv', 'application/x-deepv'], ['def', 'text/plain'], ['der', 'application/x-x509-ca-cert'], ['dfac', 'application/vnd.dreamfactory'], ['dif', 'video/x-dv'], ['dir', 'application/x-director'], ['dis', 'application/vnd.mobius.dis'], ['djvu', 'image/vnd.djvu'], ['dl', ['video/dl', 'video/x-dl']], ['dll', 'application/x-msdownload'], ['dms', 'application/octet-stream'], ['dna', 'application/vnd.dna'], ['doc', 'application/msword'], ['docm', 'application/vnd.ms-word.document.macroenabled.12'], ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'], ['dot', 'application/msword'], ['dotm', 'application/vnd.ms-word.template.macroenabled.12'], ['dotx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template'], ['dp', ['application/commonground', 'application/vnd.osgi.dp']], ['dpg', 'application/vnd.dpgraph'], ['dra', 'audio/vnd.dra'], ['drw', 'application/drafting'], ['dsc', 'text/prs.lines.tag'], ['dssc', 'application/dssc+der'], ['dtb', 'application/x-dtbook+xml'], ['dtd', 'application/xml-dtd'], ['dts', 'audio/vnd.dts'], ['dtshd', 'audio/vnd.dts.hd'], ['dump', 'application/octet-stream'], ['dv', 'video/x-dv'], ['dvi', 'application/x-dvi'], ['dwf', ['model/vnd.dwf', 'drawing/x-dwf']], ['dwg', ['application/acad', 'image/vnd.dwg', 'image/x-dwg']], ['dxf', ['application/dxf', 'image/vnd.dwg', 'image/vnd.dxf', 'image/x-dwg']], ['dxp', 'application/vnd.spotfire.dxp'], ['dxr', 'application/x-director'], ['ecelp4800', 'audio/vnd.nuera.ecelp4800'], ['ecelp7470', 'audio/vnd.nuera.ecelp7470'], ['ecelp9600', 'audio/vnd.nuera.ecelp9600'], ['edm', 'application/vnd.novadigm.edm'], ['edx', 'application/vnd.novadigm.edx'], ['efif', 'application/vnd.picsel'], ['ei6', 'application/vnd.pg.osasli'], ['el', 'text/x-script.elisp'], ['elc', ['application/x-elc', 'application/x-bytecode.elisp']], ['eml', 'message/rfc822'], ['emma', 'application/emma+xml'], ['env', 'application/x-envoy'], ['eol', 'audio/vnd.digital-winds'], ['eot', 'application/vnd.ms-fontobject'], ['eps', 'application/postscript'], ['epub', 'application/epub+zip'], ['es', ['application/ecmascript', 'application/x-esrehber']], ['es3', 'application/vnd.eszigno3+xml'], ['esf', 'application/vnd.epson.esf'], ['etx', 'text/x-setext'], ['evy', ['application/envoy', 'application/x-envoy']], ['exe', ['application/octet-stream', 'application/x-msdownload']], ['exi', 'application/exi'], ['ext', 'application/vnd.novadigm.ext'], ['ez2', 'application/vnd.ezpix-album'], ['ez3', 'application/vnd.ezpix-package'], ['f', ['text/plain', 'text/x-fortran']], ['f4v', 'video/x-f4v'], ['f77', 'text/x-fortran'], ['f90', ['text/plain', 'text/x-fortran']], ['fbs', 'image/vnd.fastbidsheet'], ['fcs', 'application/vnd.isac.fcs'], ['fdf', 'application/vnd.fdf'], ['fe_launch', 'application/vnd.denovo.fcselayout-link'], ['fg5', 'application/vnd.fujitsu.oasysgp'], ['fh', 'image/x-freehand'], ['fif', ['application/fractals', 'image/fif']], ['fig', 'application/x-xfig'], ['fli', ['video/fli', 'video/x-fli']], ['flo', ['image/florian', 'application/vnd.micrografx.flo']], ['flr', 'x-world/x-vrml'], ['flv', 'video/x-flv'], ['flw', 'application/vnd.kde.kivio'], ['flx', 'text/vnd.fmi.flexstor'], ['fly', 'text/vnd.fly'], ['fm', 'application/vnd.framemaker'], ['fmf', 'video/x-atomic3d-feature'], ['fnc', 'application/vnd.frogans.fnc'], ['for', ['text/plain', 'text/x-fortran']], ['fpx', ['image/vnd.fpx', 'image/vnd.net-fpx']], ['frl', 'application/freeloader'], ['fsc', 'application/vnd.fsc.weblaunch'], ['fst', 'image/vnd.fst'], ['ftc', 'application/vnd.fluxtime.clip'], ['fti', 'application/vnd.anser-web-funds-transfer-initiation'], ['funk', 'audio/make'], ['fvt', 'video/vnd.fvt'], ['fxp', 'application/vnd.adobe.fxp'], ['fzs', 'application/vnd.fuzzysheet'], ['g', 'text/plain'], ['g2w', 'application/vnd.geoplan'], ['g3', 'image/g3fax'], ['g3w', 'application/vnd.geospace'], ['gac', 'application/vnd.groove-account'], ['gdl', 'model/vnd.gdl'], ['geo', 'application/vnd.dynageo'], ['gex', 'application/vnd.geometry-explorer'], ['ggb', 'application/vnd.geogebra.file'], ['ggt', 'application/vnd.geogebra.tool'], ['ghf', 'application/vnd.groove-help'], ['gif', 'image/gif'], ['gim', 'application/vnd.groove-identity-message'], ['gl', ['video/gl', 'video/x-gl']], ['gmx', 'application/vnd.gmx'], ['gnumeric', 'application/x-gnumeric'], ['gph', 'application/vnd.flographit'], ['gqf', 'application/vnd.grafeq'], ['gram', 'application/srgs'], ['grv', 'application/vnd.groove-injector'], ['grxml', 'application/srgs+xml'], ['gsd', 'audio/x-gsm'], ['gsf', 'application/x-font-ghostscript'], ['gsm', 'audio/x-gsm'], ['gsp', 'application/x-gsp'], ['gss', 'application/x-gss'], ['gtar', 'application/x-gtar'], ['gtm', 'application/vnd.groove-tool-message'], ['gtw', 'model/vnd.gtw'], ['gv', 'text/vnd.graphviz'], ['gxt', 'application/vnd.geonext'], ['gz', ['application/x-gzip', 'application/x-compressed']], ['gzip', ['multipart/x-gzip', 'application/x-gzip']], ['h', ['text/plain', 'text/x-h']], ['h261', 'video/h261'], ['h263', 'video/h263'], ['h264', 'video/h264'], ['hal', 'application/vnd.hal+xml'], ['hbci', 'application/vnd.hbci'], ['hdf', 'application/x-hdf'], ['help', 'application/x-helpfile'], ['hgl', 'application/vnd.hp-hpgl'], ['hh', ['text/plain', 'text/x-h']], ['hlb', 'text/x-script'], ['hlp', ['application/winhlp', 'application/hlp', 'application/x-helpfile', 'application/x-winhelp']], ['hpg', 'application/vnd.hp-hpgl'], ['hpgl', 'application/vnd.hp-hpgl'], ['hpid', 'application/vnd.hp-hpid'], ['hps', 'application/vnd.hp-hps'], ['hqx', ['application/mac-binhex40', 'application/binhex', 'application/binhex4', 'application/mac-binhex', 'application/x-binhex40', 'application/x-mac-binhex40']], ['hta', 'application/hta'], ['htc', 'text/x-component'], ['htke', 'application/vnd.kenameaapp'], ['htm', 'text/html'], ['html', 'text/html'], ['htmls', 'text/html'], ['htt', 'text/webviewhtml'], ['htx', 'text/html'], ['hvd', 'application/vnd.yamaha.hv-dic'], ['hvp', 'application/vnd.yamaha.hv-voice'], ['hvs', 'application/vnd.yamaha.hv-script'], ['i2g', 'application/vnd.intergeo'], ['icc', 'application/vnd.iccprofile'], ['ice', 'x-conference/x-cooltalk'], ['ico', 'image/x-icon'], ['ics', 'text/calendar'], ['idc', 'text/plain'], ['ief', 'image/ief'], ['iefs', 'image/ief'], ['ifm', 'application/vnd.shana.informed.formdata'], ['iges', ['application/iges', 'model/iges']], ['igl', 'application/vnd.igloader'], ['igm', 'application/vnd.insors.igm'], ['igs', ['application/iges', 'model/iges']], ['igx', 'application/vnd.micrografx.igx'], ['iif', 'application/vnd.shana.informed.interchange'], ['iii', 'application/x-iphone'], ['ima', 'application/x-ima'], ['imap', 'application/x-httpd-imap'], ['imp', 'application/vnd.accpac.simply.imp'], ['ims', 'application/vnd.ms-ims'], ['inf', 'application/inf'], ['ins', ['application/x-internet-signup', 'application/x-internett-signup']], ['ip', 'application/x-ip2'], ['ipfix', 'application/ipfix'], ['ipk', 'application/vnd.shana.informed.package'], ['irm', 'application/vnd.ibm.rights-management'], ['irp', 'application/vnd.irepository.package+xml'], ['isp', 'application/x-internet-signup'], ['isu', 'video/x-isvideo'], ['it', 'audio/it'], ['itp', 'application/vnd.shana.informed.formtemplate'], ['iv', 'application/x-inventor'], ['ivp', 'application/vnd.immervision-ivp'], ['ivr', 'i-world/i-vrml'], ['ivu', 'application/vnd.immervision-ivu'], ['ivy', 'application/x-livescreen'], ['jad', 'text/vnd.sun.j2me.app-descriptor'], ['jam', ['application/vnd.jam', 'audio/x-jam']], ['jar', 'application/java-archive'], ['jav', ['text/plain', 'text/x-java-source']], ['java', ['text/plain', 'text/x-java-source,java', 'text/x-java-source']], ['jcm', 'application/x-java-commerce'], ['jfif', ['image/pipeg', 'image/jpeg', 'image/pjpeg']], ['jfif-tbnl', 'image/jpeg'], ['jisp', 'application/vnd.jisp'], ['jlt', 'application/vnd.hp-jlyt'], ['jnlp', 'application/x-java-jnlp-file'], ['joda', 'application/vnd.joost.joda-archive'], ['jpe', ['image/jpeg', 'image/pjpeg']], ['jpeg', ['image/jpeg', 'image/pjpeg']], ['jpg', ['image/jpeg', 'image/pjpeg']], ['jpgv', 'video/jpeg'], ['jpm', 'video/jpm'], ['jps', 'image/x-jps'], ['js', ['application/javascript', 'application/ecmascript', 'text/javascript', 'text/ecmascript', 'application/x-javascript']], ['json', 'application/json'], ['jut', 'image/jutvision'], ['kar', ['audio/midi', 'music/x-karaoke']], ['karbon', 'application/vnd.kde.karbon'], ['kfo', 'application/vnd.kde.kformula'], ['kia', 'application/vnd.kidspiration'], ['kml', 'application/vnd.google-earth.kml+xml'], ['kmz', 'application/vnd.google-earth.kmz'], ['kne', 'application/vnd.kinar'], ['kon', 'application/vnd.kde.kontour'], ['kpr', 'application/vnd.kde.kpresenter'], ['ksh', ['application/x-ksh', 'text/x-script.ksh']], ['ksp', 'application/vnd.kde.kspread'], ['ktx', 'image/ktx'], ['ktz', 'application/vnd.kahootz'], ['kwd', 'application/vnd.kde.kword'], ['la', ['audio/nspaudio', 'audio/x-nspaudio']], ['lam', 'audio/x-liveaudio'], ['lasxml', 'application/vnd.las.las+xml'], ['latex', 'application/x-latex'], ['lbd', 'application/vnd.llamagraphics.life-balance.desktop'], ['lbe', 'application/vnd.llamagraphics.life-balance.exchange+xml'], ['les', 'application/vnd.hhe.lesson-player'], ['lha', ['application/octet-stream', 'application/lha', 'application/x-lha']], ['lhx', 'application/octet-stream'], ['link66', 'application/vnd.route66.link66+xml'], ['list', 'text/plain'], ['lma', ['audio/nspaudio', 'audio/x-nspaudio']], ['log', 'text/plain'], ['lrm', 'application/vnd.ms-lrm'], ['lsf', 'video/x-la-asf'], ['lsp', ['application/x-lisp', 'text/x-script.lisp']], ['lst', 'text/plain'], ['lsx', ['video/x-la-asf', 'text/x-la-asf']], ['ltf', 'application/vnd.frogans.ltf'], ['ltx', 'application/x-latex'], ['lvp', 'audio/vnd.lucent.voice'], ['lwp', 'application/vnd.lotus-wordpro'], ['lzh', ['application/octet-stream', 'application/x-lzh']], ['lzx', ['application/lzx', 'application/octet-stream', 'application/x-lzx']], ['m', ['text/plain', 'text/x-m']], ['m13', 'application/x-msmediaview'], ['m14', 'application/x-msmediaview'], ['m1v', 'video/mpeg'], ['m21', 'application/mp21'], ['m2a', 'audio/mpeg'], ['m2v', 'video/mpeg'], ['m3u', ['audio/x-mpegurl', 'audio/x-mpequrl']], ['m3u8', 'application/vnd.apple.mpegurl'], ['m4v', 'video/x-m4v'], ['ma', 'application/mathematica'], ['mads', 'application/mads+xml'], ['mag', 'application/vnd.ecowin.chart'], ['man', 'application/x-troff-man'], ['map', 'application/x-navimap'], ['mar', 'text/plain'], ['mathml', 'application/mathml+xml'], ['mbd', 'application/mbedlet'], ['mbk', 'application/vnd.mobius.mbk'], ['mbox', 'application/mbox'], ['mc$', 'application/x-magic-cap-package-1.0'], ['mc1', 'application/vnd.medcalcdata'], ['mcd', ['application/mcad', 'application/vnd.mcd', 'application/x-mathcad']], ['mcf', ['image/vasa', 'text/mcf']], ['mcp', 'application/netmc'], ['mcurl', 'text/vnd.curl.mcurl'], ['mdb', 'application/x-msaccess'], ['mdi', 'image/vnd.ms-modi'], ['me', 'application/x-troff-me'], ['meta4', 'application/metalink4+xml'], ['mets', 'application/mets+xml'], ['mfm', 'application/vnd.mfmp'], ['mgp', 'application/vnd.osgeo.mapguide.package'], ['mgz', 'application/vnd.proteus.magazine'], ['mht', 'message/rfc822'], ['mhtml', 'message/rfc822'], ['mid', ['audio/mid', 'audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']], ['midi', ['audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']], ['mif', ['application/vnd.mif', 'application/x-mif', 'application/x-frame']], ['mime', ['message/rfc822', 'www/mime']], ['mj2', 'video/mj2'], ['mjf', 'audio/x-vnd.audioexplosion.mjuicemediafile'], ['mjpg', 'video/x-motion-jpeg'], ['mlp', 'application/vnd.dolby.mlp'], ['mm', ['application/base64', 'application/x-meme']], ['mmd', 'application/vnd.chipnuts.karaoke-mmd'], ['mme', 'application/base64'], ['mmf', 'application/vnd.smaf'], ['mmr', 'image/vnd.fujixerox.edmics-mmr'], ['mny', 'application/x-msmoney'], ['mod', ['audio/mod', 'audio/x-mod']], ['mods', 'application/mods+xml'], ['moov', 'video/quicktime'], ['mov', 'video/quicktime'], ['movie', 'video/x-sgi-movie'], ['mp2', ['video/mpeg', 'audio/mpeg', 'video/x-mpeg', 'audio/x-mpeg', 'video/x-mpeq2a']], ['mp3', ['audio/mpeg', 'audio/mpeg3', 'video/mpeg', 'audio/x-mpeg-3', 'video/x-mpeg']], ['mp4', ['video/mp4', 'application/mp4']], ['mp4a', 'audio/mp4'], ['mpa', ['video/mpeg', 'audio/mpeg']], ['mpc', ['application/vnd.mophun.certificate', 'application/x-project']], ['mpe', 'video/mpeg'], ['mpeg', 'video/mpeg'], ['mpg', ['video/mpeg', 'audio/mpeg']], ['mpga', 'audio/mpeg'], ['mpkg', 'application/vnd.apple.installer+xml'], ['mpm', 'application/vnd.blueice.multipass'], ['mpn', 'application/vnd.mophun.application'], ['mpp', 'application/vnd.ms-project'], ['mpt', 'application/x-project'], ['mpv', 'application/x-project'], ['mpv2', 'video/mpeg'], ['mpx', 'application/x-project'], ['mpy', 'application/vnd.ibm.minipay'], ['mqy', 'application/vnd.mobius.mqy'], ['mrc', 'application/marc'], ['mrcx', 'application/marcxml+xml'], ['ms', 'application/x-troff-ms'], ['mscml', 'application/mediaservercontrol+xml'], ['mseq', 'application/vnd.mseq'], ['msf', 'application/vnd.epson.msf'], ['msg', 'application/vnd.ms-outlook'], ['msh', 'model/mesh'], ['msl', 'application/vnd.mobius.msl'], ['msty', 'application/vnd.muvee.style'], ['mts', 'model/vnd.mts'], ['mus', 'application/vnd.musician'], ['musicxml', 'application/vnd.recordare.musicxml+xml'], ['mv', 'video/x-sgi-movie'], ['mvb', 'application/x-msmediaview'], ['mwf', 'application/vnd.mfer'], ['mxf', 'application/mxf'], ['mxl', 'application/vnd.recordare.musicxml'], ['mxml', 'application/xv+xml'], ['mxs', 'application/vnd.triscape.mxs'], ['mxu', 'video/vnd.mpegurl'], ['my', 'audio/make'], ['mzz', 'application/x-vnd.audioexplosion.mzz'], ['n-gage', 'application/vnd.nokia.n-gage.symbian.install'], ['n3', 'text/n3'], ['nap', 'image/naplps'], ['naplps', 'image/naplps'], ['nbp', 'application/vnd.wolfram.player'], ['nc', 'application/x-netcdf'], ['ncm', 'application/vnd.nokia.configuration-message'], ['ncx', 'application/x-dtbncx+xml'], ['ngdat', 'application/vnd.nokia.n-gage.data'], ['nif', 'image/x-niff'], ['niff', 'image/x-niff'], ['nix', 'application/x-mix-transfer'], ['nlu', 'application/vnd.neurolanguage.nlu'], ['nml', 'application/vnd.enliven'], ['nnd', 'application/vnd.noblenet-directory'], ['nns', 'application/vnd.noblenet-sealer'], ['nnw', 'application/vnd.noblenet-web'], ['npx', 'image/vnd.net-fpx'], ['nsc', 'application/x-conference'], ['nsf', 'application/vnd.lotus-notes'], ['nvd', 'application/x-navidoc'], ['nws', 'message/rfc822'], ['o', 'application/octet-stream'], ['oa2', 'application/vnd.fujitsu.oasys2'], ['oa3', 'application/vnd.fujitsu.oasys3'], ['oas', 'application/vnd.fujitsu.oasys'], ['obd', 'application/x-msbinder'], ['oda', 'application/oda'], ['odb', 'application/vnd.oasis.opendocument.database'], ['odc', 'application/vnd.oasis.opendocument.chart'], ['odf', 'application/vnd.oasis.opendocument.formula'], ['odft', 'application/vnd.oasis.opendocument.formula-template'], ['odg', 'application/vnd.oasis.opendocument.graphics'], ['odi', 'application/vnd.oasis.opendocument.image'], ['odm', 'application/vnd.oasis.opendocument.text-master'], ['odp', 'application/vnd.oasis.opendocument.presentation'], ['ods', 'application/vnd.oasis.opendocument.spreadsheet'], ['odt', 'application/vnd.oasis.opendocument.text'], ['oga', 'audio/ogg'], ['ogv', 'video/ogg'], ['ogx', 'application/ogg'], ['omc', 'application/x-omc'], ['omcd', 'application/x-omcdatamaker'], ['omcr', 'application/x-omcregerator'], ['onetoc', 'application/onenote'], ['opf', 'application/oebps-package+xml'], ['org', 'application/vnd.lotus-organizer'], ['osf', 'application/vnd.yamaha.openscoreformat'], ['osfpvg', 'application/vnd.yamaha.openscoreformat.osfpvg+xml'], ['otc', 'application/vnd.oasis.opendocument.chart-template'], ['otf', 'application/x-font-otf'], ['otg', 'application/vnd.oasis.opendocument.graphics-template'], ['oth', 'application/vnd.oasis.opendocument.text-web'], ['oti', 'application/vnd.oasis.opendocument.image-template'], ['otp', 'application/vnd.oasis.opendocument.presentation-template'], ['ots', 'application/vnd.oasis.opendocument.spreadsheet-template'], ['ott', 'application/vnd.oasis.opendocument.text-template'], ['oxt', 'application/vnd.openofficeorg.extension'], ['p', 'text/x-pascal'], ['p10', ['application/pkcs10', 'application/x-pkcs10']], ['p12', ['application/pkcs-12', 'application/x-pkcs12']], ['p7a', 'application/x-pkcs7-signature'], ['p7b', 'application/x-pkcs7-certificates'], ['p7c', ['application/pkcs7-mime', 'application/x-pkcs7-mime']], ['p7m', ['application/pkcs7-mime', 'application/x-pkcs7-mime']], ['p7r', 'application/x-pkcs7-certreqresp'], ['p7s', ['application/pkcs7-signature', 'application/x-pkcs7-signature']], ['p8', 'application/pkcs8'], ['par', 'text/plain-bas'], ['part', 'application/pro_eng'], ['pas', 'text/pascal'], ['paw', 'application/vnd.pawaafile'], ['pbd', 'application/vnd.powerbuilder6'], ['pbm', 'image/x-portable-bitmap'], ['pcf', 'application/x-font-pcf'], ['pcl', ['application/vnd.hp-pcl', 'application/x-pcl']], ['pclxl', 'application/vnd.hp-pclxl'], ['pct', 'image/x-pict'], ['pcurl', 'application/vnd.curl.pcurl'], ['pcx', 'image/x-pcx'], ['pdb', ['application/vnd.palm', 'chemical/x-pdb']], ['pdf', 'application/pdf'], ['pfa', 'application/x-font-type1'], ['pfr', 'application/font-tdpfr'], ['pfunk', ['audio/make', 'audio/make.my.funk']], ['pfx', 'application/x-pkcs12'], ['pgm', ['image/x-portable-graymap', 'image/x-portable-greymap']], ['pgn', 'application/x-chess-pgn'], ['pgp', 'application/pgp-signature'], ['pic', ['image/pict', 'image/x-pict']], ['pict', 'image/pict'], ['pkg', 'application/x-newton-compatible-pkg'], ['pki', 'application/pkixcmp'], ['pkipath', 'application/pkix-pkipath'], ['pko', ['application/ynd.ms-pkipko', 'application/vnd.ms-pki.pko']], ['pl', ['text/plain', 'text/x-script.perl']], ['plb', 'application/vnd.3gpp.pic-bw-large'], ['plc', 'application/vnd.mobius.plc'], ['plf', 'application/vnd.pocketlearn'], ['pls', 'application/pls+xml'], ['plx', 'application/x-pixclscript'], ['pm', ['text/x-script.perl-module', 'image/x-xpixmap']], ['pm4', 'application/x-pagemaker'], ['pm5', 'application/x-pagemaker'], ['pma', 'application/x-perfmon'], ['pmc', 'application/x-perfmon'], ['pml', ['application/vnd.ctc-posml', 'application/x-perfmon']], ['pmr', 'application/x-perfmon'], ['pmw', 'application/x-perfmon'], ['png', 'image/png'], ['pnm', ['application/x-portable-anymap', 'image/x-portable-anymap']], ['portpkg', 'application/vnd.macports.portpkg'], ['pot', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']], ['potm', 'application/vnd.ms-powerpoint.template.macroenabled.12'], ['potx', 'application/vnd.openxmlformats-officedocument.presentationml.template'], ['pov', 'model/x-pov'], ['ppa', 'application/vnd.ms-powerpoint'], ['ppam', 'application/vnd.ms-powerpoint.addin.macroenabled.12'], ['ppd', 'application/vnd.cups-ppd'], ['ppm', 'image/x-portable-pixmap'], ['pps', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']], ['ppsm', 'application/vnd.ms-powerpoint.slideshow.macroenabled.12'], ['ppsx', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow'], ['ppt', ['application/vnd.ms-powerpoint', 'application/mspowerpoint', 'application/powerpoint', 'application/x-mspowerpoint']], ['pptm', 'application/vnd.ms-powerpoint.presentation.macroenabled.12'], ['pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'], ['ppz', 'application/mspowerpoint'], ['prc', 'application/x-mobipocket-ebook'], ['pre', ['application/vnd.lotus-freelance', 'application/x-freelance']], ['prf', 'application/pics-rules'], ['prt', 'application/pro_eng'], ['ps', 'application/postscript'], ['psb', 'application/vnd.3gpp.pic-bw-small'], ['psd', ['application/octet-stream', 'image/vnd.adobe.photoshop']], ['psf', 'application/x-font-linux-psf'], ['pskcxml', 'application/pskc+xml'], ['ptid', 'application/vnd.pvi.ptid1'], ['pub', 'application/x-mspublisher'], ['pvb', 'application/vnd.3gpp.pic-bw-var'], ['pvu', 'paleovu/x-pv'], ['pwn', 'application/vnd.3m.post-it-notes'], ['pwz', 'application/vnd.ms-powerpoint'], ['py', 'text/x-script.phyton'], ['pya', 'audio/vnd.ms-playready.media.pya'], ['pyc', 'applicaiton/x-bytecode.python'], ['pyv', 'video/vnd.ms-playready.media.pyv'], ['qam', 'application/vnd.epson.quickanime'], ['qbo', 'application/vnd.intu.qbo'], ['qcp', 'audio/vnd.qcelp'], ['qd3', 'x-world/x-3dmf'], ['qd3d', 'x-world/x-3dmf'], ['qfx', 'application/vnd.intu.qfx'], ['qif', 'image/x-quicktime'], ['qps', 'application/vnd.publishare-delta-tree'], ['qt', 'video/quicktime'], ['qtc', 'video/x-qtc'], ['qti', 'image/x-quicktime'], ['qtif', 'image/x-quicktime'], ['qxd', 'application/vnd.quark.quarkxpress'], ['ra', ['audio/x-realaudio', 'audio/x-pn-realaudio', 'audio/x-pn-realaudio-plugin']], ['ram', 'audio/x-pn-realaudio'], ['rar', 'application/x-rar-compressed'], ['ras', ['image/cmu-raster', 'application/x-cmu-raster', 'image/x-cmu-raster']], ['rast', 'image/cmu-raster'], ['rcprofile', 'application/vnd.ipunplugged.rcprofile'], ['rdf', 'application/rdf+xml'], ['rdz', 'application/vnd.data-vision.rdz'], ['rep', 'application/vnd.businessobjects'], ['res', 'application/x-dtbresource+xml'], ['rexx', 'text/x-script.rexx'], ['rf', 'image/vnd.rn-realflash'], ['rgb', 'image/x-rgb'], ['rif', 'application/reginfo+xml'], ['rip', 'audio/vnd.rip'], ['rl', 'application/resource-lists+xml'], ['rlc', 'image/vnd.fujixerox.edmics-rlc'], ['rld', 'application/resource-lists-diff+xml'], ['rm', ['application/vnd.rn-realmedia', 'audio/x-pn-realaudio']], ['rmi', 'audio/mid'], ['rmm', 'audio/x-pn-realaudio'], ['rmp', ['audio/x-pn-realaudio-plugin', 'audio/x-pn-realaudio']], ['rms', 'application/vnd.jcp.javame.midlet-rms'], ['rnc', 'application/relax-ng-compact-syntax'], ['rng', ['application/ringing-tones', 'application/vnd.nokia.ringing-tone']], ['rnx', 'application/vnd.rn-realplayer'], ['roff', 'application/x-troff'], ['rp', 'image/vnd.rn-realpix'], ['rp9', 'application/vnd.cloanto.rp9'], ['rpm', 'audio/x-pn-realaudio-plugin'], ['rpss', 'application/vnd.nokia.radio-presets'], ['rpst', 'application/vnd.nokia.radio-preset'], ['rq', 'application/sparql-query'], ['rs', 'application/rls-services+xml'], ['rsd', 'application/rsd+xml'], ['rt', ['text/richtext', 'text/vnd.rn-realtext']], ['rtf', ['application/rtf', 'text/richtext', 'application/x-rtf']], ['rtx', ['text/richtext', 'application/rtf']], ['rv', 'video/vnd.rn-realvideo'], ['s', 'text/x-asm'], ['s3m', 'audio/s3m'], ['saf', 'application/vnd.yamaha.smaf-audio'], ['saveme', 'application/octet-stream'], ['sbk', 'application/x-tbook'], ['sbml', 'application/sbml+xml'], ['sc', 'application/vnd.ibm.secure-container'], ['scd', 'application/x-msschedule'], ['scm', ['application/vnd.lotus-screencam', 'video/x-scm', 'text/x-script.guile', 'application/x-lotusscreencam', 'text/x-script.scheme']], ['scq', 'application/scvp-cv-request'], ['scs', 'application/scvp-cv-response'], ['sct', 'text/scriptlet'], ['scurl', 'text/vnd.curl.scurl'], ['sda', 'application/vnd.stardivision.draw'], ['sdc', 'application/vnd.stardivision.calc'], ['sdd', 'application/vnd.stardivision.impress'], ['sdkm', 'application/vnd.solent.sdkm+xml'], ['sdml', 'text/plain'], ['sdp', ['application/sdp', 'application/x-sdp']], ['sdr', 'application/sounder'], ['sdw', 'application/vnd.stardivision.writer'], ['sea', ['application/sea', 'application/x-sea']], ['see', 'application/vnd.seemail'], ['seed', 'application/vnd.fdsn.seed'], ['sema', 'application/vnd.sema'], ['semd', 'application/vnd.semd'], ['semf', 'application/vnd.semf'], ['ser', 'application/java-serialized-object'], ['set', 'application/set'], ['setpay', 'application/set-payment-initiation'], ['setreg', 'application/set-registration-initiation'], ['sfd-hdstx', 'application/vnd.hydrostatix.sof-data'], ['sfs', 'application/vnd.spotfire.sfs'], ['sgl', 'application/vnd.stardivision.writer-global'], ['sgm', ['text/sgml', 'text/x-sgml']], ['sgml', ['text/sgml', 'text/x-sgml']], ['sh', ['application/x-shar', 'application/x-bsh', 'application/x-sh', 'text/x-script.sh']], ['shar', ['application/x-bsh', 'application/x-shar']], ['shf', 'application/shf+xml'], ['shtml', ['text/html', 'text/x-server-parsed-html']], ['sid', 'audio/x-psid'], ['sis', 'application/vnd.symbian.install'], ['sit', ['application/x-stuffit', 'application/x-sit']], ['sitx', 'application/x-stuffitx'], ['skd', 'application/x-koan'], ['skm', 'application/x-koan'], ['skp', ['application/vnd.koan', 'application/x-koan']], ['skt', 'application/x-koan'], ['sl', 'application/x-seelogo'], ['sldm', 'application/vnd.ms-powerpoint.slide.macroenabled.12'], ['sldx', 'application/vnd.openxmlformats-officedocument.presentationml.slide'], ['slt', 'application/vnd.epson.salt'], ['sm', 'application/vnd.stepmania.stepchart'], ['smf', 'application/vnd.stardivision.math'], ['smi', ['application/smil', 'application/smil+xml']], ['smil', 'application/smil'], ['snd', ['audio/basic', 'audio/x-adpcm']], ['snf', 'application/x-font-snf'], ['sol', 'application/solids'], ['spc', ['text/x-speech', 'application/x-pkcs7-certificates']], ['spf', 'application/vnd.yamaha.smaf-phrase'], ['spl', ['application/futuresplash', 'application/x-futuresplash']], ['spot', 'text/vnd.in3d.spot'], ['spp', 'application/scvp-vp-response'], ['spq', 'application/scvp-vp-request'], ['spr', 'application/x-sprite'], ['sprite', 'application/x-sprite'], ['src', 'application/x-wais-source'], ['sru', 'application/sru+xml'], ['srx', 'application/sparql-results+xml'], ['sse', 'application/vnd.kodak-descriptor'], ['ssf', 'application/vnd.epson.ssf'], ['ssi', 'text/x-server-parsed-html'], ['ssm', 'application/streamingmedia'], ['ssml', 'application/ssml+xml'], ['sst', ['application/vnd.ms-pkicertstore', 'application/vnd.ms-pki.certstore']], ['st', 'application/vnd.sailingtracker.track'], ['stc', 'application/vnd.sun.xml.calc.template'], ['std', 'application/vnd.sun.xml.draw.template'], ['step', 'application/step'], ['stf', 'application/vnd.wt.stf'], ['sti', 'application/vnd.sun.xml.impress.template'], ['stk', 'application/hyperstudio'], ['stl', ['application/vnd.ms-pkistl', 'application/sla', 'application/vnd.ms-pki.stl', 'application/x-navistyle']], ['stm', 'text/html'], ['stp', 'application/step'], ['str', 'application/vnd.pg.format'], ['stw', 'application/vnd.sun.xml.writer.template'], ['sub', 'image/vnd.dvb.subtitle'], ['sus', 'application/vnd.sus-calendar'], ['sv4cpio', 'application/x-sv4cpio'], ['sv4crc', 'application/x-sv4crc'], ['svc', 'application/vnd.dvb.service'], ['svd', 'application/vnd.svd'], ['svf', ['image/vnd.dwg', 'image/x-dwg']], ['svg', 'image/svg+xml'], ['svr', ['x-world/x-svr', 'application/x-world']], ['swf', 'application/x-shockwave-flash'], ['swi', 'application/vnd.aristanetworks.swi'], ['sxc', 'application/vnd.sun.xml.calc'], ['sxd', 'application/vnd.sun.xml.draw'], ['sxg', 'application/vnd.sun.xml.writer.global'], ['sxi', 'application/vnd.sun.xml.impress'], ['sxm', 'application/vnd.sun.xml.math'], ['sxw', 'application/vnd.sun.xml.writer'], ['t', ['text/troff', 'application/x-troff']], ['talk', 'text/x-speech'], ['tao', 'application/vnd.tao.intent-module-archive'], ['tar', 'application/x-tar'], ['tbk', ['application/toolbook', 'application/x-tbook']], ['tcap', 'application/vnd.3gpp2.tcap'], ['tcl', ['text/x-script.tcl', 'application/x-tcl']], ['tcsh', 'text/x-script.tcsh'], ['teacher', 'application/vnd.smart.teacher'], ['tei', 'application/tei+xml'], ['tex', 'application/x-tex'], ['texi', 'application/x-texinfo'], ['texinfo', 'application/x-texinfo'], ['text', ['application/plain', 'text/plain']], ['tfi', 'application/thraud+xml'], ['tfm', 'application/x-tex-tfm'], ['tgz', ['application/gnutar', 'application/x-compressed']], ['thmx', 'application/vnd.ms-officetheme'], ['tif', ['image/tiff', 'image/x-tiff']], ['tiff', ['image/tiff', 'image/x-tiff']], ['tmo', 'application/vnd.tmobile-livetv'], ['torrent', 'application/x-bittorrent'], ['tpl', 'application/vnd.groove-tool-template'], ['tpt', 'application/vnd.trid.tpt'], ['tr', 'application/x-troff'], ['tra', 'application/vnd.trueapp'], ['trm', 'application/x-msterminal'], ['tsd', 'application/timestamped-data'], ['tsi', 'audio/tsp-audio'], ['tsp', ['application/dsptype', 'audio/tsplayer']], ['tsv', 'text/tab-separated-values'], ['ttf', 'application/x-font-ttf'], ['ttl', 'text/turtle'], ['turbot', 'image/florian'], ['twd', 'application/vnd.simtech-mindmapper'], ['txd', 'application/vnd.genomatix.tuxedo'], ['txf', 'application/vnd.mobius.txf'], ['txt', 'text/plain'], ['ufd', 'application/vnd.ufdl'], ['uil', 'text/x-uil'], ['uls', 'text/iuls'], ['umj', 'application/vnd.umajin'], ['uni', 'text/uri-list'], ['unis', 'text/uri-list'], ['unityweb', 'application/vnd.unity'], ['unv', 'application/i-deas'], ['uoml', 'application/vnd.uoml+xml'], ['uri', 'text/uri-list'], ['uris', 'text/uri-list'], ['ustar', ['application/x-ustar', 'multipart/x-ustar']], ['utz', 'application/vnd.uiq.theme'], ['uu', ['application/octet-stream', 'text/x-uuencode']], ['uue', 'text/x-uuencode'], ['uva', 'audio/vnd.dece.audio'], ['uvh', 'video/vnd.dece.hd'], ['uvi', 'image/vnd.dece.graphic'], ['uvm', 'video/vnd.dece.mobile'], ['uvp', 'video/vnd.dece.pd'], ['uvs', 'video/vnd.dece.sd'], ['uvu', 'video/vnd.uvvu.mp4'], ['uvv', 'video/vnd.dece.video'], ['vcd', 'application/x-cdlink'], ['vcf', 'text/x-vcard'], ['vcg', 'application/vnd.groove-vcard'], ['vcs', 'text/x-vcalendar'], ['vcx', 'application/vnd.vcx'], ['vda', 'application/vda'], ['vdo', 'video/vdo'], ['vew', 'application/groupwise'], ['vis', 'application/vnd.visionary'], ['viv', ['video/vivo', 'video/vnd.vivo']], ['vivo', ['video/vivo', 'video/vnd.vivo']], ['vmd', 'application/vocaltec-media-desc'], ['vmf', 'application/vocaltec-media-file'], ['voc', ['audio/voc', 'audio/x-voc']], ['vos', 'video/vosaic'], ['vox', 'audio/voxware'], ['vqe', 'audio/x-twinvq-plugin'], ['vqf', 'audio/x-twinvq'], ['vql', 'audio/x-twinvq-plugin'], ['vrml', ['model/vrml', 'x-world/x-vrml', 'application/x-vrml']], ['vrt', 'x-world/x-vrt'], ['vsd', ['application/vnd.visio', 'application/x-visio']], ['vsf', 'application/vnd.vsf'], ['vst', 'application/x-visio'], ['vsw', 'application/x-visio'], ['vtu', 'model/vnd.vtu'], ['vxml', 'application/voicexml+xml'], ['w60', 'application/wordperfect6.0'], ['w61', 'application/wordperfect6.1'], ['w6w', 'application/msword'], ['wad', 'application/x-doom'], ['wav', ['audio/wav', 'audio/x-wav']], ['wax', 'audio/x-ms-wax'], ['wb1', 'application/x-qpro'], ['wbmp', 'image/vnd.wap.wbmp'], ['wbs', 'application/vnd.criticaltools.wbs+xml'], ['wbxml', 'application/vnd.wap.wbxml'], ['wcm', 'application/vnd.ms-works'], ['wdb', 'application/vnd.ms-works'], ['web', 'application/vnd.xara'], ['weba', 'audio/webm'], ['webm', 'video/webm'], ['webp', 'image/webp'], ['wg', 'application/vnd.pmi.widget'], ['wgt', 'application/widget'], ['wiz', 'application/msword'], ['wk1', 'application/x-123'], ['wks', 'application/vnd.ms-works'], ['wm', 'video/x-ms-wm'], ['wma', 'audio/x-ms-wma'], ['wmd', 'application/x-ms-wmd'], ['wmf', ['windows/metafile', 'application/x-msmetafile']], ['wml', 'text/vnd.wap.wml'], ['wmlc', 'application/vnd.wap.wmlc'], ['wmls', 'text/vnd.wap.wmlscript'], ['wmlsc', 'application/vnd.wap.wmlscriptc'], ['wmv', 'video/x-ms-wmv'], ['wmx', 'video/x-ms-wmx'], ['wmz', 'application/x-ms-wmz'], ['woff', 'application/x-font-woff'], ['word', 'application/msword'], ['wp', 'application/wordperfect'], ['wp5', ['application/wordperfect', 'application/wordperfect6.0']], ['wp6', 'application/wordperfect'], ['wpd', ['application/wordperfect', 'application/vnd.wordperfect', 'application/x-wpwin']], ['wpl', 'application/vnd.ms-wpl'], ['wps', 'application/vnd.ms-works'], ['wq1', 'application/x-lotus'], ['wqd', 'application/vnd.wqd'], ['wri', ['application/mswrite', 'application/x-wri', 'application/x-mswrite']], ['wrl', ['model/vrml', 'x-world/x-vrml', 'application/x-world']], ['wrz', ['model/vrml', 'x-world/x-vrml']], ['wsc', 'text/scriplet'], ['wsdl', 'application/wsdl+xml'], ['wspolicy', 'application/wspolicy+xml'], ['wsrc', 'application/x-wais-source'], ['wtb', 'application/vnd.webturbo'], ['wtk', 'application/x-wintalk'], ['wvx', 'video/x-ms-wvx'], ['x-png', 'image/png'], ['x3d', 'application/vnd.hzn-3d-crossword'], ['xaf', 'x-world/x-vrml'], ['xap', 'application/x-silverlight-app'], ['xar', 'application/vnd.xara'], ['xbap', 'application/x-ms-xbap'], ['xbd', 'application/vnd.fujixerox.docuworks.binder'], ['xbm', ['image/xbm', 'image/x-xbm', 'image/x-xbitmap']], ['xdf', 'application/xcap-diff+xml'], ['xdm', 'application/vnd.syncml.dm+xml'], ['xdp', 'application/vnd.adobe.xdp+xml'], ['xdr', 'video/x-amt-demorun'], ['xdssc', 'application/dssc+xml'], ['xdw', 'application/vnd.fujixerox.docuworks'], ['xenc', 'application/xenc+xml'], ['xer', 'application/patch-ops-error+xml'], ['xfdf', 'application/vnd.adobe.xfdf'], ['xfdl', 'application/vnd.xfdl'], ['xgz', 'xgl/drawing'], ['xhtml', 'application/xhtml+xml'], ['xif', 'image/vnd.xiff'], ['xl', 'application/excel'], ['xla', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xlam', 'application/vnd.ms-excel.addin.macroenabled.12'], ['xlb', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']], ['xlc', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xld', ['application/excel', 'application/x-excel']], ['xlk', ['application/excel', 'application/x-excel']], ['xll', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']], ['xlm', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xls', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xlsb', 'application/vnd.ms-excel.sheet.binary.macroenabled.12'], ['xlsm', 'application/vnd.ms-excel.sheet.macroenabled.12'], ['xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'], ['xlt', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xltm', 'application/vnd.ms-excel.template.macroenabled.12'], ['xltx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template'], ['xlv', ['application/excel', 'application/x-excel']], ['xlw', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xm', 'audio/xm'], ['xml', ['application/xml', 'text/xml', 'application/atom+xml', 'application/rss+xml']], ['xmz', 'xgl/movie'], ['xo', 'application/vnd.olpc-sugar'], ['xof', 'x-world/x-vrml'], ['xop', 'application/xop+xml'], ['xpi', 'application/x-xpinstall'], ['xpix', 'application/x-vnd.ls-xpix'], ['xpm', ['image/xpm', 'image/x-xpixmap']], ['xpr', 'application/vnd.is-xpr'], ['xps', 'application/vnd.ms-xpsdocument'], ['xpw', 'application/vnd.intercon.formnet'], ['xslt', 'application/xslt+xml'], ['xsm', 'application/vnd.syncml+xml'], ['xspf', 'application/xspf+xml'], ['xsr', 'video/x-amt-showrun'], ['xul', 'application/vnd.mozilla.xul+xml'], ['xwd', ['image/x-xwd', 'image/x-xwindowdump']], ['xyz', ['chemical/x-xyz', 'chemical/x-pdb']], ['yang', 'application/yang'], ['yin', 'application/yin+xml'], ['z', ['application/x-compressed', 'application/x-compress']], ['zaz', 'application/vnd.zzazz.deck+xml'], ['zip', ['application/zip', 'multipart/x-zip', 'application/x-zip-compressed', 'application/x-compressed']], ['zir', 'application/vnd.zul'], ['zmm', 'application/vnd.handheld-entertainment+xml'], ['zoo', 'application/octet-stream'], ['zsh', 'text/x-script.zsh']]);
module.exports = {
  detectMimeType(filename) {
    if (!filename) {
      return defaultMimeType;
    }

    let parsed = path.parse(filename);
    let extension = (parsed.ext.substr(1) || parsed.name || '').split('?').shift().trim().toLowerCase();
    let value = defaultMimeType;

    if (extensions.has(extension)) {
      value = extensions.get(extension);
    }

    if (Array.isArray(value)) {
      return value[0];
    }

    return value;
  },

  detectExtension(mimeType) {
    if (!mimeType) {
      return defaultExtension;
    }

    let parts = (mimeType || '').toLowerCase().trim().split('/');
    let rootType = parts.shift().trim();
    let subType = parts.join('/').trim();

    if (mimeTypes.has(rootType + '/' + subType)) {
      let value = mimeTypes.get(rootType + '/' + subType);

      if (Array.isArray(value)) {
        return value[0];
      }

      return value;
    }

    switch (rootType) {
      case 'text':
        return 'txt';

      default:
        return 'bin';
    }
  }

};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */


const crypto = __webpack_require__(13);

const os = __webpack_require__(27);

const fs = __webpack_require__(24);

const punycode = __webpack_require__(23);

const PassThrough = __webpack_require__(0).PassThrough;

const shared = __webpack_require__(5);

const mimeFuncs = __webpack_require__(29);

const qp = __webpack_require__(49);

const base64 = __webpack_require__(48);

const addressparser = __webpack_require__(92);

const fetch = __webpack_require__(25);

const LastNewline = __webpack_require__(93);

const LeWindows = __webpack_require__(50);

const LeUnix = __webpack_require__(94);
/**
 * Creates a new mime tree node. Assumes 'multipart/*' as the content type
 * if it is a branch, anything else counts as leaf. If rootNode is missing from
 * the options, assumes this is the root.
 *
 * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)
 * @param {Object} [options] optional options
 * @param {Object} [options.rootNode] root node for this tree
 * @param {Object} [options.parentNode] immediate parent for this node
 * @param {Object} [options.filename] filename for an attachment node
 * @param {String} [options.baseBoundary] shared part of the unique multipart boundary
 * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers
 * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing
 * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'
 */


class MimeNode {
  constructor(contentType, options) {
    this.nodeCounter = 0;
    options = options || {};
    /**
     * shared part of the unique multipart boundary
     */

    this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString('hex');
    this.boundaryPrefix = options.boundaryPrefix || '--_NmP';
    this.disableFileAccess = !!options.disableFileAccess;
    this.disableUrlAccess = !!options.disableUrlAccess;
    this.normalizeHeaderKey = options.normalizeHeaderKey;
    /**
     * If date headers is missing and current node is the root, this value is used instead
     */

    this.date = new Date();
    /**
     * Root node for current mime tree
     */

    this.rootNode = options.rootNode || this;
    /**
     * If true include Bcc in generated headers (if available)
     */

    this.keepBcc = !!options.keepBcc;
    /**
     * If filename is specified but contentType is not (probably an attachment)
     * detect the content type from filename extension
     */

    if (options.filename) {
      /**
       * Filename for this node. Useful with attachments
       */
      this.filename = options.filename;

      if (!contentType) {
        contentType = mimeFuncs.detectMimeType(this.filename.split('.').pop());
      }
    }
    /**
     * Indicates which encoding should be used for header strings: "Q" or "B"
     */


    this.textEncoding = (options.textEncoding || '').toString().trim().charAt(0).toUpperCase();
    /**
     * Immediate parent for this node (or undefined if not set)
     */

    this.parentNode = options.parentNode;
    /**
     * Hostname for default message-id values
     */

    this.hostname = options.hostname;
    /**
     * If set to 'win' then uses \r\n, if 'linux' then \n. If not set (or `raw` is used) then newlines are kept as is.
     */

    this.newline = options.newline;
    /**
     * An array for possible child nodes
     */

    this.childNodes = [];
    /**
     * Used for generating unique boundaries (prepended to the shared base)
     */

    this._nodeId = ++this.rootNode.nodeCounter;
    /**
     * A list of header values for this node in the form of [{key:'', value:''}]
     */

    this._headers = [];
    /**
     * True if the content only uses ASCII printable characters
     * @type {Boolean}
     */

    this._isPlainText = false;
    /**
     * True if the content is plain text but has longer lines than allowed
     * @type {Boolean}
     */

    this._hasLongLines = false;
    /**
     * If set, use instead this value for envelopes instead of generating one
     * @type {Boolean}
     */

    this._envelope = false;
    /**
     * If set then use this value as the stream content instead of building it
     * @type {String|Buffer|Stream}
     */

    this._raw = false;
    /**
     * Additional transform streams that the message will be piped before
     * exposing by createReadStream
     * @type {Array}
     */

    this._transforms = [];
    /**
     * Additional process functions that the message will be piped through before
     * exposing by createReadStream. These functions are run after transforms
     * @type {Array}
     */

    this._processFuncs = [];
    /**
     * If content type is set (or derived from the filename) add it to headers
     */

    if (contentType) {
      this.setHeader('Content-Type', contentType);
    }
  } /////// PUBLIC METHODS

  /**
   * Creates and appends a child node.Arguments provided are passed to MimeNode constructor
   *
   * @param {String} [contentType] Optional content type
   * @param {Object} [options] Optional options object
   * @return {Object} Created node object
   */


  createChild(contentType, options) {
    if (!options && typeof contentType === 'object') {
      options = contentType;
      contentType = undefined;
    }

    let node = new MimeNode(contentType, options);
    this.appendChild(node);
    return node;
  }
  /**
   * Appends an existing node to the mime tree. Removes the node from an existing
   * tree if needed
   *
   * @param {Object} childNode node to be appended
   * @return {Object} Appended node object
   */


  appendChild(childNode) {
    if (childNode.rootNode !== this.rootNode) {
      childNode.rootNode = this.rootNode;
      childNode._nodeId = ++this.rootNode.nodeCounter;
    }

    childNode.parentNode = this;
    this.childNodes.push(childNode);
    return childNode;
  }
  /**
   * Replaces current node with another node
   *
   * @param {Object} node Replacement node
   * @return {Object} Replacement node
   */


  replace(node) {
    if (node === this) {
      return this;
    }

    this.parentNode.childNodes.forEach((childNode, i) => {
      if (childNode === this) {
        node.rootNode = this.rootNode;
        node.parentNode = this.parentNode;
        node._nodeId = this._nodeId;
        this.rootNode = this;
        this.parentNode = undefined;
        node.parentNode.childNodes[i] = node;
      }
    });
    return node;
  }
  /**
   * Removes current node from the mime tree
   *
   * @return {Object} removed node
   */


  remove() {
    if (!this.parentNode) {
      return this;
    }

    for (let i = this.parentNode.childNodes.length - 1; i >= 0; i--) {
      if (this.parentNode.childNodes[i] === this) {
        this.parentNode.childNodes.splice(i, 1);
        this.parentNode = undefined;
        this.rootNode = this;
        return this;
      }
    }
  }
  /**
   * Sets a header value. If the value for selected key exists, it is overwritten.
   * You can set multiple values as well by using [{key:'', value:''}] or
   * {key: 'value'} as the first argument.
   *
   * @param {String|Array|Object} key Header key or a list of key value pairs
   * @param {String} value Header value
   * @return {Object} current node
   */


  setHeader(key, value) {
    let added = false,
        headerValue; // Allow setting multiple headers at once

    if (!value && key && typeof key === 'object') {
      // allow {key:'content-type', value: 'text/plain'}
      if (key.key && 'value' in key) {
        this.setHeader(key.key, key.value);
      } else if (Array.isArray(key)) {
        // allow [{key:'content-type', value: 'text/plain'}]
        key.forEach(i => {
          this.setHeader(i.key, i.value);
        });
      } else {
        // allow {'content-type': 'text/plain'}
        Object.keys(key).forEach(i => {
          this.setHeader(i, key[i]);
        });
      }

      return this;
    }

    key = this._normalizeHeaderKey(key);
    headerValue = {
      key,
      value
    }; // Check if the value exists and overwrite

    for (let i = 0, len = this._headers.length; i < len; i++) {
      if (this._headers[i].key === key) {
        if (!added) {
          // replace the first match
          this._headers[i] = headerValue;
          added = true;
        } else {
          // remove following matches
          this._headers.splice(i, 1);

          i--;
          len--;
        }
      }
    } // match not found, append the value


    if (!added) {
      this._headers.push(headerValue);
    }

    return this;
  }
  /**
   * Adds a header value. If the value for selected key exists, the value is appended
   * as a new field and old one is not touched.
   * You can set multiple values as well by using [{key:'', value:''}] or
   * {key: 'value'} as the first argument.
   *
   * @param {String|Array|Object} key Header key or a list of key value pairs
   * @param {String} value Header value
   * @return {Object} current node
   */


  addHeader(key, value) {
    // Allow setting multiple headers at once
    if (!value && key && typeof key === 'object') {
      // allow {key:'content-type', value: 'text/plain'}
      if (key.key && key.value) {
        this.addHeader(key.key, key.value);
      } else if (Array.isArray(key)) {
        // allow [{key:'content-type', value: 'text/plain'}]
        key.forEach(i => {
          this.addHeader(i.key, i.value);
        });
      } else {
        // allow {'content-type': 'text/plain'}
        Object.keys(key).forEach(i => {
          this.addHeader(i, key[i]);
        });
      }

      return this;
    } else if (Array.isArray(value)) {
      value.forEach(val => {
        this.addHeader(key, val);
      });
      return this;
    }

    this._headers.push({
      key: this._normalizeHeaderKey(key),
      value
    });

    return this;
  }
  /**
   * Retrieves the first mathcing value of a selected key
   *
   * @param {String} key Key to search for
   * @retun {String} Value for the key
   */


  getHeader(key) {
    key = this._normalizeHeaderKey(key);

    for (let i = 0, len = this._headers.length; i < len; i++) {
      if (this._headers[i].key === key) {
        return this._headers[i].value;
      }
    }
  }
  /**
   * Sets body content for current node. If the value is a string, charset is added automatically
   * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify
   * the charset yourself
   *
   * @param (String|Buffer) content Body content
   * @return {Object} current node
   */


  setContent(content) {
    this.content = content;

    if (typeof this.content.pipe === 'function') {
      // pre-stream handler. might be triggered if a stream is set as content
      // and 'error' fires before anything is done with this stream
      this._contentErrorHandler = err => {
        this.content.removeListener('error', this._contentErrorHandler);
        this.content = err;
      };

      this.content.once('error', this._contentErrorHandler);
    } else if (typeof this.content === 'string') {
      this._isPlainText = mimeFuncs.isPlainText(this.content);

      if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {
        // If there are lines longer than 76 symbols/bytes do not use 7bit
        this._hasLongLines = true;
      }
    }

    return this;
  }

  build(callback) {
    let promise;

    if (!callback) {
      promise = new Promise((resolve, reject) => {
        callback = shared.callbackPromise(resolve, reject);
      });
    }

    let stream = this.createReadStream();
    let buf = [];
    let buflen = 0;
    let returned = false;
    stream.on('readable', () => {
      let chunk;

      while ((chunk = stream.read()) !== null) {
        buf.push(chunk);
        buflen += chunk.length;
      }
    });
    stream.once('error', err => {
      if (returned) {
        return;
      }

      returned = true;
      return callback(err);
    });
    stream.once('end', chunk => {
      if (returned) {
        return;
      }

      returned = true;

      if (chunk && chunk.length) {
        buf.push(chunk);
        buflen += chunk.length;
      }

      return callback(null, Buffer.concat(buf, buflen));
    });
    return promise;
  }

  getTransferEncoding() {
    let transferEncoding = false;
    let contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();

    if (this.content) {
      transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();

      if (!transferEncoding || !['base64', 'quoted-printable'].includes(transferEncoding)) {
        if (/^text\//i.test(contentType)) {
          // If there are no special symbols, no need to modify the text
          if (this._isPlainText && !this._hasLongLines) {
            transferEncoding = '7bit';
          } else if (typeof this.content === 'string' || this.content instanceof Buffer) {
            // detect preferred encoding for string value
            transferEncoding = this._getTextEncoding(this.content) === 'Q' ? 'quoted-printable' : 'base64';
          } else {
            // we can not check content for a stream, so either use preferred encoding or fallback to QP
            transferEncoding = this.textEncoding === 'B' ? 'base64' : 'quoted-printable';
          }
        } else if (!/^(multipart|message)\//i.test(contentType)) {
          transferEncoding = transferEncoding || 'base64';
        }
      }
    }

    return transferEncoding;
  }
  /**
   * Builds the header block for the mime node. Append \r\n\r\n before writing the content
   *
   * @returns {String} Headers
   */


  buildHeaders() {
    let transferEncoding = this.getTransferEncoding();
    let headers = [];

    if (transferEncoding) {
      this.setHeader('Content-Transfer-Encoding', transferEncoding);
    }

    if (this.filename && !this.getHeader('Content-Disposition')) {
      this.setHeader('Content-Disposition', 'attachment');
    } // Ensure mandatory header fields


    if (this.rootNode === this) {
      if (!this.getHeader('Date')) {
        this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));
      } // ensure that Message-Id is present


      this.messageId();

      if (!this.getHeader('MIME-Version')) {
        this.setHeader('MIME-Version', '1.0');
      }
    }

    this._headers.forEach(header => {
      let key = header.key;
      let value = header.value;
      let structured;
      let param;
      let options = {};
      let formattedHeaders = ['From', 'Sender', 'To', 'Cc', 'Bcc', 'Reply-To', 'Date', 'References'];

      if (value && typeof value === 'object' && !formattedHeaders.includes(key)) {
        Object.keys(value).forEach(key => {
          if (key !== 'value') {
            options[key] = value[key];
          }
        });
        value = (value.value || '').toString();

        if (!value.trim()) {
          return;
        }
      }

      if (options.prepared) {
        // header value is
        if (options.foldLines) {
          headers.push(mimeFuncs.foldLines(key + ': ' + value));
        } else {
          headers.push(key + ': ' + value);
        }

        return;
      }

      switch (header.key) {
        case 'Content-Disposition':
          structured = mimeFuncs.parseHeaderValue(value);

          if (this.filename) {
            structured.params.filename = this.filename;
          }

          value = mimeFuncs.buildHeaderValue(structured);
          break;

        case 'Content-Type':
          structured = mimeFuncs.parseHeaderValue(value);

          this._handleContentType(structured);

          if (structured.value.match(/^text\/plain\b/) && typeof this.content === 'string' && /[\u0080-\uFFFF]/.test(this.content)) {
            structured.params.charset = 'utf-8';
          }

          value = mimeFuncs.buildHeaderValue(structured);

          if (this.filename) {
            // add support for non-compliant clients like QQ webmail
            // we can't build the value with buildHeaderValue as the value is non standard and
            // would be converted to parameter continuation encoding that we do not want
            param = this._encodeWords(this.filename);

            if (param !== this.filename || /[\s'"\\;:/=(),<>@[\]?]|^-/.test(param)) {
              // include value in quotes if needed
              param = '"' + param + '"';
            }

            value += '; name=' + param;
          }

          break;

        case 'Bcc':
          if (!this.keepBcc) {
            // skip BCC values
            return;
          }

          break;
      }

      value = this._encodeHeaderValue(key, value); // skip empty lines

      if (!(value || '').toString().trim()) {
        return;
      }

      if (typeof this.normalizeHeaderKey === 'function') {
        let normalized = this.normalizeHeaderKey(key, value);

        if (normalized && typeof normalized === 'string' && normalized.length) {
          key = normalized;
        }
      }

      headers.push(mimeFuncs.foldLines(key + ': ' + value, 76));
    });

    return headers.join('\r\n');
  }
  /**
   * Streams the rfc2822 message from the current node. If this is a root node,
   * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)
   *
   * @return {String} Compiled message
   */


  createReadStream(options) {
    options = options || {};
    let stream = new PassThrough(options);
    let outputStream = stream;
    let transform;
    this.stream(stream, options, err => {
      if (err) {
        outputStream.emit('error', err);
        return;
      }

      stream.end();
    });

    for (let i = 0, len = this._transforms.length; i < len; i++) {
      transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];
      outputStream.once('error', err => {
        transform.emit('error', err);
      });
      outputStream = outputStream.pipe(transform);
    } // ensure terminating newline after possible user transforms


    transform = new LastNewline();
    outputStream.once('error', err => {
      transform.emit('error', err);
    });
    outputStream = outputStream.pipe(transform); // dkim and stuff

    for (let i = 0, len = this._processFuncs.length; i < len; i++) {
      transform = this._processFuncs[i];
      outputStream = transform(outputStream);
    }

    if (this.newline) {
      const winbreak = ['win', 'windows', 'dos', '\r\n'].includes(this.newline.toString().toLowerCase());
      const newlineTransform = winbreak ? new LeWindows() : new LeUnix();
      const stream = outputStream.pipe(newlineTransform);
      outputStream.on('error', err => stream.emit('error', err));
      return stream;
    }

    return outputStream;
  }
  /**
   * Appends a transform stream object to the transforms list. Final output
   * is passed through this stream before exposing
   *
   * @param {Object} transform Read-Write stream
   */


  transform(transform) {
    this._transforms.push(transform);
  }
  /**
   * Appends a post process function. The functon is run after transforms and
   * uses the following syntax
   *
   *   processFunc(input) -> outputStream
   *
   * @param {Object} processFunc Read-Write stream
   */


  processFunc(processFunc) {
    this._processFuncs.push(processFunc);
  }

  stream(outputStream, options, done) {
    let transferEncoding = this.getTransferEncoding();
    let contentStream;
    let localStream; // protect actual callback against multiple triggering

    let returned = false;

    let callback = err => {
      if (returned) {
        return;
      }

      returned = true;
      done(err);
    }; // for multipart nodes, push child nodes
    // for content nodes end the stream


    let finalize = () => {
      let childId = 0;

      let processChildNode = () => {
        if (childId >= this.childNodes.length) {
          outputStream.write('\r\n--' + this.boundary + '--\r\n');
          return callback();
        }

        let child = this.childNodes[childId++];
        outputStream.write((childId > 1 ? '\r\n' : '') + '--' + this.boundary + '\r\n');
        child.stream(outputStream, options, err => {
          if (err) {
            return callback(err);
          }

          setImmediate(processChildNode);
        });
      };

      if (this.multipart) {
        setImmediate(processChildNode);
      } else {
        return callback();
      }
    }; // pushes node content


    let sendContent = () => {
      if (this.content) {
        if (Object.prototype.toString.call(this.content) === '[object Error]') {
          // content is already errored
          return callback(this.content);
        }

        if (typeof this.content.pipe === 'function') {
          this.content.removeListener('error', this._contentErrorHandler);

          this._contentErrorHandler = err => callback(err);

          this.content.once('error', this._contentErrorHandler);
        }

        let createStream = () => {
          if (['quoted-printable', 'base64'].includes(transferEncoding)) {
            contentStream = new (transferEncoding === 'base64' ? base64 : qp).Encoder(options);
            contentStream.pipe(outputStream, {
              end: false
            });
            contentStream.once('end', finalize);
            contentStream.once('error', err => callback(err));
            localStream = this._getStream(this.content);
            localStream.pipe(contentStream);
          } else {
            // anything that is not QP or Base54 passes as-is
            localStream = this._getStream(this.content);
            localStream.pipe(outputStream, {
              end: false
            });
            localStream.once('end', finalize);
          }

          localStream.once('error', err => callback(err));
        };

        if (this.content._resolve) {
          let chunks = [];
          let chunklen = 0;
          let returned = false;

          let sourceStream = this._getStream(this.content);

          sourceStream.on('error', err => {
            if (returned) {
              return;
            }

            returned = true;
            callback(err);
          });
          sourceStream.on('readable', () => {
            let chunk;

            while ((chunk = sourceStream.read()) !== null) {
              chunks.push(chunk);
              chunklen += chunk.length;
            }
          });
          sourceStream.on('end', () => {
            if (returned) {
              return;
            }

            returned = true;
            this.content._resolve = false;
            this.content._resolvedValue = Buffer.concat(chunks, chunklen);
            setImmediate(createStream);
          });
        } else {
          setImmediate(createStream);
        }

        return;
      } else {
        return setImmediate(finalize);
      }
    };

    if (this._raw) {
      setImmediate(() => {
        if (Object.prototype.toString.call(this._raw) === '[object Error]') {
          // content is already errored
          return callback(this._raw);
        } // remove default error handler (if set)


        if (typeof this._raw.pipe === 'function') {
          this._raw.removeListener('error', this._contentErrorHandler);
        }

        let raw = this._getStream(this._raw);

        raw.pipe(outputStream, {
          end: false
        });
        raw.on('error', err => outputStream.emit('error', err));
        raw.on('end', finalize);
      });
    } else {
      outputStream.write(this.buildHeaders() + '\r\n\r\n');
      setImmediate(sendContent);
    }
  }
  /**
   * Sets envelope to be used instead of the generated one
   *
   * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}
   */


  setEnvelope(envelope) {
    let list;
    this._envelope = {
      from: false,
      to: []
    };

    if (envelope.from) {
      list = [];

      this._convertAddresses(this._parseAddresses(envelope.from), list);

      list = list.filter(address => address && address.address);

      if (list.length && list[0]) {
        this._envelope.from = list[0].address;
      }
    }

    ['to', 'cc', 'bcc'].forEach(key => {
      if (envelope[key]) {
        this._convertAddresses(this._parseAddresses(envelope[key]), this._envelope.to);
      }
    });
    this._envelope.to = this._envelope.to.map(to => to.address).filter(address => address);
    let standardFields = ['to', 'cc', 'bcc', 'from'];
    Object.keys(envelope).forEach(key => {
      if (!standardFields.includes(key)) {
        this._envelope[key] = envelope[key];
      }
    });
    return this;
  }
  /**
   * Generates and returns an object with parsed address fields
   *
   * @return {Object} Address object
   */


  getAddresses() {
    let addresses = {};

    this._headers.forEach(header => {
      let key = header.key.toLowerCase();

      if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].includes(key)) {
        if (!Array.isArray(addresses[key])) {
          addresses[key] = [];
        }

        this._convertAddresses(this._parseAddresses(header.value), addresses[key]);
      }
    });

    return addresses;
  }
  /**
   * Generates and returns SMTP envelope with the sender address and a list of recipients addresses
   *
   * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}
   */


  getEnvelope() {
    if (this._envelope) {
      return this._envelope;
    }

    let envelope = {
      from: false,
      to: []
    };

    this._headers.forEach(header => {
      let list = [];

      if (header.key === 'From' || !envelope.from && ['Reply-To', 'Sender'].includes(header.key)) {
        this._convertAddresses(this._parseAddresses(header.value), list);

        if (list.length && list[0]) {
          envelope.from = list[0].address;
        }
      } else if (['To', 'Cc', 'Bcc'].includes(header.key)) {
        this._convertAddresses(this._parseAddresses(header.value), envelope.to);
      }
    });

    envelope.to = envelope.to.map(to => to.address);
    return envelope;
  }
  /**
   * Returns Message-Id value. If it does not exist, then creates one
   *
   * @return {String} Message-Id value
   */


  messageId() {
    let messageId = this.getHeader('Message-ID'); // You really should define your own Message-Id field!

    if (!messageId) {
      messageId = this._generateMessageId();
      this.setHeader('Message-ID', messageId);
    }

    return messageId;
  }
  /**
   * Sets pregenerated content that will be used as the output of this node
   *
   * @param {String|Buffer|Stream} Raw MIME contents
   */


  setRaw(raw) {
    this._raw = raw;

    if (this._raw && typeof this._raw.pipe === 'function') {
      // pre-stream handler. might be triggered if a stream is set as content
      // and 'error' fires before anything is done with this stream
      this._contentErrorHandler = err => {
        this._raw.removeListener('error', this._contentErrorHandler);

        this._raw = err;
      };

      this._raw.once('error', this._contentErrorHandler);
    }

    return this;
  } /////// PRIVATE METHODS

  /**
   * Detects and returns handle to a stream related with the content.
   *
   * @param {Mixed} content Node content
   * @returns {Object} Stream object
   */


  _getStream(content) {
    let contentStream;

    if (content._resolvedValue) {
      // pass string or buffer content as a stream
      contentStream = new PassThrough();
      setImmediate(() => contentStream.end(content._resolvedValue));
      return contentStream;
    } else if (typeof content.pipe === 'function') {
      // assume as stream
      return content;
    } else if (content && typeof content.path === 'string' && !content.href) {
      if (this.disableFileAccess) {
        contentStream = new PassThrough();
        setImmediate(() => contentStream.emit('error', new Error('File access rejected for ' + content.path)));
        return contentStream;
      } // read file


      return fs.createReadStream(content.path);
    } else if (content && typeof content.href === 'string') {
      if (this.disableUrlAccess) {
        contentStream = new PassThrough();
        setImmediate(() => contentStream.emit('error', new Error('Url access rejected for ' + content.href)));
        return contentStream;
      } // fetch URL


      return fetch(content.href, {
        headers: content.httpHeaders
      });
    } else {
      // pass string or buffer content as a stream
      contentStream = new PassThrough();
      setImmediate(() => contentStream.end(content || ''));
      return contentStream;
    }
  }
  /**
   * Parses addresses. Takes in a single address or an array or an
   * array of address arrays (eg. To: [[first group], [second group],...])
   *
   * @param {Mixed} addresses Addresses to be parsed
   * @return {Array} An array of address objects
   */


  _parseAddresses(addresses) {
    return [].concat.apply([], [].concat(addresses).map(address => {
      // eslint-disable-line prefer-spread
      if (address && address.address) {
        address.address = this._normalizeAddress(address.address);
        address.name = address.name || '';
        return [address];
      }

      return addressparser(address);
    }));
  }
  /**
   * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-
   *
   * @param {String} key Key to be normalized
   * @return {String} key in Camel-Case form
   */


  _normalizeHeaderKey(key) {
    key = (key || '').toString() // no newlines in keys
    .replace(/\r?\n|\r/g, ' ').trim().toLowerCase() // use uppercase words, except MIME
    .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, c => c.toUpperCase()) // special case
    .replace(/^Content-Features$/i, 'Content-features');
    return key;
  }
  /**
   * Checks if the content type is multipart and defines boundary if needed.
   * Doesn't return anything, modifies object argument instead.
   *
   * @param {Object} structured Parsed header value for 'Content-Type' key
   */


  _handleContentType(structured) {
    this.contentType = structured.value.trim().toLowerCase();
    this.multipart = /^multipart\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf('/') + 1) : false;

    if (this.multipart) {
      this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();
    } else {
      this.boundary = false;
    }
  }
  /**
   * Generates a multipart boundary value
   *
   * @return {String} boundary value
   */


  _generateBoundary() {
    return this.rootNode.boundaryPrefix + '-' + this.rootNode.baseBoundary + '-Part_' + this._nodeId;
  }
  /**
   * Encodes a header value for use in the generated rfc2822 email.
   *
   * @param {String} key Header key
   * @param {String} value Header value
   */


  _encodeHeaderValue(key, value) {
    key = this._normalizeHeaderKey(key);

    switch (key) {
      // Structured headers
      case 'From':
      case 'Sender':
      case 'To':
      case 'Cc':
      case 'Bcc':
      case 'Reply-To':
        return this._convertAddresses(this._parseAddresses(value));
      // values enclosed in <>

      case 'Message-ID':
      case 'In-Reply-To':
      case 'Content-Id':
        value = (value || '').toString().replace(/\r?\n|\r/g, ' ');

        if (value.charAt(0) !== '<') {
          value = '<' + value;
        }

        if (value.charAt(value.length - 1) !== '>') {
          value = value + '>';
        }

        return value;
      // space separated list of values enclosed in <>

      case 'References':
        value = [].concat.apply([], [].concat(value || '').map(elm => {
          // eslint-disable-line prefer-spread
          elm = (elm || '').toString().replace(/\r?\n|\r/g, ' ').trim();
          return elm.replace(/<[^>]*>/g, str => str.replace(/\s/g, '')).split(/\s+/);
        })).map(elm => {
          if (elm.charAt(0) !== '<') {
            elm = '<' + elm;
          }

          if (elm.charAt(elm.length - 1) !== '>') {
            elm = elm + '>';
          }

          return elm;
        });
        return value.join(' ').trim();

      case 'Date':
        if (Object.prototype.toString.call(value) === '[object Date]') {
          return value.toUTCString().replace(/GMT/, '+0000');
        }

        value = (value || '').toString().replace(/\r?\n|\r/g, ' ');
        return this._encodeWords(value);

      case 'Content-Type':
      case 'Content-Disposition':
        // if it includes a filename then it is already encoded
        return (value || '').toString().replace(/\r?\n|\r/g, ' ');

      default:
        value = (value || '').toString().replace(/\r?\n|\r/g, ' '); // encodeWords only encodes if needed, otherwise the original string is returned

        return this._encodeWords(value);
    }
  }
  /**
   * Rebuilds address object using punycode and other adjustments
   *
   * @param {Array} addresses An array of address objects
   * @param {Array} [uniqueList] An array to be populated with addresses
   * @return {String} address string
   */


  _convertAddresses(addresses, uniqueList) {
    let values = [];
    uniqueList = uniqueList || [];
    [].concat(addresses || []).forEach(address => {
      if (address.address) {
        address.address = this._normalizeAddress(address.address);

        if (!address.name) {
          values.push(address.address.indexOf(' ') >= 0 ? `<${address.address}>` : `${address.address}`);
        } else if (address.name) {
          values.push(`${this._encodeAddressName(address.name)} <${address.address}>`);
        }

        if (address.address) {
          if (!uniqueList.filter(a => a.address === address.address).length) {
            uniqueList.push(address);
          }
        }
      } else if (address.group) {
        let groupListAddresses = (address.group.length ? this._convertAddresses(address.group, uniqueList) : '').trim();
        values.push(`${this._encodeAddressName(address.name)}:${groupListAddresses};`);
      }
    });
    return values.join(', ');
  }
  /**
   * Normalizes an email address
   *
   * @param {Array} address An array of address objects
   * @return {String} address string
   */


  _normalizeAddress(address) {
    address = (address || '').toString().replace(/[\x00-\x1F<>]+/g, ' ') // remove unallowed characters
    .trim();
    let lastAt = address.lastIndexOf('@');

    if (lastAt < 0) {
      // Bare username
      return address;
    }

    let user = address.substr(0, lastAt);
    let domain = address.substr(lastAt + 1); // Usernames are not touched and are kept as is even if these include unicode
    // Domains are punycoded by default
    // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'
    // non-unicode domains are left as is

    let encodedDomain;

    try {
      encodedDomain = punycode.toASCII(domain.toLowerCase());
    } catch (err) {// keep as is?
    }

    if (user.indexOf(' ') >= 0) {
      if (user.charAt(0) !== '"') {
        user = '"' + user;
      }

      if (user.substr(-1) !== '"') {
        user = user + '"';
      }
    }

    return `${user}@${encodedDomain}`;
  }
  /**
   * If needed, mime encodes the name part
   *
   * @param {String} name Name part of an address
   * @returns {String} Mime word encoded string if needed
   */


  _encodeAddressName(name) {
    if (!/^[\w ']*$/.test(name)) {
      if (/^[\x20-\x7e]*$/.test(name)) {
        return '"' + name.replace(/([\\"])/g, '\\$1') + '"';
      } else {
        return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);
      }
    }

    return name;
  }
  /**
   * If needed, mime encodes the name part
   *
   * @param {String} name Name part of an address
   * @returns {String} Mime word encoded string if needed
   */


  _encodeWords(value) {
    // set encodeAll parameter to true even though it is against the recommendation of RFC2047,
    // by default only words that include non-ascii should be converted into encoded words
    // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace
    return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);
  }
  /**
   * Detects best mime encoding for a text value
   *
   * @param {String} value Value to check for
   * @return {String} either 'Q' or 'B'
   */


  _getTextEncoding(value) {
    value = (value || '').toString();
    let encoding = this.textEncoding;
    let latinLen;
    let nonLatinLen;

    if (!encoding) {
      // count latin alphabet symbols and 8-bit range symbols + control symbols
      // if there are more latin characters, then use quoted-printable
      // encoding, otherwise use base64
      nonLatinLen = (value.match(/[\x00-\x08\x0B\x0C\x0E-\x1F\u0080-\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex

      latinLen = (value.match(/[a-z]/gi) || []).length; // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B

      encoding = nonLatinLen < latinLen ? 'Q' : 'B';
    }

    return encoding;
  }
  /**
   * Generates a message id
   *
   * @return {String} Random Message-ID value
   */


  _generateMessageId() {
    return '<' + [2, 2, 2, 6].reduce( // crux to generate UUID-like random strings
    (prev, len) => prev + '-' + crypto.randomBytes(len).toString('hex'), crypto.randomBytes(4).toString('hex')) + '@' + // try to use the domain of the FROM address or fallback to server hostname
    (this.getEnvelope().from || this.hostname || os.hostname() || 'localhost').split('@').pop() + '>';
  }

}

module.exports = MimeNode;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Transform = __webpack_require__(0).Transform;
/**
 * Encodes a Buffer into a base64 encoded string
 *
 * @param {Buffer} buffer Buffer to convert
 * @returns {String} base64 encoded string
 */


function encode(buffer) {
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer, 'utf-8');
  }

  return buffer.toString('base64');
}
/**
 * Adds soft line breaks to a base64 string
 *
 * @param {String} str base64 encoded string that might need line wrapping
 * @param {Number} [lineLength=76] Maximum allowed length for a line
 * @returns {String} Soft-wrapped base64 encoded string
 */


function wrap(str, lineLength) {
  str = (str || '').toString();
  lineLength = lineLength || 76;

  if (str.length <= lineLength) {
    return str;
  }

  let result = [];
  let pos = 0;
  let chunkLength = lineLength * 1024;

  while (pos < str.length) {
    let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\r\n').trim();
    result.push(wrappedLines);
    pos += chunkLength;
  }

  return result.join('\r\n').trim();
}
/**
 * Creates a transform stream for encoding data to base64 encoding
 *
 * @constructor
 * @param {Object} options Stream options
 * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping
 */


class Encoder extends Transform {
  constructor(options) {
    super(); // init Transform

    this.options = options || {};

    if (this.options.lineLength !== false) {
      this.options.lineLength = this.options.lineLength || 76;
    }

    this._curLine = '';
    this._remainingBytes = false;
    this.inputBytes = 0;
    this.outputBytes = 0;
  }

  _transform(chunk, encoding, done) {
    if (encoding !== 'buffer') {
      chunk = Buffer.from(chunk, encoding);
    }

    if (!chunk || !chunk.length) {
      return setImmediate(done);
    }

    this.inputBytes += chunk.length;

    if (this._remainingBytes && this._remainingBytes.length) {
      chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);
      this._remainingBytes = false;
    }

    if (chunk.length % 3) {
      this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);
      chunk = chunk.slice(0, chunk.length - chunk.length % 3);
    } else {
      this._remainingBytes = false;
    }

    let b64 = this._curLine + encode(chunk);

    if (this.options.lineLength) {
      b64 = wrap(b64, this.options.lineLength); // remove last line as it is still most probably incomplete

      let lastLF = b64.lastIndexOf('\n');

      if (lastLF < 0) {
        this._curLine = b64;
        b64 = '';
      } else if (lastLF === b64.length - 1) {
        this._curLine = '';
      } else {
        this._curLine = b64.substr(lastLF + 1);
        b64 = b64.substr(0, lastLF + 1);
      }
    }

    if (b64) {
      this.outputBytes += b64.length;
      this.push(Buffer.from(b64, 'ascii'));
    }

    setImmediate(done);
  }

  _flush(done) {
    if (this._remainingBytes && this._remainingBytes.length) {
      this._curLine += encode(this._remainingBytes);
    }

    if (this._curLine) {
      this._curLine = wrap(this._curLine, this.options.lineLength);
      this.outputBytes += this._curLine.length;
      this.push(this._curLine, 'ascii');
      this._curLine = '';
    }

    done();
  }

} // expose to the world


module.exports = {
  encode,
  wrap,
  Encoder
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Transform = __webpack_require__(0).Transform;
/**
 * Encodes a Buffer into a Quoted-Printable encoded string
 *
 * @param {Buffer} buffer Buffer to convert
 * @returns {String} Quoted-Printable encoded string
 */


function encode(buffer) {
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer, 'utf-8');
  } // usable characters that do not need encoding


  let ranges = [// https://tools.ietf.org/html/rfc2045#section-6.7
  [0x09], // <TAB>
  [0x0a], // <LF>
  [0x0d], // <CR>
  [0x20, 0x3c], // <SP>!"#$%&'()*+,-./0123456789:;
  [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}
  ];
  let result = '';
  let ord;

  for (let i = 0, len = buffer.length; i < len; i++) {
    ord = buffer[i]; // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line

    if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {
      result += String.fromCharCode(ord);
      continue;
    }

    result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();
  }

  return result;
}
/**
 * Adds soft line breaks to a Quoted-Printable string
 *
 * @param {String} str Quoted-Printable encoded string that might need line wrapping
 * @param {Number} [lineLength=76] Maximum allowed length for a line
 * @returns {String} Soft-wrapped Quoted-Printable encoded string
 */


function wrap(str, lineLength) {
  str = (str || '').toString();
  lineLength = lineLength || 76;

  if (str.length <= lineLength) {
    return str;
  }

  let pos = 0;
  let len = str.length;
  let match, code, line;
  let lineMargin = Math.floor(lineLength / 3);
  let result = ''; // insert soft linebreaks where needed

  while (pos < len) {
    line = str.substr(pos, lineLength);

    if (match = line.match(/\r\n/)) {
      line = line.substr(0, match.index + match[0].length);
      result += line;
      pos += line.length;
      continue;
    }

    if (line.substr(-1) === '\n') {
      // nothing to change here
      result += line;
      pos += line.length;
      continue;
    } else if (match = line.substr(-lineMargin).match(/\n.*?$/)) {
      // truncate to nearest line break
      line = line.substr(0, line.length - (match[0].length - 1));
      result += line;
      pos += line.length;
      continue;
    } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \t.,!?][^ \t.,!?]*$/))) {
      // truncate to nearest space
      line = line.substr(0, line.length - (match[0].length - 1));
    } else if (line.match(/[=][\da-f]{0,2}$/i)) {
      // push incomplete encoding sequences to the next line
      if (match = line.match(/[=][\da-f]{0,1}$/i)) {
        line = line.substr(0, line.length - match[0].length);
      } // ensure that utf-8 sequences are not split


      while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\da-f]{2}$/gi))) {
        code = parseInt(match[0].substr(1, 2), 16);

        if (code < 128) {
          break;
        }

        line = line.substr(0, line.length - 3);

        if (code >= 0xc0) {
          break;
        }
      }
    }

    if (pos + line.length < len && line.substr(-1) !== '\n') {
      if (line.length === lineLength && line.match(/[=][\da-f]{2}$/i)) {
        line = line.substr(0, line.length - 3);
      } else if (line.length === lineLength) {
        line = line.substr(0, line.length - 1);
      }

      pos += line.length;
      line += '=\r\n';
    } else {
      pos += line.length;
    }

    result += line;
  }

  return result;
}
/**
 * Helper function to check if a number is inside provided ranges
 *
 * @param {Number} nr Number to check for
 * @param {Array} ranges An Array of allowed values
 * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise
 */


function checkRanges(nr, ranges) {
  for (let i = ranges.length - 1; i >= 0; i--) {
    if (!ranges[i].length) {
      continue;
    }

    if (ranges[i].length === 1 && nr === ranges[i][0]) {
      return true;
    }

    if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {
      return true;
    }
  }

  return false;
}
/**
 * Creates a transform stream for encoding data to Quoted-Printable encoding
 *
 * @constructor
 * @param {Object} options Stream options
 * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping
 */


class Encoder extends Transform {
  constructor(options) {
    super(); // init Transform

    this.options = options || {};

    if (this.options.lineLength !== false) {
      this.options.lineLength = this.options.lineLength || 76;
    }

    this._curLine = '';
    this.inputBytes = 0;
    this.outputBytes = 0;
  }

  _transform(chunk, encoding, done) {
    let qp;

    if (encoding !== 'buffer') {
      chunk = Buffer.from(chunk, encoding);
    }

    if (!chunk || !chunk.length) {
      return done();
    }

    this.inputBytes += chunk.length;

    if (this.options.lineLength) {
      qp = this._curLine + encode(chunk);
      qp = wrap(qp, this.options.lineLength);
      qp = qp.replace(/(^|\n)([^\n]*)$/, (match, lineBreak, lastLine) => {
        this._curLine = lastLine;
        return lineBreak;
      });

      if (qp) {
        this.outputBytes += qp.length;
        this.push(qp);
      }
    } else {
      qp = encode(chunk);
      this.outputBytes += qp.length;
      this.push(qp, 'ascii');
    }

    done();
  }

  _flush(done) {
    if (this._curLine) {
      this.outputBytes += this._curLine.length;
      this.push(this._curLine, 'ascii');
    }

    done();
  }

} // expose to the world


module.exports = {
  encode,
  wrap,
  Encoder
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const stream = __webpack_require__(0);

const Transform = stream.Transform;
/**
 * Ensures that only <CR><LF> sequences are used for linebreaks
 *
 * @param {Object} options Stream options
 */

class LeWindows extends Transform {
  constructor(options) {
    super(options); // init Transform

    this.options = options || {};
    this.lastByte = false;
  }
  /**
   * Escapes dots
   */


  _transform(chunk, encoding, done) {
    let buf;
    let lastPos = 0;

    for (let i = 0, len = chunk.length; i < len; i++) {
      if (chunk[i] === 0x0a) {
        // \n
        if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {
          if (i > lastPos) {
            buf = chunk.slice(lastPos, i);
            this.push(buf);
          }

          this.push(Buffer.from('\r\n'));
          lastPos = i + 1;
        }
      }
    }

    if (lastPos && lastPos < chunk.length) {
      buf = chunk.slice(lastPos);
      this.push(buf);
    } else if (!lastPos) {
      this.push(chunk);
    }

    this.lastByte = chunk[chunk.length - 1];
    done();
  }

}

module.exports = LeWindows;

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("tls");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Stream = __webpack_require__(0).Stream;

const fetch = __webpack_require__(25);

const crypto = __webpack_require__(13);

const shared = __webpack_require__(5);
/**
 * XOAUTH2 access_token generator for Gmail.
 * Create client ID for web applications in Google API console to use it.
 * See Offline Access for receiving the needed refreshToken for an user
 * https://developers.google.com/accounts/docs/OAuth2WebServer#offline
 *
 * Usage for generating access tokens with a custom method using provisionCallback:
 * provisionCallback(user, renew, callback)
 *   * user is the username to get the token for
 *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed
 *   * callback is the callback to run with (error, accessToken [, expires])
 *     * accessToken is a string
 *     * expires is an optional expire time in milliseconds
 * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself
 *
 * @constructor
 * @param {Object} options Client information for token generation
 * @param {String} options.user User e-mail address
 * @param {String} options.clientId Client ID value
 * @param {String} options.clientSecret Client secret value
 * @param {String} options.refreshToken Refresh token for an user
 * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'
 * @param {String} options.accessToken An existing valid accessToken
 * @param {String} options.privateKey Private key for JSW
 * @param {Number} options.expires Optional Access Token expire time in ms
 * @param {Number} options.timeout Optional TTL for Access Token in seconds
 * @param {Function} options.provisionCallback Function to run when a new access token is required
 */


class XOAuth2 extends Stream {
  constructor(options, logger) {
    super();
    this.options = options || {};

    if (options && options.serviceClient) {
      if (!options.privateKey || !options.user) {
        setImmediate(() => this.emit('error', new Error('Options "privateKey" and "user" are required for service account!')));
        return;
      }

      let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);
      this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;
    }

    this.logger = shared.getLogger({
      logger
    }, {
      component: this.options.component || 'OAuth2'
    });
    this.provisionCallback = typeof this.options.provisionCallback === 'function' ? this.options.provisionCallback : false;
    this.options.accessUrl = this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';
    this.options.customHeaders = this.options.customHeaders || {};
    this.options.customParams = this.options.customParams || {};
    this.accessToken = this.options.accessToken || false;

    if (this.options.expires && Number(this.options.expires)) {
      this.expires = this.options.expires;
    } else {
      let timeout = Math.max(Number(this.options.timeout) || 0, 0);
      this.expires = timeout && Date.now() + timeout * 1000 || 0;
    }
  }
  /**
   * Returns or generates (if previous has expired) a XOAuth2 token
   *
   * @param {Boolean} renew If false then use cached access token (if available)
   * @param {Function} callback Callback function with error object and token string
   */


  getToken(renew, callback) {
    if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {
      return callback(null, this.accessToken);
    }

    let generateCallback = (...args) => {
      if (args[0]) {
        this.logger.error({
          err: args[0],
          tnx: 'OAUTH2',
          user: this.options.user,
          action: 'renew'
        }, 'Failed generating new Access Token for %s', this.options.user);
      } else {
        this.logger.info({
          tnx: 'OAUTH2',
          user: this.options.user,
          action: 'renew'
        }, 'Generated new Access Token for %s', this.options.user);
      }

      callback(...args);
    };

    if (this.provisionCallback) {
      this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires) => {
        if (!err && accessToken) {
          this.accessToken = accessToken;
          this.expires = expires || 0;
        }

        generateCallback(err, accessToken);
      });
    } else {
      this.generateToken(generateCallback);
    }
  }
  /**
   * Updates token values
   *
   * @param {String} accessToken New access token
   * @param {Number} timeout Access token lifetime in seconds
   *
   * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}
   */


  updateToken(accessToken, timeout) {
    this.accessToken = accessToken;
    timeout = Math.max(Number(timeout) || 0, 0);
    this.expires = timeout && Date.now() + timeout * 1000 || 0;
    this.emit('token', {
      user: this.options.user,
      accessToken: accessToken || '',
      expires: this.expires
    });
  }
  /**
   * Generates a new XOAuth2 token with the credentials provided at initialization
   *
   * @param {Function} callback Callback function with error object and token string
   */


  generateToken(callback) {
    let urlOptions;
    let loggedUrlOptions;

    if (this.options.serviceClient) {
      // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount
      let iat = Math.floor(Date.now() / 1000); // unix time

      let tokenData = {
        iss: this.options.serviceClient,
        scope: this.options.scope || 'https://mail.google.com/',
        sub: this.options.user,
        aud: this.options.accessUrl,
        iat,
        exp: iat + this.options.serviceRequestTimeout
      };
      let token;

      try {
        token = this.jwtSignRS256(tokenData);
      } catch (err) {
        return callback(new Error('Can\x27t generate token. Check your auth options'));
      }

      urlOptions = {
        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
        assertion: token
      };
      loggedUrlOptions = {
        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
        assertion: tokenData
      };
    } else {
      if (!this.options.refreshToken) {
        return callback(new Error('Can\x27t create new access token for user'));
      } // web app - https://developers.google.com/identity/protocols/OAuth2WebServer


      urlOptions = {
        client_id: this.options.clientId || '',
        client_secret: this.options.clientSecret || '',
        refresh_token: this.options.refreshToken,
        grant_type: 'refresh_token'
      };
      loggedUrlOptions = {
        client_id: this.options.clientId || '',
        client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',
        refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',
        grant_type: 'refresh_token'
      };
    }

    Object.keys(this.options.customParams).forEach(key => {
      urlOptions[key] = this.options.customParams[key];
      loggedUrlOptions[key] = this.options.customParams[key];
    });
    this.logger.debug({
      tnx: 'OAUTH2',
      user: this.options.user,
      action: 'generate'
    }, 'Requesting token using: %s', JSON.stringify(loggedUrlOptions));
    this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body) => {
      let data;

      if (error) {
        return callback(error);
      }

      try {
        data = JSON.parse(body.toString());
      } catch (E) {
        return callback(E);
      }

      if (!data || typeof data !== 'object') {
        this.logger.debug({
          tnx: 'OAUTH2',
          user: this.options.user,
          action: 'post'
        }, 'Response: %s', (body || '').toString());
        return callback(new Error('Invalid authentication response'));
      }

      let logData = {};
      Object.keys(data).forEach(key => {
        if (key !== 'access_token') {
          logData[key] = data[key];
        } else {
          logData[key] = (data[key] || '').toString().substr(0, 6) + '...';
        }
      });
      this.logger.debug({
        tnx: 'OAUTH2',
        user: this.options.user,
        action: 'post'
      }, 'Response: %s', JSON.stringify(logData));

      if (data.error) {
        // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2
        let errorMessage = data.error;

        if (data.error_description) {
          errorMessage += ': ' + data.error_description;
        }

        if (data.error_uri) {
          errorMessage += ' (' + data.error_uri + ')';
        }

        return callback(new Error(errorMessage));
      }

      if (data.access_token) {
        this.updateToken(data.access_token, data.expires_in);
        return callback(null, this.accessToken);
      }

      return callback(new Error('No access token'));
    });
  }
  /**
   * Converts an access_token and user id into a base64 encoded XOAuth2 token
   *
   * @param {String} [accessToken] Access token string
   * @return {String} Base64 encoded token for IMAP or SMTP login
   */


  buildXOAuth2Token(accessToken) {
    let authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];
    return Buffer.from(authData.join('\x01'), 'utf-8').toString('base64');
  }
  /**
   * Custom POST request handler.
   * This is only needed to keep paths short in Windows – usually this module
   * is a dependency of a dependency and if it tries to require something
   * like the request module the paths get way too long to handle for Windows.
   * As we do only a simple POST request we do not actually require complicated
   * logic support (no redirects, no nothing) anyway.
   *
   * @param {String} url Url to POST to
   * @param {String|Buffer} payload Payload to POST
   * @param {Function} callback Callback function with (err, buff)
   */


  postRequest(url, payload, params, callback) {
    let returned = false;
    let chunks = [];
    let chunklen = 0;
    let req = fetch(url, {
      method: 'post',
      headers: params.customHeaders,
      body: payload,
      allowErrorResponse: true
    });
    req.on('readable', () => {
      let chunk;

      while ((chunk = req.read()) !== null) {
        chunks.push(chunk);
        chunklen += chunk.length;
      }
    });
    req.once('error', err => {
      if (returned) {
        return;
      }

      returned = true;
      return callback(err);
    });
    req.once('end', () => {
      if (returned) {
        return;
      }

      returned = true;
      return callback(null, Buffer.concat(chunks, chunklen));
    });
  }
  /**
   * Encodes a buffer or a string into Base64url format
   *
   * @param {Buffer|String} data The data to convert
   * @return {String} The encoded string
   */


  toBase64URL(data) {
    if (typeof data === 'string') {
      data = Buffer.from(data);
    }

    return data.toString('base64').replace(/[=]+/g, '') // remove '='s
    .replace(/\+/g, '-') // '+' → '-'
    .replace(/\//g, '_'); // '/' → '_'
  }
  /**
   * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)
   *
   * @param {Object} payload The payload to include in the generated token
   * @return {String} The generated and signed token
   */


  jwtSignRS256(payload) {
    payload = ['{"alg":"RS256","typ":"JWT"}', JSON.stringify(payload)].map(val => this.toBase64URL(val)).join('.');
    let signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);
    return payload + '.' + this.toBase64URL(signature);
  }

}

module.exports = XOAuth2;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const services = __webpack_require__(104);

const normalized = {};
Object.keys(services).forEach(key => {
  let service = services[key];
  normalized[normalizeKey(key)] = normalizeService(service);
  [].concat(service.aliases || []).forEach(alias => {
    normalized[normalizeKey(alias)] = normalizeService(service);
  });
  [].concat(service.domains || []).forEach(domain => {
    normalized[normalizeKey(domain)] = normalizeService(service);
  });
});

function normalizeKey(key) {
  return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();
}

function normalizeService(service) {
  let filter = ['domains', 'aliases'];
  let response = {};
  Object.keys(service).forEach(key => {
    if (filter.indexOf(key) < 0) {
      response[key] = service[key];
    }
  });
  return response;
}
/**
 * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or
 * an email address (like 'test@googlemail.com').
 *
 * @param {String} key [description]
 * @returns {Object} SMTP config or false if not found
 */


module.exports = function (key) {
  key = normalizeKey(key.split('@').pop());
  return normalized[key] || false;
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(34);
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(119);

var combineURLs = __webpack_require__(120);
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */


module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }

  return requestedURL;
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var url = __webpack_require__(1);

var URL = url.URL;

var http = __webpack_require__(6);

var https = __webpack_require__(10);

var Writable = __webpack_require__(0).Writable;

var assert = __webpack_require__(58);

var debug = __webpack_require__(124); // Create handlers that pass events from native requests


var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
}); // Error types with codes

var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end"); // An HTTP(S) request that can be redirected

function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);

  this._sanitizeOptions(options);

  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = []; // Attach a callback if passed

  if (responseCallback) {
    this.on("response", responseCallback);
  } // React to responses of native requests


  var self = this;

  this._onNativeResponse = function (response) {
    self._processResponse(response);
  }; // Perform the first request


  this._performRequest();
}

RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  abortRequest(this._currentRequest);
  this.emit("abort");
}; // Writes buffered data to the current native request


RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  } // Validate input and shift parameters if necessary


  if (!(typeof data === "string" || typeof data === "object" && "length" in data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }

  if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066


  if (data.length === 0) {
    if (callback) {
      callback();
    }

    return;
  } // Only write when we don't exceed the maximum body length


  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;

    this._requestBodyBuffers.push({
      data: data,
      encoding: encoding
    });

    this._currentRequest.write(data, encoding, callback);
  } // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
}; // Ends the current native request


RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (typeof data === "function") {
    callback = data;
    data = encoding = null;
  } else if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Write data if needed and end


  if (!data) {
    this._ended = this._ending = true;

    this._currentRequest.end(null, null, callback);
  } else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
}; // Sets a header value on the current native request


RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;

  this._currentRequest.setHeader(name, value);
}; // Clears a header value on the current native request


RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];

  this._currentRequest.removeHeader(name);
}; // Global timeout for all underlying requests


RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this; // Destroys the socket on timeout

  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  } // Sets up a timer to trigger a timeout event


  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }

    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  } // Stops a timeout from triggering


  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    } // Clean up all attached listeners


    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);

    if (callback) {
      self.removeListener("timeout", callback);
    }

    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  } // Attach callback if passed


  if (callback) {
    this.on("timeout", callback);
  } // Start the timer if or when the socket is opened


  if (this.socket) {
    startTimer(this.socket);
  } else {
    this._currentRequest.once("socket", startTimer);
  } // Clean up on events


  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  return this;
}; // Proxy all other public ClientRequest methods


["flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
}); // Proxy all public ClientRequest properties

["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () {
      return this._currentRequest[property];
    }
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  } // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.


  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }

    delete options.host;
  } // Complete the URL object when necessary


  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");

    if (searchPos < 0) {
      options.pathname = options.path;
    } else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
}; // Executes the next native request (initial or redirect)


RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];

  if (!nativeProtocol) {
    this.emit("error", new TypeError("Unsupported protocol " + protocol));
    return;
  } // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)


  if (this._options.agents) {
    var scheme = protocol.substr(0, protocol.length - 1);
    this._options.agent = this._options.agents[scheme];
  } // Create the native request


  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
  this._currentUrl = url.format(this._options); // Set up event handlers

  request._redirectable = this;

  for (var e = 0; e < events.length; e++) {
    request.on(events[e], eventHandlers[events[e]]);
  } // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)


  if (this._isRedirect) {
    // Write the request entity and end.
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;

    (function writeNext(error) {
      // Only write if this request has not been redirected yet

      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors

        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        } // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          /* istanbul ignore else */

          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        } // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    })();
  }
}; // Processes a response from the current native request


RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;

  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode
    });
  } // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.


  var location = response.headers.location;

  if (location && this._options.followRedirects !== false && statusCode >= 300 && statusCode < 400) {
    // Abort the current request
    abortRequest(this._currentRequest); // Discard the remainder of the response to avoid waiting for data

    response.destroy(); // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).

    if (++this._redirectCount > this._options.maxRedirects) {
      this.emit("error", new TooManyRedirectsError());
      return;
    } // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe, […]
    // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
    // the request method from POST to GET for the subsequent request.


    if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
    // the server is redirecting the user agent to a different resource […]
    // A user agent can perform a retrieval request targeting that URI
    // (a GET or HEAD request if using HTTP) […]
    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
      this._options.method = "GET"; // Drop a possible entity and headers related to it

      this._requestBodyBuffers = [];
      removeMatchingHeaders(/^content-/i, this._options.headers);
    } // Drop the Host header, as the redirect might lead to a different host


    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers); // If the redirect is relative, carry over the host of the last request

    var currentUrlParts = url.parse(this._currentUrl);
    var currentHost = currentHostHeader || currentUrlParts.host;
    var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
      host: currentHost
    })); // Determine the URL of the redirection

    var redirectUrl;

    try {
      redirectUrl = url.resolve(currentUrl, location);
    } catch (cause) {
      this.emit("error", new RedirectionError(cause));
      return;
    } // Create the redirected request


    debug("redirecting to", redirectUrl);
    this._isRedirect = true;
    var redirectUrlParts = url.parse(redirectUrl);
    Object.assign(this._options, redirectUrlParts); // Drop the Authorization header if redirecting to another domain

    if (!(redirectUrlParts.host === currentHost || isSubdomainOf(redirectUrlParts.host, currentHost))) {
      removeMatchingHeaders(/^authorization$/i, this._options.headers);
    } // Evaluate the beforeRedirect callback


    if (typeof this._options.beforeRedirect === "function") {
      var responseDetails = {
        headers: response.headers
      };

      try {
        this._options.beforeRedirect.call(null, this._options, responseDetails);
      } catch (err) {
        this.emit("error", err);
        return;
      }

      this._sanitizeOptions(this._options);
    } // Perform the redirected request


    try {
      this._performRequest();
    } catch (cause) {
      this.emit("error", new RedirectionError(cause));
    }
  } else {
    // The response is not a redirect; return it as-is
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response); // Clean up

    this._requestBodyBuffers = [];
  }
}; // Wraps the key/value object of protocols with redirect functionality


function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024
  }; // Wrap each protocol

  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects

    function request(input, options, callback) {
      // Parse parameters
      if (typeof input === "string") {
        var urlStr = input;

        try {
          input = urlToOptions(new URL(urlStr));
        } catch (err) {
          /* istanbul ignore next */
          input = url.parse(urlStr);
        }
      } else if (URL && input instanceof URL) {
        input = urlToOptions(input);
      } else {
        callback = options;
        options = input;
        input = {
          protocol: protocol
        };
      }

      if (typeof options === "function") {
        callback = options;
        options = null;
      } // Set defaults


      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    } // Executes a GET request, following redirects


    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    } // Expose the properties on the wrapped protocol


    Object.defineProperties(wrappedProtocol, {
      request: {
        value: request,
        configurable: true,
        enumerable: true,
        writable: true
      },
      get: {
        value: get,
        configurable: true,
        enumerable: true,
        writable: true
      }
    });
  });
  return exports;
}
/* istanbul ignore next */


function noop() {
  /* empty */
} // from https://github.com/nodejs/node/blob/master/lib/internal/url.js


function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ?
    /* istanbul ignore next */
    urlObject.hostname.slice(1, -1) : urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href
  };

  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }

  return options;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;

  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }

  return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
}

function createErrorType(code, defaultMessage) {
  function CustomError(cause) {
    Error.captureStackTrace(this, this.constructor);

    if (!cause) {
      this.message = defaultMessage;
    } else {
      this.message = defaultMessage + ": " + cause.message;
      this.cause = cause;
    }
  }

  CustomError.prototype = new Error();
  CustomError.prototype.constructor = CustomError;
  CustomError.prototype.name = "Error [" + code + "]";
  CustomError.prototype.code = code;
  return CustomError;
}

function abortRequest(request) {
  for (var e = 0; e < events.length; e++) {
    request.removeListener(events[e], eventHandlers[events[e]]);
  }

  request.on("error", noop);
  request.abort();
}

function isSubdomainOf(subdomain, domain) {
  const dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
} // Exports


module.exports = wrap({
  http: http,
  https: https
});
module.exports.wrap = wrap;

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */
if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
  module.exports = __webpack_require__(125);
} else {
  module.exports = __webpack_require__(127);
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(126);
  createDebug.destroy = destroy;
  Object.keys(env).forEach(key => {
    createDebug[key] = env[key];
  });
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    let hash = 0;

    for (let i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    let prevTime;
    let enableOverride = null;
    let namespacesCache;
    let enabledCache;

    function debug(...args) {
      // Disabled?
      if (!debug.enabled) {
        return;
      }

      const self = debug; // Set `diff` timestamp

      const curr = Number(new Date());
      const ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return '%';
        }

        index++;
        const formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          const val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      const logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.useColors = createDebug.useColors();
    debug.color = createDebug.selectColor(namespace);
    debug.extend = extend;
    debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    Object.defineProperty(debug, 'enabled', {
      enumerable: true,
      configurable: false,
      get: () => {
        if (enableOverride !== null) {
          return enableOverride;
        }

        if (namespacesCache !== createDebug.namespaces) {
          namespacesCache = createDebug.namespaces;
          enabledCache = createDebug.enabled(namespace);
        }

        return enabledCache;
      },
      set: v => {
        enableOverride = v;
      }
    }); // Env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    return debug;
  }

  function extend(namespace, delimiter) {
    const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.namespaces = namespaces;
    createDebug.names = [];
    createDebug.skips = [];
    let i;
    const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    const len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    let i;
    let len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }
  /**
  * XXX DO NOT USE. This is a temporary stub function.
  * XXX It WILL be removed in the next major release.
  */


  function destroy() {
    console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = require("tty");

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }

    return source;
  } // eslint-disable-next-line consistent-return


  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };
  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);
/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/


function toFormData(obj, formData) {
  // eslint-disable-next-line no-param-reassign
  formData = formData || new FormData();
  var stack = [];

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  function build(data, parentKey) {
    if (utils.isPlainObject(data) || utils.isArray(data)) {
      if (stack.indexOf(data) !== -1) {
        throw Error('Circular reference detected in ' + parentKey);
      }

      stack.push(data);
      utils.forEach(data, function each(value, key) {
        if (utils.isUndefined(value)) return;
        var fullKey = parentKey ? parentKey + '.' + key : key;
        var arr;

        if (value && !parentKey && typeof value === 'object') {
          if (utils.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
            // eslint-disable-next-line func-names
            arr.forEach(function (el) {
              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
            });
            return;
          }
        }

        build(value, fullKey);
      });
      stack.pop();
    } else {
      formData.append(parentKey, convertValue(data));
    }
  }

  build(obj);
  return formData;
}

module.exports = toFormData;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AxiosError = __webpack_require__(14);
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError('Request failed with status code ' + response.status, [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
  }
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var url = __webpack_require__(1);

var URL = url.URL;

var http = __webpack_require__(6);

var https = __webpack_require__(10);

var Writable = __webpack_require__(0).Writable;

var assert = __webpack_require__(58);

var debug = __webpack_require__(149); // Create handlers that pass events from native requests


var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
}); // Error types with codes

var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end"); // An HTTP(S) request that can be redirected

function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);

  this._sanitizeOptions(options);

  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = []; // Attach a callback if passed

  if (responseCallback) {
    this.on("response", responseCallback);
  } // React to responses of native requests


  var self = this;

  this._onNativeResponse = function (response) {
    self._processResponse(response);
  }; // Perform the first request


  this._performRequest();
}

RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  abortRequest(this._currentRequest);
  this.emit("abort");
}; // Writes buffered data to the current native request


RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  } // Validate input and shift parameters if necessary


  if (!(typeof data === "string" || typeof data === "object" && "length" in data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }

  if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066


  if (data.length === 0) {
    if (callback) {
      callback();
    }

    return;
  } // Only write when we don't exceed the maximum body length


  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;

    this._requestBodyBuffers.push({
      data: data,
      encoding: encoding
    });

    this._currentRequest.write(data, encoding, callback);
  } // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
}; // Ends the current native request


RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (typeof data === "function") {
    callback = data;
    data = encoding = null;
  } else if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Write data if needed and end


  if (!data) {
    this._ended = this._ending = true;

    this._currentRequest.end(null, null, callback);
  } else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
}; // Sets a header value on the current native request


RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;

  this._currentRequest.setHeader(name, value);
}; // Clears a header value on the current native request


RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];

  this._currentRequest.removeHeader(name);
}; // Global timeout for all underlying requests


RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this; // Destroys the socket on timeout

  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  } // Sets up a timer to trigger a timeout event


  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }

    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  } // Stops a timeout from triggering


  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    } // Clean up all attached listeners


    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);

    if (callback) {
      self.removeListener("timeout", callback);
    }

    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  } // Attach callback if passed


  if (callback) {
    this.on("timeout", callback);
  } // Start the timer if or when the socket is opened


  if (this.socket) {
    startTimer(this.socket);
  } else {
    this._currentRequest.once("socket", startTimer);
  } // Clean up on events


  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  return this;
}; // Proxy all other public ClientRequest methods


["flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
}); // Proxy all public ClientRequest properties

["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () {
      return this._currentRequest[property];
    }
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  } // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.


  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }

    delete options.host;
  } // Complete the URL object when necessary


  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");

    if (searchPos < 0) {
      options.pathname = options.path;
    } else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
}; // Executes the next native request (initial or redirect)


RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];

  if (!nativeProtocol) {
    this.emit("error", new TypeError("Unsupported protocol " + protocol));
    return;
  } // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)


  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  } // Create the native request and set up its event handlers


  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;

  for (var event of events) {
    request.on(event, eventHandlers[event]);
  } // RFC7230§5.3.1: When making a request directly to an origin server, […]
  // a client MUST send only the absolute path […] as the request-target.


  this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : // When making a request to a proxy, […]
  // a client MUST send the target URI in absolute-form […].
  this._currentUrl = this._options.path; // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)

  if (this._isRedirect) {
    // Write the request entity and end
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;

    (function writeNext(error) {
      // Only write if this request has not been redirected yet

      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors

        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        } // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          /* istanbul ignore else */

          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        } // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    })();
  }
}; // Processes a response from the current native request


RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;

  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode
    });
  } // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.
  // If the response is not a redirect; return it as-is


  var location = response.headers.location;

  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response); // Clean up

    this._requestBodyBuffers = [];
    return;
  } // The response is a redirect, so abort the current request


  abortRequest(this._currentRequest); // Discard the remainder of the response to avoid waiting for data

  response.destroy(); // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).

  if (++this._redirectCount > this._options.maxRedirects) {
    this.emit("error", new TooManyRedirectsError());
    return;
  } // Store the request headers if applicable


  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;

  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host")
    }, this._options.headers);
  } // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.


  var method = this._options.method;

  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
  // the server is redirecting the user agent to a different resource […]
  // A user agent can perform a retrieval request targeting that URI
  // (a GET or HEAD request if using HTTP) […]
  statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET"; // Drop a possible entity and headers related to it

    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  } // Drop the Host header, as the redirect might lead to a different host


  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers); // If the redirect is relative, carry over the host of the last request

  var currentUrlParts = url.parse(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
    host: currentHost
  })); // Determine the URL of the redirection

  var redirectUrl;

  try {
    redirectUrl = url.resolve(currentUrl, location);
  } catch (cause) {
    this.emit("error", new RedirectionError(cause));
    return;
  } // Create the redirected request


  debug("redirecting to", redirectUrl);
  this._isRedirect = true;
  var redirectUrlParts = url.parse(redirectUrl);
  Object.assign(this._options, redirectUrlParts); // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain

  if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  } // Evaluate the beforeRedirect callback


  if (typeof beforeRedirect === "function") {
    var responseDetails = {
      headers: response.headers,
      statusCode: statusCode
    };
    var requestDetails = {
      url: currentUrl,
      method: method,
      headers: requestHeaders
    };

    try {
      beforeRedirect(this._options, responseDetails, requestDetails);
    } catch (err) {
      this.emit("error", err);
      return;
    }

    this._sanitizeOptions(this._options);
  } // Perform the redirected request


  try {
    this._performRequest();
  } catch (cause) {
    this.emit("error", new RedirectionError(cause));
  }
}; // Wraps the key/value object of protocols with redirect functionality


function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024
  }; // Wrap each protocol

  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects

    function request(input, options, callback) {
      // Parse parameters
      if (typeof input === "string") {
        var urlStr = input;

        try {
          input = urlToOptions(new URL(urlStr));
        } catch (err) {
          /* istanbul ignore next */
          input = url.parse(urlStr);
        }
      } else if (URL && input instanceof URL) {
        input = urlToOptions(input);
      } else {
        callback = options;
        options = input;
        input = {
          protocol: protocol
        };
      }

      if (typeof options === "function") {
        callback = options;
        options = null;
      } // Set defaults


      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    } // Executes a GET request, following redirects


    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    } // Expose the properties on the wrapped protocol


    Object.defineProperties(wrappedProtocol, {
      request: {
        value: request,
        configurable: true,
        enumerable: true,
        writable: true
      },
      get: {
        value: get,
        configurable: true,
        enumerable: true,
        writable: true
      }
    });
  });
  return exports;
}
/* istanbul ignore next */


function noop() {
  /* empty */
} // from https://github.com/nodejs/node/blob/master/lib/internal/url.js


function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ?
    /* istanbul ignore next */
    urlObject.hostname.slice(1, -1) : urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href
  };

  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }

  return options;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;

  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }

  return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
}

function createErrorType(code, defaultMessage) {
  function CustomError(cause) {
    Error.captureStackTrace(this, this.constructor);

    if (!cause) {
      this.message = defaultMessage;
    } else {
      this.message = defaultMessage + ": " + cause.message;
      this.cause = cause;
    }
  }

  CustomError.prototype = new Error();
  CustomError.prototype.constructor = CustomError;
  CustomError.prototype.name = "Error [" + code + "]";
  CustomError.prototype.code = code;
  return CustomError;
}

function abortRequest(request) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }

  request.on("error", noop);
  request.abort();
}

function isSubdomain(subdomain, domain) {
  const dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
} // Exports


module.exports = wrap({
  http: http,
  https: https
});
module.exports.wrap = wrap;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var async = __webpack_require__(69),
    abort = __webpack_require__(70); // API


module.exports = iterate;
/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */

function iterate(list, iterator, state, callback) {
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;
  state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs)) {
      return;
    } // clean up jobs


    delete state.jobs[key];

    if (error) {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort(state);
    } else {
      state.results[key] = output;
    } // return salvaged results


    callback(error, state.results);
  });
}
/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */


function runJob(iterator, key, item, callback) {
  var aborter; // allow shortcut if iterator expects only two arguments

  if (iterator.length == 2) {
    aborter = iterator(item, async(callback));
  } // otherwise go with full three arguments
  else {
    aborter = iterator(item, key, async(callback));
  }

  return aborter;
}

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var defer = __webpack_require__(159); // API


module.exports = async;
/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */

function async(callback) {
  var isAsync = false; // check if async happened

  defer(function () {
    isAsync = true;
  });
  return function async_callback(err, result) {
    if (isAsync) {
      callback(err, result);
    } else {
      defer(function nextTick_callback() {
        callback(err, result);
      });
    }
  };
}

/***/ }),
/* 70 */
/***/ (function(module, exports) {

// API
module.exports = abort;
/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */

function abort(state) {
  Object.keys(state.jobs).forEach(clean.bind(state)); // reset leftover jobs

  state.jobs = {};
}
/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */


function clean(key) {
  if (typeof this.jobs[key] == 'function') {
    this.jobs[key]();
  }
}

/***/ }),
/* 71 */
/***/ (function(module, exports) {

// API
module.exports = state;
/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */

function state(list, sortMethod) {
  var isNamedList = !Array.isArray(list),
      initState = {
    index: 0,
    keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
    jobs: {},
    results: isNamedList ? {} : [],
    size: isNamedList ? Object.keys(list).length : list.length
  };

  if (sortMethod) {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(isNamedList ? sortMethod : function (a, b) {
      return sortMethod(list[a], list[b]);
    });
  }

  return initState;
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var abort = __webpack_require__(70),
    async = __webpack_require__(69); // API


module.exports = terminator;
/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */

function terminator(callback) {
  if (!Object.keys(this.jobs).length) {
    return;
  } // fast forward iteration index


  this.index = this.size; // abort jobs

  abort(this); // send back results we have so far

  async(callback)(null, this.results);
}

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var iterate = __webpack_require__(68),
    initState = __webpack_require__(71),
    terminator = __webpack_require__(72); // Public API


module.exports = serialOrdered; // sorting helpers

module.exports.ascending = ascending;
module.exports.descending = descending;
/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

function serialOrdered(list, iterator, sortMethod, callback) {
  var state = initState(list, sortMethod);
  iterate(list, iterator, state, function iteratorHandler(error, result) {
    if (error) {
      callback(error, result);
      return;
    }

    state.index++; // are we there yet?

    if (state.index < (state['keyedList'] || list).length) {
      iterate(list, iterator, state, iteratorHandler);
      return;
    } // done here


    callback(null, state.results);
  });
  return terminator.bind(state, callback);
}
/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */


function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */


function descending(a, b) {
  return -1 * ascending(a, b);
}

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }

    return source;
  } // eslint-disable-next-line consistent-return


  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'beforeRedirect': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };
  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var formats = __webpack_require__(43);

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = function () {
  var array = [];

  for (var i = 0; i < 256; ++i) {
    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
  }

  return array;
}();

var compactQueue = function compactQueue(queue) {
  while (queue.length > 1) {
    var item = queue.pop();
    var obj = item.obj[item.prop];

    if (isArray(obj)) {
      var compacted = [];

      for (var j = 0; j < obj.length; ++j) {
        if (typeof obj[j] !== 'undefined') {
          compacted.push(obj[j]);
        }
      }

      item.obj[item.prop] = compacted;
    }
  }
};

var arrayToObject = function arrayToObject(source, options) {
  var obj = options && options.plainObjects ? Object.create(null) : {};

  for (var i = 0; i < source.length; ++i) {
    if (typeof source[i] !== 'undefined') {
      obj[i] = source[i];
    }
  }

  return obj;
};

var merge = function merge(target, source, options) {
  /* eslint no-param-reassign: 0 */
  if (!source) {
    return target;
  }

  if (typeof source !== 'object') {
    if (isArray(target)) {
      target.push(source);
    } else if (target && typeof target === 'object') {
      if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
        target[source] = true;
      }
    } else {
      return [target, source];
    }

    return target;
  }

  if (!target || typeof target !== 'object') {
    return [target].concat(source);
  }

  var mergeTarget = target;

  if (isArray(target) && !isArray(source)) {
    mergeTarget = arrayToObject(target, options);
  }

  if (isArray(target) && isArray(source)) {
    source.forEach(function (item, i) {
      if (has.call(target, i)) {
        var targetItem = target[i];

        if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
          target[i] = merge(targetItem, item, options);
        } else {
          target.push(item);
        }
      } else {
        target[i] = item;
      }
    });
    return target;
  }

  return Object.keys(source).reduce(function (acc, key) {
    var value = source[key];

    if (has.call(acc, key)) {
      acc[key] = merge(acc[key], value, options);
    } else {
      acc[key] = value;
    }

    return acc;
  }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
  return Object.keys(source).reduce(function (acc, key) {
    acc[key] = source[key];
    return acc;
  }, target);
};

var decode = function (str, decoder, charset) {
  var strWithoutPlus = str.replace(/\+/g, ' ');

  if (charset === 'iso-8859-1') {
    // unescape never throws, no try...catch needed:
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
  } // utf-8


  try {
    return decodeURIComponent(strWithoutPlus);
  } catch (e) {
    return strWithoutPlus;
  }
};

var encode = function encode(str, defaultEncoder, charset, kind, format) {
  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
  // It has been adapted here for stricter adherence to RFC 3986
  if (str.length === 0) {
    return str;
  }

  var string = str;

  if (typeof str === 'symbol') {
    string = Symbol.prototype.toString.call(str);
  } else if (typeof str !== 'string') {
    string = String(str);
  }

  if (charset === 'iso-8859-1') {
    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
      return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
    });
  }

  var out = '';

  for (var i = 0; i < string.length; ++i) {
    var c = string.charCodeAt(i);

    if (c === 0x2D // -
    || c === 0x2E // .
    || c === 0x5F // _
    || c === 0x7E // ~
    || c >= 0x30 && c <= 0x39 // 0-9
    || c >= 0x41 && c <= 0x5A // a-z
    || c >= 0x61 && c <= 0x7A // A-Z
    || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )
    ) {
      out += string.charAt(i);
      continue;
    }

    if (c < 0x80) {
      out = out + hexTable[c];
      continue;
    }

    if (c < 0x800) {
      out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
      continue;
    }

    if (c < 0xD800 || c >= 0xE000) {
      out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
      continue;
    }

    i += 1;
    c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
    /* eslint operator-linebreak: [2, "before"] */

    out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
  }

  return out;
};

var compact = function compact(value) {
  var queue = [{
    obj: {
      o: value
    },
    prop: 'o'
  }];
  var refs = [];

  for (var i = 0; i < queue.length; ++i) {
    var item = queue[i];
    var obj = item.obj[item.prop];
    var keys = Object.keys(obj);

    for (var j = 0; j < keys.length; ++j) {
      var key = keys[j];
      var val = obj[key];

      if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
        queue.push({
          obj: obj,
          prop: key
        });
        refs.push(val);
      }
    }
  }

  compactQueue(queue);
  return value;
};

var isRegExp = function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
  return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
  if (isArray(val)) {
    var mapped = [];

    for (var i = 0; i < val.length; i += 1) {
      mapped.push(fn(val[i]));
    }

    return mapped;
  }

  return fn(val);
};

module.exports = {
  arrayToObject: arrayToObject,
  assign: assign,
  combine: combine,
  compact: compact,
  decode: decode,
  encode: encode,
  isBuffer: isBuffer,
  isRegExp: isRegExp,
  maybeMap: maybeMap,
  merge: merge
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mixinStringifySafe;

var _jsonStringifySafe = _interopRequireDefault(__webpack_require__(181));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function mixinStringifySafe(data) {
  return Object.defineProperty(data, 'stringifySafe', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function () {
      let serializer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      let indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return (0, _jsonStringifySafe.default)(this, serializer, indent, (key, value) => {
        return {
          sys: {
            type: 'Link',
            linkType: 'Entry',
            id: value.sys.id,
            circular: true
          }
        };
      });
    }
  });
}

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var fast_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}


var UNRESOLVED_LINK = {}; // unique object to avoid polyfill bloat using Symbol()

/**
 * isLink Function
 * Checks if the object has sys.type "Link"
 * @param object
 */

var isLink = function isLink(object) {
  return object && object.sys && object.sys.type === 'Link';
};
/**
 * Creates a string key for lookup in entityMap
 *
 * @param {*} sys
 * @param {String} sys.type
 * @param {String} sys.id
 * @return {String}
 */


var makeLookupKey = function makeLookupKey(sys) {
  return sys.type + '!' + sys.id;
};
/**
 * getLink Function
 *
 * @param response
 * @param link
 * @return {undefined}
 */


var getLink = function getLink(entityMap, link) {
  var _link$sys = link.sys,
      type = _link$sys.linkType,
      id = _link$sys.id;
  var lookupKey = makeLookupKey({
    type: type,
    id: id
  });
  return entityMap.get(lookupKey) || UNRESOLVED_LINK;
};
/**
 * cleanUpLinks Function
 * - Removes unresolvable links from Arrays and Objects
 *
 * @param {Object[]|Object} input
 */


var cleanUpLinks = function cleanUpLinks(input) {
  if (Array.isArray(input)) {
    return input.filter(function (val) {
      return val !== UNRESOLVED_LINK;
    });
  }

  for (var key in input) {
    if (input[key] === UNRESOLVED_LINK) {
      delete input[key];
    }
  }

  return input;
};
/**
 * walkMutate Function
 * @param input
 * @param predicate
 * @param mutator
 * @return {*}
 */


var walkMutate = function walkMutate(input, predicate, mutator, removeUnresolved) {
  if (predicate(input)) {
    return mutator(input);
  }

  if (input && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
    for (var key in input) {
      // eslint-disable-next-line no-prototype-builtins
      if (input.hasOwnProperty(key)) {
        input[key] = walkMutate(input[key], predicate, mutator, removeUnresolved);
      }
    }

    if (removeUnresolved) {
      input = cleanUpLinks(input);
    }
  }

  return input;
};

var normalizeLink = function normalizeLink(entityMap, link, removeUnresolved) {
  var resolvedLink = getLink(entityMap, link);

  if (resolvedLink === UNRESOLVED_LINK) {
    return removeUnresolved ? resolvedLink : link;
  }

  return resolvedLink;
};

var makeEntryObject = function makeEntryObject(item, itemEntryPoints) {
  if (!Array.isArray(itemEntryPoints)) {
    return item;
  }

  var entryPoints = Object.keys(item).filter(function (ownKey) {
    return itemEntryPoints.indexOf(ownKey) !== -1;
  });
  return entryPoints.reduce(function (entryObj, entryPoint) {
    entryObj[entryPoint] = item[entryPoint];
    return entryObj;
  }, {});
};
/**
 * resolveResponse Function
 * Resolves contentful response to normalized form.
 * @param {Object} response Contentful response
 * @param {{removeUnresolved: Boolean, itemEntryPoints: Array<String>}|{}} options
 * @param {Boolean} options.removeUnresolved - Remove unresolved links default:false
 * @param {Array<String>} options.itemEntryPoints - Resolve links only in those item properties
 * @return {Object}
 */


var resolveResponse = function resolveResponse(response, options) {
  options = options || {};

  if (!response.items) {
    return [];
  }

  var responseClone = Object(fast_copy__WEBPACK_IMPORTED_MODULE_0__["default"])(response);
  var allIncludes = Object.keys(responseClone.includes || {}).reduce(function (all, type) {
    return [].concat(_toConsumableArray(all), _toConsumableArray(response.includes[type]));
  }, []);
  var allEntries = [].concat(_toConsumableArray(responseClone.items), _toConsumableArray(allIncludes));
  var entityMap = new Map(allEntries.map(function (entity) {
    return [makeLookupKey(entity.sys), entity];
  }));
  allEntries.forEach(function (item) {
    var entryObject = makeEntryObject(item, options.itemEntryPoints);
    Object.assign(item, walkMutate(entryObject, isLink, function (link) {
      return normalizeLink(entityMap, link, options.removeUnresolved);
    }, options.removeUnresolved));
  });
  return responseClone.items;
};

/* harmony default export */ __webpack_exports__["default"] = (resolveResponse);

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(111);

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createClient = createClient;

var _axios = _interopRequireDefault(__webpack_require__(134));

var _contentfulSdkCore = __webpack_require__(9);

var _createContentfulApi = _interopRequireDefault(__webpack_require__(177));

var _createGlobalOptions = _interopRequireDefault(__webpack_require__(190));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Create a client instance
 * @func
 * @name createClient
 * @memberof contentful
 * @param {Object} params - Client initialization parameters
 * @prop {string} params.space - Space ID
 * @prop {string} params.accessToken - Contentful CDA Access Token
 * @prop {string} [params.environment="master"] - Contentful Environment ID
 * @prop {boolean=} params.insecure - Requests will be made over http instead of the default https (default: true)
 * @prop {string=} params.host - API host (default: cdn.contentful.com). Also usable with preview.contentful.com.
 * @prop {string=} params.basePath - Path appended to the host to support gateways/proxies with custom urls.
 * @prop {Object=} params.httpAgent - Optional Node.js HTTP agent for proxying (see <a href="https://nodejs.org/api/http.html#http_class_http_agent">Node.js docs</a> and <a href="https://www.npmjs.com/package/https-proxy-agent">https-proxy-agent</a>)
 * @prop {Object=} params.httpsAgent - Optional Node.js HTTP agent for proxying (see <a href="https://nodejs.org/api/http.html#http_class_http_agent">Node.js docs</a> and <a href="https://www.npmjs.com/package/https-proxy-agent">https-proxy-agent</a>)
 * @prop {Object=} params.proxy - Optional Axios proxy (see <a href="https://github.com/mzabriskie/axios#request-config"> axios docs </a>)
 * @prop {Object=} params.headers - Optional additional headers
 * @prop {function=} params.adapter - Optional axios request adapter (see <a href="https://github.com/mzabriskie/axios#request-config"> axios docs </a>)
 * @prop {boolean=?} params.resolveLinks - If we should resolve links between entries (default: true)
 * @prop {boolean=?} params.removeUnresolved - If we should remove links to entries which could not be resolved (default: false)
 * @prop {boolean=?} params.retryOnError - If we should retry on errors and 429 rate limit exceptions (default: true)
 * @prop {function=} params.logHandler - A log handler function to process given log messages & errors. Receives the log level (error, warning & info) and the actual log data (Error object or string). (The default can be found at: https://github.com/contentful/contentful-sdk-core/blob/master/src/create-http-client.ts)
 * @prop {string=?} params.application - Application name and version e.g myApp/version
 * @prop {string=?} params.integration - Integration name and version e.g react/version
 * @prop {number=} params.timeout in milliseconds - connection timeout (default:30000)
 * @prop {number=} params.retryLimit - Optional number of retries before failure. Default is 5
 * @returns {ContentfulClientAPI.ClientAPI}
 * @example
 * const contentful = require('contentful')
 * const client = contentful.createClient({
 *  accessToken: 'myAccessToken',
 *  space: 'mySpaceId'
 * })
 */


function createClient(params) {
  if (!params.accessToken) {
    throw new TypeError('Expected parameter accessToken');
  }

  if (!params.space) {
    throw new TypeError('Expected parameter space');
  }

  const defaultConfig = {
    resolveLinks: true,
    removeUnresolved: false,
    defaultHostname: 'cdn.contentful.com',
    environment: 'master'
  };

  const config = _objectSpread(_objectSpread({}, defaultConfig), params);

  const userAgentHeader = (0, _contentfulSdkCore.getUserAgentHeader)(`contentful.js/${"9.1.32"}`, config.application, config.integration);
  config.headers = _objectSpread(_objectSpread({}, config.headers), {}, {
    'Content-Type': 'application/vnd.contentful.delivery.v1+json',
    'X-Contentful-User-Agent': userAgentHeader
  });
  const http = (0, _contentfulSdkCore.createHttpClient)(_axios.default, config);
  const getGlobalOptions = (0, _createGlobalOptions.default)({
    resolveLinks: config.resolveLinks,
    environment: config.environment,
    removeUnresolved: config.removeUnresolved,
    spaceBaseUrl: http.defaults.baseURL,
    environmentBaseUrl: `${http.defaults.baseURL}environments/${config.environment}`
  }); // Append environment to baseURL

  http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;
  return (0, _createContentfulApi.default)({
    http,
    getGlobalOptions
  });
}

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var stringify = __webpack_require__(166);

var parse = __webpack_require__(176);

var formats = __webpack_require__(43);

module.exports = {
  formats: formats,
  parse: parse,
  stringify: stringify
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class AbortError extends Error {
  constructor() {
    super('Throttled function aborted');
    this.name = 'AbortError';
  }

}

const pThrottle = ({
  limit,
  interval,
  strict
}) => {
  if (!Number.isFinite(limit)) {
    throw new TypeError('Expected `limit` to be a finite number');
  }

  if (!Number.isFinite(interval)) {
    throw new TypeError('Expected `interval` to be a finite number');
  }

  const queue = new Map();
  let currentTick = 0;
  let activeCount = 0;

  function windowedDelay() {
    const now = Date.now();

    if (now - currentTick > interval) {
      activeCount = 1;
      currentTick = now;
      return 0;
    }

    if (activeCount < limit) {
      activeCount++;
    } else {
      currentTick += interval;
      activeCount = 1;
    }

    return currentTick - now;
  }

  const strictTicks = [];

  function strictDelay() {
    const now = Date.now();

    if (strictTicks.length < limit) {
      strictTicks.push(now);
      return 0;
    }

    const earliestTime = strictTicks.shift() + interval;

    if (now >= earliestTime) {
      strictTicks.push(now);
      return 0;
    }

    strictTicks.push(earliestTime);
    return earliestTime - now;
  }

  const getDelay = strict ? strictDelay : windowedDelay;
  return function_ => {
    const throttled = function (...args) {
      if (!throttled.isEnabled) {
        return (async () => function_.apply(this, args))();
      }

      let timeout;
      return new Promise((resolve, reject) => {
        const execute = () => {
          resolve(function_.apply(this, args));
          queue.delete(timeout);
        };

        timeout = setTimeout(execute, getDelay());
        queue.set(timeout, reject);
      });
    };

    throttled.abort = () => {
      for (const timeout of queue.keys()) {
        clearTimeout(timeout);
        queue.get(timeout)(new AbortError());
      }

      queue.clear();
      strictTicks.splice(0, strictTicks.length);
    };

    throttled.isEnabled = true;
    return throttled;
  };
};

module.exports = pThrottle;
module.exports.AbortError = AbortError;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const conversions = __webpack_require__(84);

const utils = __webpack_require__(85);

const Impl = __webpack_require__(86);

const impl = utils.implSymbol;

function URL(url) {
  if (!this || this[impl] || !(this instanceof URL)) {
    throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
  }

  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
  }

  const args = [];

  for (let i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["USVString"](args[0]);

  if (args[1] !== undefined) {
    args[1] = conversions["USVString"](args[1]);
  }

  module.exports.setup(this, args);
}

URL.prototype.toJSON = function toJSON() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  const args = [];

  for (let i = 0; i < arguments.length && i < 0; ++i) {
    args[i] = arguments[i];
  }

  return this[impl].toJSON.apply(this[impl], args);
};

Object.defineProperty(URL.prototype, "href", {
  get() {
    return this[impl].href;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].href = V;
  },

  enumerable: true,
  configurable: true
});

URL.prototype.toString = function () {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return this.href;
};

Object.defineProperty(URL.prototype, "origin", {
  get() {
    return this[impl].origin;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "protocol", {
  get() {
    return this[impl].protocol;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].protocol = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "username", {
  get() {
    return this[impl].username;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].username = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "password", {
  get() {
    return this[impl].password;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].password = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "host", {
  get() {
    return this[impl].host;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].host = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "hostname", {
  get() {
    return this[impl].hostname;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].hostname = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "port", {
  get() {
    return this[impl].port;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].port = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "pathname", {
  get() {
    return this[impl].pathname;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].pathname = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "search", {
  get() {
    return this[impl].search;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].search = V;
  },

  enumerable: true,
  configurable: true
});
Object.defineProperty(URL.prototype, "hash", {
  get() {
    return this[impl].hash;
  },

  set(V) {
    V = conversions["USVString"](V);
    this[impl].hash = V;
  },

  enumerable: true,
  configurable: true
});
module.exports = {
  is(obj) {
    return !!obj && obj[impl] instanceof Impl.implementation;
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },

  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;
    obj[impl] = new Impl.implementation(constructorArgs, privateData);
    obj[impl][utils.wrapperSymbol] = obj;
  },

  interface: URL,
  expose: {
    Window: {
      URL: URL
    },
    Worker: {
      URL: URL
    }
  }
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var conversions = {};
module.exports = conversions;

function sign(x) {
  return x < 0 ? -1 : 1;
}

function evenRound(x) {
  // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
  if (x % 1 === 0.5 && (x & 1) === 0) {
    // [even number].5; round down (i.e. floor)
    return Math.floor(x);
  } else {
    return Math.round(x);
  }
}

function createNumberConversion(bitLength, typeOpts) {
  if (!typeOpts.unsigned) {
    --bitLength;
  }

  const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
  const upperBound = Math.pow(2, bitLength) - 1;
  const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
  const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
  return function (V, opts) {
    if (!opts) opts = {};
    let x = +V;

    if (opts.enforceRange) {
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite number");
      }

      x = sign(x) * Math.floor(Math.abs(x));

      if (x < lowerBound || x > upperBound) {
        throw new TypeError("Argument is not in byte range");
      }

      return x;
    }

    if (!isNaN(x) && opts.clamp) {
      x = evenRound(x);
      if (x < lowerBound) x = lowerBound;
      if (x > upperBound) x = upperBound;
      return x;
    }

    if (!Number.isFinite(x) || x === 0) {
      return 0;
    }

    x = sign(x) * Math.floor(Math.abs(x));
    x = x % moduloVal;

    if (!typeOpts.unsigned && x >= moduloBound) {
      return x - moduloVal;
    } else if (typeOpts.unsigned) {
      if (x < 0) {
        x += moduloVal;
      } else if (x === -0) {
        // don't return negative zero
        return 0;
      }
    }

    return x;
  };
}

conversions["void"] = function () {
  return undefined;
};

conversions["boolean"] = function (val) {
  return !!val;
};

conversions["byte"] = createNumberConversion(8, {
  unsigned: false
});
conversions["octet"] = createNumberConversion(8, {
  unsigned: true
});
conversions["short"] = createNumberConversion(16, {
  unsigned: false
});
conversions["unsigned short"] = createNumberConversion(16, {
  unsigned: true
});
conversions["long"] = createNumberConversion(32, {
  unsigned: false
});
conversions["unsigned long"] = createNumberConversion(32, {
  unsigned: true
});
conversions["long long"] = createNumberConversion(32, {
  unsigned: false,
  moduloBitLength: 64
});
conversions["unsigned long long"] = createNumberConversion(32, {
  unsigned: true,
  moduloBitLength: 64
});

conversions["double"] = function (V) {
  const x = +V;

  if (!Number.isFinite(x)) {
    throw new TypeError("Argument is not a finite floating-point value");
  }

  return x;
};

conversions["unrestricted double"] = function (V) {
  const x = +V;

  if (isNaN(x)) {
    throw new TypeError("Argument is NaN");
  }

  return x;
}; // not quite valid, but good enough for JS


conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];

conversions["DOMString"] = function (V, opts) {
  if (!opts) opts = {};

  if (opts.treatNullAsEmptyString && V === null) {
    return "";
  }

  return String(V);
};

conversions["ByteString"] = function (V, opts) {
  const x = String(V);
  let c = undefined;

  for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
    if (c > 255) {
      throw new TypeError("Argument is not a valid bytestring");
    }
  }

  return x;
};

conversions["USVString"] = function (V) {
  const S = String(V);
  const n = S.length;
  const U = [];

  for (let i = 0; i < n; ++i) {
    const c = S.charCodeAt(i);

    if (c < 0xD800 || c > 0xDFFF) {
      U.push(String.fromCodePoint(c));
    } else if (0xDC00 <= c && c <= 0xDFFF) {
      U.push(String.fromCodePoint(0xFFFD));
    } else {
      if (i === n - 1) {
        U.push(String.fromCodePoint(0xFFFD));
      } else {
        const d = S.charCodeAt(i + 1);

        if (0xDC00 <= d && d <= 0xDFFF) {
          const a = c & 0x3FF;
          const b = d & 0x3FF;
          U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
          ++i;
        } else {
          U.push(String.fromCodePoint(0xFFFD));
        }
      }
    }
  }

  return U.join('');
};

conversions["Date"] = function (V, opts) {
  if (!(V instanceof Date)) {
    throw new TypeError("Argument is not a Date object");
  }

  if (isNaN(V)) {
    return undefined;
  }

  return V;
};

conversions["RegExp"] = function (V, opts) {
  if (!(V instanceof RegExp)) {
    V = new RegExp(V);
  }

  return V;
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.mixin = function mixin(target, source) {
  const keys = Object.getOwnPropertyNames(source);

  for (let i = 0; i < keys.length; ++i) {
    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
  }
};

module.exports.wrapperSymbol = Symbol("wrapper");
module.exports.implSymbol = Symbol("impl");

module.exports.wrapperForImpl = function (impl) {
  return impl[module.exports.wrapperSymbol];
};

module.exports.implForWrapper = function (wrapper) {
  return wrapper[module.exports.implSymbol];
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const usm = __webpack_require__(11);

exports.implementation = class URLImpl {
  constructor(constructorArgs) {
    const url = constructorArgs[0];
    const base = constructorArgs[1];
    let parsedBase = null;

    if (base !== undefined) {
      parsedBase = usm.basicURLParse(base);

      if (parsedBase === "failure") {
        throw new TypeError("Invalid base URL");
      }
    }

    const parsedURL = usm.basicURLParse(url, {
      baseURL: parsedBase
    });

    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL; // TODO: query stuff
  }

  get href() {
    return usm.serializeURL(this._url);
  }

  set href(v) {
    const parsedURL = usm.basicURLParse(v);

    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL;
  }

  get origin() {
    return usm.serializeURLOrigin(this._url);
  }

  get protocol() {
    return this._url.scheme + ":";
  }

  set protocol(v) {
    usm.basicURLParse(v + ":", {
      url: this._url,
      stateOverride: "scheme start"
    });
  }

  get username() {
    return this._url.username;
  }

  set username(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setTheUsername(this._url, v);
  }

  get password() {
    return this._url.password;
  }

  set password(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setThePassword(this._url, v);
  }

  get host() {
    const url = this._url;

    if (url.host === null) {
      return "";
    }

    if (url.port === null) {
      return usm.serializeHost(url.host);
    }

    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  }

  set host(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, {
      url: this._url,
      stateOverride: "host"
    });
  }

  get hostname() {
    if (this._url.host === null) {
      return "";
    }

    return usm.serializeHost(this._url.host);
  }

  set hostname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, {
      url: this._url,
      stateOverride: "hostname"
    });
  }

  get port() {
    if (this._url.port === null) {
      return "";
    }

    return usm.serializeInteger(this._url.port);
  }

  set port(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    if (v === "") {
      this._url.port = null;
    } else {
      usm.basicURLParse(v, {
        url: this._url,
        stateOverride: "port"
      });
    }
  }

  get pathname() {
    if (this._url.cannotBeABaseURL) {
      return this._url.path[0];
    }

    if (this._url.path.length === 0) {
      return "";
    }

    return "/" + this._url.path.join("/");
  }

  set pathname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    this._url.path = [];
    usm.basicURLParse(v, {
      url: this._url,
      stateOverride: "path start"
    });
  }

  get search() {
    if (this._url.query === null || this._url.query === "") {
      return "";
    }

    return "?" + this._url.query;
  }

  set search(v) {
    // TODO: query stuff
    const url = this._url;

    if (v === "") {
      url.query = null;
      return;
    }

    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, {
      url,
      stateOverride: "query"
    });
  }

  get hash() {
    if (this._url.fragment === null || this._url.fragment === "") {
      return "";
    }

    return "#" + this._url.fragment;
  }

  set hash(v) {
    if (v === "") {
      this._url.fragment = null;
      return;
    }

    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, {
      url: this._url,
      stateOverride: "fragment"
    });
  }

  toJSON() {
    return this.href;
  }

};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var punycode = __webpack_require__(23);

var mappingTable = __webpack_require__(88);

var PROCESSING_OPTIONS = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};

function normalize(str) {
  // fix bug in v8
  return str.split('\u0000').map(function (s) {
    return s.normalize('NFC');
  }).join('\u0000');
}

function findStatus(val) {
  var start = 0;
  var end = mappingTable.length - 1;

  while (start <= end) {
    var mid = Math.floor((start + end) / 2);
    var target = mappingTable[mid];

    if (target[0][0] <= val && target[0][1] >= val) {
      return target;
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }

  return null;
}

var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function countSymbols(string) {
  return string // replace every surrogate pair with a BMP symbol
  .replace(regexAstralSymbols, '_') // then get the length
  .length;
}

function mapChars(domain_name, useSTD3, processing_option) {
  var hasError = false;
  var processed = "";
  var len = countSymbols(domain_name);

  for (var i = 0; i < len; ++i) {
    var codePoint = domain_name.codePointAt(i);
    var status = findStatus(codePoint);

    switch (status[1]) {
      case "disallowed":
        hasError = true;
        processed += String.fromCodePoint(codePoint);
        break;

      case "ignored":
        break;

      case "mapped":
        processed += String.fromCodePoint.apply(String, status[2]);
        break;

      case "deviation":
        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
          processed += String.fromCodePoint.apply(String, status[2]);
        } else {
          processed += String.fromCodePoint(codePoint);
        }

        break;

      case "valid":
        processed += String.fromCodePoint(codePoint);
        break;

      case "disallowed_STD3_mapped":
        if (useSTD3) {
          hasError = true;
          processed += String.fromCodePoint(codePoint);
        } else {
          processed += String.fromCodePoint.apply(String, status[2]);
        }

        break;

      case "disallowed_STD3_valid":
        if (useSTD3) {
          hasError = true;
        }

        processed += String.fromCodePoint(codePoint);
        break;
    }
  }

  return {
    string: processed,
    error: hasError
  };
}

var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;

function validateLabel(label, processing_option) {
  if (label.substr(0, 4) === "xn--") {
    label = punycode.toUnicode(label);
    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
  }

  var error = false;

  if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
    error = true;
  }

  var len = countSymbols(label);

  for (var i = 0; i < len; ++i) {
    var status = findStatus(label.codePointAt(i));

    if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
      error = true;
      break;
    }
  }

  return {
    label: label,
    error: error
  };
}

function processing(domain_name, useSTD3, processing_option) {
  var result = mapChars(domain_name, useSTD3, processing_option);
  result.string = normalize(result.string);
  var labels = result.string.split(".");

  for (var i = 0; i < labels.length; ++i) {
    try {
      var validation = validateLabel(labels[i]);
      labels[i] = validation.label;
      result.error = result.error || validation.error;
    } catch (e) {
      result.error = true;
    }
  }

  return {
    string: labels.join("."),
    error: result.error
  };
}

module.exports.toASCII = function (domain_name, useSTD3, processing_option, verifyDnsLength) {
  var result = processing(domain_name, useSTD3, processing_option);
  var labels = result.string.split(".");
  labels = labels.map(function (l) {
    try {
      return punycode.toASCII(l);
    } catch (e) {
      result.error = true;
      return l;
    }
  });

  if (verifyDnsLength) {
    var total = labels.slice(0, labels.length - 1).join(".").length;

    if (total.length > 253 || total.length === 0) {
      result.error = true;
    }

    for (var i = 0; i < labels.length; ++i) {
      if (labels.length > 63 || labels.length === 0) {
        result.error = true;
        break;
      }
    }
  }

  if (result.error) return null;
  return labels.join(".");
};

module.exports.toUnicode = function (domain_name, useSTD3) {
  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
  return {
    domain: result.string,
    error: result.error
  };
};

module.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;

/***/ }),
/* 88 */
/***/ (function(module) {

module.exports = JSON.parse("[[[0,44],\"disallowed_STD3_valid\"],[[45,46],\"valid\"],[[47,47],\"disallowed_STD3_valid\"],[[48,57],\"valid\"],[[58,64],\"disallowed_STD3_valid\"],[[65,65],\"mapped\",[97]],[[66,66],\"mapped\",[98]],[[67,67],\"mapped\",[99]],[[68,68],\"mapped\",[100]],[[69,69],\"mapped\",[101]],[[70,70],\"mapped\",[102]],[[71,71],\"mapped\",[103]],[[72,72],\"mapped\",[104]],[[73,73],\"mapped\",[105]],[[74,74],\"mapped\",[106]],[[75,75],\"mapped\",[107]],[[76,76],\"mapped\",[108]],[[77,77],\"mapped\",[109]],[[78,78],\"mapped\",[110]],[[79,79],\"mapped\",[111]],[[80,80],\"mapped\",[112]],[[81,81],\"mapped\",[113]],[[82,82],\"mapped\",[114]],[[83,83],\"mapped\",[115]],[[84,84],\"mapped\",[116]],[[85,85],\"mapped\",[117]],[[86,86],\"mapped\",[118]],[[87,87],\"mapped\",[119]],[[88,88],\"mapped\",[120]],[[89,89],\"mapped\",[121]],[[90,90],\"mapped\",[122]],[[91,96],\"disallowed_STD3_valid\"],[[97,122],\"valid\"],[[123,127],\"disallowed_STD3_valid\"],[[128,159],\"disallowed\"],[[160,160],\"disallowed_STD3_mapped\",[32]],[[161,167],\"valid\",[],\"NV8\"],[[168,168],\"disallowed_STD3_mapped\",[32,776]],[[169,169],\"valid\",[],\"NV8\"],[[170,170],\"mapped\",[97]],[[171,172],\"valid\",[],\"NV8\"],[[173,173],\"ignored\"],[[174,174],\"valid\",[],\"NV8\"],[[175,175],\"disallowed_STD3_mapped\",[32,772]],[[176,177],\"valid\",[],\"NV8\"],[[178,178],\"mapped\",[50]],[[179,179],\"mapped\",[51]],[[180,180],\"disallowed_STD3_mapped\",[32,769]],[[181,181],\"mapped\",[956]],[[182,182],\"valid\",[],\"NV8\"],[[183,183],\"valid\"],[[184,184],\"disallowed_STD3_mapped\",[32,807]],[[185,185],\"mapped\",[49]],[[186,186],\"mapped\",[111]],[[187,187],\"valid\",[],\"NV8\"],[[188,188],\"mapped\",[49,8260,52]],[[189,189],\"mapped\",[49,8260,50]],[[190,190],\"mapped\",[51,8260,52]],[[191,191],\"valid\",[],\"NV8\"],[[192,192],\"mapped\",[224]],[[193,193],\"mapped\",[225]],[[194,194],\"mapped\",[226]],[[195,195],\"mapped\",[227]],[[196,196],\"mapped\",[228]],[[197,197],\"mapped\",[229]],[[198,198],\"mapped\",[230]],[[199,199],\"mapped\",[231]],[[200,200],\"mapped\",[232]],[[201,201],\"mapped\",[233]],[[202,202],\"mapped\",[234]],[[203,203],\"mapped\",[235]],[[204,204],\"mapped\",[236]],[[205,205],\"mapped\",[237]],[[206,206],\"mapped\",[238]],[[207,207],\"mapped\",[239]],[[208,208],\"mapped\",[240]],[[209,209],\"mapped\",[241]],[[210,210],\"mapped\",[242]],[[211,211],\"mapped\",[243]],[[212,212],\"mapped\",[244]],[[213,213],\"mapped\",[245]],[[214,214],\"mapped\",[246]],[[215,215],\"valid\",[],\"NV8\"],[[216,216],\"mapped\",[248]],[[217,217],\"mapped\",[249]],[[218,218],\"mapped\",[250]],[[219,219],\"mapped\",[251]],[[220,220],\"mapped\",[252]],[[221,221],\"mapped\",[253]],[[222,222],\"mapped\",[254]],[[223,223],\"deviation\",[115,115]],[[224,246],\"valid\"],[[247,247],\"valid\",[],\"NV8\"],[[248,255],\"valid\"],[[256,256],\"mapped\",[257]],[[257,257],\"valid\"],[[258,258],\"mapped\",[259]],[[259,259],\"valid\"],[[260,260],\"mapped\",[261]],[[261,261],\"valid\"],[[262,262],\"mapped\",[263]],[[263,263],\"valid\"],[[264,264],\"mapped\",[265]],[[265,265],\"valid\"],[[266,266],\"mapped\",[267]],[[267,267],\"valid\"],[[268,268],\"mapped\",[269]],[[269,269],\"valid\"],[[270,270],\"mapped\",[271]],[[271,271],\"valid\"],[[272,272],\"mapped\",[273]],[[273,273],\"valid\"],[[274,274],\"mapped\",[275]],[[275,275],\"valid\"],[[276,276],\"mapped\",[277]],[[277,277],\"valid\"],[[278,278],\"mapped\",[279]],[[279,279],\"valid\"],[[280,280],\"mapped\",[281]],[[281,281],\"valid\"],[[282,282],\"mapped\",[283]],[[283,283],\"valid\"],[[284,284],\"mapped\",[285]],[[285,285],\"valid\"],[[286,286],\"mapped\",[287]],[[287,287],\"valid\"],[[288,288],\"mapped\",[289]],[[289,289],\"valid\"],[[290,290],\"mapped\",[291]],[[291,291],\"valid\"],[[292,292],\"mapped\",[293]],[[293,293],\"valid\"],[[294,294],\"mapped\",[295]],[[295,295],\"valid\"],[[296,296],\"mapped\",[297]],[[297,297],\"valid\"],[[298,298],\"mapped\",[299]],[[299,299],\"valid\"],[[300,300],\"mapped\",[301]],[[301,301],\"valid\"],[[302,302],\"mapped\",[303]],[[303,303],\"valid\"],[[304,304],\"mapped\",[105,775]],[[305,305],\"valid\"],[[306,307],\"mapped\",[105,106]],[[308,308],\"mapped\",[309]],[[309,309],\"valid\"],[[310,310],\"mapped\",[311]],[[311,312],\"valid\"],[[313,313],\"mapped\",[314]],[[314,314],\"valid\"],[[315,315],\"mapped\",[316]],[[316,316],\"valid\"],[[317,317],\"mapped\",[318]],[[318,318],\"valid\"],[[319,320],\"mapped\",[108,183]],[[321,321],\"mapped\",[322]],[[322,322],\"valid\"],[[323,323],\"mapped\",[324]],[[324,324],\"valid\"],[[325,325],\"mapped\",[326]],[[326,326],\"valid\"],[[327,327],\"mapped\",[328]],[[328,328],\"valid\"],[[329,329],\"mapped\",[700,110]],[[330,330],\"mapped\",[331]],[[331,331],\"valid\"],[[332,332],\"mapped\",[333]],[[333,333],\"valid\"],[[334,334],\"mapped\",[335]],[[335,335],\"valid\"],[[336,336],\"mapped\",[337]],[[337,337],\"valid\"],[[338,338],\"mapped\",[339]],[[339,339],\"valid\"],[[340,340],\"mapped\",[341]],[[341,341],\"valid\"],[[342,342],\"mapped\",[343]],[[343,343],\"valid\"],[[344,344],\"mapped\",[345]],[[345,345],\"valid\"],[[346,346],\"mapped\",[347]],[[347,347],\"valid\"],[[348,348],\"mapped\",[349]],[[349,349],\"valid\"],[[350,350],\"mapped\",[351]],[[351,351],\"valid\"],[[352,352],\"mapped\",[353]],[[353,353],\"valid\"],[[354,354],\"mapped\",[355]],[[355,355],\"valid\"],[[356,356],\"mapped\",[357]],[[357,357],\"valid\"],[[358,358],\"mapped\",[359]],[[359,359],\"valid\"],[[360,360],\"mapped\",[361]],[[361,361],\"valid\"],[[362,362],\"mapped\",[363]],[[363,363],\"valid\"],[[364,364],\"mapped\",[365]],[[365,365],\"valid\"],[[366,366],\"mapped\",[367]],[[367,367],\"valid\"],[[368,368],\"mapped\",[369]],[[369,369],\"valid\"],[[370,370],\"mapped\",[371]],[[371,371],\"valid\"],[[372,372],\"mapped\",[373]],[[373,373],\"valid\"],[[374,374],\"mapped\",[375]],[[375,375],\"valid\"],[[376,376],\"mapped\",[255]],[[377,377],\"mapped\",[378]],[[378,378],\"valid\"],[[379,379],\"mapped\",[380]],[[380,380],\"valid\"],[[381,381],\"mapped\",[382]],[[382,382],\"valid\"],[[383,383],\"mapped\",[115]],[[384,384],\"valid\"],[[385,385],\"mapped\",[595]],[[386,386],\"mapped\",[387]],[[387,387],\"valid\"],[[388,388],\"mapped\",[389]],[[389,389],\"valid\"],[[390,390],\"mapped\",[596]],[[391,391],\"mapped\",[392]],[[392,392],\"valid\"],[[393,393],\"mapped\",[598]],[[394,394],\"mapped\",[599]],[[395,395],\"mapped\",[396]],[[396,397],\"valid\"],[[398,398],\"mapped\",[477]],[[399,399],\"mapped\",[601]],[[400,400],\"mapped\",[603]],[[401,401],\"mapped\",[402]],[[402,402],\"valid\"],[[403,403],\"mapped\",[608]],[[404,404],\"mapped\",[611]],[[405,405],\"valid\"],[[406,406],\"mapped\",[617]],[[407,407],\"mapped\",[616]],[[408,408],\"mapped\",[409]],[[409,411],\"valid\"],[[412,412],\"mapped\",[623]],[[413,413],\"mapped\",[626]],[[414,414],\"valid\"],[[415,415],\"mapped\",[629]],[[416,416],\"mapped\",[417]],[[417,417],\"valid\"],[[418,418],\"mapped\",[419]],[[419,419],\"valid\"],[[420,420],\"mapped\",[421]],[[421,421],\"valid\"],[[422,422],\"mapped\",[640]],[[423,423],\"mapped\",[424]],[[424,424],\"valid\"],[[425,425],\"mapped\",[643]],[[426,427],\"valid\"],[[428,428],\"mapped\",[429]],[[429,429],\"valid\"],[[430,430],\"mapped\",[648]],[[431,431],\"mapped\",[432]],[[432,432],\"valid\"],[[433,433],\"mapped\",[650]],[[434,434],\"mapped\",[651]],[[435,435],\"mapped\",[436]],[[436,436],\"valid\"],[[437,437],\"mapped\",[438]],[[438,438],\"valid\"],[[439,439],\"mapped\",[658]],[[440,440],\"mapped\",[441]],[[441,443],\"valid\"],[[444,444],\"mapped\",[445]],[[445,451],\"valid\"],[[452,454],\"mapped\",[100,382]],[[455,457],\"mapped\",[108,106]],[[458,460],\"mapped\",[110,106]],[[461,461],\"mapped\",[462]],[[462,462],\"valid\"],[[463,463],\"mapped\",[464]],[[464,464],\"valid\"],[[465,465],\"mapped\",[466]],[[466,466],\"valid\"],[[467,467],\"mapped\",[468]],[[468,468],\"valid\"],[[469,469],\"mapped\",[470]],[[470,470],\"valid\"],[[471,471],\"mapped\",[472]],[[472,472],\"valid\"],[[473,473],\"mapped\",[474]],[[474,474],\"valid\"],[[475,475],\"mapped\",[476]],[[476,477],\"valid\"],[[478,478],\"mapped\",[479]],[[479,479],\"valid\"],[[480,480],\"mapped\",[481]],[[481,481],\"valid\"],[[482,482],\"mapped\",[483]],[[483,483],\"valid\"],[[484,484],\"mapped\",[485]],[[485,485],\"valid\"],[[486,486],\"mapped\",[487]],[[487,487],\"valid\"],[[488,488],\"mapped\",[489]],[[489,489],\"valid\"],[[490,490],\"mapped\",[491]],[[491,491],\"valid\"],[[492,492],\"mapped\",[493]],[[493,493],\"valid\"],[[494,494],\"mapped\",[495]],[[495,496],\"valid\"],[[497,499],\"mapped\",[100,122]],[[500,500],\"mapped\",[501]],[[501,501],\"valid\"],[[502,502],\"mapped\",[405]],[[503,503],\"mapped\",[447]],[[504,504],\"mapped\",[505]],[[505,505],\"valid\"],[[506,506],\"mapped\",[507]],[[507,507],\"valid\"],[[508,508],\"mapped\",[509]],[[509,509],\"valid\"],[[510,510],\"mapped\",[511]],[[511,511],\"valid\"],[[512,512],\"mapped\",[513]],[[513,513],\"valid\"],[[514,514],\"mapped\",[515]],[[515,515],\"valid\"],[[516,516],\"mapped\",[517]],[[517,517],\"valid\"],[[518,518],\"mapped\",[519]],[[519,519],\"valid\"],[[520,520],\"mapped\",[521]],[[521,521],\"valid\"],[[522,522],\"mapped\",[523]],[[523,523],\"valid\"],[[524,524],\"mapped\",[525]],[[525,525],\"valid\"],[[526,526],\"mapped\",[527]],[[527,527],\"valid\"],[[528,528],\"mapped\",[529]],[[529,529],\"valid\"],[[530,530],\"mapped\",[531]],[[531,531],\"valid\"],[[532,532],\"mapped\",[533]],[[533,533],\"valid\"],[[534,534],\"mapped\",[535]],[[535,535],\"valid\"],[[536,536],\"mapped\",[537]],[[537,537],\"valid\"],[[538,538],\"mapped\",[539]],[[539,539],\"valid\"],[[540,540],\"mapped\",[541]],[[541,541],\"valid\"],[[542,542],\"mapped\",[543]],[[543,543],\"valid\"],[[544,544],\"mapped\",[414]],[[545,545],\"valid\"],[[546,546],\"mapped\",[547]],[[547,547],\"valid\"],[[548,548],\"mapped\",[549]],[[549,549],\"valid\"],[[550,550],\"mapped\",[551]],[[551,551],\"valid\"],[[552,552],\"mapped\",[553]],[[553,553],\"valid\"],[[554,554],\"mapped\",[555]],[[555,555],\"valid\"],[[556,556],\"mapped\",[557]],[[557,557],\"valid\"],[[558,558],\"mapped\",[559]],[[559,559],\"valid\"],[[560,560],\"mapped\",[561]],[[561,561],\"valid\"],[[562,562],\"mapped\",[563]],[[563,563],\"valid\"],[[564,566],\"valid\"],[[567,569],\"valid\"],[[570,570],\"mapped\",[11365]],[[571,571],\"mapped\",[572]],[[572,572],\"valid\"],[[573,573],\"mapped\",[410]],[[574,574],\"mapped\",[11366]],[[575,576],\"valid\"],[[577,577],\"mapped\",[578]],[[578,578],\"valid\"],[[579,579],\"mapped\",[384]],[[580,580],\"mapped\",[649]],[[581,581],\"mapped\",[652]],[[582,582],\"mapped\",[583]],[[583,583],\"valid\"],[[584,584],\"mapped\",[585]],[[585,585],\"valid\"],[[586,586],\"mapped\",[587]],[[587,587],\"valid\"],[[588,588],\"mapped\",[589]],[[589,589],\"valid\"],[[590,590],\"mapped\",[591]],[[591,591],\"valid\"],[[592,680],\"valid\"],[[681,685],\"valid\"],[[686,687],\"valid\"],[[688,688],\"mapped\",[104]],[[689,689],\"mapped\",[614]],[[690,690],\"mapped\",[106]],[[691,691],\"mapped\",[114]],[[692,692],\"mapped\",[633]],[[693,693],\"mapped\",[635]],[[694,694],\"mapped\",[641]],[[695,695],\"mapped\",[119]],[[696,696],\"mapped\",[121]],[[697,705],\"valid\"],[[706,709],\"valid\",[],\"NV8\"],[[710,721],\"valid\"],[[722,727],\"valid\",[],\"NV8\"],[[728,728],\"disallowed_STD3_mapped\",[32,774]],[[729,729],\"disallowed_STD3_mapped\",[32,775]],[[730,730],\"disallowed_STD3_mapped\",[32,778]],[[731,731],\"disallowed_STD3_mapped\",[32,808]],[[732,732],\"disallowed_STD3_mapped\",[32,771]],[[733,733],\"disallowed_STD3_mapped\",[32,779]],[[734,734],\"valid\",[],\"NV8\"],[[735,735],\"valid\",[],\"NV8\"],[[736,736],\"mapped\",[611]],[[737,737],\"mapped\",[108]],[[738,738],\"mapped\",[115]],[[739,739],\"mapped\",[120]],[[740,740],\"mapped\",[661]],[[741,745],\"valid\",[],\"NV8\"],[[746,747],\"valid\",[],\"NV8\"],[[748,748],\"valid\"],[[749,749],\"valid\",[],\"NV8\"],[[750,750],\"valid\"],[[751,767],\"valid\",[],\"NV8\"],[[768,831],\"valid\"],[[832,832],\"mapped\",[768]],[[833,833],\"mapped\",[769]],[[834,834],\"valid\"],[[835,835],\"mapped\",[787]],[[836,836],\"mapped\",[776,769]],[[837,837],\"mapped\",[953]],[[838,846],\"valid\"],[[847,847],\"ignored\"],[[848,855],\"valid\"],[[856,860],\"valid\"],[[861,863],\"valid\"],[[864,865],\"valid\"],[[866,866],\"valid\"],[[867,879],\"valid\"],[[880,880],\"mapped\",[881]],[[881,881],\"valid\"],[[882,882],\"mapped\",[883]],[[883,883],\"valid\"],[[884,884],\"mapped\",[697]],[[885,885],\"valid\"],[[886,886],\"mapped\",[887]],[[887,887],\"valid\"],[[888,889],\"disallowed\"],[[890,890],\"disallowed_STD3_mapped\",[32,953]],[[891,893],\"valid\"],[[894,894],\"disallowed_STD3_mapped\",[59]],[[895,895],\"mapped\",[1011]],[[896,899],\"disallowed\"],[[900,900],\"disallowed_STD3_mapped\",[32,769]],[[901,901],\"disallowed_STD3_mapped\",[32,776,769]],[[902,902],\"mapped\",[940]],[[903,903],\"mapped\",[183]],[[904,904],\"mapped\",[941]],[[905,905],\"mapped\",[942]],[[906,906],\"mapped\",[943]],[[907,907],\"disallowed\"],[[908,908],\"mapped\",[972]],[[909,909],\"disallowed\"],[[910,910],\"mapped\",[973]],[[911,911],\"mapped\",[974]],[[912,912],\"valid\"],[[913,913],\"mapped\",[945]],[[914,914],\"mapped\",[946]],[[915,915],\"mapped\",[947]],[[916,916],\"mapped\",[948]],[[917,917],\"mapped\",[949]],[[918,918],\"mapped\",[950]],[[919,919],\"mapped\",[951]],[[920,920],\"mapped\",[952]],[[921,921],\"mapped\",[953]],[[922,922],\"mapped\",[954]],[[923,923],\"mapped\",[955]],[[924,924],\"mapped\",[956]],[[925,925],\"mapped\",[957]],[[926,926],\"mapped\",[958]],[[927,927],\"mapped\",[959]],[[928,928],\"mapped\",[960]],[[929,929],\"mapped\",[961]],[[930,930],\"disallowed\"],[[931,931],\"mapped\",[963]],[[932,932],\"mapped\",[964]],[[933,933],\"mapped\",[965]],[[934,934],\"mapped\",[966]],[[935,935],\"mapped\",[967]],[[936,936],\"mapped\",[968]],[[937,937],\"mapped\",[969]],[[938,938],\"mapped\",[970]],[[939,939],\"mapped\",[971]],[[940,961],\"valid\"],[[962,962],\"deviation\",[963]],[[963,974],\"valid\"],[[975,975],\"mapped\",[983]],[[976,976],\"mapped\",[946]],[[977,977],\"mapped\",[952]],[[978,978],\"mapped\",[965]],[[979,979],\"mapped\",[973]],[[980,980],\"mapped\",[971]],[[981,981],\"mapped\",[966]],[[982,982],\"mapped\",[960]],[[983,983],\"valid\"],[[984,984],\"mapped\",[985]],[[985,985],\"valid\"],[[986,986],\"mapped\",[987]],[[987,987],\"valid\"],[[988,988],\"mapped\",[989]],[[989,989],\"valid\"],[[990,990],\"mapped\",[991]],[[991,991],\"valid\"],[[992,992],\"mapped\",[993]],[[993,993],\"valid\"],[[994,994],\"mapped\",[995]],[[995,995],\"valid\"],[[996,996],\"mapped\",[997]],[[997,997],\"valid\"],[[998,998],\"mapped\",[999]],[[999,999],\"valid\"],[[1000,1000],\"mapped\",[1001]],[[1001,1001],\"valid\"],[[1002,1002],\"mapped\",[1003]],[[1003,1003],\"valid\"],[[1004,1004],\"mapped\",[1005]],[[1005,1005],\"valid\"],[[1006,1006],\"mapped\",[1007]],[[1007,1007],\"valid\"],[[1008,1008],\"mapped\",[954]],[[1009,1009],\"mapped\",[961]],[[1010,1010],\"mapped\",[963]],[[1011,1011],\"valid\"],[[1012,1012],\"mapped\",[952]],[[1013,1013],\"mapped\",[949]],[[1014,1014],\"valid\",[],\"NV8\"],[[1015,1015],\"mapped\",[1016]],[[1016,1016],\"valid\"],[[1017,1017],\"mapped\",[963]],[[1018,1018],\"mapped\",[1019]],[[1019,1019],\"valid\"],[[1020,1020],\"valid\"],[[1021,1021],\"mapped\",[891]],[[1022,1022],\"mapped\",[892]],[[1023,1023],\"mapped\",[893]],[[1024,1024],\"mapped\",[1104]],[[1025,1025],\"mapped\",[1105]],[[1026,1026],\"mapped\",[1106]],[[1027,1027],\"mapped\",[1107]],[[1028,1028],\"mapped\",[1108]],[[1029,1029],\"mapped\",[1109]],[[1030,1030],\"mapped\",[1110]],[[1031,1031],\"mapped\",[1111]],[[1032,1032],\"mapped\",[1112]],[[1033,1033],\"mapped\",[1113]],[[1034,1034],\"mapped\",[1114]],[[1035,1035],\"mapped\",[1115]],[[1036,1036],\"mapped\",[1116]],[[1037,1037],\"mapped\",[1117]],[[1038,1038],\"mapped\",[1118]],[[1039,1039],\"mapped\",[1119]],[[1040,1040],\"mapped\",[1072]],[[1041,1041],\"mapped\",[1073]],[[1042,1042],\"mapped\",[1074]],[[1043,1043],\"mapped\",[1075]],[[1044,1044],\"mapped\",[1076]],[[1045,1045],\"mapped\",[1077]],[[1046,1046],\"mapped\",[1078]],[[1047,1047],\"mapped\",[1079]],[[1048,1048],\"mapped\",[1080]],[[1049,1049],\"mapped\",[1081]],[[1050,1050],\"mapped\",[1082]],[[1051,1051],\"mapped\",[1083]],[[1052,1052],\"mapped\",[1084]],[[1053,1053],\"mapped\",[1085]],[[1054,1054],\"mapped\",[1086]],[[1055,1055],\"mapped\",[1087]],[[1056,1056],\"mapped\",[1088]],[[1057,1057],\"mapped\",[1089]],[[1058,1058],\"mapped\",[1090]],[[1059,1059],\"mapped\",[1091]],[[1060,1060],\"mapped\",[1092]],[[1061,1061],\"mapped\",[1093]],[[1062,1062],\"mapped\",[1094]],[[1063,1063],\"mapped\",[1095]],[[1064,1064],\"mapped\",[1096]],[[1065,1065],\"mapped\",[1097]],[[1066,1066],\"mapped\",[1098]],[[1067,1067],\"mapped\",[1099]],[[1068,1068],\"mapped\",[1100]],[[1069,1069],\"mapped\",[1101]],[[1070,1070],\"mapped\",[1102]],[[1071,1071],\"mapped\",[1103]],[[1072,1103],\"valid\"],[[1104,1104],\"valid\"],[[1105,1116],\"valid\"],[[1117,1117],\"valid\"],[[1118,1119],\"valid\"],[[1120,1120],\"mapped\",[1121]],[[1121,1121],\"valid\"],[[1122,1122],\"mapped\",[1123]],[[1123,1123],\"valid\"],[[1124,1124],\"mapped\",[1125]],[[1125,1125],\"valid\"],[[1126,1126],\"mapped\",[1127]],[[1127,1127],\"valid\"],[[1128,1128],\"mapped\",[1129]],[[1129,1129],\"valid\"],[[1130,1130],\"mapped\",[1131]],[[1131,1131],\"valid\"],[[1132,1132],\"mapped\",[1133]],[[1133,1133],\"valid\"],[[1134,1134],\"mapped\",[1135]],[[1135,1135],\"valid\"],[[1136,1136],\"mapped\",[1137]],[[1137,1137],\"valid\"],[[1138,1138],\"mapped\",[1139]],[[1139,1139],\"valid\"],[[1140,1140],\"mapped\",[1141]],[[1141,1141],\"valid\"],[[1142,1142],\"mapped\",[1143]],[[1143,1143],\"valid\"],[[1144,1144],\"mapped\",[1145]],[[1145,1145],\"valid\"],[[1146,1146],\"mapped\",[1147]],[[1147,1147],\"valid\"],[[1148,1148],\"mapped\",[1149]],[[1149,1149],\"valid\"],[[1150,1150],\"mapped\",[1151]],[[1151,1151],\"valid\"],[[1152,1152],\"mapped\",[1153]],[[1153,1153],\"valid\"],[[1154,1154],\"valid\",[],\"NV8\"],[[1155,1158],\"valid\"],[[1159,1159],\"valid\"],[[1160,1161],\"valid\",[],\"NV8\"],[[1162,1162],\"mapped\",[1163]],[[1163,1163],\"valid\"],[[1164,1164],\"mapped\",[1165]],[[1165,1165],\"valid\"],[[1166,1166],\"mapped\",[1167]],[[1167,1167],\"valid\"],[[1168,1168],\"mapped\",[1169]],[[1169,1169],\"valid\"],[[1170,1170],\"mapped\",[1171]],[[1171,1171],\"valid\"],[[1172,1172],\"mapped\",[1173]],[[1173,1173],\"valid\"],[[1174,1174],\"mapped\",[1175]],[[1175,1175],\"valid\"],[[1176,1176],\"mapped\",[1177]],[[1177,1177],\"valid\"],[[1178,1178],\"mapped\",[1179]],[[1179,1179],\"valid\"],[[1180,1180],\"mapped\",[1181]],[[1181,1181],\"valid\"],[[1182,1182],\"mapped\",[1183]],[[1183,1183],\"valid\"],[[1184,1184],\"mapped\",[1185]],[[1185,1185],\"valid\"],[[1186,1186],\"mapped\",[1187]],[[1187,1187],\"valid\"],[[1188,1188],\"mapped\",[1189]],[[1189,1189],\"valid\"],[[1190,1190],\"mapped\",[1191]],[[1191,1191],\"valid\"],[[1192,1192],\"mapped\",[1193]],[[1193,1193],\"valid\"],[[1194,1194],\"mapped\",[1195]],[[1195,1195],\"valid\"],[[1196,1196],\"mapped\",[1197]],[[1197,1197],\"valid\"],[[1198,1198],\"mapped\",[1199]],[[1199,1199],\"valid\"],[[1200,1200],\"mapped\",[1201]],[[1201,1201],\"valid\"],[[1202,1202],\"mapped\",[1203]],[[1203,1203],\"valid\"],[[1204,1204],\"mapped\",[1205]],[[1205,1205],\"valid\"],[[1206,1206],\"mapped\",[1207]],[[1207,1207],\"valid\"],[[1208,1208],\"mapped\",[1209]],[[1209,1209],\"valid\"],[[1210,1210],\"mapped\",[1211]],[[1211,1211],\"valid\"],[[1212,1212],\"mapped\",[1213]],[[1213,1213],\"valid\"],[[1214,1214],\"mapped\",[1215]],[[1215,1215],\"valid\"],[[1216,1216],\"disallowed\"],[[1217,1217],\"mapped\",[1218]],[[1218,1218],\"valid\"],[[1219,1219],\"mapped\",[1220]],[[1220,1220],\"valid\"],[[1221,1221],\"mapped\",[1222]],[[1222,1222],\"valid\"],[[1223,1223],\"mapped\",[1224]],[[1224,1224],\"valid\"],[[1225,1225],\"mapped\",[1226]],[[1226,1226],\"valid\"],[[1227,1227],\"mapped\",[1228]],[[1228,1228],\"valid\"],[[1229,1229],\"mapped\",[1230]],[[1230,1230],\"valid\"],[[1231,1231],\"valid\"],[[1232,1232],\"mapped\",[1233]],[[1233,1233],\"valid\"],[[1234,1234],\"mapped\",[1235]],[[1235,1235],\"valid\"],[[1236,1236],\"mapped\",[1237]],[[1237,1237],\"valid\"],[[1238,1238],\"mapped\",[1239]],[[1239,1239],\"valid\"],[[1240,1240],\"mapped\",[1241]],[[1241,1241],\"valid\"],[[1242,1242],\"mapped\",[1243]],[[1243,1243],\"valid\"],[[1244,1244],\"mapped\",[1245]],[[1245,1245],\"valid\"],[[1246,1246],\"mapped\",[1247]],[[1247,1247],\"valid\"],[[1248,1248],\"mapped\",[1249]],[[1249,1249],\"valid\"],[[1250,1250],\"mapped\",[1251]],[[1251,1251],\"valid\"],[[1252,1252],\"mapped\",[1253]],[[1253,1253],\"valid\"],[[1254,1254],\"mapped\",[1255]],[[1255,1255],\"valid\"],[[1256,1256],\"mapped\",[1257]],[[1257,1257],\"valid\"],[[1258,1258],\"mapped\",[1259]],[[1259,1259],\"valid\"],[[1260,1260],\"mapped\",[1261]],[[1261,1261],\"valid\"],[[1262,1262],\"mapped\",[1263]],[[1263,1263],\"valid\"],[[1264,1264],\"mapped\",[1265]],[[1265,1265],\"valid\"],[[1266,1266],\"mapped\",[1267]],[[1267,1267],\"valid\"],[[1268,1268],\"mapped\",[1269]],[[1269,1269],\"valid\"],[[1270,1270],\"mapped\",[1271]],[[1271,1271],\"valid\"],[[1272,1272],\"mapped\",[1273]],[[1273,1273],\"valid\"],[[1274,1274],\"mapped\",[1275]],[[1275,1275],\"valid\"],[[1276,1276],\"mapped\",[1277]],[[1277,1277],\"valid\"],[[1278,1278],\"mapped\",[1279]],[[1279,1279],\"valid\"],[[1280,1280],\"mapped\",[1281]],[[1281,1281],\"valid\"],[[1282,1282],\"mapped\",[1283]],[[1283,1283],\"valid\"],[[1284,1284],\"mapped\",[1285]],[[1285,1285],\"valid\"],[[1286,1286],\"mapped\",[1287]],[[1287,1287],\"valid\"],[[1288,1288],\"mapped\",[1289]],[[1289,1289],\"valid\"],[[1290,1290],\"mapped\",[1291]],[[1291,1291],\"valid\"],[[1292,1292],\"mapped\",[1293]],[[1293,1293],\"valid\"],[[1294,1294],\"mapped\",[1295]],[[1295,1295],\"valid\"],[[1296,1296],\"mapped\",[1297]],[[1297,1297],\"valid\"],[[1298,1298],\"mapped\",[1299]],[[1299,1299],\"valid\"],[[1300,1300],\"mapped\",[1301]],[[1301,1301],\"valid\"],[[1302,1302],\"mapped\",[1303]],[[1303,1303],\"valid\"],[[1304,1304],\"mapped\",[1305]],[[1305,1305],\"valid\"],[[1306,1306],\"mapped\",[1307]],[[1307,1307],\"valid\"],[[1308,1308],\"mapped\",[1309]],[[1309,1309],\"valid\"],[[1310,1310],\"mapped\",[1311]],[[1311,1311],\"valid\"],[[1312,1312],\"mapped\",[1313]],[[1313,1313],\"valid\"],[[1314,1314],\"mapped\",[1315]],[[1315,1315],\"valid\"],[[1316,1316],\"mapped\",[1317]],[[1317,1317],\"valid\"],[[1318,1318],\"mapped\",[1319]],[[1319,1319],\"valid\"],[[1320,1320],\"mapped\",[1321]],[[1321,1321],\"valid\"],[[1322,1322],\"mapped\",[1323]],[[1323,1323],\"valid\"],[[1324,1324],\"mapped\",[1325]],[[1325,1325],\"valid\"],[[1326,1326],\"mapped\",[1327]],[[1327,1327],\"valid\"],[[1328,1328],\"disallowed\"],[[1329,1329],\"mapped\",[1377]],[[1330,1330],\"mapped\",[1378]],[[1331,1331],\"mapped\",[1379]],[[1332,1332],\"mapped\",[1380]],[[1333,1333],\"mapped\",[1381]],[[1334,1334],\"mapped\",[1382]],[[1335,1335],\"mapped\",[1383]],[[1336,1336],\"mapped\",[1384]],[[1337,1337],\"mapped\",[1385]],[[1338,1338],\"mapped\",[1386]],[[1339,1339],\"mapped\",[1387]],[[1340,1340],\"mapped\",[1388]],[[1341,1341],\"mapped\",[1389]],[[1342,1342],\"mapped\",[1390]],[[1343,1343],\"mapped\",[1391]],[[1344,1344],\"mapped\",[1392]],[[1345,1345],\"mapped\",[1393]],[[1346,1346],\"mapped\",[1394]],[[1347,1347],\"mapped\",[1395]],[[1348,1348],\"mapped\",[1396]],[[1349,1349],\"mapped\",[1397]],[[1350,1350],\"mapped\",[1398]],[[1351,1351],\"mapped\",[1399]],[[1352,1352],\"mapped\",[1400]],[[1353,1353],\"mapped\",[1401]],[[1354,1354],\"mapped\",[1402]],[[1355,1355],\"mapped\",[1403]],[[1356,1356],\"mapped\",[1404]],[[1357,1357],\"mapped\",[1405]],[[1358,1358],\"mapped\",[1406]],[[1359,1359],\"mapped\",[1407]],[[1360,1360],\"mapped\",[1408]],[[1361,1361],\"mapped\",[1409]],[[1362,1362],\"mapped\",[1410]],[[1363,1363],\"mapped\",[1411]],[[1364,1364],\"mapped\",[1412]],[[1365,1365],\"mapped\",[1413]],[[1366,1366],\"mapped\",[1414]],[[1367,1368],\"disallowed\"],[[1369,1369],\"valid\"],[[1370,1375],\"valid\",[],\"NV8\"],[[1376,1376],\"disallowed\"],[[1377,1414],\"valid\"],[[1415,1415],\"mapped\",[1381,1410]],[[1416,1416],\"disallowed\"],[[1417,1417],\"valid\",[],\"NV8\"],[[1418,1418],\"valid\",[],\"NV8\"],[[1419,1420],\"disallowed\"],[[1421,1422],\"valid\",[],\"NV8\"],[[1423,1423],\"valid\",[],\"NV8\"],[[1424,1424],\"disallowed\"],[[1425,1441],\"valid\"],[[1442,1442],\"valid\"],[[1443,1455],\"valid\"],[[1456,1465],\"valid\"],[[1466,1466],\"valid\"],[[1467,1469],\"valid\"],[[1470,1470],\"valid\",[],\"NV8\"],[[1471,1471],\"valid\"],[[1472,1472],\"valid\",[],\"NV8\"],[[1473,1474],\"valid\"],[[1475,1475],\"valid\",[],\"NV8\"],[[1476,1476],\"valid\"],[[1477,1477],\"valid\"],[[1478,1478],\"valid\",[],\"NV8\"],[[1479,1479],\"valid\"],[[1480,1487],\"disallowed\"],[[1488,1514],\"valid\"],[[1515,1519],\"disallowed\"],[[1520,1524],\"valid\"],[[1525,1535],\"disallowed\"],[[1536,1539],\"disallowed\"],[[1540,1540],\"disallowed\"],[[1541,1541],\"disallowed\"],[[1542,1546],\"valid\",[],\"NV8\"],[[1547,1547],\"valid\",[],\"NV8\"],[[1548,1548],\"valid\",[],\"NV8\"],[[1549,1551],\"valid\",[],\"NV8\"],[[1552,1557],\"valid\"],[[1558,1562],\"valid\"],[[1563,1563],\"valid\",[],\"NV8\"],[[1564,1564],\"disallowed\"],[[1565,1565],\"disallowed\"],[[1566,1566],\"valid\",[],\"NV8\"],[[1567,1567],\"valid\",[],\"NV8\"],[[1568,1568],\"valid\"],[[1569,1594],\"valid\"],[[1595,1599],\"valid\"],[[1600,1600],\"valid\",[],\"NV8\"],[[1601,1618],\"valid\"],[[1619,1621],\"valid\"],[[1622,1624],\"valid\"],[[1625,1630],\"valid\"],[[1631,1631],\"valid\"],[[1632,1641],\"valid\"],[[1642,1645],\"valid\",[],\"NV8\"],[[1646,1647],\"valid\"],[[1648,1652],\"valid\"],[[1653,1653],\"mapped\",[1575,1652]],[[1654,1654],\"mapped\",[1608,1652]],[[1655,1655],\"mapped\",[1735,1652]],[[1656,1656],\"mapped\",[1610,1652]],[[1657,1719],\"valid\"],[[1720,1721],\"valid\"],[[1722,1726],\"valid\"],[[1727,1727],\"valid\"],[[1728,1742],\"valid\"],[[1743,1743],\"valid\"],[[1744,1747],\"valid\"],[[1748,1748],\"valid\",[],\"NV8\"],[[1749,1756],\"valid\"],[[1757,1757],\"disallowed\"],[[1758,1758],\"valid\",[],\"NV8\"],[[1759,1768],\"valid\"],[[1769,1769],\"valid\",[],\"NV8\"],[[1770,1773],\"valid\"],[[1774,1775],\"valid\"],[[1776,1785],\"valid\"],[[1786,1790],\"valid\"],[[1791,1791],\"valid\"],[[1792,1805],\"valid\",[],\"NV8\"],[[1806,1806],\"disallowed\"],[[1807,1807],\"disallowed\"],[[1808,1836],\"valid\"],[[1837,1839],\"valid\"],[[1840,1866],\"valid\"],[[1867,1868],\"disallowed\"],[[1869,1871],\"valid\"],[[1872,1901],\"valid\"],[[1902,1919],\"valid\"],[[1920,1968],\"valid\"],[[1969,1969],\"valid\"],[[1970,1983],\"disallowed\"],[[1984,2037],\"valid\"],[[2038,2042],\"valid\",[],\"NV8\"],[[2043,2047],\"disallowed\"],[[2048,2093],\"valid\"],[[2094,2095],\"disallowed\"],[[2096,2110],\"valid\",[],\"NV8\"],[[2111,2111],\"disallowed\"],[[2112,2139],\"valid\"],[[2140,2141],\"disallowed\"],[[2142,2142],\"valid\",[],\"NV8\"],[[2143,2207],\"disallowed\"],[[2208,2208],\"valid\"],[[2209,2209],\"valid\"],[[2210,2220],\"valid\"],[[2221,2226],\"valid\"],[[2227,2228],\"valid\"],[[2229,2274],\"disallowed\"],[[2275,2275],\"valid\"],[[2276,2302],\"valid\"],[[2303,2303],\"valid\"],[[2304,2304],\"valid\"],[[2305,2307],\"valid\"],[[2308,2308],\"valid\"],[[2309,2361],\"valid\"],[[2362,2363],\"valid\"],[[2364,2381],\"valid\"],[[2382,2382],\"valid\"],[[2383,2383],\"valid\"],[[2384,2388],\"valid\"],[[2389,2389],\"valid\"],[[2390,2391],\"valid\"],[[2392,2392],\"mapped\",[2325,2364]],[[2393,2393],\"mapped\",[2326,2364]],[[2394,2394],\"mapped\",[2327,2364]],[[2395,2395],\"mapped\",[2332,2364]],[[2396,2396],\"mapped\",[2337,2364]],[[2397,2397],\"mapped\",[2338,2364]],[[2398,2398],\"mapped\",[2347,2364]],[[2399,2399],\"mapped\",[2351,2364]],[[2400,2403],\"valid\"],[[2404,2405],\"valid\",[],\"NV8\"],[[2406,2415],\"valid\"],[[2416,2416],\"valid\",[],\"NV8\"],[[2417,2418],\"valid\"],[[2419,2423],\"valid\"],[[2424,2424],\"valid\"],[[2425,2426],\"valid\"],[[2427,2428],\"valid\"],[[2429,2429],\"valid\"],[[2430,2431],\"valid\"],[[2432,2432],\"valid\"],[[2433,2435],\"valid\"],[[2436,2436],\"disallowed\"],[[2437,2444],\"valid\"],[[2445,2446],\"disallowed\"],[[2447,2448],\"valid\"],[[2449,2450],\"disallowed\"],[[2451,2472],\"valid\"],[[2473,2473],\"disallowed\"],[[2474,2480],\"valid\"],[[2481,2481],\"disallowed\"],[[2482,2482],\"valid\"],[[2483,2485],\"disallowed\"],[[2486,2489],\"valid\"],[[2490,2491],\"disallowed\"],[[2492,2492],\"valid\"],[[2493,2493],\"valid\"],[[2494,2500],\"valid\"],[[2501,2502],\"disallowed\"],[[2503,2504],\"valid\"],[[2505,2506],\"disallowed\"],[[2507,2509],\"valid\"],[[2510,2510],\"valid\"],[[2511,2518],\"disallowed\"],[[2519,2519],\"valid\"],[[2520,2523],\"disallowed\"],[[2524,2524],\"mapped\",[2465,2492]],[[2525,2525],\"mapped\",[2466,2492]],[[2526,2526],\"disallowed\"],[[2527,2527],\"mapped\",[2479,2492]],[[2528,2531],\"valid\"],[[2532,2533],\"disallowed\"],[[2534,2545],\"valid\"],[[2546,2554],\"valid\",[],\"NV8\"],[[2555,2555],\"valid\",[],\"NV8\"],[[2556,2560],\"disallowed\"],[[2561,2561],\"valid\"],[[2562,2562],\"valid\"],[[2563,2563],\"valid\"],[[2564,2564],\"disallowed\"],[[2565,2570],\"valid\"],[[2571,2574],\"disallowed\"],[[2575,2576],\"valid\"],[[2577,2578],\"disallowed\"],[[2579,2600],\"valid\"],[[2601,2601],\"disallowed\"],[[2602,2608],\"valid\"],[[2609,2609],\"disallowed\"],[[2610,2610],\"valid\"],[[2611,2611],\"mapped\",[2610,2620]],[[2612,2612],\"disallowed\"],[[2613,2613],\"valid\"],[[2614,2614],\"mapped\",[2616,2620]],[[2615,2615],\"disallowed\"],[[2616,2617],\"valid\"],[[2618,2619],\"disallowed\"],[[2620,2620],\"valid\"],[[2621,2621],\"disallowed\"],[[2622,2626],\"valid\"],[[2627,2630],\"disallowed\"],[[2631,2632],\"valid\"],[[2633,2634],\"disallowed\"],[[2635,2637],\"valid\"],[[2638,2640],\"disallowed\"],[[2641,2641],\"valid\"],[[2642,2648],\"disallowed\"],[[2649,2649],\"mapped\",[2582,2620]],[[2650,2650],\"mapped\",[2583,2620]],[[2651,2651],\"mapped\",[2588,2620]],[[2652,2652],\"valid\"],[[2653,2653],\"disallowed\"],[[2654,2654],\"mapped\",[2603,2620]],[[2655,2661],\"disallowed\"],[[2662,2676],\"valid\"],[[2677,2677],\"valid\"],[[2678,2688],\"disallowed\"],[[2689,2691],\"valid\"],[[2692,2692],\"disallowed\"],[[2693,2699],\"valid\"],[[2700,2700],\"valid\"],[[2701,2701],\"valid\"],[[2702,2702],\"disallowed\"],[[2703,2705],\"valid\"],[[2706,2706],\"disallowed\"],[[2707,2728],\"valid\"],[[2729,2729],\"disallowed\"],[[2730,2736],\"valid\"],[[2737,2737],\"disallowed\"],[[2738,2739],\"valid\"],[[2740,2740],\"disallowed\"],[[2741,2745],\"valid\"],[[2746,2747],\"disallowed\"],[[2748,2757],\"valid\"],[[2758,2758],\"disallowed\"],[[2759,2761],\"valid\"],[[2762,2762],\"disallowed\"],[[2763,2765],\"valid\"],[[2766,2767],\"disallowed\"],[[2768,2768],\"valid\"],[[2769,2783],\"disallowed\"],[[2784,2784],\"valid\"],[[2785,2787],\"valid\"],[[2788,2789],\"disallowed\"],[[2790,2799],\"valid\"],[[2800,2800],\"valid\",[],\"NV8\"],[[2801,2801],\"valid\",[],\"NV8\"],[[2802,2808],\"disallowed\"],[[2809,2809],\"valid\"],[[2810,2816],\"disallowed\"],[[2817,2819],\"valid\"],[[2820,2820],\"disallowed\"],[[2821,2828],\"valid\"],[[2829,2830],\"disallowed\"],[[2831,2832],\"valid\"],[[2833,2834],\"disallowed\"],[[2835,2856],\"valid\"],[[2857,2857],\"disallowed\"],[[2858,2864],\"valid\"],[[2865,2865],\"disallowed\"],[[2866,2867],\"valid\"],[[2868,2868],\"disallowed\"],[[2869,2869],\"valid\"],[[2870,2873],\"valid\"],[[2874,2875],\"disallowed\"],[[2876,2883],\"valid\"],[[2884,2884],\"valid\"],[[2885,2886],\"disallowed\"],[[2887,2888],\"valid\"],[[2889,2890],\"disallowed\"],[[2891,2893],\"valid\"],[[2894,2901],\"disallowed\"],[[2902,2903],\"valid\"],[[2904,2907],\"disallowed\"],[[2908,2908],\"mapped\",[2849,2876]],[[2909,2909],\"mapped\",[2850,2876]],[[2910,2910],\"disallowed\"],[[2911,2913],\"valid\"],[[2914,2915],\"valid\"],[[2916,2917],\"disallowed\"],[[2918,2927],\"valid\"],[[2928,2928],\"valid\",[],\"NV8\"],[[2929,2929],\"valid\"],[[2930,2935],\"valid\",[],\"NV8\"],[[2936,2945],\"disallowed\"],[[2946,2947],\"valid\"],[[2948,2948],\"disallowed\"],[[2949,2954],\"valid\"],[[2955,2957],\"disallowed\"],[[2958,2960],\"valid\"],[[2961,2961],\"disallowed\"],[[2962,2965],\"valid\"],[[2966,2968],\"disallowed\"],[[2969,2970],\"valid\"],[[2971,2971],\"disallowed\"],[[2972,2972],\"valid\"],[[2973,2973],\"disallowed\"],[[2974,2975],\"valid\"],[[2976,2978],\"disallowed\"],[[2979,2980],\"valid\"],[[2981,2983],\"disallowed\"],[[2984,2986],\"valid\"],[[2987,2989],\"disallowed\"],[[2990,2997],\"valid\"],[[2998,2998],\"valid\"],[[2999,3001],\"valid\"],[[3002,3005],\"disallowed\"],[[3006,3010],\"valid\"],[[3011,3013],\"disallowed\"],[[3014,3016],\"valid\"],[[3017,3017],\"disallowed\"],[[3018,3021],\"valid\"],[[3022,3023],\"disallowed\"],[[3024,3024],\"valid\"],[[3025,3030],\"disallowed\"],[[3031,3031],\"valid\"],[[3032,3045],\"disallowed\"],[[3046,3046],\"valid\"],[[3047,3055],\"valid\"],[[3056,3058],\"valid\",[],\"NV8\"],[[3059,3066],\"valid\",[],\"NV8\"],[[3067,3071],\"disallowed\"],[[3072,3072],\"valid\"],[[3073,3075],\"valid\"],[[3076,3076],\"disallowed\"],[[3077,3084],\"valid\"],[[3085,3085],\"disallowed\"],[[3086,3088],\"valid\"],[[3089,3089],\"disallowed\"],[[3090,3112],\"valid\"],[[3113,3113],\"disallowed\"],[[3114,3123],\"valid\"],[[3124,3124],\"valid\"],[[3125,3129],\"valid\"],[[3130,3132],\"disallowed\"],[[3133,3133],\"valid\"],[[3134,3140],\"valid\"],[[3141,3141],\"disallowed\"],[[3142,3144],\"valid\"],[[3145,3145],\"disallowed\"],[[3146,3149],\"valid\"],[[3150,3156],\"disallowed\"],[[3157,3158],\"valid\"],[[3159,3159],\"disallowed\"],[[3160,3161],\"valid\"],[[3162,3162],\"valid\"],[[3163,3167],\"disallowed\"],[[3168,3169],\"valid\"],[[3170,3171],\"valid\"],[[3172,3173],\"disallowed\"],[[3174,3183],\"valid\"],[[3184,3191],\"disallowed\"],[[3192,3199],\"valid\",[],\"NV8\"],[[3200,3200],\"disallowed\"],[[3201,3201],\"valid\"],[[3202,3203],\"valid\"],[[3204,3204],\"disallowed\"],[[3205,3212],\"valid\"],[[3213,3213],\"disallowed\"],[[3214,3216],\"valid\"],[[3217,3217],\"disallowed\"],[[3218,3240],\"valid\"],[[3241,3241],\"disallowed\"],[[3242,3251],\"valid\"],[[3252,3252],\"disallowed\"],[[3253,3257],\"valid\"],[[3258,3259],\"disallowed\"],[[3260,3261],\"valid\"],[[3262,3268],\"valid\"],[[3269,3269],\"disallowed\"],[[3270,3272],\"valid\"],[[3273,3273],\"disallowed\"],[[3274,3277],\"valid\"],[[3278,3284],\"disallowed\"],[[3285,3286],\"valid\"],[[3287,3293],\"disallowed\"],[[3294,3294],\"valid\"],[[3295,3295],\"disallowed\"],[[3296,3297],\"valid\"],[[3298,3299],\"valid\"],[[3300,3301],\"disallowed\"],[[3302,3311],\"valid\"],[[3312,3312],\"disallowed\"],[[3313,3314],\"valid\"],[[3315,3328],\"disallowed\"],[[3329,3329],\"valid\"],[[3330,3331],\"valid\"],[[3332,3332],\"disallowed\"],[[3333,3340],\"valid\"],[[3341,3341],\"disallowed\"],[[3342,3344],\"valid\"],[[3345,3345],\"disallowed\"],[[3346,3368],\"valid\"],[[3369,3369],\"valid\"],[[3370,3385],\"valid\"],[[3386,3386],\"valid\"],[[3387,3388],\"disallowed\"],[[3389,3389],\"valid\"],[[3390,3395],\"valid\"],[[3396,3396],\"valid\"],[[3397,3397],\"disallowed\"],[[3398,3400],\"valid\"],[[3401,3401],\"disallowed\"],[[3402,3405],\"valid\"],[[3406,3406],\"valid\"],[[3407,3414],\"disallowed\"],[[3415,3415],\"valid\"],[[3416,3422],\"disallowed\"],[[3423,3423],\"valid\"],[[3424,3425],\"valid\"],[[3426,3427],\"valid\"],[[3428,3429],\"disallowed\"],[[3430,3439],\"valid\"],[[3440,3445],\"valid\",[],\"NV8\"],[[3446,3448],\"disallowed\"],[[3449,3449],\"valid\",[],\"NV8\"],[[3450,3455],\"valid\"],[[3456,3457],\"disallowed\"],[[3458,3459],\"valid\"],[[3460,3460],\"disallowed\"],[[3461,3478],\"valid\"],[[3479,3481],\"disallowed\"],[[3482,3505],\"valid\"],[[3506,3506],\"disallowed\"],[[3507,3515],\"valid\"],[[3516,3516],\"disallowed\"],[[3517,3517],\"valid\"],[[3518,3519],\"disallowed\"],[[3520,3526],\"valid\"],[[3527,3529],\"disallowed\"],[[3530,3530],\"valid\"],[[3531,3534],\"disallowed\"],[[3535,3540],\"valid\"],[[3541,3541],\"disallowed\"],[[3542,3542],\"valid\"],[[3543,3543],\"disallowed\"],[[3544,3551],\"valid\"],[[3552,3557],\"disallowed\"],[[3558,3567],\"valid\"],[[3568,3569],\"disallowed\"],[[3570,3571],\"valid\"],[[3572,3572],\"valid\",[],\"NV8\"],[[3573,3584],\"disallowed\"],[[3585,3634],\"valid\"],[[3635,3635],\"mapped\",[3661,3634]],[[3636,3642],\"valid\"],[[3643,3646],\"disallowed\"],[[3647,3647],\"valid\",[],\"NV8\"],[[3648,3662],\"valid\"],[[3663,3663],\"valid\",[],\"NV8\"],[[3664,3673],\"valid\"],[[3674,3675],\"valid\",[],\"NV8\"],[[3676,3712],\"disallowed\"],[[3713,3714],\"valid\"],[[3715,3715],\"disallowed\"],[[3716,3716],\"valid\"],[[3717,3718],\"disallowed\"],[[3719,3720],\"valid\"],[[3721,3721],\"disallowed\"],[[3722,3722],\"valid\"],[[3723,3724],\"disallowed\"],[[3725,3725],\"valid\"],[[3726,3731],\"disallowed\"],[[3732,3735],\"valid\"],[[3736,3736],\"disallowed\"],[[3737,3743],\"valid\"],[[3744,3744],\"disallowed\"],[[3745,3747],\"valid\"],[[3748,3748],\"disallowed\"],[[3749,3749],\"valid\"],[[3750,3750],\"disallowed\"],[[3751,3751],\"valid\"],[[3752,3753],\"disallowed\"],[[3754,3755],\"valid\"],[[3756,3756],\"disallowed\"],[[3757,3762],\"valid\"],[[3763,3763],\"mapped\",[3789,3762]],[[3764,3769],\"valid\"],[[3770,3770],\"disallowed\"],[[3771,3773],\"valid\"],[[3774,3775],\"disallowed\"],[[3776,3780],\"valid\"],[[3781,3781],\"disallowed\"],[[3782,3782],\"valid\"],[[3783,3783],\"disallowed\"],[[3784,3789],\"valid\"],[[3790,3791],\"disallowed\"],[[3792,3801],\"valid\"],[[3802,3803],\"disallowed\"],[[3804,3804],\"mapped\",[3755,3737]],[[3805,3805],\"mapped\",[3755,3745]],[[3806,3807],\"valid\"],[[3808,3839],\"disallowed\"],[[3840,3840],\"valid\"],[[3841,3850],\"valid\",[],\"NV8\"],[[3851,3851],\"valid\"],[[3852,3852],\"mapped\",[3851]],[[3853,3863],\"valid\",[],\"NV8\"],[[3864,3865],\"valid\"],[[3866,3871],\"valid\",[],\"NV8\"],[[3872,3881],\"valid\"],[[3882,3892],\"valid\",[],\"NV8\"],[[3893,3893],\"valid\"],[[3894,3894],\"valid\",[],\"NV8\"],[[3895,3895],\"valid\"],[[3896,3896],\"valid\",[],\"NV8\"],[[3897,3897],\"valid\"],[[3898,3901],\"valid\",[],\"NV8\"],[[3902,3906],\"valid\"],[[3907,3907],\"mapped\",[3906,4023]],[[3908,3911],\"valid\"],[[3912,3912],\"disallowed\"],[[3913,3916],\"valid\"],[[3917,3917],\"mapped\",[3916,4023]],[[3918,3921],\"valid\"],[[3922,3922],\"mapped\",[3921,4023]],[[3923,3926],\"valid\"],[[3927,3927],\"mapped\",[3926,4023]],[[3928,3931],\"valid\"],[[3932,3932],\"mapped\",[3931,4023]],[[3933,3944],\"valid\"],[[3945,3945],\"mapped\",[3904,4021]],[[3946,3946],\"valid\"],[[3947,3948],\"valid\"],[[3949,3952],\"disallowed\"],[[3953,3954],\"valid\"],[[3955,3955],\"mapped\",[3953,3954]],[[3956,3956],\"valid\"],[[3957,3957],\"mapped\",[3953,3956]],[[3958,3958],\"mapped\",[4018,3968]],[[3959,3959],\"mapped\",[4018,3953,3968]],[[3960,3960],\"mapped\",[4019,3968]],[[3961,3961],\"mapped\",[4019,3953,3968]],[[3962,3968],\"valid\"],[[3969,3969],\"mapped\",[3953,3968]],[[3970,3972],\"valid\"],[[3973,3973],\"valid\",[],\"NV8\"],[[3974,3979],\"valid\"],[[3980,3983],\"valid\"],[[3984,3986],\"valid\"],[[3987,3987],\"mapped\",[3986,4023]],[[3988,3989],\"valid\"],[[3990,3990],\"valid\"],[[3991,3991],\"valid\"],[[3992,3992],\"disallowed\"],[[3993,3996],\"valid\"],[[3997,3997],\"mapped\",[3996,4023]],[[3998,4001],\"valid\"],[[4002,4002],\"mapped\",[4001,4023]],[[4003,4006],\"valid\"],[[4007,4007],\"mapped\",[4006,4023]],[[4008,4011],\"valid\"],[[4012,4012],\"mapped\",[4011,4023]],[[4013,4013],\"valid\"],[[4014,4016],\"valid\"],[[4017,4023],\"valid\"],[[4024,4024],\"valid\"],[[4025,4025],\"mapped\",[3984,4021]],[[4026,4028],\"valid\"],[[4029,4029],\"disallowed\"],[[4030,4037],\"valid\",[],\"NV8\"],[[4038,4038],\"valid\"],[[4039,4044],\"valid\",[],\"NV8\"],[[4045,4045],\"disallowed\"],[[4046,4046],\"valid\",[],\"NV8\"],[[4047,4047],\"valid\",[],\"NV8\"],[[4048,4049],\"valid\",[],\"NV8\"],[[4050,4052],\"valid\",[],\"NV8\"],[[4053,4056],\"valid\",[],\"NV8\"],[[4057,4058],\"valid\",[],\"NV8\"],[[4059,4095],\"disallowed\"],[[4096,4129],\"valid\"],[[4130,4130],\"valid\"],[[4131,4135],\"valid\"],[[4136,4136],\"valid\"],[[4137,4138],\"valid\"],[[4139,4139],\"valid\"],[[4140,4146],\"valid\"],[[4147,4149],\"valid\"],[[4150,4153],\"valid\"],[[4154,4159],\"valid\"],[[4160,4169],\"valid\"],[[4170,4175],\"valid\",[],\"NV8\"],[[4176,4185],\"valid\"],[[4186,4249],\"valid\"],[[4250,4253],\"valid\"],[[4254,4255],\"valid\",[],\"NV8\"],[[4256,4293],\"disallowed\"],[[4294,4294],\"disallowed\"],[[4295,4295],\"mapped\",[11559]],[[4296,4300],\"disallowed\"],[[4301,4301],\"mapped\",[11565]],[[4302,4303],\"disallowed\"],[[4304,4342],\"valid\"],[[4343,4344],\"valid\"],[[4345,4346],\"valid\"],[[4347,4347],\"valid\",[],\"NV8\"],[[4348,4348],\"mapped\",[4316]],[[4349,4351],\"valid\"],[[4352,4441],\"valid\",[],\"NV8\"],[[4442,4446],\"valid\",[],\"NV8\"],[[4447,4448],\"disallowed\"],[[4449,4514],\"valid\",[],\"NV8\"],[[4515,4519],\"valid\",[],\"NV8\"],[[4520,4601],\"valid\",[],\"NV8\"],[[4602,4607],\"valid\",[],\"NV8\"],[[4608,4614],\"valid\"],[[4615,4615],\"valid\"],[[4616,4678],\"valid\"],[[4679,4679],\"valid\"],[[4680,4680],\"valid\"],[[4681,4681],\"disallowed\"],[[4682,4685],\"valid\"],[[4686,4687],\"disallowed\"],[[4688,4694],\"valid\"],[[4695,4695],\"disallowed\"],[[4696,4696],\"valid\"],[[4697,4697],\"disallowed\"],[[4698,4701],\"valid\"],[[4702,4703],\"disallowed\"],[[4704,4742],\"valid\"],[[4743,4743],\"valid\"],[[4744,4744],\"valid\"],[[4745,4745],\"disallowed\"],[[4746,4749],\"valid\"],[[4750,4751],\"disallowed\"],[[4752,4782],\"valid\"],[[4783,4783],\"valid\"],[[4784,4784],\"valid\"],[[4785,4785],\"disallowed\"],[[4786,4789],\"valid\"],[[4790,4791],\"disallowed\"],[[4792,4798],\"valid\"],[[4799,4799],\"disallowed\"],[[4800,4800],\"valid\"],[[4801,4801],\"disallowed\"],[[4802,4805],\"valid\"],[[4806,4807],\"disallowed\"],[[4808,4814],\"valid\"],[[4815,4815],\"valid\"],[[4816,4822],\"valid\"],[[4823,4823],\"disallowed\"],[[4824,4846],\"valid\"],[[4847,4847],\"valid\"],[[4848,4878],\"valid\"],[[4879,4879],\"valid\"],[[4880,4880],\"valid\"],[[4881,4881],\"disallowed\"],[[4882,4885],\"valid\"],[[4886,4887],\"disallowed\"],[[4888,4894],\"valid\"],[[4895,4895],\"valid\"],[[4896,4934],\"valid\"],[[4935,4935],\"valid\"],[[4936,4954],\"valid\"],[[4955,4956],\"disallowed\"],[[4957,4958],\"valid\"],[[4959,4959],\"valid\"],[[4960,4960],\"valid\",[],\"NV8\"],[[4961,4988],\"valid\",[],\"NV8\"],[[4989,4991],\"disallowed\"],[[4992,5007],\"valid\"],[[5008,5017],\"valid\",[],\"NV8\"],[[5018,5023],\"disallowed\"],[[5024,5108],\"valid\"],[[5109,5109],\"valid\"],[[5110,5111],\"disallowed\"],[[5112,5112],\"mapped\",[5104]],[[5113,5113],\"mapped\",[5105]],[[5114,5114],\"mapped\",[5106]],[[5115,5115],\"mapped\",[5107]],[[5116,5116],\"mapped\",[5108]],[[5117,5117],\"mapped\",[5109]],[[5118,5119],\"disallowed\"],[[5120,5120],\"valid\",[],\"NV8\"],[[5121,5740],\"valid\"],[[5741,5742],\"valid\",[],\"NV8\"],[[5743,5750],\"valid\"],[[5751,5759],\"valid\"],[[5760,5760],\"disallowed\"],[[5761,5786],\"valid\"],[[5787,5788],\"valid\",[],\"NV8\"],[[5789,5791],\"disallowed\"],[[5792,5866],\"valid\"],[[5867,5872],\"valid\",[],\"NV8\"],[[5873,5880],\"valid\"],[[5881,5887],\"disallowed\"],[[5888,5900],\"valid\"],[[5901,5901],\"disallowed\"],[[5902,5908],\"valid\"],[[5909,5919],\"disallowed\"],[[5920,5940],\"valid\"],[[5941,5942],\"valid\",[],\"NV8\"],[[5943,5951],\"disallowed\"],[[5952,5971],\"valid\"],[[5972,5983],\"disallowed\"],[[5984,5996],\"valid\"],[[5997,5997],\"disallowed\"],[[5998,6000],\"valid\"],[[6001,6001],\"disallowed\"],[[6002,6003],\"valid\"],[[6004,6015],\"disallowed\"],[[6016,6067],\"valid\"],[[6068,6069],\"disallowed\"],[[6070,6099],\"valid\"],[[6100,6102],\"valid\",[],\"NV8\"],[[6103,6103],\"valid\"],[[6104,6107],\"valid\",[],\"NV8\"],[[6108,6108],\"valid\"],[[6109,6109],\"valid\"],[[6110,6111],\"disallowed\"],[[6112,6121],\"valid\"],[[6122,6127],\"disallowed\"],[[6128,6137],\"valid\",[],\"NV8\"],[[6138,6143],\"disallowed\"],[[6144,6149],\"valid\",[],\"NV8\"],[[6150,6150],\"disallowed\"],[[6151,6154],\"valid\",[],\"NV8\"],[[6155,6157],\"ignored\"],[[6158,6158],\"disallowed\"],[[6159,6159],\"disallowed\"],[[6160,6169],\"valid\"],[[6170,6175],\"disallowed\"],[[6176,6263],\"valid\"],[[6264,6271],\"disallowed\"],[[6272,6313],\"valid\"],[[6314,6314],\"valid\"],[[6315,6319],\"disallowed\"],[[6320,6389],\"valid\"],[[6390,6399],\"disallowed\"],[[6400,6428],\"valid\"],[[6429,6430],\"valid\"],[[6431,6431],\"disallowed\"],[[6432,6443],\"valid\"],[[6444,6447],\"disallowed\"],[[6448,6459],\"valid\"],[[6460,6463],\"disallowed\"],[[6464,6464],\"valid\",[],\"NV8\"],[[6465,6467],\"disallowed\"],[[6468,6469],\"valid\",[],\"NV8\"],[[6470,6509],\"valid\"],[[6510,6511],\"disallowed\"],[[6512,6516],\"valid\"],[[6517,6527],\"disallowed\"],[[6528,6569],\"valid\"],[[6570,6571],\"valid\"],[[6572,6575],\"disallowed\"],[[6576,6601],\"valid\"],[[6602,6607],\"disallowed\"],[[6608,6617],\"valid\"],[[6618,6618],\"valid\",[],\"XV8\"],[[6619,6621],\"disallowed\"],[[6622,6623],\"valid\",[],\"NV8\"],[[6624,6655],\"valid\",[],\"NV8\"],[[6656,6683],\"valid\"],[[6684,6685],\"disallowed\"],[[6686,6687],\"valid\",[],\"NV8\"],[[6688,6750],\"valid\"],[[6751,6751],\"disallowed\"],[[6752,6780],\"valid\"],[[6781,6782],\"disallowed\"],[[6783,6793],\"valid\"],[[6794,6799],\"disallowed\"],[[6800,6809],\"valid\"],[[6810,6815],\"disallowed\"],[[6816,6822],\"valid\",[],\"NV8\"],[[6823,6823],\"valid\"],[[6824,6829],\"valid\",[],\"NV8\"],[[6830,6831],\"disallowed\"],[[6832,6845],\"valid\"],[[6846,6846],\"valid\",[],\"NV8\"],[[6847,6911],\"disallowed\"],[[6912,6987],\"valid\"],[[6988,6991],\"disallowed\"],[[6992,7001],\"valid\"],[[7002,7018],\"valid\",[],\"NV8\"],[[7019,7027],\"valid\"],[[7028,7036],\"valid\",[],\"NV8\"],[[7037,7039],\"disallowed\"],[[7040,7082],\"valid\"],[[7083,7085],\"valid\"],[[7086,7097],\"valid\"],[[7098,7103],\"valid\"],[[7104,7155],\"valid\"],[[7156,7163],\"disallowed\"],[[7164,7167],\"valid\",[],\"NV8\"],[[7168,7223],\"valid\"],[[7224,7226],\"disallowed\"],[[7227,7231],\"valid\",[],\"NV8\"],[[7232,7241],\"valid\"],[[7242,7244],\"disallowed\"],[[7245,7293],\"valid\"],[[7294,7295],\"valid\",[],\"NV8\"],[[7296,7359],\"disallowed\"],[[7360,7367],\"valid\",[],\"NV8\"],[[7368,7375],\"disallowed\"],[[7376,7378],\"valid\"],[[7379,7379],\"valid\",[],\"NV8\"],[[7380,7410],\"valid\"],[[7411,7414],\"valid\"],[[7415,7415],\"disallowed\"],[[7416,7417],\"valid\"],[[7418,7423],\"disallowed\"],[[7424,7467],\"valid\"],[[7468,7468],\"mapped\",[97]],[[7469,7469],\"mapped\",[230]],[[7470,7470],\"mapped\",[98]],[[7471,7471],\"valid\"],[[7472,7472],\"mapped\",[100]],[[7473,7473],\"mapped\",[101]],[[7474,7474],\"mapped\",[477]],[[7475,7475],\"mapped\",[103]],[[7476,7476],\"mapped\",[104]],[[7477,7477],\"mapped\",[105]],[[7478,7478],\"mapped\",[106]],[[7479,7479],\"mapped\",[107]],[[7480,7480],\"mapped\",[108]],[[7481,7481],\"mapped\",[109]],[[7482,7482],\"mapped\",[110]],[[7483,7483],\"valid\"],[[7484,7484],\"mapped\",[111]],[[7485,7485],\"mapped\",[547]],[[7486,7486],\"mapped\",[112]],[[7487,7487],\"mapped\",[114]],[[7488,7488],\"mapped\",[116]],[[7489,7489],\"mapped\",[117]],[[7490,7490],\"mapped\",[119]],[[7491,7491],\"mapped\",[97]],[[7492,7492],\"mapped\",[592]],[[7493,7493],\"mapped\",[593]],[[7494,7494],\"mapped\",[7426]],[[7495,7495],\"mapped\",[98]],[[7496,7496],\"mapped\",[100]],[[7497,7497],\"mapped\",[101]],[[7498,7498],\"mapped\",[601]],[[7499,7499],\"mapped\",[603]],[[7500,7500],\"mapped\",[604]],[[7501,7501],\"mapped\",[103]],[[7502,7502],\"valid\"],[[7503,7503],\"mapped\",[107]],[[7504,7504],\"mapped\",[109]],[[7505,7505],\"mapped\",[331]],[[7506,7506],\"mapped\",[111]],[[7507,7507],\"mapped\",[596]],[[7508,7508],\"mapped\",[7446]],[[7509,7509],\"mapped\",[7447]],[[7510,7510],\"mapped\",[112]],[[7511,7511],\"mapped\",[116]],[[7512,7512],\"mapped\",[117]],[[7513,7513],\"mapped\",[7453]],[[7514,7514],\"mapped\",[623]],[[7515,7515],\"mapped\",[118]],[[7516,7516],\"mapped\",[7461]],[[7517,7517],\"mapped\",[946]],[[7518,7518],\"mapped\",[947]],[[7519,7519],\"mapped\",[948]],[[7520,7520],\"mapped\",[966]],[[7521,7521],\"mapped\",[967]],[[7522,7522],\"mapped\",[105]],[[7523,7523],\"mapped\",[114]],[[7524,7524],\"mapped\",[117]],[[7525,7525],\"mapped\",[118]],[[7526,7526],\"mapped\",[946]],[[7527,7527],\"mapped\",[947]],[[7528,7528],\"mapped\",[961]],[[7529,7529],\"mapped\",[966]],[[7530,7530],\"mapped\",[967]],[[7531,7531],\"valid\"],[[7532,7543],\"valid\"],[[7544,7544],\"mapped\",[1085]],[[7545,7578],\"valid\"],[[7579,7579],\"mapped\",[594]],[[7580,7580],\"mapped\",[99]],[[7581,7581],\"mapped\",[597]],[[7582,7582],\"mapped\",[240]],[[7583,7583],\"mapped\",[604]],[[7584,7584],\"mapped\",[102]],[[7585,7585],\"mapped\",[607]],[[7586,7586],\"mapped\",[609]],[[7587,7587],\"mapped\",[613]],[[7588,7588],\"mapped\",[616]],[[7589,7589],\"mapped\",[617]],[[7590,7590],\"mapped\",[618]],[[7591,7591],\"mapped\",[7547]],[[7592,7592],\"mapped\",[669]],[[7593,7593],\"mapped\",[621]],[[7594,7594],\"mapped\",[7557]],[[7595,7595],\"mapped\",[671]],[[7596,7596],\"mapped\",[625]],[[7597,7597],\"mapped\",[624]],[[7598,7598],\"mapped\",[626]],[[7599,7599],\"mapped\",[627]],[[7600,7600],\"mapped\",[628]],[[7601,7601],\"mapped\",[629]],[[7602,7602],\"mapped\",[632]],[[7603,7603],\"mapped\",[642]],[[7604,7604],\"mapped\",[643]],[[7605,7605],\"mapped\",[427]],[[7606,7606],\"mapped\",[649]],[[7607,7607],\"mapped\",[650]],[[7608,7608],\"mapped\",[7452]],[[7609,7609],\"mapped\",[651]],[[7610,7610],\"mapped\",[652]],[[7611,7611],\"mapped\",[122]],[[7612,7612],\"mapped\",[656]],[[7613,7613],\"mapped\",[657]],[[7614,7614],\"mapped\",[658]],[[7615,7615],\"mapped\",[952]],[[7616,7619],\"valid\"],[[7620,7626],\"valid\"],[[7627,7654],\"valid\"],[[7655,7669],\"valid\"],[[7670,7675],\"disallowed\"],[[7676,7676],\"valid\"],[[7677,7677],\"valid\"],[[7678,7679],\"valid\"],[[7680,7680],\"mapped\",[7681]],[[7681,7681],\"valid\"],[[7682,7682],\"mapped\",[7683]],[[7683,7683],\"valid\"],[[7684,7684],\"mapped\",[7685]],[[7685,7685],\"valid\"],[[7686,7686],\"mapped\",[7687]],[[7687,7687],\"valid\"],[[7688,7688],\"mapped\",[7689]],[[7689,7689],\"valid\"],[[7690,7690],\"mapped\",[7691]],[[7691,7691],\"valid\"],[[7692,7692],\"mapped\",[7693]],[[7693,7693],\"valid\"],[[7694,7694],\"mapped\",[7695]],[[7695,7695],\"valid\"],[[7696,7696],\"mapped\",[7697]],[[7697,7697],\"valid\"],[[7698,7698],\"mapped\",[7699]],[[7699,7699],\"valid\"],[[7700,7700],\"mapped\",[7701]],[[7701,7701],\"valid\"],[[7702,7702],\"mapped\",[7703]],[[7703,7703],\"valid\"],[[7704,7704],\"mapped\",[7705]],[[7705,7705],\"valid\"],[[7706,7706],\"mapped\",[7707]],[[7707,7707],\"valid\"],[[7708,7708],\"mapped\",[7709]],[[7709,7709],\"valid\"],[[7710,7710],\"mapped\",[7711]],[[7711,7711],\"valid\"],[[7712,7712],\"mapped\",[7713]],[[7713,7713],\"valid\"],[[7714,7714],\"mapped\",[7715]],[[7715,7715],\"valid\"],[[7716,7716],\"mapped\",[7717]],[[7717,7717],\"valid\"],[[7718,7718],\"mapped\",[7719]],[[7719,7719],\"valid\"],[[7720,7720],\"mapped\",[7721]],[[7721,7721],\"valid\"],[[7722,7722],\"mapped\",[7723]],[[7723,7723],\"valid\"],[[7724,7724],\"mapped\",[7725]],[[7725,7725],\"valid\"],[[7726,7726],\"mapped\",[7727]],[[7727,7727],\"valid\"],[[7728,7728],\"mapped\",[7729]],[[7729,7729],\"valid\"],[[7730,7730],\"mapped\",[7731]],[[7731,7731],\"valid\"],[[7732,7732],\"mapped\",[7733]],[[7733,7733],\"valid\"],[[7734,7734],\"mapped\",[7735]],[[7735,7735],\"valid\"],[[7736,7736],\"mapped\",[7737]],[[7737,7737],\"valid\"],[[7738,7738],\"mapped\",[7739]],[[7739,7739],\"valid\"],[[7740,7740],\"mapped\",[7741]],[[7741,7741],\"valid\"],[[7742,7742],\"mapped\",[7743]],[[7743,7743],\"valid\"],[[7744,7744],\"mapped\",[7745]],[[7745,7745],\"valid\"],[[7746,7746],\"mapped\",[7747]],[[7747,7747],\"valid\"],[[7748,7748],\"mapped\",[7749]],[[7749,7749],\"valid\"],[[7750,7750],\"mapped\",[7751]],[[7751,7751],\"valid\"],[[7752,7752],\"mapped\",[7753]],[[7753,7753],\"valid\"],[[7754,7754],\"mapped\",[7755]],[[7755,7755],\"valid\"],[[7756,7756],\"mapped\",[7757]],[[7757,7757],\"valid\"],[[7758,7758],\"mapped\",[7759]],[[7759,7759],\"valid\"],[[7760,7760],\"mapped\",[7761]],[[7761,7761],\"valid\"],[[7762,7762],\"mapped\",[7763]],[[7763,7763],\"valid\"],[[7764,7764],\"mapped\",[7765]],[[7765,7765],\"valid\"],[[7766,7766],\"mapped\",[7767]],[[7767,7767],\"valid\"],[[7768,7768],\"mapped\",[7769]],[[7769,7769],\"valid\"],[[7770,7770],\"mapped\",[7771]],[[7771,7771],\"valid\"],[[7772,7772],\"mapped\",[7773]],[[7773,7773],\"valid\"],[[7774,7774],\"mapped\",[7775]],[[7775,7775],\"valid\"],[[7776,7776],\"mapped\",[7777]],[[7777,7777],\"valid\"],[[7778,7778],\"mapped\",[7779]],[[7779,7779],\"valid\"],[[7780,7780],\"mapped\",[7781]],[[7781,7781],\"valid\"],[[7782,7782],\"mapped\",[7783]],[[7783,7783],\"valid\"],[[7784,7784],\"mapped\",[7785]],[[7785,7785],\"valid\"],[[7786,7786],\"mapped\",[7787]],[[7787,7787],\"valid\"],[[7788,7788],\"mapped\",[7789]],[[7789,7789],\"valid\"],[[7790,7790],\"mapped\",[7791]],[[7791,7791],\"valid\"],[[7792,7792],\"mapped\",[7793]],[[7793,7793],\"valid\"],[[7794,7794],\"mapped\",[7795]],[[7795,7795],\"valid\"],[[7796,7796],\"mapped\",[7797]],[[7797,7797],\"valid\"],[[7798,7798],\"mapped\",[7799]],[[7799,7799],\"valid\"],[[7800,7800],\"mapped\",[7801]],[[7801,7801],\"valid\"],[[7802,7802],\"mapped\",[7803]],[[7803,7803],\"valid\"],[[7804,7804],\"mapped\",[7805]],[[7805,7805],\"valid\"],[[7806,7806],\"mapped\",[7807]],[[7807,7807],\"valid\"],[[7808,7808],\"mapped\",[7809]],[[7809,7809],\"valid\"],[[7810,7810],\"mapped\",[7811]],[[7811,7811],\"valid\"],[[7812,7812],\"mapped\",[7813]],[[7813,7813],\"valid\"],[[7814,7814],\"mapped\",[7815]],[[7815,7815],\"valid\"],[[7816,7816],\"mapped\",[7817]],[[7817,7817],\"valid\"],[[7818,7818],\"mapped\",[7819]],[[7819,7819],\"valid\"],[[7820,7820],\"mapped\",[7821]],[[7821,7821],\"valid\"],[[7822,7822],\"mapped\",[7823]],[[7823,7823],\"valid\"],[[7824,7824],\"mapped\",[7825]],[[7825,7825],\"valid\"],[[7826,7826],\"mapped\",[7827]],[[7827,7827],\"valid\"],[[7828,7828],\"mapped\",[7829]],[[7829,7833],\"valid\"],[[7834,7834],\"mapped\",[97,702]],[[7835,7835],\"mapped\",[7777]],[[7836,7837],\"valid\"],[[7838,7838],\"mapped\",[115,115]],[[7839,7839],\"valid\"],[[7840,7840],\"mapped\",[7841]],[[7841,7841],\"valid\"],[[7842,7842],\"mapped\",[7843]],[[7843,7843],\"valid\"],[[7844,7844],\"mapped\",[7845]],[[7845,7845],\"valid\"],[[7846,7846],\"mapped\",[7847]],[[7847,7847],\"valid\"],[[7848,7848],\"mapped\",[7849]],[[7849,7849],\"valid\"],[[7850,7850],\"mapped\",[7851]],[[7851,7851],\"valid\"],[[7852,7852],\"mapped\",[7853]],[[7853,7853],\"valid\"],[[7854,7854],\"mapped\",[7855]],[[7855,7855],\"valid\"],[[7856,7856],\"mapped\",[7857]],[[7857,7857],\"valid\"],[[7858,7858],\"mapped\",[7859]],[[7859,7859],\"valid\"],[[7860,7860],\"mapped\",[7861]],[[7861,7861],\"valid\"],[[7862,7862],\"mapped\",[7863]],[[7863,7863],\"valid\"],[[7864,7864],\"mapped\",[7865]],[[7865,7865],\"valid\"],[[7866,7866],\"mapped\",[7867]],[[7867,7867],\"valid\"],[[7868,7868],\"mapped\",[7869]],[[7869,7869],\"valid\"],[[7870,7870],\"mapped\",[7871]],[[7871,7871],\"valid\"],[[7872,7872],\"mapped\",[7873]],[[7873,7873],\"valid\"],[[7874,7874],\"mapped\",[7875]],[[7875,7875],\"valid\"],[[7876,7876],\"mapped\",[7877]],[[7877,7877],\"valid\"],[[7878,7878],\"mapped\",[7879]],[[7879,7879],\"valid\"],[[7880,7880],\"mapped\",[7881]],[[7881,7881],\"valid\"],[[7882,7882],\"mapped\",[7883]],[[7883,7883],\"valid\"],[[7884,7884],\"mapped\",[7885]],[[7885,7885],\"valid\"],[[7886,7886],\"mapped\",[7887]],[[7887,7887],\"valid\"],[[7888,7888],\"mapped\",[7889]],[[7889,7889],\"valid\"],[[7890,7890],\"mapped\",[7891]],[[7891,7891],\"valid\"],[[7892,7892],\"mapped\",[7893]],[[7893,7893],\"valid\"],[[7894,7894],\"mapped\",[7895]],[[7895,7895],\"valid\"],[[7896,7896],\"mapped\",[7897]],[[7897,7897],\"valid\"],[[7898,7898],\"mapped\",[7899]],[[7899,7899],\"valid\"],[[7900,7900],\"mapped\",[7901]],[[7901,7901],\"valid\"],[[7902,7902],\"mapped\",[7903]],[[7903,7903],\"valid\"],[[7904,7904],\"mapped\",[7905]],[[7905,7905],\"valid\"],[[7906,7906],\"mapped\",[7907]],[[7907,7907],\"valid\"],[[7908,7908],\"mapped\",[7909]],[[7909,7909],\"valid\"],[[7910,7910],\"mapped\",[7911]],[[7911,7911],\"valid\"],[[7912,7912],\"mapped\",[7913]],[[7913,7913],\"valid\"],[[7914,7914],\"mapped\",[7915]],[[7915,7915],\"valid\"],[[7916,7916],\"mapped\",[7917]],[[7917,7917],\"valid\"],[[7918,7918],\"mapped\",[7919]],[[7919,7919],\"valid\"],[[7920,7920],\"mapped\",[7921]],[[7921,7921],\"valid\"],[[7922,7922],\"mapped\",[7923]],[[7923,7923],\"valid\"],[[7924,7924],\"mapped\",[7925]],[[7925,7925],\"valid\"],[[7926,7926],\"mapped\",[7927]],[[7927,7927],\"valid\"],[[7928,7928],\"mapped\",[7929]],[[7929,7929],\"valid\"],[[7930,7930],\"mapped\",[7931]],[[7931,7931],\"valid\"],[[7932,7932],\"mapped\",[7933]],[[7933,7933],\"valid\"],[[7934,7934],\"mapped\",[7935]],[[7935,7935],\"valid\"],[[7936,7943],\"valid\"],[[7944,7944],\"mapped\",[7936]],[[7945,7945],\"mapped\",[7937]],[[7946,7946],\"mapped\",[7938]],[[7947,7947],\"mapped\",[7939]],[[7948,7948],\"mapped\",[7940]],[[7949,7949],\"mapped\",[7941]],[[7950,7950],\"mapped\",[7942]],[[7951,7951],\"mapped\",[7943]],[[7952,7957],\"valid\"],[[7958,7959],\"disallowed\"],[[7960,7960],\"mapped\",[7952]],[[7961,7961],\"mapped\",[7953]],[[7962,7962],\"mapped\",[7954]],[[7963,7963],\"mapped\",[7955]],[[7964,7964],\"mapped\",[7956]],[[7965,7965],\"mapped\",[7957]],[[7966,7967],\"disallowed\"],[[7968,7975],\"valid\"],[[7976,7976],\"mapped\",[7968]],[[7977,7977],\"mapped\",[7969]],[[7978,7978],\"mapped\",[7970]],[[7979,7979],\"mapped\",[7971]],[[7980,7980],\"mapped\",[7972]],[[7981,7981],\"mapped\",[7973]],[[7982,7982],\"mapped\",[7974]],[[7983,7983],\"mapped\",[7975]],[[7984,7991],\"valid\"],[[7992,7992],\"mapped\",[7984]],[[7993,7993],\"mapped\",[7985]],[[7994,7994],\"mapped\",[7986]],[[7995,7995],\"mapped\",[7987]],[[7996,7996],\"mapped\",[7988]],[[7997,7997],\"mapped\",[7989]],[[7998,7998],\"mapped\",[7990]],[[7999,7999],\"mapped\",[7991]],[[8000,8005],\"valid\"],[[8006,8007],\"disallowed\"],[[8008,8008],\"mapped\",[8000]],[[8009,8009],\"mapped\",[8001]],[[8010,8010],\"mapped\",[8002]],[[8011,8011],\"mapped\",[8003]],[[8012,8012],\"mapped\",[8004]],[[8013,8013],\"mapped\",[8005]],[[8014,8015],\"disallowed\"],[[8016,8023],\"valid\"],[[8024,8024],\"disallowed\"],[[8025,8025],\"mapped\",[8017]],[[8026,8026],\"disallowed\"],[[8027,8027],\"mapped\",[8019]],[[8028,8028],\"disallowed\"],[[8029,8029],\"mapped\",[8021]],[[8030,8030],\"disallowed\"],[[8031,8031],\"mapped\",[8023]],[[8032,8039],\"valid\"],[[8040,8040],\"mapped\",[8032]],[[8041,8041],\"mapped\",[8033]],[[8042,8042],\"mapped\",[8034]],[[8043,8043],\"mapped\",[8035]],[[8044,8044],\"mapped\",[8036]],[[8045,8045],\"mapped\",[8037]],[[8046,8046],\"mapped\",[8038]],[[8047,8047],\"mapped\",[8039]],[[8048,8048],\"valid\"],[[8049,8049],\"mapped\",[940]],[[8050,8050],\"valid\"],[[8051,8051],\"mapped\",[941]],[[8052,8052],\"valid\"],[[8053,8053],\"mapped\",[942]],[[8054,8054],\"valid\"],[[8055,8055],\"mapped\",[943]],[[8056,8056],\"valid\"],[[8057,8057],\"mapped\",[972]],[[8058,8058],\"valid\"],[[8059,8059],\"mapped\",[973]],[[8060,8060],\"valid\"],[[8061,8061],\"mapped\",[974]],[[8062,8063],\"disallowed\"],[[8064,8064],\"mapped\",[7936,953]],[[8065,8065],\"mapped\",[7937,953]],[[8066,8066],\"mapped\",[7938,953]],[[8067,8067],\"mapped\",[7939,953]],[[8068,8068],\"mapped\",[7940,953]],[[8069,8069],\"mapped\",[7941,953]],[[8070,8070],\"mapped\",[7942,953]],[[8071,8071],\"mapped\",[7943,953]],[[8072,8072],\"mapped\",[7936,953]],[[8073,8073],\"mapped\",[7937,953]],[[8074,8074],\"mapped\",[7938,953]],[[8075,8075],\"mapped\",[7939,953]],[[8076,8076],\"mapped\",[7940,953]],[[8077,8077],\"mapped\",[7941,953]],[[8078,8078],\"mapped\",[7942,953]],[[8079,8079],\"mapped\",[7943,953]],[[8080,8080],\"mapped\",[7968,953]],[[8081,8081],\"mapped\",[7969,953]],[[8082,8082],\"mapped\",[7970,953]],[[8083,8083],\"mapped\",[7971,953]],[[8084,8084],\"mapped\",[7972,953]],[[8085,8085],\"mapped\",[7973,953]],[[8086,8086],\"mapped\",[7974,953]],[[8087,8087],\"mapped\",[7975,953]],[[8088,8088],\"mapped\",[7968,953]],[[8089,8089],\"mapped\",[7969,953]],[[8090,8090],\"mapped\",[7970,953]],[[8091,8091],\"mapped\",[7971,953]],[[8092,8092],\"mapped\",[7972,953]],[[8093,8093],\"mapped\",[7973,953]],[[8094,8094],\"mapped\",[7974,953]],[[8095,8095],\"mapped\",[7975,953]],[[8096,8096],\"mapped\",[8032,953]],[[8097,8097],\"mapped\",[8033,953]],[[8098,8098],\"mapped\",[8034,953]],[[8099,8099],\"mapped\",[8035,953]],[[8100,8100],\"mapped\",[8036,953]],[[8101,8101],\"mapped\",[8037,953]],[[8102,8102],\"mapped\",[8038,953]],[[8103,8103],\"mapped\",[8039,953]],[[8104,8104],\"mapped\",[8032,953]],[[8105,8105],\"mapped\",[8033,953]],[[8106,8106],\"mapped\",[8034,953]],[[8107,8107],\"mapped\",[8035,953]],[[8108,8108],\"mapped\",[8036,953]],[[8109,8109],\"mapped\",[8037,953]],[[8110,8110],\"mapped\",[8038,953]],[[8111,8111],\"mapped\",[8039,953]],[[8112,8113],\"valid\"],[[8114,8114],\"mapped\",[8048,953]],[[8115,8115],\"mapped\",[945,953]],[[8116,8116],\"mapped\",[940,953]],[[8117,8117],\"disallowed\"],[[8118,8118],\"valid\"],[[8119,8119],\"mapped\",[8118,953]],[[8120,8120],\"mapped\",[8112]],[[8121,8121],\"mapped\",[8113]],[[8122,8122],\"mapped\",[8048]],[[8123,8123],\"mapped\",[940]],[[8124,8124],\"mapped\",[945,953]],[[8125,8125],\"disallowed_STD3_mapped\",[32,787]],[[8126,8126],\"mapped\",[953]],[[8127,8127],\"disallowed_STD3_mapped\",[32,787]],[[8128,8128],\"disallowed_STD3_mapped\",[32,834]],[[8129,8129],\"disallowed_STD3_mapped\",[32,776,834]],[[8130,8130],\"mapped\",[8052,953]],[[8131,8131],\"mapped\",[951,953]],[[8132,8132],\"mapped\",[942,953]],[[8133,8133],\"disallowed\"],[[8134,8134],\"valid\"],[[8135,8135],\"mapped\",[8134,953]],[[8136,8136],\"mapped\",[8050]],[[8137,8137],\"mapped\",[941]],[[8138,8138],\"mapped\",[8052]],[[8139,8139],\"mapped\",[942]],[[8140,8140],\"mapped\",[951,953]],[[8141,8141],\"disallowed_STD3_mapped\",[32,787,768]],[[8142,8142],\"disallowed_STD3_mapped\",[32,787,769]],[[8143,8143],\"disallowed_STD3_mapped\",[32,787,834]],[[8144,8146],\"valid\"],[[8147,8147],\"mapped\",[912]],[[8148,8149],\"disallowed\"],[[8150,8151],\"valid\"],[[8152,8152],\"mapped\",[8144]],[[8153,8153],\"mapped\",[8145]],[[8154,8154],\"mapped\",[8054]],[[8155,8155],\"mapped\",[943]],[[8156,8156],\"disallowed\"],[[8157,8157],\"disallowed_STD3_mapped\",[32,788,768]],[[8158,8158],\"disallowed_STD3_mapped\",[32,788,769]],[[8159,8159],\"disallowed_STD3_mapped\",[32,788,834]],[[8160,8162],\"valid\"],[[8163,8163],\"mapped\",[944]],[[8164,8167],\"valid\"],[[8168,8168],\"mapped\",[8160]],[[8169,8169],\"mapped\",[8161]],[[8170,8170],\"mapped\",[8058]],[[8171,8171],\"mapped\",[973]],[[8172,8172],\"mapped\",[8165]],[[8173,8173],\"disallowed_STD3_mapped\",[32,776,768]],[[8174,8174],\"disallowed_STD3_mapped\",[32,776,769]],[[8175,8175],\"disallowed_STD3_mapped\",[96]],[[8176,8177],\"disallowed\"],[[8178,8178],\"mapped\",[8060,953]],[[8179,8179],\"mapped\",[969,953]],[[8180,8180],\"mapped\",[974,953]],[[8181,8181],\"disallowed\"],[[8182,8182],\"valid\"],[[8183,8183],\"mapped\",[8182,953]],[[8184,8184],\"mapped\",[8056]],[[8185,8185],\"mapped\",[972]],[[8186,8186],\"mapped\",[8060]],[[8187,8187],\"mapped\",[974]],[[8188,8188],\"mapped\",[969,953]],[[8189,8189],\"disallowed_STD3_mapped\",[32,769]],[[8190,8190],\"disallowed_STD3_mapped\",[32,788]],[[8191,8191],\"disallowed\"],[[8192,8202],\"disallowed_STD3_mapped\",[32]],[[8203,8203],\"ignored\"],[[8204,8205],\"deviation\",[]],[[8206,8207],\"disallowed\"],[[8208,8208],\"valid\",[],\"NV8\"],[[8209,8209],\"mapped\",[8208]],[[8210,8214],\"valid\",[],\"NV8\"],[[8215,8215],\"disallowed_STD3_mapped\",[32,819]],[[8216,8227],\"valid\",[],\"NV8\"],[[8228,8230],\"disallowed\"],[[8231,8231],\"valid\",[],\"NV8\"],[[8232,8238],\"disallowed\"],[[8239,8239],\"disallowed_STD3_mapped\",[32]],[[8240,8242],\"valid\",[],\"NV8\"],[[8243,8243],\"mapped\",[8242,8242]],[[8244,8244],\"mapped\",[8242,8242,8242]],[[8245,8245],\"valid\",[],\"NV8\"],[[8246,8246],\"mapped\",[8245,8245]],[[8247,8247],\"mapped\",[8245,8245,8245]],[[8248,8251],\"valid\",[],\"NV8\"],[[8252,8252],\"disallowed_STD3_mapped\",[33,33]],[[8253,8253],\"valid\",[],\"NV8\"],[[8254,8254],\"disallowed_STD3_mapped\",[32,773]],[[8255,8262],\"valid\",[],\"NV8\"],[[8263,8263],\"disallowed_STD3_mapped\",[63,63]],[[8264,8264],\"disallowed_STD3_mapped\",[63,33]],[[8265,8265],\"disallowed_STD3_mapped\",[33,63]],[[8266,8269],\"valid\",[],\"NV8\"],[[8270,8274],\"valid\",[],\"NV8\"],[[8275,8276],\"valid\",[],\"NV8\"],[[8277,8278],\"valid\",[],\"NV8\"],[[8279,8279],\"mapped\",[8242,8242,8242,8242]],[[8280,8286],\"valid\",[],\"NV8\"],[[8287,8287],\"disallowed_STD3_mapped\",[32]],[[8288,8288],\"ignored\"],[[8289,8291],\"disallowed\"],[[8292,8292],\"ignored\"],[[8293,8293],\"disallowed\"],[[8294,8297],\"disallowed\"],[[8298,8303],\"disallowed\"],[[8304,8304],\"mapped\",[48]],[[8305,8305],\"mapped\",[105]],[[8306,8307],\"disallowed\"],[[8308,8308],\"mapped\",[52]],[[8309,8309],\"mapped\",[53]],[[8310,8310],\"mapped\",[54]],[[8311,8311],\"mapped\",[55]],[[8312,8312],\"mapped\",[56]],[[8313,8313],\"mapped\",[57]],[[8314,8314],\"disallowed_STD3_mapped\",[43]],[[8315,8315],\"mapped\",[8722]],[[8316,8316],\"disallowed_STD3_mapped\",[61]],[[8317,8317],\"disallowed_STD3_mapped\",[40]],[[8318,8318],\"disallowed_STD3_mapped\",[41]],[[8319,8319],\"mapped\",[110]],[[8320,8320],\"mapped\",[48]],[[8321,8321],\"mapped\",[49]],[[8322,8322],\"mapped\",[50]],[[8323,8323],\"mapped\",[51]],[[8324,8324],\"mapped\",[52]],[[8325,8325],\"mapped\",[53]],[[8326,8326],\"mapped\",[54]],[[8327,8327],\"mapped\",[55]],[[8328,8328],\"mapped\",[56]],[[8329,8329],\"mapped\",[57]],[[8330,8330],\"disallowed_STD3_mapped\",[43]],[[8331,8331],\"mapped\",[8722]],[[8332,8332],\"disallowed_STD3_mapped\",[61]],[[8333,8333],\"disallowed_STD3_mapped\",[40]],[[8334,8334],\"disallowed_STD3_mapped\",[41]],[[8335,8335],\"disallowed\"],[[8336,8336],\"mapped\",[97]],[[8337,8337],\"mapped\",[101]],[[8338,8338],\"mapped\",[111]],[[8339,8339],\"mapped\",[120]],[[8340,8340],\"mapped\",[601]],[[8341,8341],\"mapped\",[104]],[[8342,8342],\"mapped\",[107]],[[8343,8343],\"mapped\",[108]],[[8344,8344],\"mapped\",[109]],[[8345,8345],\"mapped\",[110]],[[8346,8346],\"mapped\",[112]],[[8347,8347],\"mapped\",[115]],[[8348,8348],\"mapped\",[116]],[[8349,8351],\"disallowed\"],[[8352,8359],\"valid\",[],\"NV8\"],[[8360,8360],\"mapped\",[114,115]],[[8361,8362],\"valid\",[],\"NV8\"],[[8363,8363],\"valid\",[],\"NV8\"],[[8364,8364],\"valid\",[],\"NV8\"],[[8365,8367],\"valid\",[],\"NV8\"],[[8368,8369],\"valid\",[],\"NV8\"],[[8370,8373],\"valid\",[],\"NV8\"],[[8374,8376],\"valid\",[],\"NV8\"],[[8377,8377],\"valid\",[],\"NV8\"],[[8378,8378],\"valid\",[],\"NV8\"],[[8379,8381],\"valid\",[],\"NV8\"],[[8382,8382],\"valid\",[],\"NV8\"],[[8383,8399],\"disallowed\"],[[8400,8417],\"valid\",[],\"NV8\"],[[8418,8419],\"valid\",[],\"NV8\"],[[8420,8426],\"valid\",[],\"NV8\"],[[8427,8427],\"valid\",[],\"NV8\"],[[8428,8431],\"valid\",[],\"NV8\"],[[8432,8432],\"valid\",[],\"NV8\"],[[8433,8447],\"disallowed\"],[[8448,8448],\"disallowed_STD3_mapped\",[97,47,99]],[[8449,8449],\"disallowed_STD3_mapped\",[97,47,115]],[[8450,8450],\"mapped\",[99]],[[8451,8451],\"mapped\",[176,99]],[[8452,8452],\"valid\",[],\"NV8\"],[[8453,8453],\"disallowed_STD3_mapped\",[99,47,111]],[[8454,8454],\"disallowed_STD3_mapped\",[99,47,117]],[[8455,8455],\"mapped\",[603]],[[8456,8456],\"valid\",[],\"NV8\"],[[8457,8457],\"mapped\",[176,102]],[[8458,8458],\"mapped\",[103]],[[8459,8462],\"mapped\",[104]],[[8463,8463],\"mapped\",[295]],[[8464,8465],\"mapped\",[105]],[[8466,8467],\"mapped\",[108]],[[8468,8468],\"valid\",[],\"NV8\"],[[8469,8469],\"mapped\",[110]],[[8470,8470],\"mapped\",[110,111]],[[8471,8472],\"valid\",[],\"NV8\"],[[8473,8473],\"mapped\",[112]],[[8474,8474],\"mapped\",[113]],[[8475,8477],\"mapped\",[114]],[[8478,8479],\"valid\",[],\"NV8\"],[[8480,8480],\"mapped\",[115,109]],[[8481,8481],\"mapped\",[116,101,108]],[[8482,8482],\"mapped\",[116,109]],[[8483,8483],\"valid\",[],\"NV8\"],[[8484,8484],\"mapped\",[122]],[[8485,8485],\"valid\",[],\"NV8\"],[[8486,8486],\"mapped\",[969]],[[8487,8487],\"valid\",[],\"NV8\"],[[8488,8488],\"mapped\",[122]],[[8489,8489],\"valid\",[],\"NV8\"],[[8490,8490],\"mapped\",[107]],[[8491,8491],\"mapped\",[229]],[[8492,8492],\"mapped\",[98]],[[8493,8493],\"mapped\",[99]],[[8494,8494],\"valid\",[],\"NV8\"],[[8495,8496],\"mapped\",[101]],[[8497,8497],\"mapped\",[102]],[[8498,8498],\"disallowed\"],[[8499,8499],\"mapped\",[109]],[[8500,8500],\"mapped\",[111]],[[8501,8501],\"mapped\",[1488]],[[8502,8502],\"mapped\",[1489]],[[8503,8503],\"mapped\",[1490]],[[8504,8504],\"mapped\",[1491]],[[8505,8505],\"mapped\",[105]],[[8506,8506],\"valid\",[],\"NV8\"],[[8507,8507],\"mapped\",[102,97,120]],[[8508,8508],\"mapped\",[960]],[[8509,8510],\"mapped\",[947]],[[8511,8511],\"mapped\",[960]],[[8512,8512],\"mapped\",[8721]],[[8513,8516],\"valid\",[],\"NV8\"],[[8517,8518],\"mapped\",[100]],[[8519,8519],\"mapped\",[101]],[[8520,8520],\"mapped\",[105]],[[8521,8521],\"mapped\",[106]],[[8522,8523],\"valid\",[],\"NV8\"],[[8524,8524],\"valid\",[],\"NV8\"],[[8525,8525],\"valid\",[],\"NV8\"],[[8526,8526],\"valid\"],[[8527,8527],\"valid\",[],\"NV8\"],[[8528,8528],\"mapped\",[49,8260,55]],[[8529,8529],\"mapped\",[49,8260,57]],[[8530,8530],\"mapped\",[49,8260,49,48]],[[8531,8531],\"mapped\",[49,8260,51]],[[8532,8532],\"mapped\",[50,8260,51]],[[8533,8533],\"mapped\",[49,8260,53]],[[8534,8534],\"mapped\",[50,8260,53]],[[8535,8535],\"mapped\",[51,8260,53]],[[8536,8536],\"mapped\",[52,8260,53]],[[8537,8537],\"mapped\",[49,8260,54]],[[8538,8538],\"mapped\",[53,8260,54]],[[8539,8539],\"mapped\",[49,8260,56]],[[8540,8540],\"mapped\",[51,8260,56]],[[8541,8541],\"mapped\",[53,8260,56]],[[8542,8542],\"mapped\",[55,8260,56]],[[8543,8543],\"mapped\",[49,8260]],[[8544,8544],\"mapped\",[105]],[[8545,8545],\"mapped\",[105,105]],[[8546,8546],\"mapped\",[105,105,105]],[[8547,8547],\"mapped\",[105,118]],[[8548,8548],\"mapped\",[118]],[[8549,8549],\"mapped\",[118,105]],[[8550,8550],\"mapped\",[118,105,105]],[[8551,8551],\"mapped\",[118,105,105,105]],[[8552,8552],\"mapped\",[105,120]],[[8553,8553],\"mapped\",[120]],[[8554,8554],\"mapped\",[120,105]],[[8555,8555],\"mapped\",[120,105,105]],[[8556,8556],\"mapped\",[108]],[[8557,8557],\"mapped\",[99]],[[8558,8558],\"mapped\",[100]],[[8559,8559],\"mapped\",[109]],[[8560,8560],\"mapped\",[105]],[[8561,8561],\"mapped\",[105,105]],[[8562,8562],\"mapped\",[105,105,105]],[[8563,8563],\"mapped\",[105,118]],[[8564,8564],\"mapped\",[118]],[[8565,8565],\"mapped\",[118,105]],[[8566,8566],\"mapped\",[118,105,105]],[[8567,8567],\"mapped\",[118,105,105,105]],[[8568,8568],\"mapped\",[105,120]],[[8569,8569],\"mapped\",[120]],[[8570,8570],\"mapped\",[120,105]],[[8571,8571],\"mapped\",[120,105,105]],[[8572,8572],\"mapped\",[108]],[[8573,8573],\"mapped\",[99]],[[8574,8574],\"mapped\",[100]],[[8575,8575],\"mapped\",[109]],[[8576,8578],\"valid\",[],\"NV8\"],[[8579,8579],\"disallowed\"],[[8580,8580],\"valid\"],[[8581,8584],\"valid\",[],\"NV8\"],[[8585,8585],\"mapped\",[48,8260,51]],[[8586,8587],\"valid\",[],\"NV8\"],[[8588,8591],\"disallowed\"],[[8592,8682],\"valid\",[],\"NV8\"],[[8683,8691],\"valid\",[],\"NV8\"],[[8692,8703],\"valid\",[],\"NV8\"],[[8704,8747],\"valid\",[],\"NV8\"],[[8748,8748],\"mapped\",[8747,8747]],[[8749,8749],\"mapped\",[8747,8747,8747]],[[8750,8750],\"valid\",[],\"NV8\"],[[8751,8751],\"mapped\",[8750,8750]],[[8752,8752],\"mapped\",[8750,8750,8750]],[[8753,8799],\"valid\",[],\"NV8\"],[[8800,8800],\"disallowed_STD3_valid\"],[[8801,8813],\"valid\",[],\"NV8\"],[[8814,8815],\"disallowed_STD3_valid\"],[[8816,8945],\"valid\",[],\"NV8\"],[[8946,8959],\"valid\",[],\"NV8\"],[[8960,8960],\"valid\",[],\"NV8\"],[[8961,8961],\"valid\",[],\"NV8\"],[[8962,9000],\"valid\",[],\"NV8\"],[[9001,9001],\"mapped\",[12296]],[[9002,9002],\"mapped\",[12297]],[[9003,9082],\"valid\",[],\"NV8\"],[[9083,9083],\"valid\",[],\"NV8\"],[[9084,9084],\"valid\",[],\"NV8\"],[[9085,9114],\"valid\",[],\"NV8\"],[[9115,9166],\"valid\",[],\"NV8\"],[[9167,9168],\"valid\",[],\"NV8\"],[[9169,9179],\"valid\",[],\"NV8\"],[[9180,9191],\"valid\",[],\"NV8\"],[[9192,9192],\"valid\",[],\"NV8\"],[[9193,9203],\"valid\",[],\"NV8\"],[[9204,9210],\"valid\",[],\"NV8\"],[[9211,9215],\"disallowed\"],[[9216,9252],\"valid\",[],\"NV8\"],[[9253,9254],\"valid\",[],\"NV8\"],[[9255,9279],\"disallowed\"],[[9280,9290],\"valid\",[],\"NV8\"],[[9291,9311],\"disallowed\"],[[9312,9312],\"mapped\",[49]],[[9313,9313],\"mapped\",[50]],[[9314,9314],\"mapped\",[51]],[[9315,9315],\"mapped\",[52]],[[9316,9316],\"mapped\",[53]],[[9317,9317],\"mapped\",[54]],[[9318,9318],\"mapped\",[55]],[[9319,9319],\"mapped\",[56]],[[9320,9320],\"mapped\",[57]],[[9321,9321],\"mapped\",[49,48]],[[9322,9322],\"mapped\",[49,49]],[[9323,9323],\"mapped\",[49,50]],[[9324,9324],\"mapped\",[49,51]],[[9325,9325],\"mapped\",[49,52]],[[9326,9326],\"mapped\",[49,53]],[[9327,9327],\"mapped\",[49,54]],[[9328,9328],\"mapped\",[49,55]],[[9329,9329],\"mapped\",[49,56]],[[9330,9330],\"mapped\",[49,57]],[[9331,9331],\"mapped\",[50,48]],[[9332,9332],\"disallowed_STD3_mapped\",[40,49,41]],[[9333,9333],\"disallowed_STD3_mapped\",[40,50,41]],[[9334,9334],\"disallowed_STD3_mapped\",[40,51,41]],[[9335,9335],\"disallowed_STD3_mapped\",[40,52,41]],[[9336,9336],\"disallowed_STD3_mapped\",[40,53,41]],[[9337,9337],\"disallowed_STD3_mapped\",[40,54,41]],[[9338,9338],\"disallowed_STD3_mapped\",[40,55,41]],[[9339,9339],\"disallowed_STD3_mapped\",[40,56,41]],[[9340,9340],\"disallowed_STD3_mapped\",[40,57,41]],[[9341,9341],\"disallowed_STD3_mapped\",[40,49,48,41]],[[9342,9342],\"disallowed_STD3_mapped\",[40,49,49,41]],[[9343,9343],\"disallowed_STD3_mapped\",[40,49,50,41]],[[9344,9344],\"disallowed_STD3_mapped\",[40,49,51,41]],[[9345,9345],\"disallowed_STD3_mapped\",[40,49,52,41]],[[9346,9346],\"disallowed_STD3_mapped\",[40,49,53,41]],[[9347,9347],\"disallowed_STD3_mapped\",[40,49,54,41]],[[9348,9348],\"disallowed_STD3_mapped\",[40,49,55,41]],[[9349,9349],\"disallowed_STD3_mapped\",[40,49,56,41]],[[9350,9350],\"disallowed_STD3_mapped\",[40,49,57,41]],[[9351,9351],\"disallowed_STD3_mapped\",[40,50,48,41]],[[9352,9371],\"disallowed\"],[[9372,9372],\"disallowed_STD3_mapped\",[40,97,41]],[[9373,9373],\"disallowed_STD3_mapped\",[40,98,41]],[[9374,9374],\"disallowed_STD3_mapped\",[40,99,41]],[[9375,9375],\"disallowed_STD3_mapped\",[40,100,41]],[[9376,9376],\"disallowed_STD3_mapped\",[40,101,41]],[[9377,9377],\"disallowed_STD3_mapped\",[40,102,41]],[[9378,9378],\"disallowed_STD3_mapped\",[40,103,41]],[[9379,9379],\"disallowed_STD3_mapped\",[40,104,41]],[[9380,9380],\"disallowed_STD3_mapped\",[40,105,41]],[[9381,9381],\"disallowed_STD3_mapped\",[40,106,41]],[[9382,9382],\"disallowed_STD3_mapped\",[40,107,41]],[[9383,9383],\"disallowed_STD3_mapped\",[40,108,41]],[[9384,9384],\"disallowed_STD3_mapped\",[40,109,41]],[[9385,9385],\"disallowed_STD3_mapped\",[40,110,41]],[[9386,9386],\"disallowed_STD3_mapped\",[40,111,41]],[[9387,9387],\"disallowed_STD3_mapped\",[40,112,41]],[[9388,9388],\"disallowed_STD3_mapped\",[40,113,41]],[[9389,9389],\"disallowed_STD3_mapped\",[40,114,41]],[[9390,9390],\"disallowed_STD3_mapped\",[40,115,41]],[[9391,9391],\"disallowed_STD3_mapped\",[40,116,41]],[[9392,9392],\"disallowed_STD3_mapped\",[40,117,41]],[[9393,9393],\"disallowed_STD3_mapped\",[40,118,41]],[[9394,9394],\"disallowed_STD3_mapped\",[40,119,41]],[[9395,9395],\"disallowed_STD3_mapped\",[40,120,41]],[[9396,9396],\"disallowed_STD3_mapped\",[40,121,41]],[[9397,9397],\"disallowed_STD3_mapped\",[40,122,41]],[[9398,9398],\"mapped\",[97]],[[9399,9399],\"mapped\",[98]],[[9400,9400],\"mapped\",[99]],[[9401,9401],\"mapped\",[100]],[[9402,9402],\"mapped\",[101]],[[9403,9403],\"mapped\",[102]],[[9404,9404],\"mapped\",[103]],[[9405,9405],\"mapped\",[104]],[[9406,9406],\"mapped\",[105]],[[9407,9407],\"mapped\",[106]],[[9408,9408],\"mapped\",[107]],[[9409,9409],\"mapped\",[108]],[[9410,9410],\"mapped\",[109]],[[9411,9411],\"mapped\",[110]],[[9412,9412],\"mapped\",[111]],[[9413,9413],\"mapped\",[112]],[[9414,9414],\"mapped\",[113]],[[9415,9415],\"mapped\",[114]],[[9416,9416],\"mapped\",[115]],[[9417,9417],\"mapped\",[116]],[[9418,9418],\"mapped\",[117]],[[9419,9419],\"mapped\",[118]],[[9420,9420],\"mapped\",[119]],[[9421,9421],\"mapped\",[120]],[[9422,9422],\"mapped\",[121]],[[9423,9423],\"mapped\",[122]],[[9424,9424],\"mapped\",[97]],[[9425,9425],\"mapped\",[98]],[[9426,9426],\"mapped\",[99]],[[9427,9427],\"mapped\",[100]],[[9428,9428],\"mapped\",[101]],[[9429,9429],\"mapped\",[102]],[[9430,9430],\"mapped\",[103]],[[9431,9431],\"mapped\",[104]],[[9432,9432],\"mapped\",[105]],[[9433,9433],\"mapped\",[106]],[[9434,9434],\"mapped\",[107]],[[9435,9435],\"mapped\",[108]],[[9436,9436],\"mapped\",[109]],[[9437,9437],\"mapped\",[110]],[[9438,9438],\"mapped\",[111]],[[9439,9439],\"mapped\",[112]],[[9440,9440],\"mapped\",[113]],[[9441,9441],\"mapped\",[114]],[[9442,9442],\"mapped\",[115]],[[9443,9443],\"mapped\",[116]],[[9444,9444],\"mapped\",[117]],[[9445,9445],\"mapped\",[118]],[[9446,9446],\"mapped\",[119]],[[9447,9447],\"mapped\",[120]],[[9448,9448],\"mapped\",[121]],[[9449,9449],\"mapped\",[122]],[[9450,9450],\"mapped\",[48]],[[9451,9470],\"valid\",[],\"NV8\"],[[9471,9471],\"valid\",[],\"NV8\"],[[9472,9621],\"valid\",[],\"NV8\"],[[9622,9631],\"valid\",[],\"NV8\"],[[9632,9711],\"valid\",[],\"NV8\"],[[9712,9719],\"valid\",[],\"NV8\"],[[9720,9727],\"valid\",[],\"NV8\"],[[9728,9747],\"valid\",[],\"NV8\"],[[9748,9749],\"valid\",[],\"NV8\"],[[9750,9751],\"valid\",[],\"NV8\"],[[9752,9752],\"valid\",[],\"NV8\"],[[9753,9753],\"valid\",[],\"NV8\"],[[9754,9839],\"valid\",[],\"NV8\"],[[9840,9841],\"valid\",[],\"NV8\"],[[9842,9853],\"valid\",[],\"NV8\"],[[9854,9855],\"valid\",[],\"NV8\"],[[9856,9865],\"valid\",[],\"NV8\"],[[9866,9873],\"valid\",[],\"NV8\"],[[9874,9884],\"valid\",[],\"NV8\"],[[9885,9885],\"valid\",[],\"NV8\"],[[9886,9887],\"valid\",[],\"NV8\"],[[9888,9889],\"valid\",[],\"NV8\"],[[9890,9905],\"valid\",[],\"NV8\"],[[9906,9906],\"valid\",[],\"NV8\"],[[9907,9916],\"valid\",[],\"NV8\"],[[9917,9919],\"valid\",[],\"NV8\"],[[9920,9923],\"valid\",[],\"NV8\"],[[9924,9933],\"valid\",[],\"NV8\"],[[9934,9934],\"valid\",[],\"NV8\"],[[9935,9953],\"valid\",[],\"NV8\"],[[9954,9954],\"valid\",[],\"NV8\"],[[9955,9955],\"valid\",[],\"NV8\"],[[9956,9959],\"valid\",[],\"NV8\"],[[9960,9983],\"valid\",[],\"NV8\"],[[9984,9984],\"valid\",[],\"NV8\"],[[9985,9988],\"valid\",[],\"NV8\"],[[9989,9989],\"valid\",[],\"NV8\"],[[9990,9993],\"valid\",[],\"NV8\"],[[9994,9995],\"valid\",[],\"NV8\"],[[9996,10023],\"valid\",[],\"NV8\"],[[10024,10024],\"valid\",[],\"NV8\"],[[10025,10059],\"valid\",[],\"NV8\"],[[10060,10060],\"valid\",[],\"NV8\"],[[10061,10061],\"valid\",[],\"NV8\"],[[10062,10062],\"valid\",[],\"NV8\"],[[10063,10066],\"valid\",[],\"NV8\"],[[10067,10069],\"valid\",[],\"NV8\"],[[10070,10070],\"valid\",[],\"NV8\"],[[10071,10071],\"valid\",[],\"NV8\"],[[10072,10078],\"valid\",[],\"NV8\"],[[10079,10080],\"valid\",[],\"NV8\"],[[10081,10087],\"valid\",[],\"NV8\"],[[10088,10101],\"valid\",[],\"NV8\"],[[10102,10132],\"valid\",[],\"NV8\"],[[10133,10135],\"valid\",[],\"NV8\"],[[10136,10159],\"valid\",[],\"NV8\"],[[10160,10160],\"valid\",[],\"NV8\"],[[10161,10174],\"valid\",[],\"NV8\"],[[10175,10175],\"valid\",[],\"NV8\"],[[10176,10182],\"valid\",[],\"NV8\"],[[10183,10186],\"valid\",[],\"NV8\"],[[10187,10187],\"valid\",[],\"NV8\"],[[10188,10188],\"valid\",[],\"NV8\"],[[10189,10189],\"valid\",[],\"NV8\"],[[10190,10191],\"valid\",[],\"NV8\"],[[10192,10219],\"valid\",[],\"NV8\"],[[10220,10223],\"valid\",[],\"NV8\"],[[10224,10239],\"valid\",[],\"NV8\"],[[10240,10495],\"valid\",[],\"NV8\"],[[10496,10763],\"valid\",[],\"NV8\"],[[10764,10764],\"mapped\",[8747,8747,8747,8747]],[[10765,10867],\"valid\",[],\"NV8\"],[[10868,10868],\"disallowed_STD3_mapped\",[58,58,61]],[[10869,10869],\"disallowed_STD3_mapped\",[61,61]],[[10870,10870],\"disallowed_STD3_mapped\",[61,61,61]],[[10871,10971],\"valid\",[],\"NV8\"],[[10972,10972],\"mapped\",[10973,824]],[[10973,11007],\"valid\",[],\"NV8\"],[[11008,11021],\"valid\",[],\"NV8\"],[[11022,11027],\"valid\",[],\"NV8\"],[[11028,11034],\"valid\",[],\"NV8\"],[[11035,11039],\"valid\",[],\"NV8\"],[[11040,11043],\"valid\",[],\"NV8\"],[[11044,11084],\"valid\",[],\"NV8\"],[[11085,11087],\"valid\",[],\"NV8\"],[[11088,11092],\"valid\",[],\"NV8\"],[[11093,11097],\"valid\",[],\"NV8\"],[[11098,11123],\"valid\",[],\"NV8\"],[[11124,11125],\"disallowed\"],[[11126,11157],\"valid\",[],\"NV8\"],[[11158,11159],\"disallowed\"],[[11160,11193],\"valid\",[],\"NV8\"],[[11194,11196],\"disallowed\"],[[11197,11208],\"valid\",[],\"NV8\"],[[11209,11209],\"disallowed\"],[[11210,11217],\"valid\",[],\"NV8\"],[[11218,11243],\"disallowed\"],[[11244,11247],\"valid\",[],\"NV8\"],[[11248,11263],\"disallowed\"],[[11264,11264],\"mapped\",[11312]],[[11265,11265],\"mapped\",[11313]],[[11266,11266],\"mapped\",[11314]],[[11267,11267],\"mapped\",[11315]],[[11268,11268],\"mapped\",[11316]],[[11269,11269],\"mapped\",[11317]],[[11270,11270],\"mapped\",[11318]],[[11271,11271],\"mapped\",[11319]],[[11272,11272],\"mapped\",[11320]],[[11273,11273],\"mapped\",[11321]],[[11274,11274],\"mapped\",[11322]],[[11275,11275],\"mapped\",[11323]],[[11276,11276],\"mapped\",[11324]],[[11277,11277],\"mapped\",[11325]],[[11278,11278],\"mapped\",[11326]],[[11279,11279],\"mapped\",[11327]],[[11280,11280],\"mapped\",[11328]],[[11281,11281],\"mapped\",[11329]],[[11282,11282],\"mapped\",[11330]],[[11283,11283],\"mapped\",[11331]],[[11284,11284],\"mapped\",[11332]],[[11285,11285],\"mapped\",[11333]],[[11286,11286],\"mapped\",[11334]],[[11287,11287],\"mapped\",[11335]],[[11288,11288],\"mapped\",[11336]],[[11289,11289],\"mapped\",[11337]],[[11290,11290],\"mapped\",[11338]],[[11291,11291],\"mapped\",[11339]],[[11292,11292],\"mapped\",[11340]],[[11293,11293],\"mapped\",[11341]],[[11294,11294],\"mapped\",[11342]],[[11295,11295],\"mapped\",[11343]],[[11296,11296],\"mapped\",[11344]],[[11297,11297],\"mapped\",[11345]],[[11298,11298],\"mapped\",[11346]],[[11299,11299],\"mapped\",[11347]],[[11300,11300],\"mapped\",[11348]],[[11301,11301],\"mapped\",[11349]],[[11302,11302],\"mapped\",[11350]],[[11303,11303],\"mapped\",[11351]],[[11304,11304],\"mapped\",[11352]],[[11305,11305],\"mapped\",[11353]],[[11306,11306],\"mapped\",[11354]],[[11307,11307],\"mapped\",[11355]],[[11308,11308],\"mapped\",[11356]],[[11309,11309],\"mapped\",[11357]],[[11310,11310],\"mapped\",[11358]],[[11311,11311],\"disallowed\"],[[11312,11358],\"valid\"],[[11359,11359],\"disallowed\"],[[11360,11360],\"mapped\",[11361]],[[11361,11361],\"valid\"],[[11362,11362],\"mapped\",[619]],[[11363,11363],\"mapped\",[7549]],[[11364,11364],\"mapped\",[637]],[[11365,11366],\"valid\"],[[11367,11367],\"mapped\",[11368]],[[11368,11368],\"valid\"],[[11369,11369],\"mapped\",[11370]],[[11370,11370],\"valid\"],[[11371,11371],\"mapped\",[11372]],[[11372,11372],\"valid\"],[[11373,11373],\"mapped\",[593]],[[11374,11374],\"mapped\",[625]],[[11375,11375],\"mapped\",[592]],[[11376,11376],\"mapped\",[594]],[[11377,11377],\"valid\"],[[11378,11378],\"mapped\",[11379]],[[11379,11379],\"valid\"],[[11380,11380],\"valid\"],[[11381,11381],\"mapped\",[11382]],[[11382,11383],\"valid\"],[[11384,11387],\"valid\"],[[11388,11388],\"mapped\",[106]],[[11389,11389],\"mapped\",[118]],[[11390,11390],\"mapped\",[575]],[[11391,11391],\"mapped\",[576]],[[11392,11392],\"mapped\",[11393]],[[11393,11393],\"valid\"],[[11394,11394],\"mapped\",[11395]],[[11395,11395],\"valid\"],[[11396,11396],\"mapped\",[11397]],[[11397,11397],\"valid\"],[[11398,11398],\"mapped\",[11399]],[[11399,11399],\"valid\"],[[11400,11400],\"mapped\",[11401]],[[11401,11401],\"valid\"],[[11402,11402],\"mapped\",[11403]],[[11403,11403],\"valid\"],[[11404,11404],\"mapped\",[11405]],[[11405,11405],\"valid\"],[[11406,11406],\"mapped\",[11407]],[[11407,11407],\"valid\"],[[11408,11408],\"mapped\",[11409]],[[11409,11409],\"valid\"],[[11410,11410],\"mapped\",[11411]],[[11411,11411],\"valid\"],[[11412,11412],\"mapped\",[11413]],[[11413,11413],\"valid\"],[[11414,11414],\"mapped\",[11415]],[[11415,11415],\"valid\"],[[11416,11416],\"mapped\",[11417]],[[11417,11417],\"valid\"],[[11418,11418],\"mapped\",[11419]],[[11419,11419],\"valid\"],[[11420,11420],\"mapped\",[11421]],[[11421,11421],\"valid\"],[[11422,11422],\"mapped\",[11423]],[[11423,11423],\"valid\"],[[11424,11424],\"mapped\",[11425]],[[11425,11425],\"valid\"],[[11426,11426],\"mapped\",[11427]],[[11427,11427],\"valid\"],[[11428,11428],\"mapped\",[11429]],[[11429,11429],\"valid\"],[[11430,11430],\"mapped\",[11431]],[[11431,11431],\"valid\"],[[11432,11432],\"mapped\",[11433]],[[11433,11433],\"valid\"],[[11434,11434],\"mapped\",[11435]],[[11435,11435],\"valid\"],[[11436,11436],\"mapped\",[11437]],[[11437,11437],\"valid\"],[[11438,11438],\"mapped\",[11439]],[[11439,11439],\"valid\"],[[11440,11440],\"mapped\",[11441]],[[11441,11441],\"valid\"],[[11442,11442],\"mapped\",[11443]],[[11443,11443],\"valid\"],[[11444,11444],\"mapped\",[11445]],[[11445,11445],\"valid\"],[[11446,11446],\"mapped\",[11447]],[[11447,11447],\"valid\"],[[11448,11448],\"mapped\",[11449]],[[11449,11449],\"valid\"],[[11450,11450],\"mapped\",[11451]],[[11451,11451],\"valid\"],[[11452,11452],\"mapped\",[11453]],[[11453,11453],\"valid\"],[[11454,11454],\"mapped\",[11455]],[[11455,11455],\"valid\"],[[11456,11456],\"mapped\",[11457]],[[11457,11457],\"valid\"],[[11458,11458],\"mapped\",[11459]],[[11459,11459],\"valid\"],[[11460,11460],\"mapped\",[11461]],[[11461,11461],\"valid\"],[[11462,11462],\"mapped\",[11463]],[[11463,11463],\"valid\"],[[11464,11464],\"mapped\",[11465]],[[11465,11465],\"valid\"],[[11466,11466],\"mapped\",[11467]],[[11467,11467],\"valid\"],[[11468,11468],\"mapped\",[11469]],[[11469,11469],\"valid\"],[[11470,11470],\"mapped\",[11471]],[[11471,11471],\"valid\"],[[11472,11472],\"mapped\",[11473]],[[11473,11473],\"valid\"],[[11474,11474],\"mapped\",[11475]],[[11475,11475],\"valid\"],[[11476,11476],\"mapped\",[11477]],[[11477,11477],\"valid\"],[[11478,11478],\"mapped\",[11479]],[[11479,11479],\"valid\"],[[11480,11480],\"mapped\",[11481]],[[11481,11481],\"valid\"],[[11482,11482],\"mapped\",[11483]],[[11483,11483],\"valid\"],[[11484,11484],\"mapped\",[11485]],[[11485,11485],\"valid\"],[[11486,11486],\"mapped\",[11487]],[[11487,11487],\"valid\"],[[11488,11488],\"mapped\",[11489]],[[11489,11489],\"valid\"],[[11490,11490],\"mapped\",[11491]],[[11491,11492],\"valid\"],[[11493,11498],\"valid\",[],\"NV8\"],[[11499,11499],\"mapped\",[11500]],[[11500,11500],\"valid\"],[[11501,11501],\"mapped\",[11502]],[[11502,11505],\"valid\"],[[11506,11506],\"mapped\",[11507]],[[11507,11507],\"valid\"],[[11508,11512],\"disallowed\"],[[11513,11519],\"valid\",[],\"NV8\"],[[11520,11557],\"valid\"],[[11558,11558],\"disallowed\"],[[11559,11559],\"valid\"],[[11560,11564],\"disallowed\"],[[11565,11565],\"valid\"],[[11566,11567],\"disallowed\"],[[11568,11621],\"valid\"],[[11622,11623],\"valid\"],[[11624,11630],\"disallowed\"],[[11631,11631],\"mapped\",[11617]],[[11632,11632],\"valid\",[],\"NV8\"],[[11633,11646],\"disallowed\"],[[11647,11647],\"valid\"],[[11648,11670],\"valid\"],[[11671,11679],\"disallowed\"],[[11680,11686],\"valid\"],[[11687,11687],\"disallowed\"],[[11688,11694],\"valid\"],[[11695,11695],\"disallowed\"],[[11696,11702],\"valid\"],[[11703,11703],\"disallowed\"],[[11704,11710],\"valid\"],[[11711,11711],\"disallowed\"],[[11712,11718],\"valid\"],[[11719,11719],\"disallowed\"],[[11720,11726],\"valid\"],[[11727,11727],\"disallowed\"],[[11728,11734],\"valid\"],[[11735,11735],\"disallowed\"],[[11736,11742],\"valid\"],[[11743,11743],\"disallowed\"],[[11744,11775],\"valid\"],[[11776,11799],\"valid\",[],\"NV8\"],[[11800,11803],\"valid\",[],\"NV8\"],[[11804,11805],\"valid\",[],\"NV8\"],[[11806,11822],\"valid\",[],\"NV8\"],[[11823,11823],\"valid\"],[[11824,11824],\"valid\",[],\"NV8\"],[[11825,11825],\"valid\",[],\"NV8\"],[[11826,11835],\"valid\",[],\"NV8\"],[[11836,11842],\"valid\",[],\"NV8\"],[[11843,11903],\"disallowed\"],[[11904,11929],\"valid\",[],\"NV8\"],[[11930,11930],\"disallowed\"],[[11931,11934],\"valid\",[],\"NV8\"],[[11935,11935],\"mapped\",[27597]],[[11936,12018],\"valid\",[],\"NV8\"],[[12019,12019],\"mapped\",[40863]],[[12020,12031],\"disallowed\"],[[12032,12032],\"mapped\",[19968]],[[12033,12033],\"mapped\",[20008]],[[12034,12034],\"mapped\",[20022]],[[12035,12035],\"mapped\",[20031]],[[12036,12036],\"mapped\",[20057]],[[12037,12037],\"mapped\",[20101]],[[12038,12038],\"mapped\",[20108]],[[12039,12039],\"mapped\",[20128]],[[12040,12040],\"mapped\",[20154]],[[12041,12041],\"mapped\",[20799]],[[12042,12042],\"mapped\",[20837]],[[12043,12043],\"mapped\",[20843]],[[12044,12044],\"mapped\",[20866]],[[12045,12045],\"mapped\",[20886]],[[12046,12046],\"mapped\",[20907]],[[12047,12047],\"mapped\",[20960]],[[12048,12048],\"mapped\",[20981]],[[12049,12049],\"mapped\",[20992]],[[12050,12050],\"mapped\",[21147]],[[12051,12051],\"mapped\",[21241]],[[12052,12052],\"mapped\",[21269]],[[12053,12053],\"mapped\",[21274]],[[12054,12054],\"mapped\",[21304]],[[12055,12055],\"mapped\",[21313]],[[12056,12056],\"mapped\",[21340]],[[12057,12057],\"mapped\",[21353]],[[12058,12058],\"mapped\",[21378]],[[12059,12059],\"mapped\",[21430]],[[12060,12060],\"mapped\",[21448]],[[12061,12061],\"mapped\",[21475]],[[12062,12062],\"mapped\",[22231]],[[12063,12063],\"mapped\",[22303]],[[12064,12064],\"mapped\",[22763]],[[12065,12065],\"mapped\",[22786]],[[12066,12066],\"mapped\",[22794]],[[12067,12067],\"mapped\",[22805]],[[12068,12068],\"mapped\",[22823]],[[12069,12069],\"mapped\",[22899]],[[12070,12070],\"mapped\",[23376]],[[12071,12071],\"mapped\",[23424]],[[12072,12072],\"mapped\",[23544]],[[12073,12073],\"mapped\",[23567]],[[12074,12074],\"mapped\",[23586]],[[12075,12075],\"mapped\",[23608]],[[12076,12076],\"mapped\",[23662]],[[12077,12077],\"mapped\",[23665]],[[12078,12078],\"mapped\",[24027]],[[12079,12079],\"mapped\",[24037]],[[12080,12080],\"mapped\",[24049]],[[12081,12081],\"mapped\",[24062]],[[12082,12082],\"mapped\",[24178]],[[12083,12083],\"mapped\",[24186]],[[12084,12084],\"mapped\",[24191]],[[12085,12085],\"mapped\",[24308]],[[12086,12086],\"mapped\",[24318]],[[12087,12087],\"mapped\",[24331]],[[12088,12088],\"mapped\",[24339]],[[12089,12089],\"mapped\",[24400]],[[12090,12090],\"mapped\",[24417]],[[12091,12091],\"mapped\",[24435]],[[12092,12092],\"mapped\",[24515]],[[12093,12093],\"mapped\",[25096]],[[12094,12094],\"mapped\",[25142]],[[12095,12095],\"mapped\",[25163]],[[12096,12096],\"mapped\",[25903]],[[12097,12097],\"mapped\",[25908]],[[12098,12098],\"mapped\",[25991]],[[12099,12099],\"mapped\",[26007]],[[12100,12100],\"mapped\",[26020]],[[12101,12101],\"mapped\",[26041]],[[12102,12102],\"mapped\",[26080]],[[12103,12103],\"mapped\",[26085]],[[12104,12104],\"mapped\",[26352]],[[12105,12105],\"mapped\",[26376]],[[12106,12106],\"mapped\",[26408]],[[12107,12107],\"mapped\",[27424]],[[12108,12108],\"mapped\",[27490]],[[12109,12109],\"mapped\",[27513]],[[12110,12110],\"mapped\",[27571]],[[12111,12111],\"mapped\",[27595]],[[12112,12112],\"mapped\",[27604]],[[12113,12113],\"mapped\",[27611]],[[12114,12114],\"mapped\",[27663]],[[12115,12115],\"mapped\",[27668]],[[12116,12116],\"mapped\",[27700]],[[12117,12117],\"mapped\",[28779]],[[12118,12118],\"mapped\",[29226]],[[12119,12119],\"mapped\",[29238]],[[12120,12120],\"mapped\",[29243]],[[12121,12121],\"mapped\",[29247]],[[12122,12122],\"mapped\",[29255]],[[12123,12123],\"mapped\",[29273]],[[12124,12124],\"mapped\",[29275]],[[12125,12125],\"mapped\",[29356]],[[12126,12126],\"mapped\",[29572]],[[12127,12127],\"mapped\",[29577]],[[12128,12128],\"mapped\",[29916]],[[12129,12129],\"mapped\",[29926]],[[12130,12130],\"mapped\",[29976]],[[12131,12131],\"mapped\",[29983]],[[12132,12132],\"mapped\",[29992]],[[12133,12133],\"mapped\",[30000]],[[12134,12134],\"mapped\",[30091]],[[12135,12135],\"mapped\",[30098]],[[12136,12136],\"mapped\",[30326]],[[12137,12137],\"mapped\",[30333]],[[12138,12138],\"mapped\",[30382]],[[12139,12139],\"mapped\",[30399]],[[12140,12140],\"mapped\",[30446]],[[12141,12141],\"mapped\",[30683]],[[12142,12142],\"mapped\",[30690]],[[12143,12143],\"mapped\",[30707]],[[12144,12144],\"mapped\",[31034]],[[12145,12145],\"mapped\",[31160]],[[12146,12146],\"mapped\",[31166]],[[12147,12147],\"mapped\",[31348]],[[12148,12148],\"mapped\",[31435]],[[12149,12149],\"mapped\",[31481]],[[12150,12150],\"mapped\",[31859]],[[12151,12151],\"mapped\",[31992]],[[12152,12152],\"mapped\",[32566]],[[12153,12153],\"mapped\",[32593]],[[12154,12154],\"mapped\",[32650]],[[12155,12155],\"mapped\",[32701]],[[12156,12156],\"mapped\",[32769]],[[12157,12157],\"mapped\",[32780]],[[12158,12158],\"mapped\",[32786]],[[12159,12159],\"mapped\",[32819]],[[12160,12160],\"mapped\",[32895]],[[12161,12161],\"mapped\",[32905]],[[12162,12162],\"mapped\",[33251]],[[12163,12163],\"mapped\",[33258]],[[12164,12164],\"mapped\",[33267]],[[12165,12165],\"mapped\",[33276]],[[12166,12166],\"mapped\",[33292]],[[12167,12167],\"mapped\",[33307]],[[12168,12168],\"mapped\",[33311]],[[12169,12169],\"mapped\",[33390]],[[12170,12170],\"mapped\",[33394]],[[12171,12171],\"mapped\",[33400]],[[12172,12172],\"mapped\",[34381]],[[12173,12173],\"mapped\",[34411]],[[12174,12174],\"mapped\",[34880]],[[12175,12175],\"mapped\",[34892]],[[12176,12176],\"mapped\",[34915]],[[12177,12177],\"mapped\",[35198]],[[12178,12178],\"mapped\",[35211]],[[12179,12179],\"mapped\",[35282]],[[12180,12180],\"mapped\",[35328]],[[12181,12181],\"mapped\",[35895]],[[12182,12182],\"mapped\",[35910]],[[12183,12183],\"mapped\",[35925]],[[12184,12184],\"mapped\",[35960]],[[12185,12185],\"mapped\",[35997]],[[12186,12186],\"mapped\",[36196]],[[12187,12187],\"mapped\",[36208]],[[12188,12188],\"mapped\",[36275]],[[12189,12189],\"mapped\",[36523]],[[12190,12190],\"mapped\",[36554]],[[12191,12191],\"mapped\",[36763]],[[12192,12192],\"mapped\",[36784]],[[12193,12193],\"mapped\",[36789]],[[12194,12194],\"mapped\",[37009]],[[12195,12195],\"mapped\",[37193]],[[12196,12196],\"mapped\",[37318]],[[12197,12197],\"mapped\",[37324]],[[12198,12198],\"mapped\",[37329]],[[12199,12199],\"mapped\",[38263]],[[12200,12200],\"mapped\",[38272]],[[12201,12201],\"mapped\",[38428]],[[12202,12202],\"mapped\",[38582]],[[12203,12203],\"mapped\",[38585]],[[12204,12204],\"mapped\",[38632]],[[12205,12205],\"mapped\",[38737]],[[12206,12206],\"mapped\",[38750]],[[12207,12207],\"mapped\",[38754]],[[12208,12208],\"mapped\",[38761]],[[12209,12209],\"mapped\",[38859]],[[12210,12210],\"mapped\",[38893]],[[12211,12211],\"mapped\",[38899]],[[12212,12212],\"mapped\",[38913]],[[12213,12213],\"mapped\",[39080]],[[12214,12214],\"mapped\",[39131]],[[12215,12215],\"mapped\",[39135]],[[12216,12216],\"mapped\",[39318]],[[12217,12217],\"mapped\",[39321]],[[12218,12218],\"mapped\",[39340]],[[12219,12219],\"mapped\",[39592]],[[12220,12220],\"mapped\",[39640]],[[12221,12221],\"mapped\",[39647]],[[12222,12222],\"mapped\",[39717]],[[12223,12223],\"mapped\",[39727]],[[12224,12224],\"mapped\",[39730]],[[12225,12225],\"mapped\",[39740]],[[12226,12226],\"mapped\",[39770]],[[12227,12227],\"mapped\",[40165]],[[12228,12228],\"mapped\",[40565]],[[12229,12229],\"mapped\",[40575]],[[12230,12230],\"mapped\",[40613]],[[12231,12231],\"mapped\",[40635]],[[12232,12232],\"mapped\",[40643]],[[12233,12233],\"mapped\",[40653]],[[12234,12234],\"mapped\",[40657]],[[12235,12235],\"mapped\",[40697]],[[12236,12236],\"mapped\",[40701]],[[12237,12237],\"mapped\",[40718]],[[12238,12238],\"mapped\",[40723]],[[12239,12239],\"mapped\",[40736]],[[12240,12240],\"mapped\",[40763]],[[12241,12241],\"mapped\",[40778]],[[12242,12242],\"mapped\",[40786]],[[12243,12243],\"mapped\",[40845]],[[12244,12244],\"mapped\",[40860]],[[12245,12245],\"mapped\",[40864]],[[12246,12271],\"disallowed\"],[[12272,12283],\"disallowed\"],[[12284,12287],\"disallowed\"],[[12288,12288],\"disallowed_STD3_mapped\",[32]],[[12289,12289],\"valid\",[],\"NV8\"],[[12290,12290],\"mapped\",[46]],[[12291,12292],\"valid\",[],\"NV8\"],[[12293,12295],\"valid\"],[[12296,12329],\"valid\",[],\"NV8\"],[[12330,12333],\"valid\"],[[12334,12341],\"valid\",[],\"NV8\"],[[12342,12342],\"mapped\",[12306]],[[12343,12343],\"valid\",[],\"NV8\"],[[12344,12344],\"mapped\",[21313]],[[12345,12345],\"mapped\",[21316]],[[12346,12346],\"mapped\",[21317]],[[12347,12347],\"valid\",[],\"NV8\"],[[12348,12348],\"valid\"],[[12349,12349],\"valid\",[],\"NV8\"],[[12350,12350],\"valid\",[],\"NV8\"],[[12351,12351],\"valid\",[],\"NV8\"],[[12352,12352],\"disallowed\"],[[12353,12436],\"valid\"],[[12437,12438],\"valid\"],[[12439,12440],\"disallowed\"],[[12441,12442],\"valid\"],[[12443,12443],\"disallowed_STD3_mapped\",[32,12441]],[[12444,12444],\"disallowed_STD3_mapped\",[32,12442]],[[12445,12446],\"valid\"],[[12447,12447],\"mapped\",[12424,12426]],[[12448,12448],\"valid\",[],\"NV8\"],[[12449,12542],\"valid\"],[[12543,12543],\"mapped\",[12467,12488]],[[12544,12548],\"disallowed\"],[[12549,12588],\"valid\"],[[12589,12589],\"valid\"],[[12590,12592],\"disallowed\"],[[12593,12593],\"mapped\",[4352]],[[12594,12594],\"mapped\",[4353]],[[12595,12595],\"mapped\",[4522]],[[12596,12596],\"mapped\",[4354]],[[12597,12597],\"mapped\",[4524]],[[12598,12598],\"mapped\",[4525]],[[12599,12599],\"mapped\",[4355]],[[12600,12600],\"mapped\",[4356]],[[12601,12601],\"mapped\",[4357]],[[12602,12602],\"mapped\",[4528]],[[12603,12603],\"mapped\",[4529]],[[12604,12604],\"mapped\",[4530]],[[12605,12605],\"mapped\",[4531]],[[12606,12606],\"mapped\",[4532]],[[12607,12607],\"mapped\",[4533]],[[12608,12608],\"mapped\",[4378]],[[12609,12609],\"mapped\",[4358]],[[12610,12610],\"mapped\",[4359]],[[12611,12611],\"mapped\",[4360]],[[12612,12612],\"mapped\",[4385]],[[12613,12613],\"mapped\",[4361]],[[12614,12614],\"mapped\",[4362]],[[12615,12615],\"mapped\",[4363]],[[12616,12616],\"mapped\",[4364]],[[12617,12617],\"mapped\",[4365]],[[12618,12618],\"mapped\",[4366]],[[12619,12619],\"mapped\",[4367]],[[12620,12620],\"mapped\",[4368]],[[12621,12621],\"mapped\",[4369]],[[12622,12622],\"mapped\",[4370]],[[12623,12623],\"mapped\",[4449]],[[12624,12624],\"mapped\",[4450]],[[12625,12625],\"mapped\",[4451]],[[12626,12626],\"mapped\",[4452]],[[12627,12627],\"mapped\",[4453]],[[12628,12628],\"mapped\",[4454]],[[12629,12629],\"mapped\",[4455]],[[12630,12630],\"mapped\",[4456]],[[12631,12631],\"mapped\",[4457]],[[12632,12632],\"mapped\",[4458]],[[12633,12633],\"mapped\",[4459]],[[12634,12634],\"mapped\",[4460]],[[12635,12635],\"mapped\",[4461]],[[12636,12636],\"mapped\",[4462]],[[12637,12637],\"mapped\",[4463]],[[12638,12638],\"mapped\",[4464]],[[12639,12639],\"mapped\",[4465]],[[12640,12640],\"mapped\",[4466]],[[12641,12641],\"mapped\",[4467]],[[12642,12642],\"mapped\",[4468]],[[12643,12643],\"mapped\",[4469]],[[12644,12644],\"disallowed\"],[[12645,12645],\"mapped\",[4372]],[[12646,12646],\"mapped\",[4373]],[[12647,12647],\"mapped\",[4551]],[[12648,12648],\"mapped\",[4552]],[[12649,12649],\"mapped\",[4556]],[[12650,12650],\"mapped\",[4558]],[[12651,12651],\"mapped\",[4563]],[[12652,12652],\"mapped\",[4567]],[[12653,12653],\"mapped\",[4569]],[[12654,12654],\"mapped\",[4380]],[[12655,12655],\"mapped\",[4573]],[[12656,12656],\"mapped\",[4575]],[[12657,12657],\"mapped\",[4381]],[[12658,12658],\"mapped\",[4382]],[[12659,12659],\"mapped\",[4384]],[[12660,12660],\"mapped\",[4386]],[[12661,12661],\"mapped\",[4387]],[[12662,12662],\"mapped\",[4391]],[[12663,12663],\"mapped\",[4393]],[[12664,12664],\"mapped\",[4395]],[[12665,12665],\"mapped\",[4396]],[[12666,12666],\"mapped\",[4397]],[[12667,12667],\"mapped\",[4398]],[[12668,12668],\"mapped\",[4399]],[[12669,12669],\"mapped\",[4402]],[[12670,12670],\"mapped\",[4406]],[[12671,12671],\"mapped\",[4416]],[[12672,12672],\"mapped\",[4423]],[[12673,12673],\"mapped\",[4428]],[[12674,12674],\"mapped\",[4593]],[[12675,12675],\"mapped\",[4594]],[[12676,12676],\"mapped\",[4439]],[[12677,12677],\"mapped\",[4440]],[[12678,12678],\"mapped\",[4441]],[[12679,12679],\"mapped\",[4484]],[[12680,12680],\"mapped\",[4485]],[[12681,12681],\"mapped\",[4488]],[[12682,12682],\"mapped\",[4497]],[[12683,12683],\"mapped\",[4498]],[[12684,12684],\"mapped\",[4500]],[[12685,12685],\"mapped\",[4510]],[[12686,12686],\"mapped\",[4513]],[[12687,12687],\"disallowed\"],[[12688,12689],\"valid\",[],\"NV8\"],[[12690,12690],\"mapped\",[19968]],[[12691,12691],\"mapped\",[20108]],[[12692,12692],\"mapped\",[19977]],[[12693,12693],\"mapped\",[22235]],[[12694,12694],\"mapped\",[19978]],[[12695,12695],\"mapped\",[20013]],[[12696,12696],\"mapped\",[19979]],[[12697,12697],\"mapped\",[30002]],[[12698,12698],\"mapped\",[20057]],[[12699,12699],\"mapped\",[19993]],[[12700,12700],\"mapped\",[19969]],[[12701,12701],\"mapped\",[22825]],[[12702,12702],\"mapped\",[22320]],[[12703,12703],\"mapped\",[20154]],[[12704,12727],\"valid\"],[[12728,12730],\"valid\"],[[12731,12735],\"disallowed\"],[[12736,12751],\"valid\",[],\"NV8\"],[[12752,12771],\"valid\",[],\"NV8\"],[[12772,12783],\"disallowed\"],[[12784,12799],\"valid\"],[[12800,12800],\"disallowed_STD3_mapped\",[40,4352,41]],[[12801,12801],\"disallowed_STD3_mapped\",[40,4354,41]],[[12802,12802],\"disallowed_STD3_mapped\",[40,4355,41]],[[12803,12803],\"disallowed_STD3_mapped\",[40,4357,41]],[[12804,12804],\"disallowed_STD3_mapped\",[40,4358,41]],[[12805,12805],\"disallowed_STD3_mapped\",[40,4359,41]],[[12806,12806],\"disallowed_STD3_mapped\",[40,4361,41]],[[12807,12807],\"disallowed_STD3_mapped\",[40,4363,41]],[[12808,12808],\"disallowed_STD3_mapped\",[40,4364,41]],[[12809,12809],\"disallowed_STD3_mapped\",[40,4366,41]],[[12810,12810],\"disallowed_STD3_mapped\",[40,4367,41]],[[12811,12811],\"disallowed_STD3_mapped\",[40,4368,41]],[[12812,12812],\"disallowed_STD3_mapped\",[40,4369,41]],[[12813,12813],\"disallowed_STD3_mapped\",[40,4370,41]],[[12814,12814],\"disallowed_STD3_mapped\",[40,44032,41]],[[12815,12815],\"disallowed_STD3_mapped\",[40,45208,41]],[[12816,12816],\"disallowed_STD3_mapped\",[40,45796,41]],[[12817,12817],\"disallowed_STD3_mapped\",[40,46972,41]],[[12818,12818],\"disallowed_STD3_mapped\",[40,47560,41]],[[12819,12819],\"disallowed_STD3_mapped\",[40,48148,41]],[[12820,12820],\"disallowed_STD3_mapped\",[40,49324,41]],[[12821,12821],\"disallowed_STD3_mapped\",[40,50500,41]],[[12822,12822],\"disallowed_STD3_mapped\",[40,51088,41]],[[12823,12823],\"disallowed_STD3_mapped\",[40,52264,41]],[[12824,12824],\"disallowed_STD3_mapped\",[40,52852,41]],[[12825,12825],\"disallowed_STD3_mapped\",[40,53440,41]],[[12826,12826],\"disallowed_STD3_mapped\",[40,54028,41]],[[12827,12827],\"disallowed_STD3_mapped\",[40,54616,41]],[[12828,12828],\"disallowed_STD3_mapped\",[40,51452,41]],[[12829,12829],\"disallowed_STD3_mapped\",[40,50724,51204,41]],[[12830,12830],\"disallowed_STD3_mapped\",[40,50724,54980,41]],[[12831,12831],\"disallowed\"],[[12832,12832],\"disallowed_STD3_mapped\",[40,19968,41]],[[12833,12833],\"disallowed_STD3_mapped\",[40,20108,41]],[[12834,12834],\"disallowed_STD3_mapped\",[40,19977,41]],[[12835,12835],\"disallowed_STD3_mapped\",[40,22235,41]],[[12836,12836],\"disallowed_STD3_mapped\",[40,20116,41]],[[12837,12837],\"disallowed_STD3_mapped\",[40,20845,41]],[[12838,12838],\"disallowed_STD3_mapped\",[40,19971,41]],[[12839,12839],\"disallowed_STD3_mapped\",[40,20843,41]],[[12840,12840],\"disallowed_STD3_mapped\",[40,20061,41]],[[12841,12841],\"disallowed_STD3_mapped\",[40,21313,41]],[[12842,12842],\"disallowed_STD3_mapped\",[40,26376,41]],[[12843,12843],\"disallowed_STD3_mapped\",[40,28779,41]],[[12844,12844],\"disallowed_STD3_mapped\",[40,27700,41]],[[12845,12845],\"disallowed_STD3_mapped\",[40,26408,41]],[[12846,12846],\"disallowed_STD3_mapped\",[40,37329,41]],[[12847,12847],\"disallowed_STD3_mapped\",[40,22303,41]],[[12848,12848],\"disallowed_STD3_mapped\",[40,26085,41]],[[12849,12849],\"disallowed_STD3_mapped\",[40,26666,41]],[[12850,12850],\"disallowed_STD3_mapped\",[40,26377,41]],[[12851,12851],\"disallowed_STD3_mapped\",[40,31038,41]],[[12852,12852],\"disallowed_STD3_mapped\",[40,21517,41]],[[12853,12853],\"disallowed_STD3_mapped\",[40,29305,41]],[[12854,12854],\"disallowed_STD3_mapped\",[40,36001,41]],[[12855,12855],\"disallowed_STD3_mapped\",[40,31069,41]],[[12856,12856],\"disallowed_STD3_mapped\",[40,21172,41]],[[12857,12857],\"disallowed_STD3_mapped\",[40,20195,41]],[[12858,12858],\"disallowed_STD3_mapped\",[40,21628,41]],[[12859,12859],\"disallowed_STD3_mapped\",[40,23398,41]],[[12860,12860],\"disallowed_STD3_mapped\",[40,30435,41]],[[12861,12861],\"disallowed_STD3_mapped\",[40,20225,41]],[[12862,12862],\"disallowed_STD3_mapped\",[40,36039,41]],[[12863,12863],\"disallowed_STD3_mapped\",[40,21332,41]],[[12864,12864],\"disallowed_STD3_mapped\",[40,31085,41]],[[12865,12865],\"disallowed_STD3_mapped\",[40,20241,41]],[[12866,12866],\"disallowed_STD3_mapped\",[40,33258,41]],[[12867,12867],\"disallowed_STD3_mapped\",[40,33267,41]],[[12868,12868],\"mapped\",[21839]],[[12869,12869],\"mapped\",[24188]],[[12870,12870],\"mapped\",[25991]],[[12871,12871],\"mapped\",[31631]],[[12872,12879],\"valid\",[],\"NV8\"],[[12880,12880],\"mapped\",[112,116,101]],[[12881,12881],\"mapped\",[50,49]],[[12882,12882],\"mapped\",[50,50]],[[12883,12883],\"mapped\",[50,51]],[[12884,12884],\"mapped\",[50,52]],[[12885,12885],\"mapped\",[50,53]],[[12886,12886],\"mapped\",[50,54]],[[12887,12887],\"mapped\",[50,55]],[[12888,12888],\"mapped\",[50,56]],[[12889,12889],\"mapped\",[50,57]],[[12890,12890],\"mapped\",[51,48]],[[12891,12891],\"mapped\",[51,49]],[[12892,12892],\"mapped\",[51,50]],[[12893,12893],\"mapped\",[51,51]],[[12894,12894],\"mapped\",[51,52]],[[12895,12895],\"mapped\",[51,53]],[[12896,12896],\"mapped\",[4352]],[[12897,12897],\"mapped\",[4354]],[[12898,12898],\"mapped\",[4355]],[[12899,12899],\"mapped\",[4357]],[[12900,12900],\"mapped\",[4358]],[[12901,12901],\"mapped\",[4359]],[[12902,12902],\"mapped\",[4361]],[[12903,12903],\"mapped\",[4363]],[[12904,12904],\"mapped\",[4364]],[[12905,12905],\"mapped\",[4366]],[[12906,12906],\"mapped\",[4367]],[[12907,12907],\"mapped\",[4368]],[[12908,12908],\"mapped\",[4369]],[[12909,12909],\"mapped\",[4370]],[[12910,12910],\"mapped\",[44032]],[[12911,12911],\"mapped\",[45208]],[[12912,12912],\"mapped\",[45796]],[[12913,12913],\"mapped\",[46972]],[[12914,12914],\"mapped\",[47560]],[[12915,12915],\"mapped\",[48148]],[[12916,12916],\"mapped\",[49324]],[[12917,12917],\"mapped\",[50500]],[[12918,12918],\"mapped\",[51088]],[[12919,12919],\"mapped\",[52264]],[[12920,12920],\"mapped\",[52852]],[[12921,12921],\"mapped\",[53440]],[[12922,12922],\"mapped\",[54028]],[[12923,12923],\"mapped\",[54616]],[[12924,12924],\"mapped\",[52280,44256]],[[12925,12925],\"mapped\",[51452,51032]],[[12926,12926],\"mapped\",[50864]],[[12927,12927],\"valid\",[],\"NV8\"],[[12928,12928],\"mapped\",[19968]],[[12929,12929],\"mapped\",[20108]],[[12930,12930],\"mapped\",[19977]],[[12931,12931],\"mapped\",[22235]],[[12932,12932],\"mapped\",[20116]],[[12933,12933],\"mapped\",[20845]],[[12934,12934],\"mapped\",[19971]],[[12935,12935],\"mapped\",[20843]],[[12936,12936],\"mapped\",[20061]],[[12937,12937],\"mapped\",[21313]],[[12938,12938],\"mapped\",[26376]],[[12939,12939],\"mapped\",[28779]],[[12940,12940],\"mapped\",[27700]],[[12941,12941],\"mapped\",[26408]],[[12942,12942],\"mapped\",[37329]],[[12943,12943],\"mapped\",[22303]],[[12944,12944],\"mapped\",[26085]],[[12945,12945],\"mapped\",[26666]],[[12946,12946],\"mapped\",[26377]],[[12947,12947],\"mapped\",[31038]],[[12948,12948],\"mapped\",[21517]],[[12949,12949],\"mapped\",[29305]],[[12950,12950],\"mapped\",[36001]],[[12951,12951],\"mapped\",[31069]],[[12952,12952],\"mapped\",[21172]],[[12953,12953],\"mapped\",[31192]],[[12954,12954],\"mapped\",[30007]],[[12955,12955],\"mapped\",[22899]],[[12956,12956],\"mapped\",[36969]],[[12957,12957],\"mapped\",[20778]],[[12958,12958],\"mapped\",[21360]],[[12959,12959],\"mapped\",[27880]],[[12960,12960],\"mapped\",[38917]],[[12961,12961],\"mapped\",[20241]],[[12962,12962],\"mapped\",[20889]],[[12963,12963],\"mapped\",[27491]],[[12964,12964],\"mapped\",[19978]],[[12965,12965],\"mapped\",[20013]],[[12966,12966],\"mapped\",[19979]],[[12967,12967],\"mapped\",[24038]],[[12968,12968],\"mapped\",[21491]],[[12969,12969],\"mapped\",[21307]],[[12970,12970],\"mapped\",[23447]],[[12971,12971],\"mapped\",[23398]],[[12972,12972],\"mapped\",[30435]],[[12973,12973],\"mapped\",[20225]],[[12974,12974],\"mapped\",[36039]],[[12975,12975],\"mapped\",[21332]],[[12976,12976],\"mapped\",[22812]],[[12977,12977],\"mapped\",[51,54]],[[12978,12978],\"mapped\",[51,55]],[[12979,12979],\"mapped\",[51,56]],[[12980,12980],\"mapped\",[51,57]],[[12981,12981],\"mapped\",[52,48]],[[12982,12982],\"mapped\",[52,49]],[[12983,12983],\"mapped\",[52,50]],[[12984,12984],\"mapped\",[52,51]],[[12985,12985],\"mapped\",[52,52]],[[12986,12986],\"mapped\",[52,53]],[[12987,12987],\"mapped\",[52,54]],[[12988,12988],\"mapped\",[52,55]],[[12989,12989],\"mapped\",[52,56]],[[12990,12990],\"mapped\",[52,57]],[[12991,12991],\"mapped\",[53,48]],[[12992,12992],\"mapped\",[49,26376]],[[12993,12993],\"mapped\",[50,26376]],[[12994,12994],\"mapped\",[51,26376]],[[12995,12995],\"mapped\",[52,26376]],[[12996,12996],\"mapped\",[53,26376]],[[12997,12997],\"mapped\",[54,26376]],[[12998,12998],\"mapped\",[55,26376]],[[12999,12999],\"mapped\",[56,26376]],[[13000,13000],\"mapped\",[57,26376]],[[13001,13001],\"mapped\",[49,48,26376]],[[13002,13002],\"mapped\",[49,49,26376]],[[13003,13003],\"mapped\",[49,50,26376]],[[13004,13004],\"mapped\",[104,103]],[[13005,13005],\"mapped\",[101,114,103]],[[13006,13006],\"mapped\",[101,118]],[[13007,13007],\"mapped\",[108,116,100]],[[13008,13008],\"mapped\",[12450]],[[13009,13009],\"mapped\",[12452]],[[13010,13010],\"mapped\",[12454]],[[13011,13011],\"mapped\",[12456]],[[13012,13012],\"mapped\",[12458]],[[13013,13013],\"mapped\",[12459]],[[13014,13014],\"mapped\",[12461]],[[13015,13015],\"mapped\",[12463]],[[13016,13016],\"mapped\",[12465]],[[13017,13017],\"mapped\",[12467]],[[13018,13018],\"mapped\",[12469]],[[13019,13019],\"mapped\",[12471]],[[13020,13020],\"mapped\",[12473]],[[13021,13021],\"mapped\",[12475]],[[13022,13022],\"mapped\",[12477]],[[13023,13023],\"mapped\",[12479]],[[13024,13024],\"mapped\",[12481]],[[13025,13025],\"mapped\",[12484]],[[13026,13026],\"mapped\",[12486]],[[13027,13027],\"mapped\",[12488]],[[13028,13028],\"mapped\",[12490]],[[13029,13029],\"mapped\",[12491]],[[13030,13030],\"mapped\",[12492]],[[13031,13031],\"mapped\",[12493]],[[13032,13032],\"mapped\",[12494]],[[13033,13033],\"mapped\",[12495]],[[13034,13034],\"mapped\",[12498]],[[13035,13035],\"mapped\",[12501]],[[13036,13036],\"mapped\",[12504]],[[13037,13037],\"mapped\",[12507]],[[13038,13038],\"mapped\",[12510]],[[13039,13039],\"mapped\",[12511]],[[13040,13040],\"mapped\",[12512]],[[13041,13041],\"mapped\",[12513]],[[13042,13042],\"mapped\",[12514]],[[13043,13043],\"mapped\",[12516]],[[13044,13044],\"mapped\",[12518]],[[13045,13045],\"mapped\",[12520]],[[13046,13046],\"mapped\",[12521]],[[13047,13047],\"mapped\",[12522]],[[13048,13048],\"mapped\",[12523]],[[13049,13049],\"mapped\",[12524]],[[13050,13050],\"mapped\",[12525]],[[13051,13051],\"mapped\",[12527]],[[13052,13052],\"mapped\",[12528]],[[13053,13053],\"mapped\",[12529]],[[13054,13054],\"mapped\",[12530]],[[13055,13055],\"disallowed\"],[[13056,13056],\"mapped\",[12450,12497,12540,12488]],[[13057,13057],\"mapped\",[12450,12523,12501,12449]],[[13058,13058],\"mapped\",[12450,12531,12506,12450]],[[13059,13059],\"mapped\",[12450,12540,12523]],[[13060,13060],\"mapped\",[12452,12491,12531,12464]],[[13061,13061],\"mapped\",[12452,12531,12481]],[[13062,13062],\"mapped\",[12454,12457,12531]],[[13063,13063],\"mapped\",[12456,12473,12463,12540,12489]],[[13064,13064],\"mapped\",[12456,12540,12459,12540]],[[13065,13065],\"mapped\",[12458,12531,12473]],[[13066,13066],\"mapped\",[12458,12540,12512]],[[13067,13067],\"mapped\",[12459,12452,12522]],[[13068,13068],\"mapped\",[12459,12521,12483,12488]],[[13069,13069],\"mapped\",[12459,12525,12522,12540]],[[13070,13070],\"mapped\",[12460,12525,12531]],[[13071,13071],\"mapped\",[12460,12531,12510]],[[13072,13072],\"mapped\",[12462,12460]],[[13073,13073],\"mapped\",[12462,12491,12540]],[[13074,13074],\"mapped\",[12461,12517,12522,12540]],[[13075,13075],\"mapped\",[12462,12523,12480,12540]],[[13076,13076],\"mapped\",[12461,12525]],[[13077,13077],\"mapped\",[12461,12525,12464,12521,12512]],[[13078,13078],\"mapped\",[12461,12525,12513,12540,12488,12523]],[[13079,13079],\"mapped\",[12461,12525,12527,12483,12488]],[[13080,13080],\"mapped\",[12464,12521,12512]],[[13081,13081],\"mapped\",[12464,12521,12512,12488,12531]],[[13082,13082],\"mapped\",[12463,12523,12476,12452,12525]],[[13083,13083],\"mapped\",[12463,12525,12540,12493]],[[13084,13084],\"mapped\",[12465,12540,12473]],[[13085,13085],\"mapped\",[12467,12523,12490]],[[13086,13086],\"mapped\",[12467,12540,12509]],[[13087,13087],\"mapped\",[12469,12452,12463,12523]],[[13088,13088],\"mapped\",[12469,12531,12481,12540,12512]],[[13089,13089],\"mapped\",[12471,12522,12531,12464]],[[13090,13090],\"mapped\",[12475,12531,12481]],[[13091,13091],\"mapped\",[12475,12531,12488]],[[13092,13092],\"mapped\",[12480,12540,12473]],[[13093,13093],\"mapped\",[12487,12471]],[[13094,13094],\"mapped\",[12489,12523]],[[13095,13095],\"mapped\",[12488,12531]],[[13096,13096],\"mapped\",[12490,12494]],[[13097,13097],\"mapped\",[12494,12483,12488]],[[13098,13098],\"mapped\",[12495,12452,12484]],[[13099,13099],\"mapped\",[12497,12540,12475,12531,12488]],[[13100,13100],\"mapped\",[12497,12540,12484]],[[13101,13101],\"mapped\",[12496,12540,12524,12523]],[[13102,13102],\"mapped\",[12500,12450,12473,12488,12523]],[[13103,13103],\"mapped\",[12500,12463,12523]],[[13104,13104],\"mapped\",[12500,12467]],[[13105,13105],\"mapped\",[12499,12523]],[[13106,13106],\"mapped\",[12501,12449,12521,12483,12489]],[[13107,13107],\"mapped\",[12501,12451,12540,12488]],[[13108,13108],\"mapped\",[12502,12483,12471,12455,12523]],[[13109,13109],\"mapped\",[12501,12521,12531]],[[13110,13110],\"mapped\",[12504,12463,12479,12540,12523]],[[13111,13111],\"mapped\",[12506,12477]],[[13112,13112],\"mapped\",[12506,12491,12498]],[[13113,13113],\"mapped\",[12504,12523,12484]],[[13114,13114],\"mapped\",[12506,12531,12473]],[[13115,13115],\"mapped\",[12506,12540,12472]],[[13116,13116],\"mapped\",[12505,12540,12479]],[[13117,13117],\"mapped\",[12509,12452,12531,12488]],[[13118,13118],\"mapped\",[12508,12523,12488]],[[13119,13119],\"mapped\",[12507,12531]],[[13120,13120],\"mapped\",[12509,12531,12489]],[[13121,13121],\"mapped\",[12507,12540,12523]],[[13122,13122],\"mapped\",[12507,12540,12531]],[[13123,13123],\"mapped\",[12510,12452,12463,12525]],[[13124,13124],\"mapped\",[12510,12452,12523]],[[13125,13125],\"mapped\",[12510,12483,12495]],[[13126,13126],\"mapped\",[12510,12523,12463]],[[13127,13127],\"mapped\",[12510,12531,12471,12519,12531]],[[13128,13128],\"mapped\",[12511,12463,12525,12531]],[[13129,13129],\"mapped\",[12511,12522]],[[13130,13130],\"mapped\",[12511,12522,12496,12540,12523]],[[13131,13131],\"mapped\",[12513,12460]],[[13132,13132],\"mapped\",[12513,12460,12488,12531]],[[13133,13133],\"mapped\",[12513,12540,12488,12523]],[[13134,13134],\"mapped\",[12516,12540,12489]],[[13135,13135],\"mapped\",[12516,12540,12523]],[[13136,13136],\"mapped\",[12518,12450,12531]],[[13137,13137],\"mapped\",[12522,12483,12488,12523]],[[13138,13138],\"mapped\",[12522,12521]],[[13139,13139],\"mapped\",[12523,12500,12540]],[[13140,13140],\"mapped\",[12523,12540,12502,12523]],[[13141,13141],\"mapped\",[12524,12512]],[[13142,13142],\"mapped\",[12524,12531,12488,12466,12531]],[[13143,13143],\"mapped\",[12527,12483,12488]],[[13144,13144],\"mapped\",[48,28857]],[[13145,13145],\"mapped\",[49,28857]],[[13146,13146],\"mapped\",[50,28857]],[[13147,13147],\"mapped\",[51,28857]],[[13148,13148],\"mapped\",[52,28857]],[[13149,13149],\"mapped\",[53,28857]],[[13150,13150],\"mapped\",[54,28857]],[[13151,13151],\"mapped\",[55,28857]],[[13152,13152],\"mapped\",[56,28857]],[[13153,13153],\"mapped\",[57,28857]],[[13154,13154],\"mapped\",[49,48,28857]],[[13155,13155],\"mapped\",[49,49,28857]],[[13156,13156],\"mapped\",[49,50,28857]],[[13157,13157],\"mapped\",[49,51,28857]],[[13158,13158],\"mapped\",[49,52,28857]],[[13159,13159],\"mapped\",[49,53,28857]],[[13160,13160],\"mapped\",[49,54,28857]],[[13161,13161],\"mapped\",[49,55,28857]],[[13162,13162],\"mapped\",[49,56,28857]],[[13163,13163],\"mapped\",[49,57,28857]],[[13164,13164],\"mapped\",[50,48,28857]],[[13165,13165],\"mapped\",[50,49,28857]],[[13166,13166],\"mapped\",[50,50,28857]],[[13167,13167],\"mapped\",[50,51,28857]],[[13168,13168],\"mapped\",[50,52,28857]],[[13169,13169],\"mapped\",[104,112,97]],[[13170,13170],\"mapped\",[100,97]],[[13171,13171],\"mapped\",[97,117]],[[13172,13172],\"mapped\",[98,97,114]],[[13173,13173],\"mapped\",[111,118]],[[13174,13174],\"mapped\",[112,99]],[[13175,13175],\"mapped\",[100,109]],[[13176,13176],\"mapped\",[100,109,50]],[[13177,13177],\"mapped\",[100,109,51]],[[13178,13178],\"mapped\",[105,117]],[[13179,13179],\"mapped\",[24179,25104]],[[13180,13180],\"mapped\",[26157,21644]],[[13181,13181],\"mapped\",[22823,27491]],[[13182,13182],\"mapped\",[26126,27835]],[[13183,13183],\"mapped\",[26666,24335,20250,31038]],[[13184,13184],\"mapped\",[112,97]],[[13185,13185],\"mapped\",[110,97]],[[13186,13186],\"mapped\",[956,97]],[[13187,13187],\"mapped\",[109,97]],[[13188,13188],\"mapped\",[107,97]],[[13189,13189],\"mapped\",[107,98]],[[13190,13190],\"mapped\",[109,98]],[[13191,13191],\"mapped\",[103,98]],[[13192,13192],\"mapped\",[99,97,108]],[[13193,13193],\"mapped\",[107,99,97,108]],[[13194,13194],\"mapped\",[112,102]],[[13195,13195],\"mapped\",[110,102]],[[13196,13196],\"mapped\",[956,102]],[[13197,13197],\"mapped\",[956,103]],[[13198,13198],\"mapped\",[109,103]],[[13199,13199],\"mapped\",[107,103]],[[13200,13200],\"mapped\",[104,122]],[[13201,13201],\"mapped\",[107,104,122]],[[13202,13202],\"mapped\",[109,104,122]],[[13203,13203],\"mapped\",[103,104,122]],[[13204,13204],\"mapped\",[116,104,122]],[[13205,13205],\"mapped\",[956,108]],[[13206,13206],\"mapped\",[109,108]],[[13207,13207],\"mapped\",[100,108]],[[13208,13208],\"mapped\",[107,108]],[[13209,13209],\"mapped\",[102,109]],[[13210,13210],\"mapped\",[110,109]],[[13211,13211],\"mapped\",[956,109]],[[13212,13212],\"mapped\",[109,109]],[[13213,13213],\"mapped\",[99,109]],[[13214,13214],\"mapped\",[107,109]],[[13215,13215],\"mapped\",[109,109,50]],[[13216,13216],\"mapped\",[99,109,50]],[[13217,13217],\"mapped\",[109,50]],[[13218,13218],\"mapped\",[107,109,50]],[[13219,13219],\"mapped\",[109,109,51]],[[13220,13220],\"mapped\",[99,109,51]],[[13221,13221],\"mapped\",[109,51]],[[13222,13222],\"mapped\",[107,109,51]],[[13223,13223],\"mapped\",[109,8725,115]],[[13224,13224],\"mapped\",[109,8725,115,50]],[[13225,13225],\"mapped\",[112,97]],[[13226,13226],\"mapped\",[107,112,97]],[[13227,13227],\"mapped\",[109,112,97]],[[13228,13228],\"mapped\",[103,112,97]],[[13229,13229],\"mapped\",[114,97,100]],[[13230,13230],\"mapped\",[114,97,100,8725,115]],[[13231,13231],\"mapped\",[114,97,100,8725,115,50]],[[13232,13232],\"mapped\",[112,115]],[[13233,13233],\"mapped\",[110,115]],[[13234,13234],\"mapped\",[956,115]],[[13235,13235],\"mapped\",[109,115]],[[13236,13236],\"mapped\",[112,118]],[[13237,13237],\"mapped\",[110,118]],[[13238,13238],\"mapped\",[956,118]],[[13239,13239],\"mapped\",[109,118]],[[13240,13240],\"mapped\",[107,118]],[[13241,13241],\"mapped\",[109,118]],[[13242,13242],\"mapped\",[112,119]],[[13243,13243],\"mapped\",[110,119]],[[13244,13244],\"mapped\",[956,119]],[[13245,13245],\"mapped\",[109,119]],[[13246,13246],\"mapped\",[107,119]],[[13247,13247],\"mapped\",[109,119]],[[13248,13248],\"mapped\",[107,969]],[[13249,13249],\"mapped\",[109,969]],[[13250,13250],\"disallowed\"],[[13251,13251],\"mapped\",[98,113]],[[13252,13252],\"mapped\",[99,99]],[[13253,13253],\"mapped\",[99,100]],[[13254,13254],\"mapped\",[99,8725,107,103]],[[13255,13255],\"disallowed\"],[[13256,13256],\"mapped\",[100,98]],[[13257,13257],\"mapped\",[103,121]],[[13258,13258],\"mapped\",[104,97]],[[13259,13259],\"mapped\",[104,112]],[[13260,13260],\"mapped\",[105,110]],[[13261,13261],\"mapped\",[107,107]],[[13262,13262],\"mapped\",[107,109]],[[13263,13263],\"mapped\",[107,116]],[[13264,13264],\"mapped\",[108,109]],[[13265,13265],\"mapped\",[108,110]],[[13266,13266],\"mapped\",[108,111,103]],[[13267,13267],\"mapped\",[108,120]],[[13268,13268],\"mapped\",[109,98]],[[13269,13269],\"mapped\",[109,105,108]],[[13270,13270],\"mapped\",[109,111,108]],[[13271,13271],\"mapped\",[112,104]],[[13272,13272],\"disallowed\"],[[13273,13273],\"mapped\",[112,112,109]],[[13274,13274],\"mapped\",[112,114]],[[13275,13275],\"mapped\",[115,114]],[[13276,13276],\"mapped\",[115,118]],[[13277,13277],\"mapped\",[119,98]],[[13278,13278],\"mapped\",[118,8725,109]],[[13279,13279],\"mapped\",[97,8725,109]],[[13280,13280],\"mapped\",[49,26085]],[[13281,13281],\"mapped\",[50,26085]],[[13282,13282],\"mapped\",[51,26085]],[[13283,13283],\"mapped\",[52,26085]],[[13284,13284],\"mapped\",[53,26085]],[[13285,13285],\"mapped\",[54,26085]],[[13286,13286],\"mapped\",[55,26085]],[[13287,13287],\"mapped\",[56,26085]],[[13288,13288],\"mapped\",[57,26085]],[[13289,13289],\"mapped\",[49,48,26085]],[[13290,13290],\"mapped\",[49,49,26085]],[[13291,13291],\"mapped\",[49,50,26085]],[[13292,13292],\"mapped\",[49,51,26085]],[[13293,13293],\"mapped\",[49,52,26085]],[[13294,13294],\"mapped\",[49,53,26085]],[[13295,13295],\"mapped\",[49,54,26085]],[[13296,13296],\"mapped\",[49,55,26085]],[[13297,13297],\"mapped\",[49,56,26085]],[[13298,13298],\"mapped\",[49,57,26085]],[[13299,13299],\"mapped\",[50,48,26085]],[[13300,13300],\"mapped\",[50,49,26085]],[[13301,13301],\"mapped\",[50,50,26085]],[[13302,13302],\"mapped\",[50,51,26085]],[[13303,13303],\"mapped\",[50,52,26085]],[[13304,13304],\"mapped\",[50,53,26085]],[[13305,13305],\"mapped\",[50,54,26085]],[[13306,13306],\"mapped\",[50,55,26085]],[[13307,13307],\"mapped\",[50,56,26085]],[[13308,13308],\"mapped\",[50,57,26085]],[[13309,13309],\"mapped\",[51,48,26085]],[[13310,13310],\"mapped\",[51,49,26085]],[[13311,13311],\"mapped\",[103,97,108]],[[13312,19893],\"valid\"],[[19894,19903],\"disallowed\"],[[19904,19967],\"valid\",[],\"NV8\"],[[19968,40869],\"valid\"],[[40870,40891],\"valid\"],[[40892,40899],\"valid\"],[[40900,40907],\"valid\"],[[40908,40908],\"valid\"],[[40909,40917],\"valid\"],[[40918,40959],\"disallowed\"],[[40960,42124],\"valid\"],[[42125,42127],\"disallowed\"],[[42128,42145],\"valid\",[],\"NV8\"],[[42146,42147],\"valid\",[],\"NV8\"],[[42148,42163],\"valid\",[],\"NV8\"],[[42164,42164],\"valid\",[],\"NV8\"],[[42165,42176],\"valid\",[],\"NV8\"],[[42177,42177],\"valid\",[],\"NV8\"],[[42178,42180],\"valid\",[],\"NV8\"],[[42181,42181],\"valid\",[],\"NV8\"],[[42182,42182],\"valid\",[],\"NV8\"],[[42183,42191],\"disallowed\"],[[42192,42237],\"valid\"],[[42238,42239],\"valid\",[],\"NV8\"],[[42240,42508],\"valid\"],[[42509,42511],\"valid\",[],\"NV8\"],[[42512,42539],\"valid\"],[[42540,42559],\"disallowed\"],[[42560,42560],\"mapped\",[42561]],[[42561,42561],\"valid\"],[[42562,42562],\"mapped\",[42563]],[[42563,42563],\"valid\"],[[42564,42564],\"mapped\",[42565]],[[42565,42565],\"valid\"],[[42566,42566],\"mapped\",[42567]],[[42567,42567],\"valid\"],[[42568,42568],\"mapped\",[42569]],[[42569,42569],\"valid\"],[[42570,42570],\"mapped\",[42571]],[[42571,42571],\"valid\"],[[42572,42572],\"mapped\",[42573]],[[42573,42573],\"valid\"],[[42574,42574],\"mapped\",[42575]],[[42575,42575],\"valid\"],[[42576,42576],\"mapped\",[42577]],[[42577,42577],\"valid\"],[[42578,42578],\"mapped\",[42579]],[[42579,42579],\"valid\"],[[42580,42580],\"mapped\",[42581]],[[42581,42581],\"valid\"],[[42582,42582],\"mapped\",[42583]],[[42583,42583],\"valid\"],[[42584,42584],\"mapped\",[42585]],[[42585,42585],\"valid\"],[[42586,42586],\"mapped\",[42587]],[[42587,42587],\"valid\"],[[42588,42588],\"mapped\",[42589]],[[42589,42589],\"valid\"],[[42590,42590],\"mapped\",[42591]],[[42591,42591],\"valid\"],[[42592,42592],\"mapped\",[42593]],[[42593,42593],\"valid\"],[[42594,42594],\"mapped\",[42595]],[[42595,42595],\"valid\"],[[42596,42596],\"mapped\",[42597]],[[42597,42597],\"valid\"],[[42598,42598],\"mapped\",[42599]],[[42599,42599],\"valid\"],[[42600,42600],\"mapped\",[42601]],[[42601,42601],\"valid\"],[[42602,42602],\"mapped\",[42603]],[[42603,42603],\"valid\"],[[42604,42604],\"mapped\",[42605]],[[42605,42607],\"valid\"],[[42608,42611],\"valid\",[],\"NV8\"],[[42612,42619],\"valid\"],[[42620,42621],\"valid\"],[[42622,42622],\"valid\",[],\"NV8\"],[[42623,42623],\"valid\"],[[42624,42624],\"mapped\",[42625]],[[42625,42625],\"valid\"],[[42626,42626],\"mapped\",[42627]],[[42627,42627],\"valid\"],[[42628,42628],\"mapped\",[42629]],[[42629,42629],\"valid\"],[[42630,42630],\"mapped\",[42631]],[[42631,42631],\"valid\"],[[42632,42632],\"mapped\",[42633]],[[42633,42633],\"valid\"],[[42634,42634],\"mapped\",[42635]],[[42635,42635],\"valid\"],[[42636,42636],\"mapped\",[42637]],[[42637,42637],\"valid\"],[[42638,42638],\"mapped\",[42639]],[[42639,42639],\"valid\"],[[42640,42640],\"mapped\",[42641]],[[42641,42641],\"valid\"],[[42642,42642],\"mapped\",[42643]],[[42643,42643],\"valid\"],[[42644,42644],\"mapped\",[42645]],[[42645,42645],\"valid\"],[[42646,42646],\"mapped\",[42647]],[[42647,42647],\"valid\"],[[42648,42648],\"mapped\",[42649]],[[42649,42649],\"valid\"],[[42650,42650],\"mapped\",[42651]],[[42651,42651],\"valid\"],[[42652,42652],\"mapped\",[1098]],[[42653,42653],\"mapped\",[1100]],[[42654,42654],\"valid\"],[[42655,42655],\"valid\"],[[42656,42725],\"valid\"],[[42726,42735],\"valid\",[],\"NV8\"],[[42736,42737],\"valid\"],[[42738,42743],\"valid\",[],\"NV8\"],[[42744,42751],\"disallowed\"],[[42752,42774],\"valid\",[],\"NV8\"],[[42775,42778],\"valid\"],[[42779,42783],\"valid\"],[[42784,42785],\"valid\",[],\"NV8\"],[[42786,42786],\"mapped\",[42787]],[[42787,42787],\"valid\"],[[42788,42788],\"mapped\",[42789]],[[42789,42789],\"valid\"],[[42790,42790],\"mapped\",[42791]],[[42791,42791],\"valid\"],[[42792,42792],\"mapped\",[42793]],[[42793,42793],\"valid\"],[[42794,42794],\"mapped\",[42795]],[[42795,42795],\"valid\"],[[42796,42796],\"mapped\",[42797]],[[42797,42797],\"valid\"],[[42798,42798],\"mapped\",[42799]],[[42799,42801],\"valid\"],[[42802,42802],\"mapped\",[42803]],[[42803,42803],\"valid\"],[[42804,42804],\"mapped\",[42805]],[[42805,42805],\"valid\"],[[42806,42806],\"mapped\",[42807]],[[42807,42807],\"valid\"],[[42808,42808],\"mapped\",[42809]],[[42809,42809],\"valid\"],[[42810,42810],\"mapped\",[42811]],[[42811,42811],\"valid\"],[[42812,42812],\"mapped\",[42813]],[[42813,42813],\"valid\"],[[42814,42814],\"mapped\",[42815]],[[42815,42815],\"valid\"],[[42816,42816],\"mapped\",[42817]],[[42817,42817],\"valid\"],[[42818,42818],\"mapped\",[42819]],[[42819,42819],\"valid\"],[[42820,42820],\"mapped\",[42821]],[[42821,42821],\"valid\"],[[42822,42822],\"mapped\",[42823]],[[42823,42823],\"valid\"],[[42824,42824],\"mapped\",[42825]],[[42825,42825],\"valid\"],[[42826,42826],\"mapped\",[42827]],[[42827,42827],\"valid\"],[[42828,42828],\"mapped\",[42829]],[[42829,42829],\"valid\"],[[42830,42830],\"mapped\",[42831]],[[42831,42831],\"valid\"],[[42832,42832],\"mapped\",[42833]],[[42833,42833],\"valid\"],[[42834,42834],\"mapped\",[42835]],[[42835,42835],\"valid\"],[[42836,42836],\"mapped\",[42837]],[[42837,42837],\"valid\"],[[42838,42838],\"mapped\",[42839]],[[42839,42839],\"valid\"],[[42840,42840],\"mapped\",[42841]],[[42841,42841],\"valid\"],[[42842,42842],\"mapped\",[42843]],[[42843,42843],\"valid\"],[[42844,42844],\"mapped\",[42845]],[[42845,42845],\"valid\"],[[42846,42846],\"mapped\",[42847]],[[42847,42847],\"valid\"],[[42848,42848],\"mapped\",[42849]],[[42849,42849],\"valid\"],[[42850,42850],\"mapped\",[42851]],[[42851,42851],\"valid\"],[[42852,42852],\"mapped\",[42853]],[[42853,42853],\"valid\"],[[42854,42854],\"mapped\",[42855]],[[42855,42855],\"valid\"],[[42856,42856],\"mapped\",[42857]],[[42857,42857],\"valid\"],[[42858,42858],\"mapped\",[42859]],[[42859,42859],\"valid\"],[[42860,42860],\"mapped\",[42861]],[[42861,42861],\"valid\"],[[42862,42862],\"mapped\",[42863]],[[42863,42863],\"valid\"],[[42864,42864],\"mapped\",[42863]],[[42865,42872],\"valid\"],[[42873,42873],\"mapped\",[42874]],[[42874,42874],\"valid\"],[[42875,42875],\"mapped\",[42876]],[[42876,42876],\"valid\"],[[42877,42877],\"mapped\",[7545]],[[42878,42878],\"mapped\",[42879]],[[42879,42879],\"valid\"],[[42880,42880],\"mapped\",[42881]],[[42881,42881],\"valid\"],[[42882,42882],\"mapped\",[42883]],[[42883,42883],\"valid\"],[[42884,42884],\"mapped\",[42885]],[[42885,42885],\"valid\"],[[42886,42886],\"mapped\",[42887]],[[42887,42888],\"valid\"],[[42889,42890],\"valid\",[],\"NV8\"],[[42891,42891],\"mapped\",[42892]],[[42892,42892],\"valid\"],[[42893,42893],\"mapped\",[613]],[[42894,42894],\"valid\"],[[42895,42895],\"valid\"],[[42896,42896],\"mapped\",[42897]],[[42897,42897],\"valid\"],[[42898,42898],\"mapped\",[42899]],[[42899,42899],\"valid\"],[[42900,42901],\"valid\"],[[42902,42902],\"mapped\",[42903]],[[42903,42903],\"valid\"],[[42904,42904],\"mapped\",[42905]],[[42905,42905],\"valid\"],[[42906,42906],\"mapped\",[42907]],[[42907,42907],\"valid\"],[[42908,42908],\"mapped\",[42909]],[[42909,42909],\"valid\"],[[42910,42910],\"mapped\",[42911]],[[42911,42911],\"valid\"],[[42912,42912],\"mapped\",[42913]],[[42913,42913],\"valid\"],[[42914,42914],\"mapped\",[42915]],[[42915,42915],\"valid\"],[[42916,42916],\"mapped\",[42917]],[[42917,42917],\"valid\"],[[42918,42918],\"mapped\",[42919]],[[42919,42919],\"valid\"],[[42920,42920],\"mapped\",[42921]],[[42921,42921],\"valid\"],[[42922,42922],\"mapped\",[614]],[[42923,42923],\"mapped\",[604]],[[42924,42924],\"mapped\",[609]],[[42925,42925],\"mapped\",[620]],[[42926,42927],\"disallowed\"],[[42928,42928],\"mapped\",[670]],[[42929,42929],\"mapped\",[647]],[[42930,42930],\"mapped\",[669]],[[42931,42931],\"mapped\",[43859]],[[42932,42932],\"mapped\",[42933]],[[42933,42933],\"valid\"],[[42934,42934],\"mapped\",[42935]],[[42935,42935],\"valid\"],[[42936,42998],\"disallowed\"],[[42999,42999],\"valid\"],[[43000,43000],\"mapped\",[295]],[[43001,43001],\"mapped\",[339]],[[43002,43002],\"valid\"],[[43003,43007],\"valid\"],[[43008,43047],\"valid\"],[[43048,43051],\"valid\",[],\"NV8\"],[[43052,43055],\"disallowed\"],[[43056,43065],\"valid\",[],\"NV8\"],[[43066,43071],\"disallowed\"],[[43072,43123],\"valid\"],[[43124,43127],\"valid\",[],\"NV8\"],[[43128,43135],\"disallowed\"],[[43136,43204],\"valid\"],[[43205,43213],\"disallowed\"],[[43214,43215],\"valid\",[],\"NV8\"],[[43216,43225],\"valid\"],[[43226,43231],\"disallowed\"],[[43232,43255],\"valid\"],[[43256,43258],\"valid\",[],\"NV8\"],[[43259,43259],\"valid\"],[[43260,43260],\"valid\",[],\"NV8\"],[[43261,43261],\"valid\"],[[43262,43263],\"disallowed\"],[[43264,43309],\"valid\"],[[43310,43311],\"valid\",[],\"NV8\"],[[43312,43347],\"valid\"],[[43348,43358],\"disallowed\"],[[43359,43359],\"valid\",[],\"NV8\"],[[43360,43388],\"valid\",[],\"NV8\"],[[43389,43391],\"disallowed\"],[[43392,43456],\"valid\"],[[43457,43469],\"valid\",[],\"NV8\"],[[43470,43470],\"disallowed\"],[[43471,43481],\"valid\"],[[43482,43485],\"disallowed\"],[[43486,43487],\"valid\",[],\"NV8\"],[[43488,43518],\"valid\"],[[43519,43519],\"disallowed\"],[[43520,43574],\"valid\"],[[43575,43583],\"disallowed\"],[[43584,43597],\"valid\"],[[43598,43599],\"disallowed\"],[[43600,43609],\"valid\"],[[43610,43611],\"disallowed\"],[[43612,43615],\"valid\",[],\"NV8\"],[[43616,43638],\"valid\"],[[43639,43641],\"valid\",[],\"NV8\"],[[43642,43643],\"valid\"],[[43644,43647],\"valid\"],[[43648,43714],\"valid\"],[[43715,43738],\"disallowed\"],[[43739,43741],\"valid\"],[[43742,43743],\"valid\",[],\"NV8\"],[[43744,43759],\"valid\"],[[43760,43761],\"valid\",[],\"NV8\"],[[43762,43766],\"valid\"],[[43767,43776],\"disallowed\"],[[43777,43782],\"valid\"],[[43783,43784],\"disallowed\"],[[43785,43790],\"valid\"],[[43791,43792],\"disallowed\"],[[43793,43798],\"valid\"],[[43799,43807],\"disallowed\"],[[43808,43814],\"valid\"],[[43815,43815],\"disallowed\"],[[43816,43822],\"valid\"],[[43823,43823],\"disallowed\"],[[43824,43866],\"valid\"],[[43867,43867],\"valid\",[],\"NV8\"],[[43868,43868],\"mapped\",[42791]],[[43869,43869],\"mapped\",[43831]],[[43870,43870],\"mapped\",[619]],[[43871,43871],\"mapped\",[43858]],[[43872,43875],\"valid\"],[[43876,43877],\"valid\"],[[43878,43887],\"disallowed\"],[[43888,43888],\"mapped\",[5024]],[[43889,43889],\"mapped\",[5025]],[[43890,43890],\"mapped\",[5026]],[[43891,43891],\"mapped\",[5027]],[[43892,43892],\"mapped\",[5028]],[[43893,43893],\"mapped\",[5029]],[[43894,43894],\"mapped\",[5030]],[[43895,43895],\"mapped\",[5031]],[[43896,43896],\"mapped\",[5032]],[[43897,43897],\"mapped\",[5033]],[[43898,43898],\"mapped\",[5034]],[[43899,43899],\"mapped\",[5035]],[[43900,43900],\"mapped\",[5036]],[[43901,43901],\"mapped\",[5037]],[[43902,43902],\"mapped\",[5038]],[[43903,43903],\"mapped\",[5039]],[[43904,43904],\"mapped\",[5040]],[[43905,43905],\"mapped\",[5041]],[[43906,43906],\"mapped\",[5042]],[[43907,43907],\"mapped\",[5043]],[[43908,43908],\"mapped\",[5044]],[[43909,43909],\"mapped\",[5045]],[[43910,43910],\"mapped\",[5046]],[[43911,43911],\"mapped\",[5047]],[[43912,43912],\"mapped\",[5048]],[[43913,43913],\"mapped\",[5049]],[[43914,43914],\"mapped\",[5050]],[[43915,43915],\"mapped\",[5051]],[[43916,43916],\"mapped\",[5052]],[[43917,43917],\"mapped\",[5053]],[[43918,43918],\"mapped\",[5054]],[[43919,43919],\"mapped\",[5055]],[[43920,43920],\"mapped\",[5056]],[[43921,43921],\"mapped\",[5057]],[[43922,43922],\"mapped\",[5058]],[[43923,43923],\"mapped\",[5059]],[[43924,43924],\"mapped\",[5060]],[[43925,43925],\"mapped\",[5061]],[[43926,43926],\"mapped\",[5062]],[[43927,43927],\"mapped\",[5063]],[[43928,43928],\"mapped\",[5064]],[[43929,43929],\"mapped\",[5065]],[[43930,43930],\"mapped\",[5066]],[[43931,43931],\"mapped\",[5067]],[[43932,43932],\"mapped\",[5068]],[[43933,43933],\"mapped\",[5069]],[[43934,43934],\"mapped\",[5070]],[[43935,43935],\"mapped\",[5071]],[[43936,43936],\"mapped\",[5072]],[[43937,43937],\"mapped\",[5073]],[[43938,43938],\"mapped\",[5074]],[[43939,43939],\"mapped\",[5075]],[[43940,43940],\"mapped\",[5076]],[[43941,43941],\"mapped\",[5077]],[[43942,43942],\"mapped\",[5078]],[[43943,43943],\"mapped\",[5079]],[[43944,43944],\"mapped\",[5080]],[[43945,43945],\"mapped\",[5081]],[[43946,43946],\"mapped\",[5082]],[[43947,43947],\"mapped\",[5083]],[[43948,43948],\"mapped\",[5084]],[[43949,43949],\"mapped\",[5085]],[[43950,43950],\"mapped\",[5086]],[[43951,43951],\"mapped\",[5087]],[[43952,43952],\"mapped\",[5088]],[[43953,43953],\"mapped\",[5089]],[[43954,43954],\"mapped\",[5090]],[[43955,43955],\"mapped\",[5091]],[[43956,43956],\"mapped\",[5092]],[[43957,43957],\"mapped\",[5093]],[[43958,43958],\"mapped\",[5094]],[[43959,43959],\"mapped\",[5095]],[[43960,43960],\"mapped\",[5096]],[[43961,43961],\"mapped\",[5097]],[[43962,43962],\"mapped\",[5098]],[[43963,43963],\"mapped\",[5099]],[[43964,43964],\"mapped\",[5100]],[[43965,43965],\"mapped\",[5101]],[[43966,43966],\"mapped\",[5102]],[[43967,43967],\"mapped\",[5103]],[[43968,44010],\"valid\"],[[44011,44011],\"valid\",[],\"NV8\"],[[44012,44013],\"valid\"],[[44014,44015],\"disallowed\"],[[44016,44025],\"valid\"],[[44026,44031],\"disallowed\"],[[44032,55203],\"valid\"],[[55204,55215],\"disallowed\"],[[55216,55238],\"valid\",[],\"NV8\"],[[55239,55242],\"disallowed\"],[[55243,55291],\"valid\",[],\"NV8\"],[[55292,55295],\"disallowed\"],[[55296,57343],\"disallowed\"],[[57344,63743],\"disallowed\"],[[63744,63744],\"mapped\",[35912]],[[63745,63745],\"mapped\",[26356]],[[63746,63746],\"mapped\",[36554]],[[63747,63747],\"mapped\",[36040]],[[63748,63748],\"mapped\",[28369]],[[63749,63749],\"mapped\",[20018]],[[63750,63750],\"mapped\",[21477]],[[63751,63752],\"mapped\",[40860]],[[63753,63753],\"mapped\",[22865]],[[63754,63754],\"mapped\",[37329]],[[63755,63755],\"mapped\",[21895]],[[63756,63756],\"mapped\",[22856]],[[63757,63757],\"mapped\",[25078]],[[63758,63758],\"mapped\",[30313]],[[63759,63759],\"mapped\",[32645]],[[63760,63760],\"mapped\",[34367]],[[63761,63761],\"mapped\",[34746]],[[63762,63762],\"mapped\",[35064]],[[63763,63763],\"mapped\",[37007]],[[63764,63764],\"mapped\",[27138]],[[63765,63765],\"mapped\",[27931]],[[63766,63766],\"mapped\",[28889]],[[63767,63767],\"mapped\",[29662]],[[63768,63768],\"mapped\",[33853]],[[63769,63769],\"mapped\",[37226]],[[63770,63770],\"mapped\",[39409]],[[63771,63771],\"mapped\",[20098]],[[63772,63772],\"mapped\",[21365]],[[63773,63773],\"mapped\",[27396]],[[63774,63774],\"mapped\",[29211]],[[63775,63775],\"mapped\",[34349]],[[63776,63776],\"mapped\",[40478]],[[63777,63777],\"mapped\",[23888]],[[63778,63778],\"mapped\",[28651]],[[63779,63779],\"mapped\",[34253]],[[63780,63780],\"mapped\",[35172]],[[63781,63781],\"mapped\",[25289]],[[63782,63782],\"mapped\",[33240]],[[63783,63783],\"mapped\",[34847]],[[63784,63784],\"mapped\",[24266]],[[63785,63785],\"mapped\",[26391]],[[63786,63786],\"mapped\",[28010]],[[63787,63787],\"mapped\",[29436]],[[63788,63788],\"mapped\",[37070]],[[63789,63789],\"mapped\",[20358]],[[63790,63790],\"mapped\",[20919]],[[63791,63791],\"mapped\",[21214]],[[63792,63792],\"mapped\",[25796]],[[63793,63793],\"mapped\",[27347]],[[63794,63794],\"mapped\",[29200]],[[63795,63795],\"mapped\",[30439]],[[63796,63796],\"mapped\",[32769]],[[63797,63797],\"mapped\",[34310]],[[63798,63798],\"mapped\",[34396]],[[63799,63799],\"mapped\",[36335]],[[63800,63800],\"mapped\",[38706]],[[63801,63801],\"mapped\",[39791]],[[63802,63802],\"mapped\",[40442]],[[63803,63803],\"mapped\",[30860]],[[63804,63804],\"mapped\",[31103]],[[63805,63805],\"mapped\",[32160]],[[63806,63806],\"mapped\",[33737]],[[63807,63807],\"mapped\",[37636]],[[63808,63808],\"mapped\",[40575]],[[63809,63809],\"mapped\",[35542]],[[63810,63810],\"mapped\",[22751]],[[63811,63811],\"mapped\",[24324]],[[63812,63812],\"mapped\",[31840]],[[63813,63813],\"mapped\",[32894]],[[63814,63814],\"mapped\",[29282]],[[63815,63815],\"mapped\",[30922]],[[63816,63816],\"mapped\",[36034]],[[63817,63817],\"mapped\",[38647]],[[63818,63818],\"mapped\",[22744]],[[63819,63819],\"mapped\",[23650]],[[63820,63820],\"mapped\",[27155]],[[63821,63821],\"mapped\",[28122]],[[63822,63822],\"mapped\",[28431]],[[63823,63823],\"mapped\",[32047]],[[63824,63824],\"mapped\",[32311]],[[63825,63825],\"mapped\",[38475]],[[63826,63826],\"mapped\",[21202]],[[63827,63827],\"mapped\",[32907]],[[63828,63828],\"mapped\",[20956]],[[63829,63829],\"mapped\",[20940]],[[63830,63830],\"mapped\",[31260]],[[63831,63831],\"mapped\",[32190]],[[63832,63832],\"mapped\",[33777]],[[63833,63833],\"mapped\",[38517]],[[63834,63834],\"mapped\",[35712]],[[63835,63835],\"mapped\",[25295]],[[63836,63836],\"mapped\",[27138]],[[63837,63837],\"mapped\",[35582]],[[63838,63838],\"mapped\",[20025]],[[63839,63839],\"mapped\",[23527]],[[63840,63840],\"mapped\",[24594]],[[63841,63841],\"mapped\",[29575]],[[63842,63842],\"mapped\",[30064]],[[63843,63843],\"mapped\",[21271]],[[63844,63844],\"mapped\",[30971]],[[63845,63845],\"mapped\",[20415]],[[63846,63846],\"mapped\",[24489]],[[63847,63847],\"mapped\",[19981]],[[63848,63848],\"mapped\",[27852]],[[63849,63849],\"mapped\",[25976]],[[63850,63850],\"mapped\",[32034]],[[63851,63851],\"mapped\",[21443]],[[63852,63852],\"mapped\",[22622]],[[63853,63853],\"mapped\",[30465]],[[63854,63854],\"mapped\",[33865]],[[63855,63855],\"mapped\",[35498]],[[63856,63856],\"mapped\",[27578]],[[63857,63857],\"mapped\",[36784]],[[63858,63858],\"mapped\",[27784]],[[63859,63859],\"mapped\",[25342]],[[63860,63860],\"mapped\",[33509]],[[63861,63861],\"mapped\",[25504]],[[63862,63862],\"mapped\",[30053]],[[63863,63863],\"mapped\",[20142]],[[63864,63864],\"mapped\",[20841]],[[63865,63865],\"mapped\",[20937]],[[63866,63866],\"mapped\",[26753]],[[63867,63867],\"mapped\",[31975]],[[63868,63868],\"mapped\",[33391]],[[63869,63869],\"mapped\",[35538]],[[63870,63870],\"mapped\",[37327]],[[63871,63871],\"mapped\",[21237]],[[63872,63872],\"mapped\",[21570]],[[63873,63873],\"mapped\",[22899]],[[63874,63874],\"mapped\",[24300]],[[63875,63875],\"mapped\",[26053]],[[63876,63876],\"mapped\",[28670]],[[63877,63877],\"mapped\",[31018]],[[63878,63878],\"mapped\",[38317]],[[63879,63879],\"mapped\",[39530]],[[63880,63880],\"mapped\",[40599]],[[63881,63881],\"mapped\",[40654]],[[63882,63882],\"mapped\",[21147]],[[63883,63883],\"mapped\",[26310]],[[63884,63884],\"mapped\",[27511]],[[63885,63885],\"mapped\",[36706]],[[63886,63886],\"mapped\",[24180]],[[63887,63887],\"mapped\",[24976]],[[63888,63888],\"mapped\",[25088]],[[63889,63889],\"mapped\",[25754]],[[63890,63890],\"mapped\",[28451]],[[63891,63891],\"mapped\",[29001]],[[63892,63892],\"mapped\",[29833]],[[63893,63893],\"mapped\",[31178]],[[63894,63894],\"mapped\",[32244]],[[63895,63895],\"mapped\",[32879]],[[63896,63896],\"mapped\",[36646]],[[63897,63897],\"mapped\",[34030]],[[63898,63898],\"mapped\",[36899]],[[63899,63899],\"mapped\",[37706]],[[63900,63900],\"mapped\",[21015]],[[63901,63901],\"mapped\",[21155]],[[63902,63902],\"mapped\",[21693]],[[63903,63903],\"mapped\",[28872]],[[63904,63904],\"mapped\",[35010]],[[63905,63905],\"mapped\",[35498]],[[63906,63906],\"mapped\",[24265]],[[63907,63907],\"mapped\",[24565]],[[63908,63908],\"mapped\",[25467]],[[63909,63909],\"mapped\",[27566]],[[63910,63910],\"mapped\",[31806]],[[63911,63911],\"mapped\",[29557]],[[63912,63912],\"mapped\",[20196]],[[63913,63913],\"mapped\",[22265]],[[63914,63914],\"mapped\",[23527]],[[63915,63915],\"mapped\",[23994]],[[63916,63916],\"mapped\",[24604]],[[63917,63917],\"mapped\",[29618]],[[63918,63918],\"mapped\",[29801]],[[63919,63919],\"mapped\",[32666]],[[63920,63920],\"mapped\",[32838]],[[63921,63921],\"mapped\",[37428]],[[63922,63922],\"mapped\",[38646]],[[63923,63923],\"mapped\",[38728]],[[63924,63924],\"mapped\",[38936]],[[63925,63925],\"mapped\",[20363]],[[63926,63926],\"mapped\",[31150]],[[63927,63927],\"mapped\",[37300]],[[63928,63928],\"mapped\",[38584]],[[63929,63929],\"mapped\",[24801]],[[63930,63930],\"mapped\",[20102]],[[63931,63931],\"mapped\",[20698]],[[63932,63932],\"mapped\",[23534]],[[63933,63933],\"mapped\",[23615]],[[63934,63934],\"mapped\",[26009]],[[63935,63935],\"mapped\",[27138]],[[63936,63936],\"mapped\",[29134]],[[63937,63937],\"mapped\",[30274]],[[63938,63938],\"mapped\",[34044]],[[63939,63939],\"mapped\",[36988]],[[63940,63940],\"mapped\",[40845]],[[63941,63941],\"mapped\",[26248]],[[63942,63942],\"mapped\",[38446]],[[63943,63943],\"mapped\",[21129]],[[63944,63944],\"mapped\",[26491]],[[63945,63945],\"mapped\",[26611]],[[63946,63946],\"mapped\",[27969]],[[63947,63947],\"mapped\",[28316]],[[63948,63948],\"mapped\",[29705]],[[63949,63949],\"mapped\",[30041]],[[63950,63950],\"mapped\",[30827]],[[63951,63951],\"mapped\",[32016]],[[63952,63952],\"mapped\",[39006]],[[63953,63953],\"mapped\",[20845]],[[63954,63954],\"mapped\",[25134]],[[63955,63955],\"mapped\",[38520]],[[63956,63956],\"mapped\",[20523]],[[63957,63957],\"mapped\",[23833]],[[63958,63958],\"mapped\",[28138]],[[63959,63959],\"mapped\",[36650]],[[63960,63960],\"mapped\",[24459]],[[63961,63961],\"mapped\",[24900]],[[63962,63962],\"mapped\",[26647]],[[63963,63963],\"mapped\",[29575]],[[63964,63964],\"mapped\",[38534]],[[63965,63965],\"mapped\",[21033]],[[63966,63966],\"mapped\",[21519]],[[63967,63967],\"mapped\",[23653]],[[63968,63968],\"mapped\",[26131]],[[63969,63969],\"mapped\",[26446]],[[63970,63970],\"mapped\",[26792]],[[63971,63971],\"mapped\",[27877]],[[63972,63972],\"mapped\",[29702]],[[63973,63973],\"mapped\",[30178]],[[63974,63974],\"mapped\",[32633]],[[63975,63975],\"mapped\",[35023]],[[63976,63976],\"mapped\",[35041]],[[63977,63977],\"mapped\",[37324]],[[63978,63978],\"mapped\",[38626]],[[63979,63979],\"mapped\",[21311]],[[63980,63980],\"mapped\",[28346]],[[63981,63981],\"mapped\",[21533]],[[63982,63982],\"mapped\",[29136]],[[63983,63983],\"mapped\",[29848]],[[63984,63984],\"mapped\",[34298]],[[63985,63985],\"mapped\",[38563]],[[63986,63986],\"mapped\",[40023]],[[63987,63987],\"mapped\",[40607]],[[63988,63988],\"mapped\",[26519]],[[63989,63989],\"mapped\",[28107]],[[63990,63990],\"mapped\",[33256]],[[63991,63991],\"mapped\",[31435]],[[63992,63992],\"mapped\",[31520]],[[63993,63993],\"mapped\",[31890]],[[63994,63994],\"mapped\",[29376]],[[63995,63995],\"mapped\",[28825]],[[63996,63996],\"mapped\",[35672]],[[63997,63997],\"mapped\",[20160]],[[63998,63998],\"mapped\",[33590]],[[63999,63999],\"mapped\",[21050]],[[64000,64000],\"mapped\",[20999]],[[64001,64001],\"mapped\",[24230]],[[64002,64002],\"mapped\",[25299]],[[64003,64003],\"mapped\",[31958]],[[64004,64004],\"mapped\",[23429]],[[64005,64005],\"mapped\",[27934]],[[64006,64006],\"mapped\",[26292]],[[64007,64007],\"mapped\",[36667]],[[64008,64008],\"mapped\",[34892]],[[64009,64009],\"mapped\",[38477]],[[64010,64010],\"mapped\",[35211]],[[64011,64011],\"mapped\",[24275]],[[64012,64012],\"mapped\",[20800]],[[64013,64013],\"mapped\",[21952]],[[64014,64015],\"valid\"],[[64016,64016],\"mapped\",[22618]],[[64017,64017],\"valid\"],[[64018,64018],\"mapped\",[26228]],[[64019,64020],\"valid\"],[[64021,64021],\"mapped\",[20958]],[[64022,64022],\"mapped\",[29482]],[[64023,64023],\"mapped\",[30410]],[[64024,64024],\"mapped\",[31036]],[[64025,64025],\"mapped\",[31070]],[[64026,64026],\"mapped\",[31077]],[[64027,64027],\"mapped\",[31119]],[[64028,64028],\"mapped\",[38742]],[[64029,64029],\"mapped\",[31934]],[[64030,64030],\"mapped\",[32701]],[[64031,64031],\"valid\"],[[64032,64032],\"mapped\",[34322]],[[64033,64033],\"valid\"],[[64034,64034],\"mapped\",[35576]],[[64035,64036],\"valid\"],[[64037,64037],\"mapped\",[36920]],[[64038,64038],\"mapped\",[37117]],[[64039,64041],\"valid\"],[[64042,64042],\"mapped\",[39151]],[[64043,64043],\"mapped\",[39164]],[[64044,64044],\"mapped\",[39208]],[[64045,64045],\"mapped\",[40372]],[[64046,64046],\"mapped\",[37086]],[[64047,64047],\"mapped\",[38583]],[[64048,64048],\"mapped\",[20398]],[[64049,64049],\"mapped\",[20711]],[[64050,64050],\"mapped\",[20813]],[[64051,64051],\"mapped\",[21193]],[[64052,64052],\"mapped\",[21220]],[[64053,64053],\"mapped\",[21329]],[[64054,64054],\"mapped\",[21917]],[[64055,64055],\"mapped\",[22022]],[[64056,64056],\"mapped\",[22120]],[[64057,64057],\"mapped\",[22592]],[[64058,64058],\"mapped\",[22696]],[[64059,64059],\"mapped\",[23652]],[[64060,64060],\"mapped\",[23662]],[[64061,64061],\"mapped\",[24724]],[[64062,64062],\"mapped\",[24936]],[[64063,64063],\"mapped\",[24974]],[[64064,64064],\"mapped\",[25074]],[[64065,64065],\"mapped\",[25935]],[[64066,64066],\"mapped\",[26082]],[[64067,64067],\"mapped\",[26257]],[[64068,64068],\"mapped\",[26757]],[[64069,64069],\"mapped\",[28023]],[[64070,64070],\"mapped\",[28186]],[[64071,64071],\"mapped\",[28450]],[[64072,64072],\"mapped\",[29038]],[[64073,64073],\"mapped\",[29227]],[[64074,64074],\"mapped\",[29730]],[[64075,64075],\"mapped\",[30865]],[[64076,64076],\"mapped\",[31038]],[[64077,64077],\"mapped\",[31049]],[[64078,64078],\"mapped\",[31048]],[[64079,64079],\"mapped\",[31056]],[[64080,64080],\"mapped\",[31062]],[[64081,64081],\"mapped\",[31069]],[[64082,64082],\"mapped\",[31117]],[[64083,64083],\"mapped\",[31118]],[[64084,64084],\"mapped\",[31296]],[[64085,64085],\"mapped\",[31361]],[[64086,64086],\"mapped\",[31680]],[[64087,64087],\"mapped\",[32244]],[[64088,64088],\"mapped\",[32265]],[[64089,64089],\"mapped\",[32321]],[[64090,64090],\"mapped\",[32626]],[[64091,64091],\"mapped\",[32773]],[[64092,64092],\"mapped\",[33261]],[[64093,64094],\"mapped\",[33401]],[[64095,64095],\"mapped\",[33879]],[[64096,64096],\"mapped\",[35088]],[[64097,64097],\"mapped\",[35222]],[[64098,64098],\"mapped\",[35585]],[[64099,64099],\"mapped\",[35641]],[[64100,64100],\"mapped\",[36051]],[[64101,64101],\"mapped\",[36104]],[[64102,64102],\"mapped\",[36790]],[[64103,64103],\"mapped\",[36920]],[[64104,64104],\"mapped\",[38627]],[[64105,64105],\"mapped\",[38911]],[[64106,64106],\"mapped\",[38971]],[[64107,64107],\"mapped\",[24693]],[[64108,64108],\"mapped\",[148206]],[[64109,64109],\"mapped\",[33304]],[[64110,64111],\"disallowed\"],[[64112,64112],\"mapped\",[20006]],[[64113,64113],\"mapped\",[20917]],[[64114,64114],\"mapped\",[20840]],[[64115,64115],\"mapped\",[20352]],[[64116,64116],\"mapped\",[20805]],[[64117,64117],\"mapped\",[20864]],[[64118,64118],\"mapped\",[21191]],[[64119,64119],\"mapped\",[21242]],[[64120,64120],\"mapped\",[21917]],[[64121,64121],\"mapped\",[21845]],[[64122,64122],\"mapped\",[21913]],[[64123,64123],\"mapped\",[21986]],[[64124,64124],\"mapped\",[22618]],[[64125,64125],\"mapped\",[22707]],[[64126,64126],\"mapped\",[22852]],[[64127,64127],\"mapped\",[22868]],[[64128,64128],\"mapped\",[23138]],[[64129,64129],\"mapped\",[23336]],[[64130,64130],\"mapped\",[24274]],[[64131,64131],\"mapped\",[24281]],[[64132,64132],\"mapped\",[24425]],[[64133,64133],\"mapped\",[24493]],[[64134,64134],\"mapped\",[24792]],[[64135,64135],\"mapped\",[24910]],[[64136,64136],\"mapped\",[24840]],[[64137,64137],\"mapped\",[24974]],[[64138,64138],\"mapped\",[24928]],[[64139,64139],\"mapped\",[25074]],[[64140,64140],\"mapped\",[25140]],[[64141,64141],\"mapped\",[25540]],[[64142,64142],\"mapped\",[25628]],[[64143,64143],\"mapped\",[25682]],[[64144,64144],\"mapped\",[25942]],[[64145,64145],\"mapped\",[26228]],[[64146,64146],\"mapped\",[26391]],[[64147,64147],\"mapped\",[26395]],[[64148,64148],\"mapped\",[26454]],[[64149,64149],\"mapped\",[27513]],[[64150,64150],\"mapped\",[27578]],[[64151,64151],\"mapped\",[27969]],[[64152,64152],\"mapped\",[28379]],[[64153,64153],\"mapped\",[28363]],[[64154,64154],\"mapped\",[28450]],[[64155,64155],\"mapped\",[28702]],[[64156,64156],\"mapped\",[29038]],[[64157,64157],\"mapped\",[30631]],[[64158,64158],\"mapped\",[29237]],[[64159,64159],\"mapped\",[29359]],[[64160,64160],\"mapped\",[29482]],[[64161,64161],\"mapped\",[29809]],[[64162,64162],\"mapped\",[29958]],[[64163,64163],\"mapped\",[30011]],[[64164,64164],\"mapped\",[30237]],[[64165,64165],\"mapped\",[30239]],[[64166,64166],\"mapped\",[30410]],[[64167,64167],\"mapped\",[30427]],[[64168,64168],\"mapped\",[30452]],[[64169,64169],\"mapped\",[30538]],[[64170,64170],\"mapped\",[30528]],[[64171,64171],\"mapped\",[30924]],[[64172,64172],\"mapped\",[31409]],[[64173,64173],\"mapped\",[31680]],[[64174,64174],\"mapped\",[31867]],[[64175,64175],\"mapped\",[32091]],[[64176,64176],\"mapped\",[32244]],[[64177,64177],\"mapped\",[32574]],[[64178,64178],\"mapped\",[32773]],[[64179,64179],\"mapped\",[33618]],[[64180,64180],\"mapped\",[33775]],[[64181,64181],\"mapped\",[34681]],[[64182,64182],\"mapped\",[35137]],[[64183,64183],\"mapped\",[35206]],[[64184,64184],\"mapped\",[35222]],[[64185,64185],\"mapped\",[35519]],[[64186,64186],\"mapped\",[35576]],[[64187,64187],\"mapped\",[35531]],[[64188,64188],\"mapped\",[35585]],[[64189,64189],\"mapped\",[35582]],[[64190,64190],\"mapped\",[35565]],[[64191,64191],\"mapped\",[35641]],[[64192,64192],\"mapped\",[35722]],[[64193,64193],\"mapped\",[36104]],[[64194,64194],\"mapped\",[36664]],[[64195,64195],\"mapped\",[36978]],[[64196,64196],\"mapped\",[37273]],[[64197,64197],\"mapped\",[37494]],[[64198,64198],\"mapped\",[38524]],[[64199,64199],\"mapped\",[38627]],[[64200,64200],\"mapped\",[38742]],[[64201,64201],\"mapped\",[38875]],[[64202,64202],\"mapped\",[38911]],[[64203,64203],\"mapped\",[38923]],[[64204,64204],\"mapped\",[38971]],[[64205,64205],\"mapped\",[39698]],[[64206,64206],\"mapped\",[40860]],[[64207,64207],\"mapped\",[141386]],[[64208,64208],\"mapped\",[141380]],[[64209,64209],\"mapped\",[144341]],[[64210,64210],\"mapped\",[15261]],[[64211,64211],\"mapped\",[16408]],[[64212,64212],\"mapped\",[16441]],[[64213,64213],\"mapped\",[152137]],[[64214,64214],\"mapped\",[154832]],[[64215,64215],\"mapped\",[163539]],[[64216,64216],\"mapped\",[40771]],[[64217,64217],\"mapped\",[40846]],[[64218,64255],\"disallowed\"],[[64256,64256],\"mapped\",[102,102]],[[64257,64257],\"mapped\",[102,105]],[[64258,64258],\"mapped\",[102,108]],[[64259,64259],\"mapped\",[102,102,105]],[[64260,64260],\"mapped\",[102,102,108]],[[64261,64262],\"mapped\",[115,116]],[[64263,64274],\"disallowed\"],[[64275,64275],\"mapped\",[1396,1398]],[[64276,64276],\"mapped\",[1396,1381]],[[64277,64277],\"mapped\",[1396,1387]],[[64278,64278],\"mapped\",[1406,1398]],[[64279,64279],\"mapped\",[1396,1389]],[[64280,64284],\"disallowed\"],[[64285,64285],\"mapped\",[1497,1460]],[[64286,64286],\"valid\"],[[64287,64287],\"mapped\",[1522,1463]],[[64288,64288],\"mapped\",[1506]],[[64289,64289],\"mapped\",[1488]],[[64290,64290],\"mapped\",[1491]],[[64291,64291],\"mapped\",[1492]],[[64292,64292],\"mapped\",[1499]],[[64293,64293],\"mapped\",[1500]],[[64294,64294],\"mapped\",[1501]],[[64295,64295],\"mapped\",[1512]],[[64296,64296],\"mapped\",[1514]],[[64297,64297],\"disallowed_STD3_mapped\",[43]],[[64298,64298],\"mapped\",[1513,1473]],[[64299,64299],\"mapped\",[1513,1474]],[[64300,64300],\"mapped\",[1513,1468,1473]],[[64301,64301],\"mapped\",[1513,1468,1474]],[[64302,64302],\"mapped\",[1488,1463]],[[64303,64303],\"mapped\",[1488,1464]],[[64304,64304],\"mapped\",[1488,1468]],[[64305,64305],\"mapped\",[1489,1468]],[[64306,64306],\"mapped\",[1490,1468]],[[64307,64307],\"mapped\",[1491,1468]],[[64308,64308],\"mapped\",[1492,1468]],[[64309,64309],\"mapped\",[1493,1468]],[[64310,64310],\"mapped\",[1494,1468]],[[64311,64311],\"disallowed\"],[[64312,64312],\"mapped\",[1496,1468]],[[64313,64313],\"mapped\",[1497,1468]],[[64314,64314],\"mapped\",[1498,1468]],[[64315,64315],\"mapped\",[1499,1468]],[[64316,64316],\"mapped\",[1500,1468]],[[64317,64317],\"disallowed\"],[[64318,64318],\"mapped\",[1502,1468]],[[64319,64319],\"disallowed\"],[[64320,64320],\"mapped\",[1504,1468]],[[64321,64321],\"mapped\",[1505,1468]],[[64322,64322],\"disallowed\"],[[64323,64323],\"mapped\",[1507,1468]],[[64324,64324],\"mapped\",[1508,1468]],[[64325,64325],\"disallowed\"],[[64326,64326],\"mapped\",[1510,1468]],[[64327,64327],\"mapped\",[1511,1468]],[[64328,64328],\"mapped\",[1512,1468]],[[64329,64329],\"mapped\",[1513,1468]],[[64330,64330],\"mapped\",[1514,1468]],[[64331,64331],\"mapped\",[1493,1465]],[[64332,64332],\"mapped\",[1489,1471]],[[64333,64333],\"mapped\",[1499,1471]],[[64334,64334],\"mapped\",[1508,1471]],[[64335,64335],\"mapped\",[1488,1500]],[[64336,64337],\"mapped\",[1649]],[[64338,64341],\"mapped\",[1659]],[[64342,64345],\"mapped\",[1662]],[[64346,64349],\"mapped\",[1664]],[[64350,64353],\"mapped\",[1658]],[[64354,64357],\"mapped\",[1663]],[[64358,64361],\"mapped\",[1657]],[[64362,64365],\"mapped\",[1700]],[[64366,64369],\"mapped\",[1702]],[[64370,64373],\"mapped\",[1668]],[[64374,64377],\"mapped\",[1667]],[[64378,64381],\"mapped\",[1670]],[[64382,64385],\"mapped\",[1671]],[[64386,64387],\"mapped\",[1677]],[[64388,64389],\"mapped\",[1676]],[[64390,64391],\"mapped\",[1678]],[[64392,64393],\"mapped\",[1672]],[[64394,64395],\"mapped\",[1688]],[[64396,64397],\"mapped\",[1681]],[[64398,64401],\"mapped\",[1705]],[[64402,64405],\"mapped\",[1711]],[[64406,64409],\"mapped\",[1715]],[[64410,64413],\"mapped\",[1713]],[[64414,64415],\"mapped\",[1722]],[[64416,64419],\"mapped\",[1723]],[[64420,64421],\"mapped\",[1728]],[[64422,64425],\"mapped\",[1729]],[[64426,64429],\"mapped\",[1726]],[[64430,64431],\"mapped\",[1746]],[[64432,64433],\"mapped\",[1747]],[[64434,64449],\"valid\",[],\"NV8\"],[[64450,64466],\"disallowed\"],[[64467,64470],\"mapped\",[1709]],[[64471,64472],\"mapped\",[1735]],[[64473,64474],\"mapped\",[1734]],[[64475,64476],\"mapped\",[1736]],[[64477,64477],\"mapped\",[1735,1652]],[[64478,64479],\"mapped\",[1739]],[[64480,64481],\"mapped\",[1733]],[[64482,64483],\"mapped\",[1737]],[[64484,64487],\"mapped\",[1744]],[[64488,64489],\"mapped\",[1609]],[[64490,64491],\"mapped\",[1574,1575]],[[64492,64493],\"mapped\",[1574,1749]],[[64494,64495],\"mapped\",[1574,1608]],[[64496,64497],\"mapped\",[1574,1735]],[[64498,64499],\"mapped\",[1574,1734]],[[64500,64501],\"mapped\",[1574,1736]],[[64502,64504],\"mapped\",[1574,1744]],[[64505,64507],\"mapped\",[1574,1609]],[[64508,64511],\"mapped\",[1740]],[[64512,64512],\"mapped\",[1574,1580]],[[64513,64513],\"mapped\",[1574,1581]],[[64514,64514],\"mapped\",[1574,1605]],[[64515,64515],\"mapped\",[1574,1609]],[[64516,64516],\"mapped\",[1574,1610]],[[64517,64517],\"mapped\",[1576,1580]],[[64518,64518],\"mapped\",[1576,1581]],[[64519,64519],\"mapped\",[1576,1582]],[[64520,64520],\"mapped\",[1576,1605]],[[64521,64521],\"mapped\",[1576,1609]],[[64522,64522],\"mapped\",[1576,1610]],[[64523,64523],\"mapped\",[1578,1580]],[[64524,64524],\"mapped\",[1578,1581]],[[64525,64525],\"mapped\",[1578,1582]],[[64526,64526],\"mapped\",[1578,1605]],[[64527,64527],\"mapped\",[1578,1609]],[[64528,64528],\"mapped\",[1578,1610]],[[64529,64529],\"mapped\",[1579,1580]],[[64530,64530],\"mapped\",[1579,1605]],[[64531,64531],\"mapped\",[1579,1609]],[[64532,64532],\"mapped\",[1579,1610]],[[64533,64533],\"mapped\",[1580,1581]],[[64534,64534],\"mapped\",[1580,1605]],[[64535,64535],\"mapped\",[1581,1580]],[[64536,64536],\"mapped\",[1581,1605]],[[64537,64537],\"mapped\",[1582,1580]],[[64538,64538],\"mapped\",[1582,1581]],[[64539,64539],\"mapped\",[1582,1605]],[[64540,64540],\"mapped\",[1587,1580]],[[64541,64541],\"mapped\",[1587,1581]],[[64542,64542],\"mapped\",[1587,1582]],[[64543,64543],\"mapped\",[1587,1605]],[[64544,64544],\"mapped\",[1589,1581]],[[64545,64545],\"mapped\",[1589,1605]],[[64546,64546],\"mapped\",[1590,1580]],[[64547,64547],\"mapped\",[1590,1581]],[[64548,64548],\"mapped\",[1590,1582]],[[64549,64549],\"mapped\",[1590,1605]],[[64550,64550],\"mapped\",[1591,1581]],[[64551,64551],\"mapped\",[1591,1605]],[[64552,64552],\"mapped\",[1592,1605]],[[64553,64553],\"mapped\",[1593,1580]],[[64554,64554],\"mapped\",[1593,1605]],[[64555,64555],\"mapped\",[1594,1580]],[[64556,64556],\"mapped\",[1594,1605]],[[64557,64557],\"mapped\",[1601,1580]],[[64558,64558],\"mapped\",[1601,1581]],[[64559,64559],\"mapped\",[1601,1582]],[[64560,64560],\"mapped\",[1601,1605]],[[64561,64561],\"mapped\",[1601,1609]],[[64562,64562],\"mapped\",[1601,1610]],[[64563,64563],\"mapped\",[1602,1581]],[[64564,64564],\"mapped\",[1602,1605]],[[64565,64565],\"mapped\",[1602,1609]],[[64566,64566],\"mapped\",[1602,1610]],[[64567,64567],\"mapped\",[1603,1575]],[[64568,64568],\"mapped\",[1603,1580]],[[64569,64569],\"mapped\",[1603,1581]],[[64570,64570],\"mapped\",[1603,1582]],[[64571,64571],\"mapped\",[1603,1604]],[[64572,64572],\"mapped\",[1603,1605]],[[64573,64573],\"mapped\",[1603,1609]],[[64574,64574],\"mapped\",[1603,1610]],[[64575,64575],\"mapped\",[1604,1580]],[[64576,64576],\"mapped\",[1604,1581]],[[64577,64577],\"mapped\",[1604,1582]],[[64578,64578],\"mapped\",[1604,1605]],[[64579,64579],\"mapped\",[1604,1609]],[[64580,64580],\"mapped\",[1604,1610]],[[64581,64581],\"mapped\",[1605,1580]],[[64582,64582],\"mapped\",[1605,1581]],[[64583,64583],\"mapped\",[1605,1582]],[[64584,64584],\"mapped\",[1605,1605]],[[64585,64585],\"mapped\",[1605,1609]],[[64586,64586],\"mapped\",[1605,1610]],[[64587,64587],\"mapped\",[1606,1580]],[[64588,64588],\"mapped\",[1606,1581]],[[64589,64589],\"mapped\",[1606,1582]],[[64590,64590],\"mapped\",[1606,1605]],[[64591,64591],\"mapped\",[1606,1609]],[[64592,64592],\"mapped\",[1606,1610]],[[64593,64593],\"mapped\",[1607,1580]],[[64594,64594],\"mapped\",[1607,1605]],[[64595,64595],\"mapped\",[1607,1609]],[[64596,64596],\"mapped\",[1607,1610]],[[64597,64597],\"mapped\",[1610,1580]],[[64598,64598],\"mapped\",[1610,1581]],[[64599,64599],\"mapped\",[1610,1582]],[[64600,64600],\"mapped\",[1610,1605]],[[64601,64601],\"mapped\",[1610,1609]],[[64602,64602],\"mapped\",[1610,1610]],[[64603,64603],\"mapped\",[1584,1648]],[[64604,64604],\"mapped\",[1585,1648]],[[64605,64605],\"mapped\",[1609,1648]],[[64606,64606],\"disallowed_STD3_mapped\",[32,1612,1617]],[[64607,64607],\"disallowed_STD3_mapped\",[32,1613,1617]],[[64608,64608],\"disallowed_STD3_mapped\",[32,1614,1617]],[[64609,64609],\"disallowed_STD3_mapped\",[32,1615,1617]],[[64610,64610],\"disallowed_STD3_mapped\",[32,1616,1617]],[[64611,64611],\"disallowed_STD3_mapped\",[32,1617,1648]],[[64612,64612],\"mapped\",[1574,1585]],[[64613,64613],\"mapped\",[1574,1586]],[[64614,64614],\"mapped\",[1574,1605]],[[64615,64615],\"mapped\",[1574,1606]],[[64616,64616],\"mapped\",[1574,1609]],[[64617,64617],\"mapped\",[1574,1610]],[[64618,64618],\"mapped\",[1576,1585]],[[64619,64619],\"mapped\",[1576,1586]],[[64620,64620],\"mapped\",[1576,1605]],[[64621,64621],\"mapped\",[1576,1606]],[[64622,64622],\"mapped\",[1576,1609]],[[64623,64623],\"mapped\",[1576,1610]],[[64624,64624],\"mapped\",[1578,1585]],[[64625,64625],\"mapped\",[1578,1586]],[[64626,64626],\"mapped\",[1578,1605]],[[64627,64627],\"mapped\",[1578,1606]],[[64628,64628],\"mapped\",[1578,1609]],[[64629,64629],\"mapped\",[1578,1610]],[[64630,64630],\"mapped\",[1579,1585]],[[64631,64631],\"mapped\",[1579,1586]],[[64632,64632],\"mapped\",[1579,1605]],[[64633,64633],\"mapped\",[1579,1606]],[[64634,64634],\"mapped\",[1579,1609]],[[64635,64635],\"mapped\",[1579,1610]],[[64636,64636],\"mapped\",[1601,1609]],[[64637,64637],\"mapped\",[1601,1610]],[[64638,64638],\"mapped\",[1602,1609]],[[64639,64639],\"mapped\",[1602,1610]],[[64640,64640],\"mapped\",[1603,1575]],[[64641,64641],\"mapped\",[1603,1604]],[[64642,64642],\"mapped\",[1603,1605]],[[64643,64643],\"mapped\",[1603,1609]],[[64644,64644],\"mapped\",[1603,1610]],[[64645,64645],\"mapped\",[1604,1605]],[[64646,64646],\"mapped\",[1604,1609]],[[64647,64647],\"mapped\",[1604,1610]],[[64648,64648],\"mapped\",[1605,1575]],[[64649,64649],\"mapped\",[1605,1605]],[[64650,64650],\"mapped\",[1606,1585]],[[64651,64651],\"mapped\",[1606,1586]],[[64652,64652],\"mapped\",[1606,1605]],[[64653,64653],\"mapped\",[1606,1606]],[[64654,64654],\"mapped\",[1606,1609]],[[64655,64655],\"mapped\",[1606,1610]],[[64656,64656],\"mapped\",[1609,1648]],[[64657,64657],\"mapped\",[1610,1585]],[[64658,64658],\"mapped\",[1610,1586]],[[64659,64659],\"mapped\",[1610,1605]],[[64660,64660],\"mapped\",[1610,1606]],[[64661,64661],\"mapped\",[1610,1609]],[[64662,64662],\"mapped\",[1610,1610]],[[64663,64663],\"mapped\",[1574,1580]],[[64664,64664],\"mapped\",[1574,1581]],[[64665,64665],\"mapped\",[1574,1582]],[[64666,64666],\"mapped\",[1574,1605]],[[64667,64667],\"mapped\",[1574,1607]],[[64668,64668],\"mapped\",[1576,1580]],[[64669,64669],\"mapped\",[1576,1581]],[[64670,64670],\"mapped\",[1576,1582]],[[64671,64671],\"mapped\",[1576,1605]],[[64672,64672],\"mapped\",[1576,1607]],[[64673,64673],\"mapped\",[1578,1580]],[[64674,64674],\"mapped\",[1578,1581]],[[64675,64675],\"mapped\",[1578,1582]],[[64676,64676],\"mapped\",[1578,1605]],[[64677,64677],\"mapped\",[1578,1607]],[[64678,64678],\"mapped\",[1579,1605]],[[64679,64679],\"mapped\",[1580,1581]],[[64680,64680],\"mapped\",[1580,1605]],[[64681,64681],\"mapped\",[1581,1580]],[[64682,64682],\"mapped\",[1581,1605]],[[64683,64683],\"mapped\",[1582,1580]],[[64684,64684],\"mapped\",[1582,1605]],[[64685,64685],\"mapped\",[1587,1580]],[[64686,64686],\"mapped\",[1587,1581]],[[64687,64687],\"mapped\",[1587,1582]],[[64688,64688],\"mapped\",[1587,1605]],[[64689,64689],\"mapped\",[1589,1581]],[[64690,64690],\"mapped\",[1589,1582]],[[64691,64691],\"mapped\",[1589,1605]],[[64692,64692],\"mapped\",[1590,1580]],[[64693,64693],\"mapped\",[1590,1581]],[[64694,64694],\"mapped\",[1590,1582]],[[64695,64695],\"mapped\",[1590,1605]],[[64696,64696],\"mapped\",[1591,1581]],[[64697,64697],\"mapped\",[1592,1605]],[[64698,64698],\"mapped\",[1593,1580]],[[64699,64699],\"mapped\",[1593,1605]],[[64700,64700],\"mapped\",[1594,1580]],[[64701,64701],\"mapped\",[1594,1605]],[[64702,64702],\"mapped\",[1601,1580]],[[64703,64703],\"mapped\",[1601,1581]],[[64704,64704],\"mapped\",[1601,1582]],[[64705,64705],\"mapped\",[1601,1605]],[[64706,64706],\"mapped\",[1602,1581]],[[64707,64707],\"mapped\",[1602,1605]],[[64708,64708],\"mapped\",[1603,1580]],[[64709,64709],\"mapped\",[1603,1581]],[[64710,64710],\"mapped\",[1603,1582]],[[64711,64711],\"mapped\",[1603,1604]],[[64712,64712],\"mapped\",[1603,1605]],[[64713,64713],\"mapped\",[1604,1580]],[[64714,64714],\"mapped\",[1604,1581]],[[64715,64715],\"mapped\",[1604,1582]],[[64716,64716],\"mapped\",[1604,1605]],[[64717,64717],\"mapped\",[1604,1607]],[[64718,64718],\"mapped\",[1605,1580]],[[64719,64719],\"mapped\",[1605,1581]],[[64720,64720],\"mapped\",[1605,1582]],[[64721,64721],\"mapped\",[1605,1605]],[[64722,64722],\"mapped\",[1606,1580]],[[64723,64723],\"mapped\",[1606,1581]],[[64724,64724],\"mapped\",[1606,1582]],[[64725,64725],\"mapped\",[1606,1605]],[[64726,64726],\"mapped\",[1606,1607]],[[64727,64727],\"mapped\",[1607,1580]],[[64728,64728],\"mapped\",[1607,1605]],[[64729,64729],\"mapped\",[1607,1648]],[[64730,64730],\"mapped\",[1610,1580]],[[64731,64731],\"mapped\",[1610,1581]],[[64732,64732],\"mapped\",[1610,1582]],[[64733,64733],\"mapped\",[1610,1605]],[[64734,64734],\"mapped\",[1610,1607]],[[64735,64735],\"mapped\",[1574,1605]],[[64736,64736],\"mapped\",[1574,1607]],[[64737,64737],\"mapped\",[1576,1605]],[[64738,64738],\"mapped\",[1576,1607]],[[64739,64739],\"mapped\",[1578,1605]],[[64740,64740],\"mapped\",[1578,1607]],[[64741,64741],\"mapped\",[1579,1605]],[[64742,64742],\"mapped\",[1579,1607]],[[64743,64743],\"mapped\",[1587,1605]],[[64744,64744],\"mapped\",[1587,1607]],[[64745,64745],\"mapped\",[1588,1605]],[[64746,64746],\"mapped\",[1588,1607]],[[64747,64747],\"mapped\",[1603,1604]],[[64748,64748],\"mapped\",[1603,1605]],[[64749,64749],\"mapped\",[1604,1605]],[[64750,64750],\"mapped\",[1606,1605]],[[64751,64751],\"mapped\",[1606,1607]],[[64752,64752],\"mapped\",[1610,1605]],[[64753,64753],\"mapped\",[1610,1607]],[[64754,64754],\"mapped\",[1600,1614,1617]],[[64755,64755],\"mapped\",[1600,1615,1617]],[[64756,64756],\"mapped\",[1600,1616,1617]],[[64757,64757],\"mapped\",[1591,1609]],[[64758,64758],\"mapped\",[1591,1610]],[[64759,64759],\"mapped\",[1593,1609]],[[64760,64760],\"mapped\",[1593,1610]],[[64761,64761],\"mapped\",[1594,1609]],[[64762,64762],\"mapped\",[1594,1610]],[[64763,64763],\"mapped\",[1587,1609]],[[64764,64764],\"mapped\",[1587,1610]],[[64765,64765],\"mapped\",[1588,1609]],[[64766,64766],\"mapped\",[1588,1610]],[[64767,64767],\"mapped\",[1581,1609]],[[64768,64768],\"mapped\",[1581,1610]],[[64769,64769],\"mapped\",[1580,1609]],[[64770,64770],\"mapped\",[1580,1610]],[[64771,64771],\"mapped\",[1582,1609]],[[64772,64772],\"mapped\",[1582,1610]],[[64773,64773],\"mapped\",[1589,1609]],[[64774,64774],\"mapped\",[1589,1610]],[[64775,64775],\"mapped\",[1590,1609]],[[64776,64776],\"mapped\",[1590,1610]],[[64777,64777],\"mapped\",[1588,1580]],[[64778,64778],\"mapped\",[1588,1581]],[[64779,64779],\"mapped\",[1588,1582]],[[64780,64780],\"mapped\",[1588,1605]],[[64781,64781],\"mapped\",[1588,1585]],[[64782,64782],\"mapped\",[1587,1585]],[[64783,64783],\"mapped\",[1589,1585]],[[64784,64784],\"mapped\",[1590,1585]],[[64785,64785],\"mapped\",[1591,1609]],[[64786,64786],\"mapped\",[1591,1610]],[[64787,64787],\"mapped\",[1593,1609]],[[64788,64788],\"mapped\",[1593,1610]],[[64789,64789],\"mapped\",[1594,1609]],[[64790,64790],\"mapped\",[1594,1610]],[[64791,64791],\"mapped\",[1587,1609]],[[64792,64792],\"mapped\",[1587,1610]],[[64793,64793],\"mapped\",[1588,1609]],[[64794,64794],\"mapped\",[1588,1610]],[[64795,64795],\"mapped\",[1581,1609]],[[64796,64796],\"mapped\",[1581,1610]],[[64797,64797],\"mapped\",[1580,1609]],[[64798,64798],\"mapped\",[1580,1610]],[[64799,64799],\"mapped\",[1582,1609]],[[64800,64800],\"mapped\",[1582,1610]],[[64801,64801],\"mapped\",[1589,1609]],[[64802,64802],\"mapped\",[1589,1610]],[[64803,64803],\"mapped\",[1590,1609]],[[64804,64804],\"mapped\",[1590,1610]],[[64805,64805],\"mapped\",[1588,1580]],[[64806,64806],\"mapped\",[1588,1581]],[[64807,64807],\"mapped\",[1588,1582]],[[64808,64808],\"mapped\",[1588,1605]],[[64809,64809],\"mapped\",[1588,1585]],[[64810,64810],\"mapped\",[1587,1585]],[[64811,64811],\"mapped\",[1589,1585]],[[64812,64812],\"mapped\",[1590,1585]],[[64813,64813],\"mapped\",[1588,1580]],[[64814,64814],\"mapped\",[1588,1581]],[[64815,64815],\"mapped\",[1588,1582]],[[64816,64816],\"mapped\",[1588,1605]],[[64817,64817],\"mapped\",[1587,1607]],[[64818,64818],\"mapped\",[1588,1607]],[[64819,64819],\"mapped\",[1591,1605]],[[64820,64820],\"mapped\",[1587,1580]],[[64821,64821],\"mapped\",[1587,1581]],[[64822,64822],\"mapped\",[1587,1582]],[[64823,64823],\"mapped\",[1588,1580]],[[64824,64824],\"mapped\",[1588,1581]],[[64825,64825],\"mapped\",[1588,1582]],[[64826,64826],\"mapped\",[1591,1605]],[[64827,64827],\"mapped\",[1592,1605]],[[64828,64829],\"mapped\",[1575,1611]],[[64830,64831],\"valid\",[],\"NV8\"],[[64832,64847],\"disallowed\"],[[64848,64848],\"mapped\",[1578,1580,1605]],[[64849,64850],\"mapped\",[1578,1581,1580]],[[64851,64851],\"mapped\",[1578,1581,1605]],[[64852,64852],\"mapped\",[1578,1582,1605]],[[64853,64853],\"mapped\",[1578,1605,1580]],[[64854,64854],\"mapped\",[1578,1605,1581]],[[64855,64855],\"mapped\",[1578,1605,1582]],[[64856,64857],\"mapped\",[1580,1605,1581]],[[64858,64858],\"mapped\",[1581,1605,1610]],[[64859,64859],\"mapped\",[1581,1605,1609]],[[64860,64860],\"mapped\",[1587,1581,1580]],[[64861,64861],\"mapped\",[1587,1580,1581]],[[64862,64862],\"mapped\",[1587,1580,1609]],[[64863,64864],\"mapped\",[1587,1605,1581]],[[64865,64865],\"mapped\",[1587,1605,1580]],[[64866,64867],\"mapped\",[1587,1605,1605]],[[64868,64869],\"mapped\",[1589,1581,1581]],[[64870,64870],\"mapped\",[1589,1605,1605]],[[64871,64872],\"mapped\",[1588,1581,1605]],[[64873,64873],\"mapped\",[1588,1580,1610]],[[64874,64875],\"mapped\",[1588,1605,1582]],[[64876,64877],\"mapped\",[1588,1605,1605]],[[64878,64878],\"mapped\",[1590,1581,1609]],[[64879,64880],\"mapped\",[1590,1582,1605]],[[64881,64882],\"mapped\",[1591,1605,1581]],[[64883,64883],\"mapped\",[1591,1605,1605]],[[64884,64884],\"mapped\",[1591,1605,1610]],[[64885,64885],\"mapped\",[1593,1580,1605]],[[64886,64887],\"mapped\",[1593,1605,1605]],[[64888,64888],\"mapped\",[1593,1605,1609]],[[64889,64889],\"mapped\",[1594,1605,1605]],[[64890,64890],\"mapped\",[1594,1605,1610]],[[64891,64891],\"mapped\",[1594,1605,1609]],[[64892,64893],\"mapped\",[1601,1582,1605]],[[64894,64894],\"mapped\",[1602,1605,1581]],[[64895,64895],\"mapped\",[1602,1605,1605]],[[64896,64896],\"mapped\",[1604,1581,1605]],[[64897,64897],\"mapped\",[1604,1581,1610]],[[64898,64898],\"mapped\",[1604,1581,1609]],[[64899,64900],\"mapped\",[1604,1580,1580]],[[64901,64902],\"mapped\",[1604,1582,1605]],[[64903,64904],\"mapped\",[1604,1605,1581]],[[64905,64905],\"mapped\",[1605,1581,1580]],[[64906,64906],\"mapped\",[1605,1581,1605]],[[64907,64907],\"mapped\",[1605,1581,1610]],[[64908,64908],\"mapped\",[1605,1580,1581]],[[64909,64909],\"mapped\",[1605,1580,1605]],[[64910,64910],\"mapped\",[1605,1582,1580]],[[64911,64911],\"mapped\",[1605,1582,1605]],[[64912,64913],\"disallowed\"],[[64914,64914],\"mapped\",[1605,1580,1582]],[[64915,64915],\"mapped\",[1607,1605,1580]],[[64916,64916],\"mapped\",[1607,1605,1605]],[[64917,64917],\"mapped\",[1606,1581,1605]],[[64918,64918],\"mapped\",[1606,1581,1609]],[[64919,64920],\"mapped\",[1606,1580,1605]],[[64921,64921],\"mapped\",[1606,1580,1609]],[[64922,64922],\"mapped\",[1606,1605,1610]],[[64923,64923],\"mapped\",[1606,1605,1609]],[[64924,64925],\"mapped\",[1610,1605,1605]],[[64926,64926],\"mapped\",[1576,1582,1610]],[[64927,64927],\"mapped\",[1578,1580,1610]],[[64928,64928],\"mapped\",[1578,1580,1609]],[[64929,64929],\"mapped\",[1578,1582,1610]],[[64930,64930],\"mapped\",[1578,1582,1609]],[[64931,64931],\"mapped\",[1578,1605,1610]],[[64932,64932],\"mapped\",[1578,1605,1609]],[[64933,64933],\"mapped\",[1580,1605,1610]],[[64934,64934],\"mapped\",[1580,1581,1609]],[[64935,64935],\"mapped\",[1580,1605,1609]],[[64936,64936],\"mapped\",[1587,1582,1609]],[[64937,64937],\"mapped\",[1589,1581,1610]],[[64938,64938],\"mapped\",[1588,1581,1610]],[[64939,64939],\"mapped\",[1590,1581,1610]],[[64940,64940],\"mapped\",[1604,1580,1610]],[[64941,64941],\"mapped\",[1604,1605,1610]],[[64942,64942],\"mapped\",[1610,1581,1610]],[[64943,64943],\"mapped\",[1610,1580,1610]],[[64944,64944],\"mapped\",[1610,1605,1610]],[[64945,64945],\"mapped\",[1605,1605,1610]],[[64946,64946],\"mapped\",[1602,1605,1610]],[[64947,64947],\"mapped\",[1606,1581,1610]],[[64948,64948],\"mapped\",[1602,1605,1581]],[[64949,64949],\"mapped\",[1604,1581,1605]],[[64950,64950],\"mapped\",[1593,1605,1610]],[[64951,64951],\"mapped\",[1603,1605,1610]],[[64952,64952],\"mapped\",[1606,1580,1581]],[[64953,64953],\"mapped\",[1605,1582,1610]],[[64954,64954],\"mapped\",[1604,1580,1605]],[[64955,64955],\"mapped\",[1603,1605,1605]],[[64956,64956],\"mapped\",[1604,1580,1605]],[[64957,64957],\"mapped\",[1606,1580,1581]],[[64958,64958],\"mapped\",[1580,1581,1610]],[[64959,64959],\"mapped\",[1581,1580,1610]],[[64960,64960],\"mapped\",[1605,1580,1610]],[[64961,64961],\"mapped\",[1601,1605,1610]],[[64962,64962],\"mapped\",[1576,1581,1610]],[[64963,64963],\"mapped\",[1603,1605,1605]],[[64964,64964],\"mapped\",[1593,1580,1605]],[[64965,64965],\"mapped\",[1589,1605,1605]],[[64966,64966],\"mapped\",[1587,1582,1610]],[[64967,64967],\"mapped\",[1606,1580,1610]],[[64968,64975],\"disallowed\"],[[64976,65007],\"disallowed\"],[[65008,65008],\"mapped\",[1589,1604,1746]],[[65009,65009],\"mapped\",[1602,1604,1746]],[[65010,65010],\"mapped\",[1575,1604,1604,1607]],[[65011,65011],\"mapped\",[1575,1603,1576,1585]],[[65012,65012],\"mapped\",[1605,1581,1605,1583]],[[65013,65013],\"mapped\",[1589,1604,1593,1605]],[[65014,65014],\"mapped\",[1585,1587,1608,1604]],[[65015,65015],\"mapped\",[1593,1604,1610,1607]],[[65016,65016],\"mapped\",[1608,1587,1604,1605]],[[65017,65017],\"mapped\",[1589,1604,1609]],[[65018,65018],\"disallowed_STD3_mapped\",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],\"disallowed_STD3_mapped\",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],\"mapped\",[1585,1740,1575,1604]],[[65021,65021],\"valid\",[],\"NV8\"],[[65022,65023],\"disallowed\"],[[65024,65039],\"ignored\"],[[65040,65040],\"disallowed_STD3_mapped\",[44]],[[65041,65041],\"mapped\",[12289]],[[65042,65042],\"disallowed\"],[[65043,65043],\"disallowed_STD3_mapped\",[58]],[[65044,65044],\"disallowed_STD3_mapped\",[59]],[[65045,65045],\"disallowed_STD3_mapped\",[33]],[[65046,65046],\"disallowed_STD3_mapped\",[63]],[[65047,65047],\"mapped\",[12310]],[[65048,65048],\"mapped\",[12311]],[[65049,65049],\"disallowed\"],[[65050,65055],\"disallowed\"],[[65056,65059],\"valid\"],[[65060,65062],\"valid\"],[[65063,65069],\"valid\"],[[65070,65071],\"valid\"],[[65072,65072],\"disallowed\"],[[65073,65073],\"mapped\",[8212]],[[65074,65074],\"mapped\",[8211]],[[65075,65076],\"disallowed_STD3_mapped\",[95]],[[65077,65077],\"disallowed_STD3_mapped\",[40]],[[65078,65078],\"disallowed_STD3_mapped\",[41]],[[65079,65079],\"disallowed_STD3_mapped\",[123]],[[65080,65080],\"disallowed_STD3_mapped\",[125]],[[65081,65081],\"mapped\",[12308]],[[65082,65082],\"mapped\",[12309]],[[65083,65083],\"mapped\",[12304]],[[65084,65084],\"mapped\",[12305]],[[65085,65085],\"mapped\",[12298]],[[65086,65086],\"mapped\",[12299]],[[65087,65087],\"mapped\",[12296]],[[65088,65088],\"mapped\",[12297]],[[65089,65089],\"mapped\",[12300]],[[65090,65090],\"mapped\",[12301]],[[65091,65091],\"mapped\",[12302]],[[65092,65092],\"mapped\",[12303]],[[65093,65094],\"valid\",[],\"NV8\"],[[65095,65095],\"disallowed_STD3_mapped\",[91]],[[65096,65096],\"disallowed_STD3_mapped\",[93]],[[65097,65100],\"disallowed_STD3_mapped\",[32,773]],[[65101,65103],\"disallowed_STD3_mapped\",[95]],[[65104,65104],\"disallowed_STD3_mapped\",[44]],[[65105,65105],\"mapped\",[12289]],[[65106,65106],\"disallowed\"],[[65107,65107],\"disallowed\"],[[65108,65108],\"disallowed_STD3_mapped\",[59]],[[65109,65109],\"disallowed_STD3_mapped\",[58]],[[65110,65110],\"disallowed_STD3_mapped\",[63]],[[65111,65111],\"disallowed_STD3_mapped\",[33]],[[65112,65112],\"mapped\",[8212]],[[65113,65113],\"disallowed_STD3_mapped\",[40]],[[65114,65114],\"disallowed_STD3_mapped\",[41]],[[65115,65115],\"disallowed_STD3_mapped\",[123]],[[65116,65116],\"disallowed_STD3_mapped\",[125]],[[65117,65117],\"mapped\",[12308]],[[65118,65118],\"mapped\",[12309]],[[65119,65119],\"disallowed_STD3_mapped\",[35]],[[65120,65120],\"disallowed_STD3_mapped\",[38]],[[65121,65121],\"disallowed_STD3_mapped\",[42]],[[65122,65122],\"disallowed_STD3_mapped\",[43]],[[65123,65123],\"mapped\",[45]],[[65124,65124],\"disallowed_STD3_mapped\",[60]],[[65125,65125],\"disallowed_STD3_mapped\",[62]],[[65126,65126],\"disallowed_STD3_mapped\",[61]],[[65127,65127],\"disallowed\"],[[65128,65128],\"disallowed_STD3_mapped\",[92]],[[65129,65129],\"disallowed_STD3_mapped\",[36]],[[65130,65130],\"disallowed_STD3_mapped\",[37]],[[65131,65131],\"disallowed_STD3_mapped\",[64]],[[65132,65135],\"disallowed\"],[[65136,65136],\"disallowed_STD3_mapped\",[32,1611]],[[65137,65137],\"mapped\",[1600,1611]],[[65138,65138],\"disallowed_STD3_mapped\",[32,1612]],[[65139,65139],\"valid\"],[[65140,65140],\"disallowed_STD3_mapped\",[32,1613]],[[65141,65141],\"disallowed\"],[[65142,65142],\"disallowed_STD3_mapped\",[32,1614]],[[65143,65143],\"mapped\",[1600,1614]],[[65144,65144],\"disallowed_STD3_mapped\",[32,1615]],[[65145,65145],\"mapped\",[1600,1615]],[[65146,65146],\"disallowed_STD3_mapped\",[32,1616]],[[65147,65147],\"mapped\",[1600,1616]],[[65148,65148],\"disallowed_STD3_mapped\",[32,1617]],[[65149,65149],\"mapped\",[1600,1617]],[[65150,65150],\"disallowed_STD3_mapped\",[32,1618]],[[65151,65151],\"mapped\",[1600,1618]],[[65152,65152],\"mapped\",[1569]],[[65153,65154],\"mapped\",[1570]],[[65155,65156],\"mapped\",[1571]],[[65157,65158],\"mapped\",[1572]],[[65159,65160],\"mapped\",[1573]],[[65161,65164],\"mapped\",[1574]],[[65165,65166],\"mapped\",[1575]],[[65167,65170],\"mapped\",[1576]],[[65171,65172],\"mapped\",[1577]],[[65173,65176],\"mapped\",[1578]],[[65177,65180],\"mapped\",[1579]],[[65181,65184],\"mapped\",[1580]],[[65185,65188],\"mapped\",[1581]],[[65189,65192],\"mapped\",[1582]],[[65193,65194],\"mapped\",[1583]],[[65195,65196],\"mapped\",[1584]],[[65197,65198],\"mapped\",[1585]],[[65199,65200],\"mapped\",[1586]],[[65201,65204],\"mapped\",[1587]],[[65205,65208],\"mapped\",[1588]],[[65209,65212],\"mapped\",[1589]],[[65213,65216],\"mapped\",[1590]],[[65217,65220],\"mapped\",[1591]],[[65221,65224],\"mapped\",[1592]],[[65225,65228],\"mapped\",[1593]],[[65229,65232],\"mapped\",[1594]],[[65233,65236],\"mapped\",[1601]],[[65237,65240],\"mapped\",[1602]],[[65241,65244],\"mapped\",[1603]],[[65245,65248],\"mapped\",[1604]],[[65249,65252],\"mapped\",[1605]],[[65253,65256],\"mapped\",[1606]],[[65257,65260],\"mapped\",[1607]],[[65261,65262],\"mapped\",[1608]],[[65263,65264],\"mapped\",[1609]],[[65265,65268],\"mapped\",[1610]],[[65269,65270],\"mapped\",[1604,1570]],[[65271,65272],\"mapped\",[1604,1571]],[[65273,65274],\"mapped\",[1604,1573]],[[65275,65276],\"mapped\",[1604,1575]],[[65277,65278],\"disallowed\"],[[65279,65279],\"ignored\"],[[65280,65280],\"disallowed\"],[[65281,65281],\"disallowed_STD3_mapped\",[33]],[[65282,65282],\"disallowed_STD3_mapped\",[34]],[[65283,65283],\"disallowed_STD3_mapped\",[35]],[[65284,65284],\"disallowed_STD3_mapped\",[36]],[[65285,65285],\"disallowed_STD3_mapped\",[37]],[[65286,65286],\"disallowed_STD3_mapped\",[38]],[[65287,65287],\"disallowed_STD3_mapped\",[39]],[[65288,65288],\"disallowed_STD3_mapped\",[40]],[[65289,65289],\"disallowed_STD3_mapped\",[41]],[[65290,65290],\"disallowed_STD3_mapped\",[42]],[[65291,65291],\"disallowed_STD3_mapped\",[43]],[[65292,65292],\"disallowed_STD3_mapped\",[44]],[[65293,65293],\"mapped\",[45]],[[65294,65294],\"mapped\",[46]],[[65295,65295],\"disallowed_STD3_mapped\",[47]],[[65296,65296],\"mapped\",[48]],[[65297,65297],\"mapped\",[49]],[[65298,65298],\"mapped\",[50]],[[65299,65299],\"mapped\",[51]],[[65300,65300],\"mapped\",[52]],[[65301,65301],\"mapped\",[53]],[[65302,65302],\"mapped\",[54]],[[65303,65303],\"mapped\",[55]],[[65304,65304],\"mapped\",[56]],[[65305,65305],\"mapped\",[57]],[[65306,65306],\"disallowed_STD3_mapped\",[58]],[[65307,65307],\"disallowed_STD3_mapped\",[59]],[[65308,65308],\"disallowed_STD3_mapped\",[60]],[[65309,65309],\"disallowed_STD3_mapped\",[61]],[[65310,65310],\"disallowed_STD3_mapped\",[62]],[[65311,65311],\"disallowed_STD3_mapped\",[63]],[[65312,65312],\"disallowed_STD3_mapped\",[64]],[[65313,65313],\"mapped\",[97]],[[65314,65314],\"mapped\",[98]],[[65315,65315],\"mapped\",[99]],[[65316,65316],\"mapped\",[100]],[[65317,65317],\"mapped\",[101]],[[65318,65318],\"mapped\",[102]],[[65319,65319],\"mapped\",[103]],[[65320,65320],\"mapped\",[104]],[[65321,65321],\"mapped\",[105]],[[65322,65322],\"mapped\",[106]],[[65323,65323],\"mapped\",[107]],[[65324,65324],\"mapped\",[108]],[[65325,65325],\"mapped\",[109]],[[65326,65326],\"mapped\",[110]],[[65327,65327],\"mapped\",[111]],[[65328,65328],\"mapped\",[112]],[[65329,65329],\"mapped\",[113]],[[65330,65330],\"mapped\",[114]],[[65331,65331],\"mapped\",[115]],[[65332,65332],\"mapped\",[116]],[[65333,65333],\"mapped\",[117]],[[65334,65334],\"mapped\",[118]],[[65335,65335],\"mapped\",[119]],[[65336,65336],\"mapped\",[120]],[[65337,65337],\"mapped\",[121]],[[65338,65338],\"mapped\",[122]],[[65339,65339],\"disallowed_STD3_mapped\",[91]],[[65340,65340],\"disallowed_STD3_mapped\",[92]],[[65341,65341],\"disallowed_STD3_mapped\",[93]],[[65342,65342],\"disallowed_STD3_mapped\",[94]],[[65343,65343],\"disallowed_STD3_mapped\",[95]],[[65344,65344],\"disallowed_STD3_mapped\",[96]],[[65345,65345],\"mapped\",[97]],[[65346,65346],\"mapped\",[98]],[[65347,65347],\"mapped\",[99]],[[65348,65348],\"mapped\",[100]],[[65349,65349],\"mapped\",[101]],[[65350,65350],\"mapped\",[102]],[[65351,65351],\"mapped\",[103]],[[65352,65352],\"mapped\",[104]],[[65353,65353],\"mapped\",[105]],[[65354,65354],\"mapped\",[106]],[[65355,65355],\"mapped\",[107]],[[65356,65356],\"mapped\",[108]],[[65357,65357],\"mapped\",[109]],[[65358,65358],\"mapped\",[110]],[[65359,65359],\"mapped\",[111]],[[65360,65360],\"mapped\",[112]],[[65361,65361],\"mapped\",[113]],[[65362,65362],\"mapped\",[114]],[[65363,65363],\"mapped\",[115]],[[65364,65364],\"mapped\",[116]],[[65365,65365],\"mapped\",[117]],[[65366,65366],\"mapped\",[118]],[[65367,65367],\"mapped\",[119]],[[65368,65368],\"mapped\",[120]],[[65369,65369],\"mapped\",[121]],[[65370,65370],\"mapped\",[122]],[[65371,65371],\"disallowed_STD3_mapped\",[123]],[[65372,65372],\"disallowed_STD3_mapped\",[124]],[[65373,65373],\"disallowed_STD3_mapped\",[125]],[[65374,65374],\"disallowed_STD3_mapped\",[126]],[[65375,65375],\"mapped\",[10629]],[[65376,65376],\"mapped\",[10630]],[[65377,65377],\"mapped\",[46]],[[65378,65378],\"mapped\",[12300]],[[65379,65379],\"mapped\",[12301]],[[65380,65380],\"mapped\",[12289]],[[65381,65381],\"mapped\",[12539]],[[65382,65382],\"mapped\",[12530]],[[65383,65383],\"mapped\",[12449]],[[65384,65384],\"mapped\",[12451]],[[65385,65385],\"mapped\",[12453]],[[65386,65386],\"mapped\",[12455]],[[65387,65387],\"mapped\",[12457]],[[65388,65388],\"mapped\",[12515]],[[65389,65389],\"mapped\",[12517]],[[65390,65390],\"mapped\",[12519]],[[65391,65391],\"mapped\",[12483]],[[65392,65392],\"mapped\",[12540]],[[65393,65393],\"mapped\",[12450]],[[65394,65394],\"mapped\",[12452]],[[65395,65395],\"mapped\",[12454]],[[65396,65396],\"mapped\",[12456]],[[65397,65397],\"mapped\",[12458]],[[65398,65398],\"mapped\",[12459]],[[65399,65399],\"mapped\",[12461]],[[65400,65400],\"mapped\",[12463]],[[65401,65401],\"mapped\",[12465]],[[65402,65402],\"mapped\",[12467]],[[65403,65403],\"mapped\",[12469]],[[65404,65404],\"mapped\",[12471]],[[65405,65405],\"mapped\",[12473]],[[65406,65406],\"mapped\",[12475]],[[65407,65407],\"mapped\",[12477]],[[65408,65408],\"mapped\",[12479]],[[65409,65409],\"mapped\",[12481]],[[65410,65410],\"mapped\",[12484]],[[65411,65411],\"mapped\",[12486]],[[65412,65412],\"mapped\",[12488]],[[65413,65413],\"mapped\",[12490]],[[65414,65414],\"mapped\",[12491]],[[65415,65415],\"mapped\",[12492]],[[65416,65416],\"mapped\",[12493]],[[65417,65417],\"mapped\",[12494]],[[65418,65418],\"mapped\",[12495]],[[65419,65419],\"mapped\",[12498]],[[65420,65420],\"mapped\",[12501]],[[65421,65421],\"mapped\",[12504]],[[65422,65422],\"mapped\",[12507]],[[65423,65423],\"mapped\",[12510]],[[65424,65424],\"mapped\",[12511]],[[65425,65425],\"mapped\",[12512]],[[65426,65426],\"mapped\",[12513]],[[65427,65427],\"mapped\",[12514]],[[65428,65428],\"mapped\",[12516]],[[65429,65429],\"mapped\",[12518]],[[65430,65430],\"mapped\",[12520]],[[65431,65431],\"mapped\",[12521]],[[65432,65432],\"mapped\",[12522]],[[65433,65433],\"mapped\",[12523]],[[65434,65434],\"mapped\",[12524]],[[65435,65435],\"mapped\",[12525]],[[65436,65436],\"mapped\",[12527]],[[65437,65437],\"mapped\",[12531]],[[65438,65438],\"mapped\",[12441]],[[65439,65439],\"mapped\",[12442]],[[65440,65440],\"disallowed\"],[[65441,65441],\"mapped\",[4352]],[[65442,65442],\"mapped\",[4353]],[[65443,65443],\"mapped\",[4522]],[[65444,65444],\"mapped\",[4354]],[[65445,65445],\"mapped\",[4524]],[[65446,65446],\"mapped\",[4525]],[[65447,65447],\"mapped\",[4355]],[[65448,65448],\"mapped\",[4356]],[[65449,65449],\"mapped\",[4357]],[[65450,65450],\"mapped\",[4528]],[[65451,65451],\"mapped\",[4529]],[[65452,65452],\"mapped\",[4530]],[[65453,65453],\"mapped\",[4531]],[[65454,65454],\"mapped\",[4532]],[[65455,65455],\"mapped\",[4533]],[[65456,65456],\"mapped\",[4378]],[[65457,65457],\"mapped\",[4358]],[[65458,65458],\"mapped\",[4359]],[[65459,65459],\"mapped\",[4360]],[[65460,65460],\"mapped\",[4385]],[[65461,65461],\"mapped\",[4361]],[[65462,65462],\"mapped\",[4362]],[[65463,65463],\"mapped\",[4363]],[[65464,65464],\"mapped\",[4364]],[[65465,65465],\"mapped\",[4365]],[[65466,65466],\"mapped\",[4366]],[[65467,65467],\"mapped\",[4367]],[[65468,65468],\"mapped\",[4368]],[[65469,65469],\"mapped\",[4369]],[[65470,65470],\"mapped\",[4370]],[[65471,65473],\"disallowed\"],[[65474,65474],\"mapped\",[4449]],[[65475,65475],\"mapped\",[4450]],[[65476,65476],\"mapped\",[4451]],[[65477,65477],\"mapped\",[4452]],[[65478,65478],\"mapped\",[4453]],[[65479,65479],\"mapped\",[4454]],[[65480,65481],\"disallowed\"],[[65482,65482],\"mapped\",[4455]],[[65483,65483],\"mapped\",[4456]],[[65484,65484],\"mapped\",[4457]],[[65485,65485],\"mapped\",[4458]],[[65486,65486],\"mapped\",[4459]],[[65487,65487],\"mapped\",[4460]],[[65488,65489],\"disallowed\"],[[65490,65490],\"mapped\",[4461]],[[65491,65491],\"mapped\",[4462]],[[65492,65492],\"mapped\",[4463]],[[65493,65493],\"mapped\",[4464]],[[65494,65494],\"mapped\",[4465]],[[65495,65495],\"mapped\",[4466]],[[65496,65497],\"disallowed\"],[[65498,65498],\"mapped\",[4467]],[[65499,65499],\"mapped\",[4468]],[[65500,65500],\"mapped\",[4469]],[[65501,65503],\"disallowed\"],[[65504,65504],\"mapped\",[162]],[[65505,65505],\"mapped\",[163]],[[65506,65506],\"mapped\",[172]],[[65507,65507],\"disallowed_STD3_mapped\",[32,772]],[[65508,65508],\"mapped\",[166]],[[65509,65509],\"mapped\",[165]],[[65510,65510],\"mapped\",[8361]],[[65511,65511],\"disallowed\"],[[65512,65512],\"mapped\",[9474]],[[65513,65513],\"mapped\",[8592]],[[65514,65514],\"mapped\",[8593]],[[65515,65515],\"mapped\",[8594]],[[65516,65516],\"mapped\",[8595]],[[65517,65517],\"mapped\",[9632]],[[65518,65518],\"mapped\",[9675]],[[65519,65528],\"disallowed\"],[[65529,65531],\"disallowed\"],[[65532,65532],\"disallowed\"],[[65533,65533],\"disallowed\"],[[65534,65535],\"disallowed\"],[[65536,65547],\"valid\"],[[65548,65548],\"disallowed\"],[[65549,65574],\"valid\"],[[65575,65575],\"disallowed\"],[[65576,65594],\"valid\"],[[65595,65595],\"disallowed\"],[[65596,65597],\"valid\"],[[65598,65598],\"disallowed\"],[[65599,65613],\"valid\"],[[65614,65615],\"disallowed\"],[[65616,65629],\"valid\"],[[65630,65663],\"disallowed\"],[[65664,65786],\"valid\"],[[65787,65791],\"disallowed\"],[[65792,65794],\"valid\",[],\"NV8\"],[[65795,65798],\"disallowed\"],[[65799,65843],\"valid\",[],\"NV8\"],[[65844,65846],\"disallowed\"],[[65847,65855],\"valid\",[],\"NV8\"],[[65856,65930],\"valid\",[],\"NV8\"],[[65931,65932],\"valid\",[],\"NV8\"],[[65933,65935],\"disallowed\"],[[65936,65947],\"valid\",[],\"NV8\"],[[65948,65951],\"disallowed\"],[[65952,65952],\"valid\",[],\"NV8\"],[[65953,65999],\"disallowed\"],[[66000,66044],\"valid\",[],\"NV8\"],[[66045,66045],\"valid\"],[[66046,66175],\"disallowed\"],[[66176,66204],\"valid\"],[[66205,66207],\"disallowed\"],[[66208,66256],\"valid\"],[[66257,66271],\"disallowed\"],[[66272,66272],\"valid\"],[[66273,66299],\"valid\",[],\"NV8\"],[[66300,66303],\"disallowed\"],[[66304,66334],\"valid\"],[[66335,66335],\"valid\"],[[66336,66339],\"valid\",[],\"NV8\"],[[66340,66351],\"disallowed\"],[[66352,66368],\"valid\"],[[66369,66369],\"valid\",[],\"NV8\"],[[66370,66377],\"valid\"],[[66378,66378],\"valid\",[],\"NV8\"],[[66379,66383],\"disallowed\"],[[66384,66426],\"valid\"],[[66427,66431],\"disallowed\"],[[66432,66461],\"valid\"],[[66462,66462],\"disallowed\"],[[66463,66463],\"valid\",[],\"NV8\"],[[66464,66499],\"valid\"],[[66500,66503],\"disallowed\"],[[66504,66511],\"valid\"],[[66512,66517],\"valid\",[],\"NV8\"],[[66518,66559],\"disallowed\"],[[66560,66560],\"mapped\",[66600]],[[66561,66561],\"mapped\",[66601]],[[66562,66562],\"mapped\",[66602]],[[66563,66563],\"mapped\",[66603]],[[66564,66564],\"mapped\",[66604]],[[66565,66565],\"mapped\",[66605]],[[66566,66566],\"mapped\",[66606]],[[66567,66567],\"mapped\",[66607]],[[66568,66568],\"mapped\",[66608]],[[66569,66569],\"mapped\",[66609]],[[66570,66570],\"mapped\",[66610]],[[66571,66571],\"mapped\",[66611]],[[66572,66572],\"mapped\",[66612]],[[66573,66573],\"mapped\",[66613]],[[66574,66574],\"mapped\",[66614]],[[66575,66575],\"mapped\",[66615]],[[66576,66576],\"mapped\",[66616]],[[66577,66577],\"mapped\",[66617]],[[66578,66578],\"mapped\",[66618]],[[66579,66579],\"mapped\",[66619]],[[66580,66580],\"mapped\",[66620]],[[66581,66581],\"mapped\",[66621]],[[66582,66582],\"mapped\",[66622]],[[66583,66583],\"mapped\",[66623]],[[66584,66584],\"mapped\",[66624]],[[66585,66585],\"mapped\",[66625]],[[66586,66586],\"mapped\",[66626]],[[66587,66587],\"mapped\",[66627]],[[66588,66588],\"mapped\",[66628]],[[66589,66589],\"mapped\",[66629]],[[66590,66590],\"mapped\",[66630]],[[66591,66591],\"mapped\",[66631]],[[66592,66592],\"mapped\",[66632]],[[66593,66593],\"mapped\",[66633]],[[66594,66594],\"mapped\",[66634]],[[66595,66595],\"mapped\",[66635]],[[66596,66596],\"mapped\",[66636]],[[66597,66597],\"mapped\",[66637]],[[66598,66598],\"mapped\",[66638]],[[66599,66599],\"mapped\",[66639]],[[66600,66637],\"valid\"],[[66638,66717],\"valid\"],[[66718,66719],\"disallowed\"],[[66720,66729],\"valid\"],[[66730,66815],\"disallowed\"],[[66816,66855],\"valid\"],[[66856,66863],\"disallowed\"],[[66864,66915],\"valid\"],[[66916,66926],\"disallowed\"],[[66927,66927],\"valid\",[],\"NV8\"],[[66928,67071],\"disallowed\"],[[67072,67382],\"valid\"],[[67383,67391],\"disallowed\"],[[67392,67413],\"valid\"],[[67414,67423],\"disallowed\"],[[67424,67431],\"valid\"],[[67432,67583],\"disallowed\"],[[67584,67589],\"valid\"],[[67590,67591],\"disallowed\"],[[67592,67592],\"valid\"],[[67593,67593],\"disallowed\"],[[67594,67637],\"valid\"],[[67638,67638],\"disallowed\"],[[67639,67640],\"valid\"],[[67641,67643],\"disallowed\"],[[67644,67644],\"valid\"],[[67645,67646],\"disallowed\"],[[67647,67647],\"valid\"],[[67648,67669],\"valid\"],[[67670,67670],\"disallowed\"],[[67671,67679],\"valid\",[],\"NV8\"],[[67680,67702],\"valid\"],[[67703,67711],\"valid\",[],\"NV8\"],[[67712,67742],\"valid\"],[[67743,67750],\"disallowed\"],[[67751,67759],\"valid\",[],\"NV8\"],[[67760,67807],\"disallowed\"],[[67808,67826],\"valid\"],[[67827,67827],\"disallowed\"],[[67828,67829],\"valid\"],[[67830,67834],\"disallowed\"],[[67835,67839],\"valid\",[],\"NV8\"],[[67840,67861],\"valid\"],[[67862,67865],\"valid\",[],\"NV8\"],[[67866,67867],\"valid\",[],\"NV8\"],[[67868,67870],\"disallowed\"],[[67871,67871],\"valid\",[],\"NV8\"],[[67872,67897],\"valid\"],[[67898,67902],\"disallowed\"],[[67903,67903],\"valid\",[],\"NV8\"],[[67904,67967],\"disallowed\"],[[67968,68023],\"valid\"],[[68024,68027],\"disallowed\"],[[68028,68029],\"valid\",[],\"NV8\"],[[68030,68031],\"valid\"],[[68032,68047],\"valid\",[],\"NV8\"],[[68048,68049],\"disallowed\"],[[68050,68095],\"valid\",[],\"NV8\"],[[68096,68099],\"valid\"],[[68100,68100],\"disallowed\"],[[68101,68102],\"valid\"],[[68103,68107],\"disallowed\"],[[68108,68115],\"valid\"],[[68116,68116],\"disallowed\"],[[68117,68119],\"valid\"],[[68120,68120],\"disallowed\"],[[68121,68147],\"valid\"],[[68148,68151],\"disallowed\"],[[68152,68154],\"valid\"],[[68155,68158],\"disallowed\"],[[68159,68159],\"valid\"],[[68160,68167],\"valid\",[],\"NV8\"],[[68168,68175],\"disallowed\"],[[68176,68184],\"valid\",[],\"NV8\"],[[68185,68191],\"disallowed\"],[[68192,68220],\"valid\"],[[68221,68223],\"valid\",[],\"NV8\"],[[68224,68252],\"valid\"],[[68253,68255],\"valid\",[],\"NV8\"],[[68256,68287],\"disallowed\"],[[68288,68295],\"valid\"],[[68296,68296],\"valid\",[],\"NV8\"],[[68297,68326],\"valid\"],[[68327,68330],\"disallowed\"],[[68331,68342],\"valid\",[],\"NV8\"],[[68343,68351],\"disallowed\"],[[68352,68405],\"valid\"],[[68406,68408],\"disallowed\"],[[68409,68415],\"valid\",[],\"NV8\"],[[68416,68437],\"valid\"],[[68438,68439],\"disallowed\"],[[68440,68447],\"valid\",[],\"NV8\"],[[68448,68466],\"valid\"],[[68467,68471],\"disallowed\"],[[68472,68479],\"valid\",[],\"NV8\"],[[68480,68497],\"valid\"],[[68498,68504],\"disallowed\"],[[68505,68508],\"valid\",[],\"NV8\"],[[68509,68520],\"disallowed\"],[[68521,68527],\"valid\",[],\"NV8\"],[[68528,68607],\"disallowed\"],[[68608,68680],\"valid\"],[[68681,68735],\"disallowed\"],[[68736,68736],\"mapped\",[68800]],[[68737,68737],\"mapped\",[68801]],[[68738,68738],\"mapped\",[68802]],[[68739,68739],\"mapped\",[68803]],[[68740,68740],\"mapped\",[68804]],[[68741,68741],\"mapped\",[68805]],[[68742,68742],\"mapped\",[68806]],[[68743,68743],\"mapped\",[68807]],[[68744,68744],\"mapped\",[68808]],[[68745,68745],\"mapped\",[68809]],[[68746,68746],\"mapped\",[68810]],[[68747,68747],\"mapped\",[68811]],[[68748,68748],\"mapped\",[68812]],[[68749,68749],\"mapped\",[68813]],[[68750,68750],\"mapped\",[68814]],[[68751,68751],\"mapped\",[68815]],[[68752,68752],\"mapped\",[68816]],[[68753,68753],\"mapped\",[68817]],[[68754,68754],\"mapped\",[68818]],[[68755,68755],\"mapped\",[68819]],[[68756,68756],\"mapped\",[68820]],[[68757,68757],\"mapped\",[68821]],[[68758,68758],\"mapped\",[68822]],[[68759,68759],\"mapped\",[68823]],[[68760,68760],\"mapped\",[68824]],[[68761,68761],\"mapped\",[68825]],[[68762,68762],\"mapped\",[68826]],[[68763,68763],\"mapped\",[68827]],[[68764,68764],\"mapped\",[68828]],[[68765,68765],\"mapped\",[68829]],[[68766,68766],\"mapped\",[68830]],[[68767,68767],\"mapped\",[68831]],[[68768,68768],\"mapped\",[68832]],[[68769,68769],\"mapped\",[68833]],[[68770,68770],\"mapped\",[68834]],[[68771,68771],\"mapped\",[68835]],[[68772,68772],\"mapped\",[68836]],[[68773,68773],\"mapped\",[68837]],[[68774,68774],\"mapped\",[68838]],[[68775,68775],\"mapped\",[68839]],[[68776,68776],\"mapped\",[68840]],[[68777,68777],\"mapped\",[68841]],[[68778,68778],\"mapped\",[68842]],[[68779,68779],\"mapped\",[68843]],[[68780,68780],\"mapped\",[68844]],[[68781,68781],\"mapped\",[68845]],[[68782,68782],\"mapped\",[68846]],[[68783,68783],\"mapped\",[68847]],[[68784,68784],\"mapped\",[68848]],[[68785,68785],\"mapped\",[68849]],[[68786,68786],\"mapped\",[68850]],[[68787,68799],\"disallowed\"],[[68800,68850],\"valid\"],[[68851,68857],\"disallowed\"],[[68858,68863],\"valid\",[],\"NV8\"],[[68864,69215],\"disallowed\"],[[69216,69246],\"valid\",[],\"NV8\"],[[69247,69631],\"disallowed\"],[[69632,69702],\"valid\"],[[69703,69709],\"valid\",[],\"NV8\"],[[69710,69713],\"disallowed\"],[[69714,69733],\"valid\",[],\"NV8\"],[[69734,69743],\"valid\"],[[69744,69758],\"disallowed\"],[[69759,69759],\"valid\"],[[69760,69818],\"valid\"],[[69819,69820],\"valid\",[],\"NV8\"],[[69821,69821],\"disallowed\"],[[69822,69825],\"valid\",[],\"NV8\"],[[69826,69839],\"disallowed\"],[[69840,69864],\"valid\"],[[69865,69871],\"disallowed\"],[[69872,69881],\"valid\"],[[69882,69887],\"disallowed\"],[[69888,69940],\"valid\"],[[69941,69941],\"disallowed\"],[[69942,69951],\"valid\"],[[69952,69955],\"valid\",[],\"NV8\"],[[69956,69967],\"disallowed\"],[[69968,70003],\"valid\"],[[70004,70005],\"valid\",[],\"NV8\"],[[70006,70006],\"valid\"],[[70007,70015],\"disallowed\"],[[70016,70084],\"valid\"],[[70085,70088],\"valid\",[],\"NV8\"],[[70089,70089],\"valid\",[],\"NV8\"],[[70090,70092],\"valid\"],[[70093,70093],\"valid\",[],\"NV8\"],[[70094,70095],\"disallowed\"],[[70096,70105],\"valid\"],[[70106,70106],\"valid\"],[[70107,70107],\"valid\",[],\"NV8\"],[[70108,70108],\"valid\"],[[70109,70111],\"valid\",[],\"NV8\"],[[70112,70112],\"disallowed\"],[[70113,70132],\"valid\",[],\"NV8\"],[[70133,70143],\"disallowed\"],[[70144,70161],\"valid\"],[[70162,70162],\"disallowed\"],[[70163,70199],\"valid\"],[[70200,70205],\"valid\",[],\"NV8\"],[[70206,70271],\"disallowed\"],[[70272,70278],\"valid\"],[[70279,70279],\"disallowed\"],[[70280,70280],\"valid\"],[[70281,70281],\"disallowed\"],[[70282,70285],\"valid\"],[[70286,70286],\"disallowed\"],[[70287,70301],\"valid\"],[[70302,70302],\"disallowed\"],[[70303,70312],\"valid\"],[[70313,70313],\"valid\",[],\"NV8\"],[[70314,70319],\"disallowed\"],[[70320,70378],\"valid\"],[[70379,70383],\"disallowed\"],[[70384,70393],\"valid\"],[[70394,70399],\"disallowed\"],[[70400,70400],\"valid\"],[[70401,70403],\"valid\"],[[70404,70404],\"disallowed\"],[[70405,70412],\"valid\"],[[70413,70414],\"disallowed\"],[[70415,70416],\"valid\"],[[70417,70418],\"disallowed\"],[[70419,70440],\"valid\"],[[70441,70441],\"disallowed\"],[[70442,70448],\"valid\"],[[70449,70449],\"disallowed\"],[[70450,70451],\"valid\"],[[70452,70452],\"disallowed\"],[[70453,70457],\"valid\"],[[70458,70459],\"disallowed\"],[[70460,70468],\"valid\"],[[70469,70470],\"disallowed\"],[[70471,70472],\"valid\"],[[70473,70474],\"disallowed\"],[[70475,70477],\"valid\"],[[70478,70479],\"disallowed\"],[[70480,70480],\"valid\"],[[70481,70486],\"disallowed\"],[[70487,70487],\"valid\"],[[70488,70492],\"disallowed\"],[[70493,70499],\"valid\"],[[70500,70501],\"disallowed\"],[[70502,70508],\"valid\"],[[70509,70511],\"disallowed\"],[[70512,70516],\"valid\"],[[70517,70783],\"disallowed\"],[[70784,70853],\"valid\"],[[70854,70854],\"valid\",[],\"NV8\"],[[70855,70855],\"valid\"],[[70856,70863],\"disallowed\"],[[70864,70873],\"valid\"],[[70874,71039],\"disallowed\"],[[71040,71093],\"valid\"],[[71094,71095],\"disallowed\"],[[71096,71104],\"valid\"],[[71105,71113],\"valid\",[],\"NV8\"],[[71114,71127],\"valid\",[],\"NV8\"],[[71128,71133],\"valid\"],[[71134,71167],\"disallowed\"],[[71168,71232],\"valid\"],[[71233,71235],\"valid\",[],\"NV8\"],[[71236,71236],\"valid\"],[[71237,71247],\"disallowed\"],[[71248,71257],\"valid\"],[[71258,71295],\"disallowed\"],[[71296,71351],\"valid\"],[[71352,71359],\"disallowed\"],[[71360,71369],\"valid\"],[[71370,71423],\"disallowed\"],[[71424,71449],\"valid\"],[[71450,71452],\"disallowed\"],[[71453,71467],\"valid\"],[[71468,71471],\"disallowed\"],[[71472,71481],\"valid\"],[[71482,71487],\"valid\",[],\"NV8\"],[[71488,71839],\"disallowed\"],[[71840,71840],\"mapped\",[71872]],[[71841,71841],\"mapped\",[71873]],[[71842,71842],\"mapped\",[71874]],[[71843,71843],\"mapped\",[71875]],[[71844,71844],\"mapped\",[71876]],[[71845,71845],\"mapped\",[71877]],[[71846,71846],\"mapped\",[71878]],[[71847,71847],\"mapped\",[71879]],[[71848,71848],\"mapped\",[71880]],[[71849,71849],\"mapped\",[71881]],[[71850,71850],\"mapped\",[71882]],[[71851,71851],\"mapped\",[71883]],[[71852,71852],\"mapped\",[71884]],[[71853,71853],\"mapped\",[71885]],[[71854,71854],\"mapped\",[71886]],[[71855,71855],\"mapped\",[71887]],[[71856,71856],\"mapped\",[71888]],[[71857,71857],\"mapped\",[71889]],[[71858,71858],\"mapped\",[71890]],[[71859,71859],\"mapped\",[71891]],[[71860,71860],\"mapped\",[71892]],[[71861,71861],\"mapped\",[71893]],[[71862,71862],\"mapped\",[71894]],[[71863,71863],\"mapped\",[71895]],[[71864,71864],\"mapped\",[71896]],[[71865,71865],\"mapped\",[71897]],[[71866,71866],\"mapped\",[71898]],[[71867,71867],\"mapped\",[71899]],[[71868,71868],\"mapped\",[71900]],[[71869,71869],\"mapped\",[71901]],[[71870,71870],\"mapped\",[71902]],[[71871,71871],\"mapped\",[71903]],[[71872,71913],\"valid\"],[[71914,71922],\"valid\",[],\"NV8\"],[[71923,71934],\"disallowed\"],[[71935,71935],\"valid\"],[[71936,72383],\"disallowed\"],[[72384,72440],\"valid\"],[[72441,73727],\"disallowed\"],[[73728,74606],\"valid\"],[[74607,74648],\"valid\"],[[74649,74649],\"valid\"],[[74650,74751],\"disallowed\"],[[74752,74850],\"valid\",[],\"NV8\"],[[74851,74862],\"valid\",[],\"NV8\"],[[74863,74863],\"disallowed\"],[[74864,74867],\"valid\",[],\"NV8\"],[[74868,74868],\"valid\",[],\"NV8\"],[[74869,74879],\"disallowed\"],[[74880,75075],\"valid\"],[[75076,77823],\"disallowed\"],[[77824,78894],\"valid\"],[[78895,82943],\"disallowed\"],[[82944,83526],\"valid\"],[[83527,92159],\"disallowed\"],[[92160,92728],\"valid\"],[[92729,92735],\"disallowed\"],[[92736,92766],\"valid\"],[[92767,92767],\"disallowed\"],[[92768,92777],\"valid\"],[[92778,92781],\"disallowed\"],[[92782,92783],\"valid\",[],\"NV8\"],[[92784,92879],\"disallowed\"],[[92880,92909],\"valid\"],[[92910,92911],\"disallowed\"],[[92912,92916],\"valid\"],[[92917,92917],\"valid\",[],\"NV8\"],[[92918,92927],\"disallowed\"],[[92928,92982],\"valid\"],[[92983,92991],\"valid\",[],\"NV8\"],[[92992,92995],\"valid\"],[[92996,92997],\"valid\",[],\"NV8\"],[[92998,93007],\"disallowed\"],[[93008,93017],\"valid\"],[[93018,93018],\"disallowed\"],[[93019,93025],\"valid\",[],\"NV8\"],[[93026,93026],\"disallowed\"],[[93027,93047],\"valid\"],[[93048,93052],\"disallowed\"],[[93053,93071],\"valid\"],[[93072,93951],\"disallowed\"],[[93952,94020],\"valid\"],[[94021,94031],\"disallowed\"],[[94032,94078],\"valid\"],[[94079,94094],\"disallowed\"],[[94095,94111],\"valid\"],[[94112,110591],\"disallowed\"],[[110592,110593],\"valid\"],[[110594,113663],\"disallowed\"],[[113664,113770],\"valid\"],[[113771,113775],\"disallowed\"],[[113776,113788],\"valid\"],[[113789,113791],\"disallowed\"],[[113792,113800],\"valid\"],[[113801,113807],\"disallowed\"],[[113808,113817],\"valid\"],[[113818,113819],\"disallowed\"],[[113820,113820],\"valid\",[],\"NV8\"],[[113821,113822],\"valid\"],[[113823,113823],\"valid\",[],\"NV8\"],[[113824,113827],\"ignored\"],[[113828,118783],\"disallowed\"],[[118784,119029],\"valid\",[],\"NV8\"],[[119030,119039],\"disallowed\"],[[119040,119078],\"valid\",[],\"NV8\"],[[119079,119080],\"disallowed\"],[[119081,119081],\"valid\",[],\"NV8\"],[[119082,119133],\"valid\",[],\"NV8\"],[[119134,119134],\"mapped\",[119127,119141]],[[119135,119135],\"mapped\",[119128,119141]],[[119136,119136],\"mapped\",[119128,119141,119150]],[[119137,119137],\"mapped\",[119128,119141,119151]],[[119138,119138],\"mapped\",[119128,119141,119152]],[[119139,119139],\"mapped\",[119128,119141,119153]],[[119140,119140],\"mapped\",[119128,119141,119154]],[[119141,119154],\"valid\",[],\"NV8\"],[[119155,119162],\"disallowed\"],[[119163,119226],\"valid\",[],\"NV8\"],[[119227,119227],\"mapped\",[119225,119141]],[[119228,119228],\"mapped\",[119226,119141]],[[119229,119229],\"mapped\",[119225,119141,119150]],[[119230,119230],\"mapped\",[119226,119141,119150]],[[119231,119231],\"mapped\",[119225,119141,119151]],[[119232,119232],\"mapped\",[119226,119141,119151]],[[119233,119261],\"valid\",[],\"NV8\"],[[119262,119272],\"valid\",[],\"NV8\"],[[119273,119295],\"disallowed\"],[[119296,119365],\"valid\",[],\"NV8\"],[[119366,119551],\"disallowed\"],[[119552,119638],\"valid\",[],\"NV8\"],[[119639,119647],\"disallowed\"],[[119648,119665],\"valid\",[],\"NV8\"],[[119666,119807],\"disallowed\"],[[119808,119808],\"mapped\",[97]],[[119809,119809],\"mapped\",[98]],[[119810,119810],\"mapped\",[99]],[[119811,119811],\"mapped\",[100]],[[119812,119812],\"mapped\",[101]],[[119813,119813],\"mapped\",[102]],[[119814,119814],\"mapped\",[103]],[[119815,119815],\"mapped\",[104]],[[119816,119816],\"mapped\",[105]],[[119817,119817],\"mapped\",[106]],[[119818,119818],\"mapped\",[107]],[[119819,119819],\"mapped\",[108]],[[119820,119820],\"mapped\",[109]],[[119821,119821],\"mapped\",[110]],[[119822,119822],\"mapped\",[111]],[[119823,119823],\"mapped\",[112]],[[119824,119824],\"mapped\",[113]],[[119825,119825],\"mapped\",[114]],[[119826,119826],\"mapped\",[115]],[[119827,119827],\"mapped\",[116]],[[119828,119828],\"mapped\",[117]],[[119829,119829],\"mapped\",[118]],[[119830,119830],\"mapped\",[119]],[[119831,119831],\"mapped\",[120]],[[119832,119832],\"mapped\",[121]],[[119833,119833],\"mapped\",[122]],[[119834,119834],\"mapped\",[97]],[[119835,119835],\"mapped\",[98]],[[119836,119836],\"mapped\",[99]],[[119837,119837],\"mapped\",[100]],[[119838,119838],\"mapped\",[101]],[[119839,119839],\"mapped\",[102]],[[119840,119840],\"mapped\",[103]],[[119841,119841],\"mapped\",[104]],[[119842,119842],\"mapped\",[105]],[[119843,119843],\"mapped\",[106]],[[119844,119844],\"mapped\",[107]],[[119845,119845],\"mapped\",[108]],[[119846,119846],\"mapped\",[109]],[[119847,119847],\"mapped\",[110]],[[119848,119848],\"mapped\",[111]],[[119849,119849],\"mapped\",[112]],[[119850,119850],\"mapped\",[113]],[[119851,119851],\"mapped\",[114]],[[119852,119852],\"mapped\",[115]],[[119853,119853],\"mapped\",[116]],[[119854,119854],\"mapped\",[117]],[[119855,119855],\"mapped\",[118]],[[119856,119856],\"mapped\",[119]],[[119857,119857],\"mapped\",[120]],[[119858,119858],\"mapped\",[121]],[[119859,119859],\"mapped\",[122]],[[119860,119860],\"mapped\",[97]],[[119861,119861],\"mapped\",[98]],[[119862,119862],\"mapped\",[99]],[[119863,119863],\"mapped\",[100]],[[119864,119864],\"mapped\",[101]],[[119865,119865],\"mapped\",[102]],[[119866,119866],\"mapped\",[103]],[[119867,119867],\"mapped\",[104]],[[119868,119868],\"mapped\",[105]],[[119869,119869],\"mapped\",[106]],[[119870,119870],\"mapped\",[107]],[[119871,119871],\"mapped\",[108]],[[119872,119872],\"mapped\",[109]],[[119873,119873],\"mapped\",[110]],[[119874,119874],\"mapped\",[111]],[[119875,119875],\"mapped\",[112]],[[119876,119876],\"mapped\",[113]],[[119877,119877],\"mapped\",[114]],[[119878,119878],\"mapped\",[115]],[[119879,119879],\"mapped\",[116]],[[119880,119880],\"mapped\",[117]],[[119881,119881],\"mapped\",[118]],[[119882,119882],\"mapped\",[119]],[[119883,119883],\"mapped\",[120]],[[119884,119884],\"mapped\",[121]],[[119885,119885],\"mapped\",[122]],[[119886,119886],\"mapped\",[97]],[[119887,119887],\"mapped\",[98]],[[119888,119888],\"mapped\",[99]],[[119889,119889],\"mapped\",[100]],[[119890,119890],\"mapped\",[101]],[[119891,119891],\"mapped\",[102]],[[119892,119892],\"mapped\",[103]],[[119893,119893],\"disallowed\"],[[119894,119894],\"mapped\",[105]],[[119895,119895],\"mapped\",[106]],[[119896,119896],\"mapped\",[107]],[[119897,119897],\"mapped\",[108]],[[119898,119898],\"mapped\",[109]],[[119899,119899],\"mapped\",[110]],[[119900,119900],\"mapped\",[111]],[[119901,119901],\"mapped\",[112]],[[119902,119902],\"mapped\",[113]],[[119903,119903],\"mapped\",[114]],[[119904,119904],\"mapped\",[115]],[[119905,119905],\"mapped\",[116]],[[119906,119906],\"mapped\",[117]],[[119907,119907],\"mapped\",[118]],[[119908,119908],\"mapped\",[119]],[[119909,119909],\"mapped\",[120]],[[119910,119910],\"mapped\",[121]],[[119911,119911],\"mapped\",[122]],[[119912,119912],\"mapped\",[97]],[[119913,119913],\"mapped\",[98]],[[119914,119914],\"mapped\",[99]],[[119915,119915],\"mapped\",[100]],[[119916,119916],\"mapped\",[101]],[[119917,119917],\"mapped\",[102]],[[119918,119918],\"mapped\",[103]],[[119919,119919],\"mapped\",[104]],[[119920,119920],\"mapped\",[105]],[[119921,119921],\"mapped\",[106]],[[119922,119922],\"mapped\",[107]],[[119923,119923],\"mapped\",[108]],[[119924,119924],\"mapped\",[109]],[[119925,119925],\"mapped\",[110]],[[119926,119926],\"mapped\",[111]],[[119927,119927],\"mapped\",[112]],[[119928,119928],\"mapped\",[113]],[[119929,119929],\"mapped\",[114]],[[119930,119930],\"mapped\",[115]],[[119931,119931],\"mapped\",[116]],[[119932,119932],\"mapped\",[117]],[[119933,119933],\"mapped\",[118]],[[119934,119934],\"mapped\",[119]],[[119935,119935],\"mapped\",[120]],[[119936,119936],\"mapped\",[121]],[[119937,119937],\"mapped\",[122]],[[119938,119938],\"mapped\",[97]],[[119939,119939],\"mapped\",[98]],[[119940,119940],\"mapped\",[99]],[[119941,119941],\"mapped\",[100]],[[119942,119942],\"mapped\",[101]],[[119943,119943],\"mapped\",[102]],[[119944,119944],\"mapped\",[103]],[[119945,119945],\"mapped\",[104]],[[119946,119946],\"mapped\",[105]],[[119947,119947],\"mapped\",[106]],[[119948,119948],\"mapped\",[107]],[[119949,119949],\"mapped\",[108]],[[119950,119950],\"mapped\",[109]],[[119951,119951],\"mapped\",[110]],[[119952,119952],\"mapped\",[111]],[[119953,119953],\"mapped\",[112]],[[119954,119954],\"mapped\",[113]],[[119955,119955],\"mapped\",[114]],[[119956,119956],\"mapped\",[115]],[[119957,119957],\"mapped\",[116]],[[119958,119958],\"mapped\",[117]],[[119959,119959],\"mapped\",[118]],[[119960,119960],\"mapped\",[119]],[[119961,119961],\"mapped\",[120]],[[119962,119962],\"mapped\",[121]],[[119963,119963],\"mapped\",[122]],[[119964,119964],\"mapped\",[97]],[[119965,119965],\"disallowed\"],[[119966,119966],\"mapped\",[99]],[[119967,119967],\"mapped\",[100]],[[119968,119969],\"disallowed\"],[[119970,119970],\"mapped\",[103]],[[119971,119972],\"disallowed\"],[[119973,119973],\"mapped\",[106]],[[119974,119974],\"mapped\",[107]],[[119975,119976],\"disallowed\"],[[119977,119977],\"mapped\",[110]],[[119978,119978],\"mapped\",[111]],[[119979,119979],\"mapped\",[112]],[[119980,119980],\"mapped\",[113]],[[119981,119981],\"disallowed\"],[[119982,119982],\"mapped\",[115]],[[119983,119983],\"mapped\",[116]],[[119984,119984],\"mapped\",[117]],[[119985,119985],\"mapped\",[118]],[[119986,119986],\"mapped\",[119]],[[119987,119987],\"mapped\",[120]],[[119988,119988],\"mapped\",[121]],[[119989,119989],\"mapped\",[122]],[[119990,119990],\"mapped\",[97]],[[119991,119991],\"mapped\",[98]],[[119992,119992],\"mapped\",[99]],[[119993,119993],\"mapped\",[100]],[[119994,119994],\"disallowed\"],[[119995,119995],\"mapped\",[102]],[[119996,119996],\"disallowed\"],[[119997,119997],\"mapped\",[104]],[[119998,119998],\"mapped\",[105]],[[119999,119999],\"mapped\",[106]],[[120000,120000],\"mapped\",[107]],[[120001,120001],\"mapped\",[108]],[[120002,120002],\"mapped\",[109]],[[120003,120003],\"mapped\",[110]],[[120004,120004],\"disallowed\"],[[120005,120005],\"mapped\",[112]],[[120006,120006],\"mapped\",[113]],[[120007,120007],\"mapped\",[114]],[[120008,120008],\"mapped\",[115]],[[120009,120009],\"mapped\",[116]],[[120010,120010],\"mapped\",[117]],[[120011,120011],\"mapped\",[118]],[[120012,120012],\"mapped\",[119]],[[120013,120013],\"mapped\",[120]],[[120014,120014],\"mapped\",[121]],[[120015,120015],\"mapped\",[122]],[[120016,120016],\"mapped\",[97]],[[120017,120017],\"mapped\",[98]],[[120018,120018],\"mapped\",[99]],[[120019,120019],\"mapped\",[100]],[[120020,120020],\"mapped\",[101]],[[120021,120021],\"mapped\",[102]],[[120022,120022],\"mapped\",[103]],[[120023,120023],\"mapped\",[104]],[[120024,120024],\"mapped\",[105]],[[120025,120025],\"mapped\",[106]],[[120026,120026],\"mapped\",[107]],[[120027,120027],\"mapped\",[108]],[[120028,120028],\"mapped\",[109]],[[120029,120029],\"mapped\",[110]],[[120030,120030],\"mapped\",[111]],[[120031,120031],\"mapped\",[112]],[[120032,120032],\"mapped\",[113]],[[120033,120033],\"mapped\",[114]],[[120034,120034],\"mapped\",[115]],[[120035,120035],\"mapped\",[116]],[[120036,120036],\"mapped\",[117]],[[120037,120037],\"mapped\",[118]],[[120038,120038],\"mapped\",[119]],[[120039,120039],\"mapped\",[120]],[[120040,120040],\"mapped\",[121]],[[120041,120041],\"mapped\",[122]],[[120042,120042],\"mapped\",[97]],[[120043,120043],\"mapped\",[98]],[[120044,120044],\"mapped\",[99]],[[120045,120045],\"mapped\",[100]],[[120046,120046],\"mapped\",[101]],[[120047,120047],\"mapped\",[102]],[[120048,120048],\"mapped\",[103]],[[120049,120049],\"mapped\",[104]],[[120050,120050],\"mapped\",[105]],[[120051,120051],\"mapped\",[106]],[[120052,120052],\"mapped\",[107]],[[120053,120053],\"mapped\",[108]],[[120054,120054],\"mapped\",[109]],[[120055,120055],\"mapped\",[110]],[[120056,120056],\"mapped\",[111]],[[120057,120057],\"mapped\",[112]],[[120058,120058],\"mapped\",[113]],[[120059,120059],\"mapped\",[114]],[[120060,120060],\"mapped\",[115]],[[120061,120061],\"mapped\",[116]],[[120062,120062],\"mapped\",[117]],[[120063,120063],\"mapped\",[118]],[[120064,120064],\"mapped\",[119]],[[120065,120065],\"mapped\",[120]],[[120066,120066],\"mapped\",[121]],[[120067,120067],\"mapped\",[122]],[[120068,120068],\"mapped\",[97]],[[120069,120069],\"mapped\",[98]],[[120070,120070],\"disallowed\"],[[120071,120071],\"mapped\",[100]],[[120072,120072],\"mapped\",[101]],[[120073,120073],\"mapped\",[102]],[[120074,120074],\"mapped\",[103]],[[120075,120076],\"disallowed\"],[[120077,120077],\"mapped\",[106]],[[120078,120078],\"mapped\",[107]],[[120079,120079],\"mapped\",[108]],[[120080,120080],\"mapped\",[109]],[[120081,120081],\"mapped\",[110]],[[120082,120082],\"mapped\",[111]],[[120083,120083],\"mapped\",[112]],[[120084,120084],\"mapped\",[113]],[[120085,120085],\"disallowed\"],[[120086,120086],\"mapped\",[115]],[[120087,120087],\"mapped\",[116]],[[120088,120088],\"mapped\",[117]],[[120089,120089],\"mapped\",[118]],[[120090,120090],\"mapped\",[119]],[[120091,120091],\"mapped\",[120]],[[120092,120092],\"mapped\",[121]],[[120093,120093],\"disallowed\"],[[120094,120094],\"mapped\",[97]],[[120095,120095],\"mapped\",[98]],[[120096,120096],\"mapped\",[99]],[[120097,120097],\"mapped\",[100]],[[120098,120098],\"mapped\",[101]],[[120099,120099],\"mapped\",[102]],[[120100,120100],\"mapped\",[103]],[[120101,120101],\"mapped\",[104]],[[120102,120102],\"mapped\",[105]],[[120103,120103],\"mapped\",[106]],[[120104,120104],\"mapped\",[107]],[[120105,120105],\"mapped\",[108]],[[120106,120106],\"mapped\",[109]],[[120107,120107],\"mapped\",[110]],[[120108,120108],\"mapped\",[111]],[[120109,120109],\"mapped\",[112]],[[120110,120110],\"mapped\",[113]],[[120111,120111],\"mapped\",[114]],[[120112,120112],\"mapped\",[115]],[[120113,120113],\"mapped\",[116]],[[120114,120114],\"mapped\",[117]],[[120115,120115],\"mapped\",[118]],[[120116,120116],\"mapped\",[119]],[[120117,120117],\"mapped\",[120]],[[120118,120118],\"mapped\",[121]],[[120119,120119],\"mapped\",[122]],[[120120,120120],\"mapped\",[97]],[[120121,120121],\"mapped\",[98]],[[120122,120122],\"disallowed\"],[[120123,120123],\"mapped\",[100]],[[120124,120124],\"mapped\",[101]],[[120125,120125],\"mapped\",[102]],[[120126,120126],\"mapped\",[103]],[[120127,120127],\"disallowed\"],[[120128,120128],\"mapped\",[105]],[[120129,120129],\"mapped\",[106]],[[120130,120130],\"mapped\",[107]],[[120131,120131],\"mapped\",[108]],[[120132,120132],\"mapped\",[109]],[[120133,120133],\"disallowed\"],[[120134,120134],\"mapped\",[111]],[[120135,120137],\"disallowed\"],[[120138,120138],\"mapped\",[115]],[[120139,120139],\"mapped\",[116]],[[120140,120140],\"mapped\",[117]],[[120141,120141],\"mapped\",[118]],[[120142,120142],\"mapped\",[119]],[[120143,120143],\"mapped\",[120]],[[120144,120144],\"mapped\",[121]],[[120145,120145],\"disallowed\"],[[120146,120146],\"mapped\",[97]],[[120147,120147],\"mapped\",[98]],[[120148,120148],\"mapped\",[99]],[[120149,120149],\"mapped\",[100]],[[120150,120150],\"mapped\",[101]],[[120151,120151],\"mapped\",[102]],[[120152,120152],\"mapped\",[103]],[[120153,120153],\"mapped\",[104]],[[120154,120154],\"mapped\",[105]],[[120155,120155],\"mapped\",[106]],[[120156,120156],\"mapped\",[107]],[[120157,120157],\"mapped\",[108]],[[120158,120158],\"mapped\",[109]],[[120159,120159],\"mapped\",[110]],[[120160,120160],\"mapped\",[111]],[[120161,120161],\"mapped\",[112]],[[120162,120162],\"mapped\",[113]],[[120163,120163],\"mapped\",[114]],[[120164,120164],\"mapped\",[115]],[[120165,120165],\"mapped\",[116]],[[120166,120166],\"mapped\",[117]],[[120167,120167],\"mapped\",[118]],[[120168,120168],\"mapped\",[119]],[[120169,120169],\"mapped\",[120]],[[120170,120170],\"mapped\",[121]],[[120171,120171],\"mapped\",[122]],[[120172,120172],\"mapped\",[97]],[[120173,120173],\"mapped\",[98]],[[120174,120174],\"mapped\",[99]],[[120175,120175],\"mapped\",[100]],[[120176,120176],\"mapped\",[101]],[[120177,120177],\"mapped\",[102]],[[120178,120178],\"mapped\",[103]],[[120179,120179],\"mapped\",[104]],[[120180,120180],\"mapped\",[105]],[[120181,120181],\"mapped\",[106]],[[120182,120182],\"mapped\",[107]],[[120183,120183],\"mapped\",[108]],[[120184,120184],\"mapped\",[109]],[[120185,120185],\"mapped\",[110]],[[120186,120186],\"mapped\",[111]],[[120187,120187],\"mapped\",[112]],[[120188,120188],\"mapped\",[113]],[[120189,120189],\"mapped\",[114]],[[120190,120190],\"mapped\",[115]],[[120191,120191],\"mapped\",[116]],[[120192,120192],\"mapped\",[117]],[[120193,120193],\"mapped\",[118]],[[120194,120194],\"mapped\",[119]],[[120195,120195],\"mapped\",[120]],[[120196,120196],\"mapped\",[121]],[[120197,120197],\"mapped\",[122]],[[120198,120198],\"mapped\",[97]],[[120199,120199],\"mapped\",[98]],[[120200,120200],\"mapped\",[99]],[[120201,120201],\"mapped\",[100]],[[120202,120202],\"mapped\",[101]],[[120203,120203],\"mapped\",[102]],[[120204,120204],\"mapped\",[103]],[[120205,120205],\"mapped\",[104]],[[120206,120206],\"mapped\",[105]],[[120207,120207],\"mapped\",[106]],[[120208,120208],\"mapped\",[107]],[[120209,120209],\"mapped\",[108]],[[120210,120210],\"mapped\",[109]],[[120211,120211],\"mapped\",[110]],[[120212,120212],\"mapped\",[111]],[[120213,120213],\"mapped\",[112]],[[120214,120214],\"mapped\",[113]],[[120215,120215],\"mapped\",[114]],[[120216,120216],\"mapped\",[115]],[[120217,120217],\"mapped\",[116]],[[120218,120218],\"mapped\",[117]],[[120219,120219],\"mapped\",[118]],[[120220,120220],\"mapped\",[119]],[[120221,120221],\"mapped\",[120]],[[120222,120222],\"mapped\",[121]],[[120223,120223],\"mapped\",[122]],[[120224,120224],\"mapped\",[97]],[[120225,120225],\"mapped\",[98]],[[120226,120226],\"mapped\",[99]],[[120227,120227],\"mapped\",[100]],[[120228,120228],\"mapped\",[101]],[[120229,120229],\"mapped\",[102]],[[120230,120230],\"mapped\",[103]],[[120231,120231],\"mapped\",[104]],[[120232,120232],\"mapped\",[105]],[[120233,120233],\"mapped\",[106]],[[120234,120234],\"mapped\",[107]],[[120235,120235],\"mapped\",[108]],[[120236,120236],\"mapped\",[109]],[[120237,120237],\"mapped\",[110]],[[120238,120238],\"mapped\",[111]],[[120239,120239],\"mapped\",[112]],[[120240,120240],\"mapped\",[113]],[[120241,120241],\"mapped\",[114]],[[120242,120242],\"mapped\",[115]],[[120243,120243],\"mapped\",[116]],[[120244,120244],\"mapped\",[117]],[[120245,120245],\"mapped\",[118]],[[120246,120246],\"mapped\",[119]],[[120247,120247],\"mapped\",[120]],[[120248,120248],\"mapped\",[121]],[[120249,120249],\"mapped\",[122]],[[120250,120250],\"mapped\",[97]],[[120251,120251],\"mapped\",[98]],[[120252,120252],\"mapped\",[99]],[[120253,120253],\"mapped\",[100]],[[120254,120254],\"mapped\",[101]],[[120255,120255],\"mapped\",[102]],[[120256,120256],\"mapped\",[103]],[[120257,120257],\"mapped\",[104]],[[120258,120258],\"mapped\",[105]],[[120259,120259],\"mapped\",[106]],[[120260,120260],\"mapped\",[107]],[[120261,120261],\"mapped\",[108]],[[120262,120262],\"mapped\",[109]],[[120263,120263],\"mapped\",[110]],[[120264,120264],\"mapped\",[111]],[[120265,120265],\"mapped\",[112]],[[120266,120266],\"mapped\",[113]],[[120267,120267],\"mapped\",[114]],[[120268,120268],\"mapped\",[115]],[[120269,120269],\"mapped\",[116]],[[120270,120270],\"mapped\",[117]],[[120271,120271],\"mapped\",[118]],[[120272,120272],\"mapped\",[119]],[[120273,120273],\"mapped\",[120]],[[120274,120274],\"mapped\",[121]],[[120275,120275],\"mapped\",[122]],[[120276,120276],\"mapped\",[97]],[[120277,120277],\"mapped\",[98]],[[120278,120278],\"mapped\",[99]],[[120279,120279],\"mapped\",[100]],[[120280,120280],\"mapped\",[101]],[[120281,120281],\"mapped\",[102]],[[120282,120282],\"mapped\",[103]],[[120283,120283],\"mapped\",[104]],[[120284,120284],\"mapped\",[105]],[[120285,120285],\"mapped\",[106]],[[120286,120286],\"mapped\",[107]],[[120287,120287],\"mapped\",[108]],[[120288,120288],\"mapped\",[109]],[[120289,120289],\"mapped\",[110]],[[120290,120290],\"mapped\",[111]],[[120291,120291],\"mapped\",[112]],[[120292,120292],\"mapped\",[113]],[[120293,120293],\"mapped\",[114]],[[120294,120294],\"mapped\",[115]],[[120295,120295],\"mapped\",[116]],[[120296,120296],\"mapped\",[117]],[[120297,120297],\"mapped\",[118]],[[120298,120298],\"mapped\",[119]],[[120299,120299],\"mapped\",[120]],[[120300,120300],\"mapped\",[121]],[[120301,120301],\"mapped\",[122]],[[120302,120302],\"mapped\",[97]],[[120303,120303],\"mapped\",[98]],[[120304,120304],\"mapped\",[99]],[[120305,120305],\"mapped\",[100]],[[120306,120306],\"mapped\",[101]],[[120307,120307],\"mapped\",[102]],[[120308,120308],\"mapped\",[103]],[[120309,120309],\"mapped\",[104]],[[120310,120310],\"mapped\",[105]],[[120311,120311],\"mapped\",[106]],[[120312,120312],\"mapped\",[107]],[[120313,120313],\"mapped\",[108]],[[120314,120314],\"mapped\",[109]],[[120315,120315],\"mapped\",[110]],[[120316,120316],\"mapped\",[111]],[[120317,120317],\"mapped\",[112]],[[120318,120318],\"mapped\",[113]],[[120319,120319],\"mapped\",[114]],[[120320,120320],\"mapped\",[115]],[[120321,120321],\"mapped\",[116]],[[120322,120322],\"mapped\",[117]],[[120323,120323],\"mapped\",[118]],[[120324,120324],\"mapped\",[119]],[[120325,120325],\"mapped\",[120]],[[120326,120326],\"mapped\",[121]],[[120327,120327],\"mapped\",[122]],[[120328,120328],\"mapped\",[97]],[[120329,120329],\"mapped\",[98]],[[120330,120330],\"mapped\",[99]],[[120331,120331],\"mapped\",[100]],[[120332,120332],\"mapped\",[101]],[[120333,120333],\"mapped\",[102]],[[120334,120334],\"mapped\",[103]],[[120335,120335],\"mapped\",[104]],[[120336,120336],\"mapped\",[105]],[[120337,120337],\"mapped\",[106]],[[120338,120338],\"mapped\",[107]],[[120339,120339],\"mapped\",[108]],[[120340,120340],\"mapped\",[109]],[[120341,120341],\"mapped\",[110]],[[120342,120342],\"mapped\",[111]],[[120343,120343],\"mapped\",[112]],[[120344,120344],\"mapped\",[113]],[[120345,120345],\"mapped\",[114]],[[120346,120346],\"mapped\",[115]],[[120347,120347],\"mapped\",[116]],[[120348,120348],\"mapped\",[117]],[[120349,120349],\"mapped\",[118]],[[120350,120350],\"mapped\",[119]],[[120351,120351],\"mapped\",[120]],[[120352,120352],\"mapped\",[121]],[[120353,120353],\"mapped\",[122]],[[120354,120354],\"mapped\",[97]],[[120355,120355],\"mapped\",[98]],[[120356,120356],\"mapped\",[99]],[[120357,120357],\"mapped\",[100]],[[120358,120358],\"mapped\",[101]],[[120359,120359],\"mapped\",[102]],[[120360,120360],\"mapped\",[103]],[[120361,120361],\"mapped\",[104]],[[120362,120362],\"mapped\",[105]],[[120363,120363],\"mapped\",[106]],[[120364,120364],\"mapped\",[107]],[[120365,120365],\"mapped\",[108]],[[120366,120366],\"mapped\",[109]],[[120367,120367],\"mapped\",[110]],[[120368,120368],\"mapped\",[111]],[[120369,120369],\"mapped\",[112]],[[120370,120370],\"mapped\",[113]],[[120371,120371],\"mapped\",[114]],[[120372,120372],\"mapped\",[115]],[[120373,120373],\"mapped\",[116]],[[120374,120374],\"mapped\",[117]],[[120375,120375],\"mapped\",[118]],[[120376,120376],\"mapped\",[119]],[[120377,120377],\"mapped\",[120]],[[120378,120378],\"mapped\",[121]],[[120379,120379],\"mapped\",[122]],[[120380,120380],\"mapped\",[97]],[[120381,120381],\"mapped\",[98]],[[120382,120382],\"mapped\",[99]],[[120383,120383],\"mapped\",[100]],[[120384,120384],\"mapped\",[101]],[[120385,120385],\"mapped\",[102]],[[120386,120386],\"mapped\",[103]],[[120387,120387],\"mapped\",[104]],[[120388,120388],\"mapped\",[105]],[[120389,120389],\"mapped\",[106]],[[120390,120390],\"mapped\",[107]],[[120391,120391],\"mapped\",[108]],[[120392,120392],\"mapped\",[109]],[[120393,120393],\"mapped\",[110]],[[120394,120394],\"mapped\",[111]],[[120395,120395],\"mapped\",[112]],[[120396,120396],\"mapped\",[113]],[[120397,120397],\"mapped\",[114]],[[120398,120398],\"mapped\",[115]],[[120399,120399],\"mapped\",[116]],[[120400,120400],\"mapped\",[117]],[[120401,120401],\"mapped\",[118]],[[120402,120402],\"mapped\",[119]],[[120403,120403],\"mapped\",[120]],[[120404,120404],\"mapped\",[121]],[[120405,120405],\"mapped\",[122]],[[120406,120406],\"mapped\",[97]],[[120407,120407],\"mapped\",[98]],[[120408,120408],\"mapped\",[99]],[[120409,120409],\"mapped\",[100]],[[120410,120410],\"mapped\",[101]],[[120411,120411],\"mapped\",[102]],[[120412,120412],\"mapped\",[103]],[[120413,120413],\"mapped\",[104]],[[120414,120414],\"mapped\",[105]],[[120415,120415],\"mapped\",[106]],[[120416,120416],\"mapped\",[107]],[[120417,120417],\"mapped\",[108]],[[120418,120418],\"mapped\",[109]],[[120419,120419],\"mapped\",[110]],[[120420,120420],\"mapped\",[111]],[[120421,120421],\"mapped\",[112]],[[120422,120422],\"mapped\",[113]],[[120423,120423],\"mapped\",[114]],[[120424,120424],\"mapped\",[115]],[[120425,120425],\"mapped\",[116]],[[120426,120426],\"mapped\",[117]],[[120427,120427],\"mapped\",[118]],[[120428,120428],\"mapped\",[119]],[[120429,120429],\"mapped\",[120]],[[120430,120430],\"mapped\",[121]],[[120431,120431],\"mapped\",[122]],[[120432,120432],\"mapped\",[97]],[[120433,120433],\"mapped\",[98]],[[120434,120434],\"mapped\",[99]],[[120435,120435],\"mapped\",[100]],[[120436,120436],\"mapped\",[101]],[[120437,120437],\"mapped\",[102]],[[120438,120438],\"mapped\",[103]],[[120439,120439],\"mapped\",[104]],[[120440,120440],\"mapped\",[105]],[[120441,120441],\"mapped\",[106]],[[120442,120442],\"mapped\",[107]],[[120443,120443],\"mapped\",[108]],[[120444,120444],\"mapped\",[109]],[[120445,120445],\"mapped\",[110]],[[120446,120446],\"mapped\",[111]],[[120447,120447],\"mapped\",[112]],[[120448,120448],\"mapped\",[113]],[[120449,120449],\"mapped\",[114]],[[120450,120450],\"mapped\",[115]],[[120451,120451],\"mapped\",[116]],[[120452,120452],\"mapped\",[117]],[[120453,120453],\"mapped\",[118]],[[120454,120454],\"mapped\",[119]],[[120455,120455],\"mapped\",[120]],[[120456,120456],\"mapped\",[121]],[[120457,120457],\"mapped\",[122]],[[120458,120458],\"mapped\",[97]],[[120459,120459],\"mapped\",[98]],[[120460,120460],\"mapped\",[99]],[[120461,120461],\"mapped\",[100]],[[120462,120462],\"mapped\",[101]],[[120463,120463],\"mapped\",[102]],[[120464,120464],\"mapped\",[103]],[[120465,120465],\"mapped\",[104]],[[120466,120466],\"mapped\",[105]],[[120467,120467],\"mapped\",[106]],[[120468,120468],\"mapped\",[107]],[[120469,120469],\"mapped\",[108]],[[120470,120470],\"mapped\",[109]],[[120471,120471],\"mapped\",[110]],[[120472,120472],\"mapped\",[111]],[[120473,120473],\"mapped\",[112]],[[120474,120474],\"mapped\",[113]],[[120475,120475],\"mapped\",[114]],[[120476,120476],\"mapped\",[115]],[[120477,120477],\"mapped\",[116]],[[120478,120478],\"mapped\",[117]],[[120479,120479],\"mapped\",[118]],[[120480,120480],\"mapped\",[119]],[[120481,120481],\"mapped\",[120]],[[120482,120482],\"mapped\",[121]],[[120483,120483],\"mapped\",[122]],[[120484,120484],\"mapped\",[305]],[[120485,120485],\"mapped\",[567]],[[120486,120487],\"disallowed\"],[[120488,120488],\"mapped\",[945]],[[120489,120489],\"mapped\",[946]],[[120490,120490],\"mapped\",[947]],[[120491,120491],\"mapped\",[948]],[[120492,120492],\"mapped\",[949]],[[120493,120493],\"mapped\",[950]],[[120494,120494],\"mapped\",[951]],[[120495,120495],\"mapped\",[952]],[[120496,120496],\"mapped\",[953]],[[120497,120497],\"mapped\",[954]],[[120498,120498],\"mapped\",[955]],[[120499,120499],\"mapped\",[956]],[[120500,120500],\"mapped\",[957]],[[120501,120501],\"mapped\",[958]],[[120502,120502],\"mapped\",[959]],[[120503,120503],\"mapped\",[960]],[[120504,120504],\"mapped\",[961]],[[120505,120505],\"mapped\",[952]],[[120506,120506],\"mapped\",[963]],[[120507,120507],\"mapped\",[964]],[[120508,120508],\"mapped\",[965]],[[120509,120509],\"mapped\",[966]],[[120510,120510],\"mapped\",[967]],[[120511,120511],\"mapped\",[968]],[[120512,120512],\"mapped\",[969]],[[120513,120513],\"mapped\",[8711]],[[120514,120514],\"mapped\",[945]],[[120515,120515],\"mapped\",[946]],[[120516,120516],\"mapped\",[947]],[[120517,120517],\"mapped\",[948]],[[120518,120518],\"mapped\",[949]],[[120519,120519],\"mapped\",[950]],[[120520,120520],\"mapped\",[951]],[[120521,120521],\"mapped\",[952]],[[120522,120522],\"mapped\",[953]],[[120523,120523],\"mapped\",[954]],[[120524,120524],\"mapped\",[955]],[[120525,120525],\"mapped\",[956]],[[120526,120526],\"mapped\",[957]],[[120527,120527],\"mapped\",[958]],[[120528,120528],\"mapped\",[959]],[[120529,120529],\"mapped\",[960]],[[120530,120530],\"mapped\",[961]],[[120531,120532],\"mapped\",[963]],[[120533,120533],\"mapped\",[964]],[[120534,120534],\"mapped\",[965]],[[120535,120535],\"mapped\",[966]],[[120536,120536],\"mapped\",[967]],[[120537,120537],\"mapped\",[968]],[[120538,120538],\"mapped\",[969]],[[120539,120539],\"mapped\",[8706]],[[120540,120540],\"mapped\",[949]],[[120541,120541],\"mapped\",[952]],[[120542,120542],\"mapped\",[954]],[[120543,120543],\"mapped\",[966]],[[120544,120544],\"mapped\",[961]],[[120545,120545],\"mapped\",[960]],[[120546,120546],\"mapped\",[945]],[[120547,120547],\"mapped\",[946]],[[120548,120548],\"mapped\",[947]],[[120549,120549],\"mapped\",[948]],[[120550,120550],\"mapped\",[949]],[[120551,120551],\"mapped\",[950]],[[120552,120552],\"mapped\",[951]],[[120553,120553],\"mapped\",[952]],[[120554,120554],\"mapped\",[953]],[[120555,120555],\"mapped\",[954]],[[120556,120556],\"mapped\",[955]],[[120557,120557],\"mapped\",[956]],[[120558,120558],\"mapped\",[957]],[[120559,120559],\"mapped\",[958]],[[120560,120560],\"mapped\",[959]],[[120561,120561],\"mapped\",[960]],[[120562,120562],\"mapped\",[961]],[[120563,120563],\"mapped\",[952]],[[120564,120564],\"mapped\",[963]],[[120565,120565],\"mapped\",[964]],[[120566,120566],\"mapped\",[965]],[[120567,120567],\"mapped\",[966]],[[120568,120568],\"mapped\",[967]],[[120569,120569],\"mapped\",[968]],[[120570,120570],\"mapped\",[969]],[[120571,120571],\"mapped\",[8711]],[[120572,120572],\"mapped\",[945]],[[120573,120573],\"mapped\",[946]],[[120574,120574],\"mapped\",[947]],[[120575,120575],\"mapped\",[948]],[[120576,120576],\"mapped\",[949]],[[120577,120577],\"mapped\",[950]],[[120578,120578],\"mapped\",[951]],[[120579,120579],\"mapped\",[952]],[[120580,120580],\"mapped\",[953]],[[120581,120581],\"mapped\",[954]],[[120582,120582],\"mapped\",[955]],[[120583,120583],\"mapped\",[956]],[[120584,120584],\"mapped\",[957]],[[120585,120585],\"mapped\",[958]],[[120586,120586],\"mapped\",[959]],[[120587,120587],\"mapped\",[960]],[[120588,120588],\"mapped\",[961]],[[120589,120590],\"mapped\",[963]],[[120591,120591],\"mapped\",[964]],[[120592,120592],\"mapped\",[965]],[[120593,120593],\"mapped\",[966]],[[120594,120594],\"mapped\",[967]],[[120595,120595],\"mapped\",[968]],[[120596,120596],\"mapped\",[969]],[[120597,120597],\"mapped\",[8706]],[[120598,120598],\"mapped\",[949]],[[120599,120599],\"mapped\",[952]],[[120600,120600],\"mapped\",[954]],[[120601,120601],\"mapped\",[966]],[[120602,120602],\"mapped\",[961]],[[120603,120603],\"mapped\",[960]],[[120604,120604],\"mapped\",[945]],[[120605,120605],\"mapped\",[946]],[[120606,120606],\"mapped\",[947]],[[120607,120607],\"mapped\",[948]],[[120608,120608],\"mapped\",[949]],[[120609,120609],\"mapped\",[950]],[[120610,120610],\"mapped\",[951]],[[120611,120611],\"mapped\",[952]],[[120612,120612],\"mapped\",[953]],[[120613,120613],\"mapped\",[954]],[[120614,120614],\"mapped\",[955]],[[120615,120615],\"mapped\",[956]],[[120616,120616],\"mapped\",[957]],[[120617,120617],\"mapped\",[958]],[[120618,120618],\"mapped\",[959]],[[120619,120619],\"mapped\",[960]],[[120620,120620],\"mapped\",[961]],[[120621,120621],\"mapped\",[952]],[[120622,120622],\"mapped\",[963]],[[120623,120623],\"mapped\",[964]],[[120624,120624],\"mapped\",[965]],[[120625,120625],\"mapped\",[966]],[[120626,120626],\"mapped\",[967]],[[120627,120627],\"mapped\",[968]],[[120628,120628],\"mapped\",[969]],[[120629,120629],\"mapped\",[8711]],[[120630,120630],\"mapped\",[945]],[[120631,120631],\"mapped\",[946]],[[120632,120632],\"mapped\",[947]],[[120633,120633],\"mapped\",[948]],[[120634,120634],\"mapped\",[949]],[[120635,120635],\"mapped\",[950]],[[120636,120636],\"mapped\",[951]],[[120637,120637],\"mapped\",[952]],[[120638,120638],\"mapped\",[953]],[[120639,120639],\"mapped\",[954]],[[120640,120640],\"mapped\",[955]],[[120641,120641],\"mapped\",[956]],[[120642,120642],\"mapped\",[957]],[[120643,120643],\"mapped\",[958]],[[120644,120644],\"mapped\",[959]],[[120645,120645],\"mapped\",[960]],[[120646,120646],\"mapped\",[961]],[[120647,120648],\"mapped\",[963]],[[120649,120649],\"mapped\",[964]],[[120650,120650],\"mapped\",[965]],[[120651,120651],\"mapped\",[966]],[[120652,120652],\"mapped\",[967]],[[120653,120653],\"mapped\",[968]],[[120654,120654],\"mapped\",[969]],[[120655,120655],\"mapped\",[8706]],[[120656,120656],\"mapped\",[949]],[[120657,120657],\"mapped\",[952]],[[120658,120658],\"mapped\",[954]],[[120659,120659],\"mapped\",[966]],[[120660,120660],\"mapped\",[961]],[[120661,120661],\"mapped\",[960]],[[120662,120662],\"mapped\",[945]],[[120663,120663],\"mapped\",[946]],[[120664,120664],\"mapped\",[947]],[[120665,120665],\"mapped\",[948]],[[120666,120666],\"mapped\",[949]],[[120667,120667],\"mapped\",[950]],[[120668,120668],\"mapped\",[951]],[[120669,120669],\"mapped\",[952]],[[120670,120670],\"mapped\",[953]],[[120671,120671],\"mapped\",[954]],[[120672,120672],\"mapped\",[955]],[[120673,120673],\"mapped\",[956]],[[120674,120674],\"mapped\",[957]],[[120675,120675],\"mapped\",[958]],[[120676,120676],\"mapped\",[959]],[[120677,120677],\"mapped\",[960]],[[120678,120678],\"mapped\",[961]],[[120679,120679],\"mapped\",[952]],[[120680,120680],\"mapped\",[963]],[[120681,120681],\"mapped\",[964]],[[120682,120682],\"mapped\",[965]],[[120683,120683],\"mapped\",[966]],[[120684,120684],\"mapped\",[967]],[[120685,120685],\"mapped\",[968]],[[120686,120686],\"mapped\",[969]],[[120687,120687],\"mapped\",[8711]],[[120688,120688],\"mapped\",[945]],[[120689,120689],\"mapped\",[946]],[[120690,120690],\"mapped\",[947]],[[120691,120691],\"mapped\",[948]],[[120692,120692],\"mapped\",[949]],[[120693,120693],\"mapped\",[950]],[[120694,120694],\"mapped\",[951]],[[120695,120695],\"mapped\",[952]],[[120696,120696],\"mapped\",[953]],[[120697,120697],\"mapped\",[954]],[[120698,120698],\"mapped\",[955]],[[120699,120699],\"mapped\",[956]],[[120700,120700],\"mapped\",[957]],[[120701,120701],\"mapped\",[958]],[[120702,120702],\"mapped\",[959]],[[120703,120703],\"mapped\",[960]],[[120704,120704],\"mapped\",[961]],[[120705,120706],\"mapped\",[963]],[[120707,120707],\"mapped\",[964]],[[120708,120708],\"mapped\",[965]],[[120709,120709],\"mapped\",[966]],[[120710,120710],\"mapped\",[967]],[[120711,120711],\"mapped\",[968]],[[120712,120712],\"mapped\",[969]],[[120713,120713],\"mapped\",[8706]],[[120714,120714],\"mapped\",[949]],[[120715,120715],\"mapped\",[952]],[[120716,120716],\"mapped\",[954]],[[120717,120717],\"mapped\",[966]],[[120718,120718],\"mapped\",[961]],[[120719,120719],\"mapped\",[960]],[[120720,120720],\"mapped\",[945]],[[120721,120721],\"mapped\",[946]],[[120722,120722],\"mapped\",[947]],[[120723,120723],\"mapped\",[948]],[[120724,120724],\"mapped\",[949]],[[120725,120725],\"mapped\",[950]],[[120726,120726],\"mapped\",[951]],[[120727,120727],\"mapped\",[952]],[[120728,120728],\"mapped\",[953]],[[120729,120729],\"mapped\",[954]],[[120730,120730],\"mapped\",[955]],[[120731,120731],\"mapped\",[956]],[[120732,120732],\"mapped\",[957]],[[120733,120733],\"mapped\",[958]],[[120734,120734],\"mapped\",[959]],[[120735,120735],\"mapped\",[960]],[[120736,120736],\"mapped\",[961]],[[120737,120737],\"mapped\",[952]],[[120738,120738],\"mapped\",[963]],[[120739,120739],\"mapped\",[964]],[[120740,120740],\"mapped\",[965]],[[120741,120741],\"mapped\",[966]],[[120742,120742],\"mapped\",[967]],[[120743,120743],\"mapped\",[968]],[[120744,120744],\"mapped\",[969]],[[120745,120745],\"mapped\",[8711]],[[120746,120746],\"mapped\",[945]],[[120747,120747],\"mapped\",[946]],[[120748,120748],\"mapped\",[947]],[[120749,120749],\"mapped\",[948]],[[120750,120750],\"mapped\",[949]],[[120751,120751],\"mapped\",[950]],[[120752,120752],\"mapped\",[951]],[[120753,120753],\"mapped\",[952]],[[120754,120754],\"mapped\",[953]],[[120755,120755],\"mapped\",[954]],[[120756,120756],\"mapped\",[955]],[[120757,120757],\"mapped\",[956]],[[120758,120758],\"mapped\",[957]],[[120759,120759],\"mapped\",[958]],[[120760,120760],\"mapped\",[959]],[[120761,120761],\"mapped\",[960]],[[120762,120762],\"mapped\",[961]],[[120763,120764],\"mapped\",[963]],[[120765,120765],\"mapped\",[964]],[[120766,120766],\"mapped\",[965]],[[120767,120767],\"mapped\",[966]],[[120768,120768],\"mapped\",[967]],[[120769,120769],\"mapped\",[968]],[[120770,120770],\"mapped\",[969]],[[120771,120771],\"mapped\",[8706]],[[120772,120772],\"mapped\",[949]],[[120773,120773],\"mapped\",[952]],[[120774,120774],\"mapped\",[954]],[[120775,120775],\"mapped\",[966]],[[120776,120776],\"mapped\",[961]],[[120777,120777],\"mapped\",[960]],[[120778,120779],\"mapped\",[989]],[[120780,120781],\"disallowed\"],[[120782,120782],\"mapped\",[48]],[[120783,120783],\"mapped\",[49]],[[120784,120784],\"mapped\",[50]],[[120785,120785],\"mapped\",[51]],[[120786,120786],\"mapped\",[52]],[[120787,120787],\"mapped\",[53]],[[120788,120788],\"mapped\",[54]],[[120789,120789],\"mapped\",[55]],[[120790,120790],\"mapped\",[56]],[[120791,120791],\"mapped\",[57]],[[120792,120792],\"mapped\",[48]],[[120793,120793],\"mapped\",[49]],[[120794,120794],\"mapped\",[50]],[[120795,120795],\"mapped\",[51]],[[120796,120796],\"mapped\",[52]],[[120797,120797],\"mapped\",[53]],[[120798,120798],\"mapped\",[54]],[[120799,120799],\"mapped\",[55]],[[120800,120800],\"mapped\",[56]],[[120801,120801],\"mapped\",[57]],[[120802,120802],\"mapped\",[48]],[[120803,120803],\"mapped\",[49]],[[120804,120804],\"mapped\",[50]],[[120805,120805],\"mapped\",[51]],[[120806,120806],\"mapped\",[52]],[[120807,120807],\"mapped\",[53]],[[120808,120808],\"mapped\",[54]],[[120809,120809],\"mapped\",[55]],[[120810,120810],\"mapped\",[56]],[[120811,120811],\"mapped\",[57]],[[120812,120812],\"mapped\",[48]],[[120813,120813],\"mapped\",[49]],[[120814,120814],\"mapped\",[50]],[[120815,120815],\"mapped\",[51]],[[120816,120816],\"mapped\",[52]],[[120817,120817],\"mapped\",[53]],[[120818,120818],\"mapped\",[54]],[[120819,120819],\"mapped\",[55]],[[120820,120820],\"mapped\",[56]],[[120821,120821],\"mapped\",[57]],[[120822,120822],\"mapped\",[48]],[[120823,120823],\"mapped\",[49]],[[120824,120824],\"mapped\",[50]],[[120825,120825],\"mapped\",[51]],[[120826,120826],\"mapped\",[52]],[[120827,120827],\"mapped\",[53]],[[120828,120828],\"mapped\",[54]],[[120829,120829],\"mapped\",[55]],[[120830,120830],\"mapped\",[56]],[[120831,120831],\"mapped\",[57]],[[120832,121343],\"valid\",[],\"NV8\"],[[121344,121398],\"valid\"],[[121399,121402],\"valid\",[],\"NV8\"],[[121403,121452],\"valid\"],[[121453,121460],\"valid\",[],\"NV8\"],[[121461,121461],\"valid\"],[[121462,121475],\"valid\",[],\"NV8\"],[[121476,121476],\"valid\"],[[121477,121483],\"valid\",[],\"NV8\"],[[121484,121498],\"disallowed\"],[[121499,121503],\"valid\"],[[121504,121504],\"disallowed\"],[[121505,121519],\"valid\"],[[121520,124927],\"disallowed\"],[[124928,125124],\"valid\"],[[125125,125126],\"disallowed\"],[[125127,125135],\"valid\",[],\"NV8\"],[[125136,125142],\"valid\"],[[125143,126463],\"disallowed\"],[[126464,126464],\"mapped\",[1575]],[[126465,126465],\"mapped\",[1576]],[[126466,126466],\"mapped\",[1580]],[[126467,126467],\"mapped\",[1583]],[[126468,126468],\"disallowed\"],[[126469,126469],\"mapped\",[1608]],[[126470,126470],\"mapped\",[1586]],[[126471,126471],\"mapped\",[1581]],[[126472,126472],\"mapped\",[1591]],[[126473,126473],\"mapped\",[1610]],[[126474,126474],\"mapped\",[1603]],[[126475,126475],\"mapped\",[1604]],[[126476,126476],\"mapped\",[1605]],[[126477,126477],\"mapped\",[1606]],[[126478,126478],\"mapped\",[1587]],[[126479,126479],\"mapped\",[1593]],[[126480,126480],\"mapped\",[1601]],[[126481,126481],\"mapped\",[1589]],[[126482,126482],\"mapped\",[1602]],[[126483,126483],\"mapped\",[1585]],[[126484,126484],\"mapped\",[1588]],[[126485,126485],\"mapped\",[1578]],[[126486,126486],\"mapped\",[1579]],[[126487,126487],\"mapped\",[1582]],[[126488,126488],\"mapped\",[1584]],[[126489,126489],\"mapped\",[1590]],[[126490,126490],\"mapped\",[1592]],[[126491,126491],\"mapped\",[1594]],[[126492,126492],\"mapped\",[1646]],[[126493,126493],\"mapped\",[1722]],[[126494,126494],\"mapped\",[1697]],[[126495,126495],\"mapped\",[1647]],[[126496,126496],\"disallowed\"],[[126497,126497],\"mapped\",[1576]],[[126498,126498],\"mapped\",[1580]],[[126499,126499],\"disallowed\"],[[126500,126500],\"mapped\",[1607]],[[126501,126502],\"disallowed\"],[[126503,126503],\"mapped\",[1581]],[[126504,126504],\"disallowed\"],[[126505,126505],\"mapped\",[1610]],[[126506,126506],\"mapped\",[1603]],[[126507,126507],\"mapped\",[1604]],[[126508,126508],\"mapped\",[1605]],[[126509,126509],\"mapped\",[1606]],[[126510,126510],\"mapped\",[1587]],[[126511,126511],\"mapped\",[1593]],[[126512,126512],\"mapped\",[1601]],[[126513,126513],\"mapped\",[1589]],[[126514,126514],\"mapped\",[1602]],[[126515,126515],\"disallowed\"],[[126516,126516],\"mapped\",[1588]],[[126517,126517],\"mapped\",[1578]],[[126518,126518],\"mapped\",[1579]],[[126519,126519],\"mapped\",[1582]],[[126520,126520],\"disallowed\"],[[126521,126521],\"mapped\",[1590]],[[126522,126522],\"disallowed\"],[[126523,126523],\"mapped\",[1594]],[[126524,126529],\"disallowed\"],[[126530,126530],\"mapped\",[1580]],[[126531,126534],\"disallowed\"],[[126535,126535],\"mapped\",[1581]],[[126536,126536],\"disallowed\"],[[126537,126537],\"mapped\",[1610]],[[126538,126538],\"disallowed\"],[[126539,126539],\"mapped\",[1604]],[[126540,126540],\"disallowed\"],[[126541,126541],\"mapped\",[1606]],[[126542,126542],\"mapped\",[1587]],[[126543,126543],\"mapped\",[1593]],[[126544,126544],\"disallowed\"],[[126545,126545],\"mapped\",[1589]],[[126546,126546],\"mapped\",[1602]],[[126547,126547],\"disallowed\"],[[126548,126548],\"mapped\",[1588]],[[126549,126550],\"disallowed\"],[[126551,126551],\"mapped\",[1582]],[[126552,126552],\"disallowed\"],[[126553,126553],\"mapped\",[1590]],[[126554,126554],\"disallowed\"],[[126555,126555],\"mapped\",[1594]],[[126556,126556],\"disallowed\"],[[126557,126557],\"mapped\",[1722]],[[126558,126558],\"disallowed\"],[[126559,126559],\"mapped\",[1647]],[[126560,126560],\"disallowed\"],[[126561,126561],\"mapped\",[1576]],[[126562,126562],\"mapped\",[1580]],[[126563,126563],\"disallowed\"],[[126564,126564],\"mapped\",[1607]],[[126565,126566],\"disallowed\"],[[126567,126567],\"mapped\",[1581]],[[126568,126568],\"mapped\",[1591]],[[126569,126569],\"mapped\",[1610]],[[126570,126570],\"mapped\",[1603]],[[126571,126571],\"disallowed\"],[[126572,126572],\"mapped\",[1605]],[[126573,126573],\"mapped\",[1606]],[[126574,126574],\"mapped\",[1587]],[[126575,126575],\"mapped\",[1593]],[[126576,126576],\"mapped\",[1601]],[[126577,126577],\"mapped\",[1589]],[[126578,126578],\"mapped\",[1602]],[[126579,126579],\"disallowed\"],[[126580,126580],\"mapped\",[1588]],[[126581,126581],\"mapped\",[1578]],[[126582,126582],\"mapped\",[1579]],[[126583,126583],\"mapped\",[1582]],[[126584,126584],\"disallowed\"],[[126585,126585],\"mapped\",[1590]],[[126586,126586],\"mapped\",[1592]],[[126587,126587],\"mapped\",[1594]],[[126588,126588],\"mapped\",[1646]],[[126589,126589],\"disallowed\"],[[126590,126590],\"mapped\",[1697]],[[126591,126591],\"disallowed\"],[[126592,126592],\"mapped\",[1575]],[[126593,126593],\"mapped\",[1576]],[[126594,126594],\"mapped\",[1580]],[[126595,126595],\"mapped\",[1583]],[[126596,126596],\"mapped\",[1607]],[[126597,126597],\"mapped\",[1608]],[[126598,126598],\"mapped\",[1586]],[[126599,126599],\"mapped\",[1581]],[[126600,126600],\"mapped\",[1591]],[[126601,126601],\"mapped\",[1610]],[[126602,126602],\"disallowed\"],[[126603,126603],\"mapped\",[1604]],[[126604,126604],\"mapped\",[1605]],[[126605,126605],\"mapped\",[1606]],[[126606,126606],\"mapped\",[1587]],[[126607,126607],\"mapped\",[1593]],[[126608,126608],\"mapped\",[1601]],[[126609,126609],\"mapped\",[1589]],[[126610,126610],\"mapped\",[1602]],[[126611,126611],\"mapped\",[1585]],[[126612,126612],\"mapped\",[1588]],[[126613,126613],\"mapped\",[1578]],[[126614,126614],\"mapped\",[1579]],[[126615,126615],\"mapped\",[1582]],[[126616,126616],\"mapped\",[1584]],[[126617,126617],\"mapped\",[1590]],[[126618,126618],\"mapped\",[1592]],[[126619,126619],\"mapped\",[1594]],[[126620,126624],\"disallowed\"],[[126625,126625],\"mapped\",[1576]],[[126626,126626],\"mapped\",[1580]],[[126627,126627],\"mapped\",[1583]],[[126628,126628],\"disallowed\"],[[126629,126629],\"mapped\",[1608]],[[126630,126630],\"mapped\",[1586]],[[126631,126631],\"mapped\",[1581]],[[126632,126632],\"mapped\",[1591]],[[126633,126633],\"mapped\",[1610]],[[126634,126634],\"disallowed\"],[[126635,126635],\"mapped\",[1604]],[[126636,126636],\"mapped\",[1605]],[[126637,126637],\"mapped\",[1606]],[[126638,126638],\"mapped\",[1587]],[[126639,126639],\"mapped\",[1593]],[[126640,126640],\"mapped\",[1601]],[[126641,126641],\"mapped\",[1589]],[[126642,126642],\"mapped\",[1602]],[[126643,126643],\"mapped\",[1585]],[[126644,126644],\"mapped\",[1588]],[[126645,126645],\"mapped\",[1578]],[[126646,126646],\"mapped\",[1579]],[[126647,126647],\"mapped\",[1582]],[[126648,126648],\"mapped\",[1584]],[[126649,126649],\"mapped\",[1590]],[[126650,126650],\"mapped\",[1592]],[[126651,126651],\"mapped\",[1594]],[[126652,126703],\"disallowed\"],[[126704,126705],\"valid\",[],\"NV8\"],[[126706,126975],\"disallowed\"],[[126976,127019],\"valid\",[],\"NV8\"],[[127020,127023],\"disallowed\"],[[127024,127123],\"valid\",[],\"NV8\"],[[127124,127135],\"disallowed\"],[[127136,127150],\"valid\",[],\"NV8\"],[[127151,127152],\"disallowed\"],[[127153,127166],\"valid\",[],\"NV8\"],[[127167,127167],\"valid\",[],\"NV8\"],[[127168,127168],\"disallowed\"],[[127169,127183],\"valid\",[],\"NV8\"],[[127184,127184],\"disallowed\"],[[127185,127199],\"valid\",[],\"NV8\"],[[127200,127221],\"valid\",[],\"NV8\"],[[127222,127231],\"disallowed\"],[[127232,127232],\"disallowed\"],[[127233,127233],\"disallowed_STD3_mapped\",[48,44]],[[127234,127234],\"disallowed_STD3_mapped\",[49,44]],[[127235,127235],\"disallowed_STD3_mapped\",[50,44]],[[127236,127236],\"disallowed_STD3_mapped\",[51,44]],[[127237,127237],\"disallowed_STD3_mapped\",[52,44]],[[127238,127238],\"disallowed_STD3_mapped\",[53,44]],[[127239,127239],\"disallowed_STD3_mapped\",[54,44]],[[127240,127240],\"disallowed_STD3_mapped\",[55,44]],[[127241,127241],\"disallowed_STD3_mapped\",[56,44]],[[127242,127242],\"disallowed_STD3_mapped\",[57,44]],[[127243,127244],\"valid\",[],\"NV8\"],[[127245,127247],\"disallowed\"],[[127248,127248],\"disallowed_STD3_mapped\",[40,97,41]],[[127249,127249],\"disallowed_STD3_mapped\",[40,98,41]],[[127250,127250],\"disallowed_STD3_mapped\",[40,99,41]],[[127251,127251],\"disallowed_STD3_mapped\",[40,100,41]],[[127252,127252],\"disallowed_STD3_mapped\",[40,101,41]],[[127253,127253],\"disallowed_STD3_mapped\",[40,102,41]],[[127254,127254],\"disallowed_STD3_mapped\",[40,103,41]],[[127255,127255],\"disallowed_STD3_mapped\",[40,104,41]],[[127256,127256],\"disallowed_STD3_mapped\",[40,105,41]],[[127257,127257],\"disallowed_STD3_mapped\",[40,106,41]],[[127258,127258],\"disallowed_STD3_mapped\",[40,107,41]],[[127259,127259],\"disallowed_STD3_mapped\",[40,108,41]],[[127260,127260],\"disallowed_STD3_mapped\",[40,109,41]],[[127261,127261],\"disallowed_STD3_mapped\",[40,110,41]],[[127262,127262],\"disallowed_STD3_mapped\",[40,111,41]],[[127263,127263],\"disallowed_STD3_mapped\",[40,112,41]],[[127264,127264],\"disallowed_STD3_mapped\",[40,113,41]],[[127265,127265],\"disallowed_STD3_mapped\",[40,114,41]],[[127266,127266],\"disallowed_STD3_mapped\",[40,115,41]],[[127267,127267],\"disallowed_STD3_mapped\",[40,116,41]],[[127268,127268],\"disallowed_STD3_mapped\",[40,117,41]],[[127269,127269],\"disallowed_STD3_mapped\",[40,118,41]],[[127270,127270],\"disallowed_STD3_mapped\",[40,119,41]],[[127271,127271],\"disallowed_STD3_mapped\",[40,120,41]],[[127272,127272],\"disallowed_STD3_mapped\",[40,121,41]],[[127273,127273],\"disallowed_STD3_mapped\",[40,122,41]],[[127274,127274],\"mapped\",[12308,115,12309]],[[127275,127275],\"mapped\",[99]],[[127276,127276],\"mapped\",[114]],[[127277,127277],\"mapped\",[99,100]],[[127278,127278],\"mapped\",[119,122]],[[127279,127279],\"disallowed\"],[[127280,127280],\"mapped\",[97]],[[127281,127281],\"mapped\",[98]],[[127282,127282],\"mapped\",[99]],[[127283,127283],\"mapped\",[100]],[[127284,127284],\"mapped\",[101]],[[127285,127285],\"mapped\",[102]],[[127286,127286],\"mapped\",[103]],[[127287,127287],\"mapped\",[104]],[[127288,127288],\"mapped\",[105]],[[127289,127289],\"mapped\",[106]],[[127290,127290],\"mapped\",[107]],[[127291,127291],\"mapped\",[108]],[[127292,127292],\"mapped\",[109]],[[127293,127293],\"mapped\",[110]],[[127294,127294],\"mapped\",[111]],[[127295,127295],\"mapped\",[112]],[[127296,127296],\"mapped\",[113]],[[127297,127297],\"mapped\",[114]],[[127298,127298],\"mapped\",[115]],[[127299,127299],\"mapped\",[116]],[[127300,127300],\"mapped\",[117]],[[127301,127301],\"mapped\",[118]],[[127302,127302],\"mapped\",[119]],[[127303,127303],\"mapped\",[120]],[[127304,127304],\"mapped\",[121]],[[127305,127305],\"mapped\",[122]],[[127306,127306],\"mapped\",[104,118]],[[127307,127307],\"mapped\",[109,118]],[[127308,127308],\"mapped\",[115,100]],[[127309,127309],\"mapped\",[115,115]],[[127310,127310],\"mapped\",[112,112,118]],[[127311,127311],\"mapped\",[119,99]],[[127312,127318],\"valid\",[],\"NV8\"],[[127319,127319],\"valid\",[],\"NV8\"],[[127320,127326],\"valid\",[],\"NV8\"],[[127327,127327],\"valid\",[],\"NV8\"],[[127328,127337],\"valid\",[],\"NV8\"],[[127338,127338],\"mapped\",[109,99]],[[127339,127339],\"mapped\",[109,100]],[[127340,127343],\"disallowed\"],[[127344,127352],\"valid\",[],\"NV8\"],[[127353,127353],\"valid\",[],\"NV8\"],[[127354,127354],\"valid\",[],\"NV8\"],[[127355,127356],\"valid\",[],\"NV8\"],[[127357,127358],\"valid\",[],\"NV8\"],[[127359,127359],\"valid\",[],\"NV8\"],[[127360,127369],\"valid\",[],\"NV8\"],[[127370,127373],\"valid\",[],\"NV8\"],[[127374,127375],\"valid\",[],\"NV8\"],[[127376,127376],\"mapped\",[100,106]],[[127377,127386],\"valid\",[],\"NV8\"],[[127387,127461],\"disallowed\"],[[127462,127487],\"valid\",[],\"NV8\"],[[127488,127488],\"mapped\",[12411,12363]],[[127489,127489],\"mapped\",[12467,12467]],[[127490,127490],\"mapped\",[12469]],[[127491,127503],\"disallowed\"],[[127504,127504],\"mapped\",[25163]],[[127505,127505],\"mapped\",[23383]],[[127506,127506],\"mapped\",[21452]],[[127507,127507],\"mapped\",[12487]],[[127508,127508],\"mapped\",[20108]],[[127509,127509],\"mapped\",[22810]],[[127510,127510],\"mapped\",[35299]],[[127511,127511],\"mapped\",[22825]],[[127512,127512],\"mapped\",[20132]],[[127513,127513],\"mapped\",[26144]],[[127514,127514],\"mapped\",[28961]],[[127515,127515],\"mapped\",[26009]],[[127516,127516],\"mapped\",[21069]],[[127517,127517],\"mapped\",[24460]],[[127518,127518],\"mapped\",[20877]],[[127519,127519],\"mapped\",[26032]],[[127520,127520],\"mapped\",[21021]],[[127521,127521],\"mapped\",[32066]],[[127522,127522],\"mapped\",[29983]],[[127523,127523],\"mapped\",[36009]],[[127524,127524],\"mapped\",[22768]],[[127525,127525],\"mapped\",[21561]],[[127526,127526],\"mapped\",[28436]],[[127527,127527],\"mapped\",[25237]],[[127528,127528],\"mapped\",[25429]],[[127529,127529],\"mapped\",[19968]],[[127530,127530],\"mapped\",[19977]],[[127531,127531],\"mapped\",[36938]],[[127532,127532],\"mapped\",[24038]],[[127533,127533],\"mapped\",[20013]],[[127534,127534],\"mapped\",[21491]],[[127535,127535],\"mapped\",[25351]],[[127536,127536],\"mapped\",[36208]],[[127537,127537],\"mapped\",[25171]],[[127538,127538],\"mapped\",[31105]],[[127539,127539],\"mapped\",[31354]],[[127540,127540],\"mapped\",[21512]],[[127541,127541],\"mapped\",[28288]],[[127542,127542],\"mapped\",[26377]],[[127543,127543],\"mapped\",[26376]],[[127544,127544],\"mapped\",[30003]],[[127545,127545],\"mapped\",[21106]],[[127546,127546],\"mapped\",[21942]],[[127547,127551],\"disallowed\"],[[127552,127552],\"mapped\",[12308,26412,12309]],[[127553,127553],\"mapped\",[12308,19977,12309]],[[127554,127554],\"mapped\",[12308,20108,12309]],[[127555,127555],\"mapped\",[12308,23433,12309]],[[127556,127556],\"mapped\",[12308,28857,12309]],[[127557,127557],\"mapped\",[12308,25171,12309]],[[127558,127558],\"mapped\",[12308,30423,12309]],[[127559,127559],\"mapped\",[12308,21213,12309]],[[127560,127560],\"mapped\",[12308,25943,12309]],[[127561,127567],\"disallowed\"],[[127568,127568],\"mapped\",[24471]],[[127569,127569],\"mapped\",[21487]],[[127570,127743],\"disallowed\"],[[127744,127776],\"valid\",[],\"NV8\"],[[127777,127788],\"valid\",[],\"NV8\"],[[127789,127791],\"valid\",[],\"NV8\"],[[127792,127797],\"valid\",[],\"NV8\"],[[127798,127798],\"valid\",[],\"NV8\"],[[127799,127868],\"valid\",[],\"NV8\"],[[127869,127869],\"valid\",[],\"NV8\"],[[127870,127871],\"valid\",[],\"NV8\"],[[127872,127891],\"valid\",[],\"NV8\"],[[127892,127903],\"valid\",[],\"NV8\"],[[127904,127940],\"valid\",[],\"NV8\"],[[127941,127941],\"valid\",[],\"NV8\"],[[127942,127946],\"valid\",[],\"NV8\"],[[127947,127950],\"valid\",[],\"NV8\"],[[127951,127955],\"valid\",[],\"NV8\"],[[127956,127967],\"valid\",[],\"NV8\"],[[127968,127984],\"valid\",[],\"NV8\"],[[127985,127991],\"valid\",[],\"NV8\"],[[127992,127999],\"valid\",[],\"NV8\"],[[128000,128062],\"valid\",[],\"NV8\"],[[128063,128063],\"valid\",[],\"NV8\"],[[128064,128064],\"valid\",[],\"NV8\"],[[128065,128065],\"valid\",[],\"NV8\"],[[128066,128247],\"valid\",[],\"NV8\"],[[128248,128248],\"valid\",[],\"NV8\"],[[128249,128252],\"valid\",[],\"NV8\"],[[128253,128254],\"valid\",[],\"NV8\"],[[128255,128255],\"valid\",[],\"NV8\"],[[128256,128317],\"valid\",[],\"NV8\"],[[128318,128319],\"valid\",[],\"NV8\"],[[128320,128323],\"valid\",[],\"NV8\"],[[128324,128330],\"valid\",[],\"NV8\"],[[128331,128335],\"valid\",[],\"NV8\"],[[128336,128359],\"valid\",[],\"NV8\"],[[128360,128377],\"valid\",[],\"NV8\"],[[128378,128378],\"disallowed\"],[[128379,128419],\"valid\",[],\"NV8\"],[[128420,128420],\"disallowed\"],[[128421,128506],\"valid\",[],\"NV8\"],[[128507,128511],\"valid\",[],\"NV8\"],[[128512,128512],\"valid\",[],\"NV8\"],[[128513,128528],\"valid\",[],\"NV8\"],[[128529,128529],\"valid\",[],\"NV8\"],[[128530,128532],\"valid\",[],\"NV8\"],[[128533,128533],\"valid\",[],\"NV8\"],[[128534,128534],\"valid\",[],\"NV8\"],[[128535,128535],\"valid\",[],\"NV8\"],[[128536,128536],\"valid\",[],\"NV8\"],[[128537,128537],\"valid\",[],\"NV8\"],[[128538,128538],\"valid\",[],\"NV8\"],[[128539,128539],\"valid\",[],\"NV8\"],[[128540,128542],\"valid\",[],\"NV8\"],[[128543,128543],\"valid\",[],\"NV8\"],[[128544,128549],\"valid\",[],\"NV8\"],[[128550,128551],\"valid\",[],\"NV8\"],[[128552,128555],\"valid\",[],\"NV8\"],[[128556,128556],\"valid\",[],\"NV8\"],[[128557,128557],\"valid\",[],\"NV8\"],[[128558,128559],\"valid\",[],\"NV8\"],[[128560,128563],\"valid\",[],\"NV8\"],[[128564,128564],\"valid\",[],\"NV8\"],[[128565,128576],\"valid\",[],\"NV8\"],[[128577,128578],\"valid\",[],\"NV8\"],[[128579,128580],\"valid\",[],\"NV8\"],[[128581,128591],\"valid\",[],\"NV8\"],[[128592,128639],\"valid\",[],\"NV8\"],[[128640,128709],\"valid\",[],\"NV8\"],[[128710,128719],\"valid\",[],\"NV8\"],[[128720,128720],\"valid\",[],\"NV8\"],[[128721,128735],\"disallowed\"],[[128736,128748],\"valid\",[],\"NV8\"],[[128749,128751],\"disallowed\"],[[128752,128755],\"valid\",[],\"NV8\"],[[128756,128767],\"disallowed\"],[[128768,128883],\"valid\",[],\"NV8\"],[[128884,128895],\"disallowed\"],[[128896,128980],\"valid\",[],\"NV8\"],[[128981,129023],\"disallowed\"],[[129024,129035],\"valid\",[],\"NV8\"],[[129036,129039],\"disallowed\"],[[129040,129095],\"valid\",[],\"NV8\"],[[129096,129103],\"disallowed\"],[[129104,129113],\"valid\",[],\"NV8\"],[[129114,129119],\"disallowed\"],[[129120,129159],\"valid\",[],\"NV8\"],[[129160,129167],\"disallowed\"],[[129168,129197],\"valid\",[],\"NV8\"],[[129198,129295],\"disallowed\"],[[129296,129304],\"valid\",[],\"NV8\"],[[129305,129407],\"disallowed\"],[[129408,129412],\"valid\",[],\"NV8\"],[[129413,129471],\"disallowed\"],[[129472,129472],\"valid\",[],\"NV8\"],[[129473,131069],\"disallowed\"],[[131070,131071],\"disallowed\"],[[131072,173782],\"valid\"],[[173783,173823],\"disallowed\"],[[173824,177972],\"valid\"],[[177973,177983],\"disallowed\"],[[177984,178205],\"valid\"],[[178206,178207],\"disallowed\"],[[178208,183969],\"valid\"],[[183970,194559],\"disallowed\"],[[194560,194560],\"mapped\",[20029]],[[194561,194561],\"mapped\",[20024]],[[194562,194562],\"mapped\",[20033]],[[194563,194563],\"mapped\",[131362]],[[194564,194564],\"mapped\",[20320]],[[194565,194565],\"mapped\",[20398]],[[194566,194566],\"mapped\",[20411]],[[194567,194567],\"mapped\",[20482]],[[194568,194568],\"mapped\",[20602]],[[194569,194569],\"mapped\",[20633]],[[194570,194570],\"mapped\",[20711]],[[194571,194571],\"mapped\",[20687]],[[194572,194572],\"mapped\",[13470]],[[194573,194573],\"mapped\",[132666]],[[194574,194574],\"mapped\",[20813]],[[194575,194575],\"mapped\",[20820]],[[194576,194576],\"mapped\",[20836]],[[194577,194577],\"mapped\",[20855]],[[194578,194578],\"mapped\",[132380]],[[194579,194579],\"mapped\",[13497]],[[194580,194580],\"mapped\",[20839]],[[194581,194581],\"mapped\",[20877]],[[194582,194582],\"mapped\",[132427]],[[194583,194583],\"mapped\",[20887]],[[194584,194584],\"mapped\",[20900]],[[194585,194585],\"mapped\",[20172]],[[194586,194586],\"mapped\",[20908]],[[194587,194587],\"mapped\",[20917]],[[194588,194588],\"mapped\",[168415]],[[194589,194589],\"mapped\",[20981]],[[194590,194590],\"mapped\",[20995]],[[194591,194591],\"mapped\",[13535]],[[194592,194592],\"mapped\",[21051]],[[194593,194593],\"mapped\",[21062]],[[194594,194594],\"mapped\",[21106]],[[194595,194595],\"mapped\",[21111]],[[194596,194596],\"mapped\",[13589]],[[194597,194597],\"mapped\",[21191]],[[194598,194598],\"mapped\",[21193]],[[194599,194599],\"mapped\",[21220]],[[194600,194600],\"mapped\",[21242]],[[194601,194601],\"mapped\",[21253]],[[194602,194602],\"mapped\",[21254]],[[194603,194603],\"mapped\",[21271]],[[194604,194604],\"mapped\",[21321]],[[194605,194605],\"mapped\",[21329]],[[194606,194606],\"mapped\",[21338]],[[194607,194607],\"mapped\",[21363]],[[194608,194608],\"mapped\",[21373]],[[194609,194611],\"mapped\",[21375]],[[194612,194612],\"mapped\",[133676]],[[194613,194613],\"mapped\",[28784]],[[194614,194614],\"mapped\",[21450]],[[194615,194615],\"mapped\",[21471]],[[194616,194616],\"mapped\",[133987]],[[194617,194617],\"mapped\",[21483]],[[194618,194618],\"mapped\",[21489]],[[194619,194619],\"mapped\",[21510]],[[194620,194620],\"mapped\",[21662]],[[194621,194621],\"mapped\",[21560]],[[194622,194622],\"mapped\",[21576]],[[194623,194623],\"mapped\",[21608]],[[194624,194624],\"mapped\",[21666]],[[194625,194625],\"mapped\",[21750]],[[194626,194626],\"mapped\",[21776]],[[194627,194627],\"mapped\",[21843]],[[194628,194628],\"mapped\",[21859]],[[194629,194630],\"mapped\",[21892]],[[194631,194631],\"mapped\",[21913]],[[194632,194632],\"mapped\",[21931]],[[194633,194633],\"mapped\",[21939]],[[194634,194634],\"mapped\",[21954]],[[194635,194635],\"mapped\",[22294]],[[194636,194636],\"mapped\",[22022]],[[194637,194637],\"mapped\",[22295]],[[194638,194638],\"mapped\",[22097]],[[194639,194639],\"mapped\",[22132]],[[194640,194640],\"mapped\",[20999]],[[194641,194641],\"mapped\",[22766]],[[194642,194642],\"mapped\",[22478]],[[194643,194643],\"mapped\",[22516]],[[194644,194644],\"mapped\",[22541]],[[194645,194645],\"mapped\",[22411]],[[194646,194646],\"mapped\",[22578]],[[194647,194647],\"mapped\",[22577]],[[194648,194648],\"mapped\",[22700]],[[194649,194649],\"mapped\",[136420]],[[194650,194650],\"mapped\",[22770]],[[194651,194651],\"mapped\",[22775]],[[194652,194652],\"mapped\",[22790]],[[194653,194653],\"mapped\",[22810]],[[194654,194654],\"mapped\",[22818]],[[194655,194655],\"mapped\",[22882]],[[194656,194656],\"mapped\",[136872]],[[194657,194657],\"mapped\",[136938]],[[194658,194658],\"mapped\",[23020]],[[194659,194659],\"mapped\",[23067]],[[194660,194660],\"mapped\",[23079]],[[194661,194661],\"mapped\",[23000]],[[194662,194662],\"mapped\",[23142]],[[194663,194663],\"mapped\",[14062]],[[194664,194664],\"disallowed\"],[[194665,194665],\"mapped\",[23304]],[[194666,194667],\"mapped\",[23358]],[[194668,194668],\"mapped\",[137672]],[[194669,194669],\"mapped\",[23491]],[[194670,194670],\"mapped\",[23512]],[[194671,194671],\"mapped\",[23527]],[[194672,194672],\"mapped\",[23539]],[[194673,194673],\"mapped\",[138008]],[[194674,194674],\"mapped\",[23551]],[[194675,194675],\"mapped\",[23558]],[[194676,194676],\"disallowed\"],[[194677,194677],\"mapped\",[23586]],[[194678,194678],\"mapped\",[14209]],[[194679,194679],\"mapped\",[23648]],[[194680,194680],\"mapped\",[23662]],[[194681,194681],\"mapped\",[23744]],[[194682,194682],\"mapped\",[23693]],[[194683,194683],\"mapped\",[138724]],[[194684,194684],\"mapped\",[23875]],[[194685,194685],\"mapped\",[138726]],[[194686,194686],\"mapped\",[23918]],[[194687,194687],\"mapped\",[23915]],[[194688,194688],\"mapped\",[23932]],[[194689,194689],\"mapped\",[24033]],[[194690,194690],\"mapped\",[24034]],[[194691,194691],\"mapped\",[14383]],[[194692,194692],\"mapped\",[24061]],[[194693,194693],\"mapped\",[24104]],[[194694,194694],\"mapped\",[24125]],[[194695,194695],\"mapped\",[24169]],[[194696,194696],\"mapped\",[14434]],[[194697,194697],\"mapped\",[139651]],[[194698,194698],\"mapped\",[14460]],[[194699,194699],\"mapped\",[24240]],[[194700,194700],\"mapped\",[24243]],[[194701,194701],\"mapped\",[24246]],[[194702,194702],\"mapped\",[24266]],[[194703,194703],\"mapped\",[172946]],[[194704,194704],\"mapped\",[24318]],[[194705,194706],\"mapped\",[140081]],[[194707,194707],\"mapped\",[33281]],[[194708,194709],\"mapped\",[24354]],[[194710,194710],\"mapped\",[14535]],[[194711,194711],\"mapped\",[144056]],[[194712,194712],\"mapped\",[156122]],[[194713,194713],\"mapped\",[24418]],[[194714,194714],\"mapped\",[24427]],[[194715,194715],\"mapped\",[14563]],[[194716,194716],\"mapped\",[24474]],[[194717,194717],\"mapped\",[24525]],[[194718,194718],\"mapped\",[24535]],[[194719,194719],\"mapped\",[24569]],[[194720,194720],\"mapped\",[24705]],[[194721,194721],\"mapped\",[14650]],[[194722,194722],\"mapped\",[14620]],[[194723,194723],\"mapped\",[24724]],[[194724,194724],\"mapped\",[141012]],[[194725,194725],\"mapped\",[24775]],[[194726,194726],\"mapped\",[24904]],[[194727,194727],\"mapped\",[24908]],[[194728,194728],\"mapped\",[24910]],[[194729,194729],\"mapped\",[24908]],[[194730,194730],\"mapped\",[24954]],[[194731,194731],\"mapped\",[24974]],[[194732,194732],\"mapped\",[25010]],[[194733,194733],\"mapped\",[24996]],[[194734,194734],\"mapped\",[25007]],[[194735,194735],\"mapped\",[25054]],[[194736,194736],\"mapped\",[25074]],[[194737,194737],\"mapped\",[25078]],[[194738,194738],\"mapped\",[25104]],[[194739,194739],\"mapped\",[25115]],[[194740,194740],\"mapped\",[25181]],[[194741,194741],\"mapped\",[25265]],[[194742,194742],\"mapped\",[25300]],[[194743,194743],\"mapped\",[25424]],[[194744,194744],\"mapped\",[142092]],[[194745,194745],\"mapped\",[25405]],[[194746,194746],\"mapped\",[25340]],[[194747,194747],\"mapped\",[25448]],[[194748,194748],\"mapped\",[25475]],[[194749,194749],\"mapped\",[25572]],[[194750,194750],\"mapped\",[142321]],[[194751,194751],\"mapped\",[25634]],[[194752,194752],\"mapped\",[25541]],[[194753,194753],\"mapped\",[25513]],[[194754,194754],\"mapped\",[14894]],[[194755,194755],\"mapped\",[25705]],[[194756,194756],\"mapped\",[25726]],[[194757,194757],\"mapped\",[25757]],[[194758,194758],\"mapped\",[25719]],[[194759,194759],\"mapped\",[14956]],[[194760,194760],\"mapped\",[25935]],[[194761,194761],\"mapped\",[25964]],[[194762,194762],\"mapped\",[143370]],[[194763,194763],\"mapped\",[26083]],[[194764,194764],\"mapped\",[26360]],[[194765,194765],\"mapped\",[26185]],[[194766,194766],\"mapped\",[15129]],[[194767,194767],\"mapped\",[26257]],[[194768,194768],\"mapped\",[15112]],[[194769,194769],\"mapped\",[15076]],[[194770,194770],\"mapped\",[20882]],[[194771,194771],\"mapped\",[20885]],[[194772,194772],\"mapped\",[26368]],[[194773,194773],\"mapped\",[26268]],[[194774,194774],\"mapped\",[32941]],[[194775,194775],\"mapped\",[17369]],[[194776,194776],\"mapped\",[26391]],[[194777,194777],\"mapped\",[26395]],[[194778,194778],\"mapped\",[26401]],[[194779,194779],\"mapped\",[26462]],[[194780,194780],\"mapped\",[26451]],[[194781,194781],\"mapped\",[144323]],[[194782,194782],\"mapped\",[15177]],[[194783,194783],\"mapped\",[26618]],[[194784,194784],\"mapped\",[26501]],[[194785,194785],\"mapped\",[26706]],[[194786,194786],\"mapped\",[26757]],[[194787,194787],\"mapped\",[144493]],[[194788,194788],\"mapped\",[26766]],[[194789,194789],\"mapped\",[26655]],[[194790,194790],\"mapped\",[26900]],[[194791,194791],\"mapped\",[15261]],[[194792,194792],\"mapped\",[26946]],[[194793,194793],\"mapped\",[27043]],[[194794,194794],\"mapped\",[27114]],[[194795,194795],\"mapped\",[27304]],[[194796,194796],\"mapped\",[145059]],[[194797,194797],\"mapped\",[27355]],[[194798,194798],\"mapped\",[15384]],[[194799,194799],\"mapped\",[27425]],[[194800,194800],\"mapped\",[145575]],[[194801,194801],\"mapped\",[27476]],[[194802,194802],\"mapped\",[15438]],[[194803,194803],\"mapped\",[27506]],[[194804,194804],\"mapped\",[27551]],[[194805,194805],\"mapped\",[27578]],[[194806,194806],\"mapped\",[27579]],[[194807,194807],\"mapped\",[146061]],[[194808,194808],\"mapped\",[138507]],[[194809,194809],\"mapped\",[146170]],[[194810,194810],\"mapped\",[27726]],[[194811,194811],\"mapped\",[146620]],[[194812,194812],\"mapped\",[27839]],[[194813,194813],\"mapped\",[27853]],[[194814,194814],\"mapped\",[27751]],[[194815,194815],\"mapped\",[27926]],[[194816,194816],\"mapped\",[27966]],[[194817,194817],\"mapped\",[28023]],[[194818,194818],\"mapped\",[27969]],[[194819,194819],\"mapped\",[28009]],[[194820,194820],\"mapped\",[28024]],[[194821,194821],\"mapped\",[28037]],[[194822,194822],\"mapped\",[146718]],[[194823,194823],\"mapped\",[27956]],[[194824,194824],\"mapped\",[28207]],[[194825,194825],\"mapped\",[28270]],[[194826,194826],\"mapped\",[15667]],[[194827,194827],\"mapped\",[28363]],[[194828,194828],\"mapped\",[28359]],[[194829,194829],\"mapped\",[147153]],[[194830,194830],\"mapped\",[28153]],[[194831,194831],\"mapped\",[28526]],[[194832,194832],\"mapped\",[147294]],[[194833,194833],\"mapped\",[147342]],[[194834,194834],\"mapped\",[28614]],[[194835,194835],\"mapped\",[28729]],[[194836,194836],\"mapped\",[28702]],[[194837,194837],\"mapped\",[28699]],[[194838,194838],\"mapped\",[15766]],[[194839,194839],\"mapped\",[28746]],[[194840,194840],\"mapped\",[28797]],[[194841,194841],\"mapped\",[28791]],[[194842,194842],\"mapped\",[28845]],[[194843,194843],\"mapped\",[132389]],[[194844,194844],\"mapped\",[28997]],[[194845,194845],\"mapped\",[148067]],[[194846,194846],\"mapped\",[29084]],[[194847,194847],\"disallowed\"],[[194848,194848],\"mapped\",[29224]],[[194849,194849],\"mapped\",[29237]],[[194850,194850],\"mapped\",[29264]],[[194851,194851],\"mapped\",[149000]],[[194852,194852],\"mapped\",[29312]],[[194853,194853],\"mapped\",[29333]],[[194854,194854],\"mapped\",[149301]],[[194855,194855],\"mapped\",[149524]],[[194856,194856],\"mapped\",[29562]],[[194857,194857],\"mapped\",[29579]],[[194858,194858],\"mapped\",[16044]],[[194859,194859],\"mapped\",[29605]],[[194860,194861],\"mapped\",[16056]],[[194862,194862],\"mapped\",[29767]],[[194863,194863],\"mapped\",[29788]],[[194864,194864],\"mapped\",[29809]],[[194865,194865],\"mapped\",[29829]],[[194866,194866],\"mapped\",[29898]],[[194867,194867],\"mapped\",[16155]],[[194868,194868],\"mapped\",[29988]],[[194869,194869],\"mapped\",[150582]],[[194870,194870],\"mapped\",[30014]],[[194871,194871],\"mapped\",[150674]],[[194872,194872],\"mapped\",[30064]],[[194873,194873],\"mapped\",[139679]],[[194874,194874],\"mapped\",[30224]],[[194875,194875],\"mapped\",[151457]],[[194876,194876],\"mapped\",[151480]],[[194877,194877],\"mapped\",[151620]],[[194878,194878],\"mapped\",[16380]],[[194879,194879],\"mapped\",[16392]],[[194880,194880],\"mapped\",[30452]],[[194881,194881],\"mapped\",[151795]],[[194882,194882],\"mapped\",[151794]],[[194883,194883],\"mapped\",[151833]],[[194884,194884],\"mapped\",[151859]],[[194885,194885],\"mapped\",[30494]],[[194886,194887],\"mapped\",[30495]],[[194888,194888],\"mapped\",[30538]],[[194889,194889],\"mapped\",[16441]],[[194890,194890],\"mapped\",[30603]],[[194891,194891],\"mapped\",[16454]],[[194892,194892],\"mapped\",[16534]],[[194893,194893],\"mapped\",[152605]],[[194894,194894],\"mapped\",[30798]],[[194895,194895],\"mapped\",[30860]],[[194896,194896],\"mapped\",[30924]],[[194897,194897],\"mapped\",[16611]],[[194898,194898],\"mapped\",[153126]],[[194899,194899],\"mapped\",[31062]],[[194900,194900],\"mapped\",[153242]],[[194901,194901],\"mapped\",[153285]],[[194902,194902],\"mapped\",[31119]],[[194903,194903],\"mapped\",[31211]],[[194904,194904],\"mapped\",[16687]],[[194905,194905],\"mapped\",[31296]],[[194906,194906],\"mapped\",[31306]],[[194907,194907],\"mapped\",[31311]],[[194908,194908],\"mapped\",[153980]],[[194909,194910],\"mapped\",[154279]],[[194911,194911],\"disallowed\"],[[194912,194912],\"mapped\",[16898]],[[194913,194913],\"mapped\",[154539]],[[194914,194914],\"mapped\",[31686]],[[194915,194915],\"mapped\",[31689]],[[194916,194916],\"mapped\",[16935]],[[194917,194917],\"mapped\",[154752]],[[194918,194918],\"mapped\",[31954]],[[194919,194919],\"mapped\",[17056]],[[194920,194920],\"mapped\",[31976]],[[194921,194921],\"mapped\",[31971]],[[194922,194922],\"mapped\",[32000]],[[194923,194923],\"mapped\",[155526]],[[194924,194924],\"mapped\",[32099]],[[194925,194925],\"mapped\",[17153]],[[194926,194926],\"mapped\",[32199]],[[194927,194927],\"mapped\",[32258]],[[194928,194928],\"mapped\",[32325]],[[194929,194929],\"mapped\",[17204]],[[194930,194930],\"mapped\",[156200]],[[194931,194931],\"mapped\",[156231]],[[194932,194932],\"mapped\",[17241]],[[194933,194933],\"mapped\",[156377]],[[194934,194934],\"mapped\",[32634]],[[194935,194935],\"mapped\",[156478]],[[194936,194936],\"mapped\",[32661]],[[194937,194937],\"mapped\",[32762]],[[194938,194938],\"mapped\",[32773]],[[194939,194939],\"mapped\",[156890]],[[194940,194940],\"mapped\",[156963]],[[194941,194941],\"mapped\",[32864]],[[194942,194942],\"mapped\",[157096]],[[194943,194943],\"mapped\",[32880]],[[194944,194944],\"mapped\",[144223]],[[194945,194945],\"mapped\",[17365]],[[194946,194946],\"mapped\",[32946]],[[194947,194947],\"mapped\",[33027]],[[194948,194948],\"mapped\",[17419]],[[194949,194949],\"mapped\",[33086]],[[194950,194950],\"mapped\",[23221]],[[194951,194951],\"mapped\",[157607]],[[194952,194952],\"mapped\",[157621]],[[194953,194953],\"mapped\",[144275]],[[194954,194954],\"mapped\",[144284]],[[194955,194955],\"mapped\",[33281]],[[194956,194956],\"mapped\",[33284]],[[194957,194957],\"mapped\",[36766]],[[194958,194958],\"mapped\",[17515]],[[194959,194959],\"mapped\",[33425]],[[194960,194960],\"mapped\",[33419]],[[194961,194961],\"mapped\",[33437]],[[194962,194962],\"mapped\",[21171]],[[194963,194963],\"mapped\",[33457]],[[194964,194964],\"mapped\",[33459]],[[194965,194965],\"mapped\",[33469]],[[194966,194966],\"mapped\",[33510]],[[194967,194967],\"mapped\",[158524]],[[194968,194968],\"mapped\",[33509]],[[194969,194969],\"mapped\",[33565]],[[194970,194970],\"mapped\",[33635]],[[194971,194971],\"mapped\",[33709]],[[194972,194972],\"mapped\",[33571]],[[194973,194973],\"mapped\",[33725]],[[194974,194974],\"mapped\",[33767]],[[194975,194975],\"mapped\",[33879]],[[194976,194976],\"mapped\",[33619]],[[194977,194977],\"mapped\",[33738]],[[194978,194978],\"mapped\",[33740]],[[194979,194979],\"mapped\",[33756]],[[194980,194980],\"mapped\",[158774]],[[194981,194981],\"mapped\",[159083]],[[194982,194982],\"mapped\",[158933]],[[194983,194983],\"mapped\",[17707]],[[194984,194984],\"mapped\",[34033]],[[194985,194985],\"mapped\",[34035]],[[194986,194986],\"mapped\",[34070]],[[194987,194987],\"mapped\",[160714]],[[194988,194988],\"mapped\",[34148]],[[194989,194989],\"mapped\",[159532]],[[194990,194990],\"mapped\",[17757]],[[194991,194991],\"mapped\",[17761]],[[194992,194992],\"mapped\",[159665]],[[194993,194993],\"mapped\",[159954]],[[194994,194994],\"mapped\",[17771]],[[194995,194995],\"mapped\",[34384]],[[194996,194996],\"mapped\",[34396]],[[194997,194997],\"mapped\",[34407]],[[194998,194998],\"mapped\",[34409]],[[194999,194999],\"mapped\",[34473]],[[195000,195000],\"mapped\",[34440]],[[195001,195001],\"mapped\",[34574]],[[195002,195002],\"mapped\",[34530]],[[195003,195003],\"mapped\",[34681]],[[195004,195004],\"mapped\",[34600]],[[195005,195005],\"mapped\",[34667]],[[195006,195006],\"mapped\",[34694]],[[195007,195007],\"disallowed\"],[[195008,195008],\"mapped\",[34785]],[[195009,195009],\"mapped\",[34817]],[[195010,195010],\"mapped\",[17913]],[[195011,195011],\"mapped\",[34912]],[[195012,195012],\"mapped\",[34915]],[[195013,195013],\"mapped\",[161383]],[[195014,195014],\"mapped\",[35031]],[[195015,195015],\"mapped\",[35038]],[[195016,195016],\"mapped\",[17973]],[[195017,195017],\"mapped\",[35066]],[[195018,195018],\"mapped\",[13499]],[[195019,195019],\"mapped\",[161966]],[[195020,195020],\"mapped\",[162150]],[[195021,195021],\"mapped\",[18110]],[[195022,195022],\"mapped\",[18119]],[[195023,195023],\"mapped\",[35488]],[[195024,195024],\"mapped\",[35565]],[[195025,195025],\"mapped\",[35722]],[[195026,195026],\"mapped\",[35925]],[[195027,195027],\"mapped\",[162984]],[[195028,195028],\"mapped\",[36011]],[[195029,195029],\"mapped\",[36033]],[[195030,195030],\"mapped\",[36123]],[[195031,195031],\"mapped\",[36215]],[[195032,195032],\"mapped\",[163631]],[[195033,195033],\"mapped\",[133124]],[[195034,195034],\"mapped\",[36299]],[[195035,195035],\"mapped\",[36284]],[[195036,195036],\"mapped\",[36336]],[[195037,195037],\"mapped\",[133342]],[[195038,195038],\"mapped\",[36564]],[[195039,195039],\"mapped\",[36664]],[[195040,195040],\"mapped\",[165330]],[[195041,195041],\"mapped\",[165357]],[[195042,195042],\"mapped\",[37012]],[[195043,195043],\"mapped\",[37105]],[[195044,195044],\"mapped\",[37137]],[[195045,195045],\"mapped\",[165678]],[[195046,195046],\"mapped\",[37147]],[[195047,195047],\"mapped\",[37432]],[[195048,195048],\"mapped\",[37591]],[[195049,195049],\"mapped\",[37592]],[[195050,195050],\"mapped\",[37500]],[[195051,195051],\"mapped\",[37881]],[[195052,195052],\"mapped\",[37909]],[[195053,195053],\"mapped\",[166906]],[[195054,195054],\"mapped\",[38283]],[[195055,195055],\"mapped\",[18837]],[[195056,195056],\"mapped\",[38327]],[[195057,195057],\"mapped\",[167287]],[[195058,195058],\"mapped\",[18918]],[[195059,195059],\"mapped\",[38595]],[[195060,195060],\"mapped\",[23986]],[[195061,195061],\"mapped\",[38691]],[[195062,195062],\"mapped\",[168261]],[[195063,195063],\"mapped\",[168474]],[[195064,195064],\"mapped\",[19054]],[[195065,195065],\"mapped\",[19062]],[[195066,195066],\"mapped\",[38880]],[[195067,195067],\"mapped\",[168970]],[[195068,195068],\"mapped\",[19122]],[[195069,195069],\"mapped\",[169110]],[[195070,195071],\"mapped\",[38923]],[[195072,195072],\"mapped\",[38953]],[[195073,195073],\"mapped\",[169398]],[[195074,195074],\"mapped\",[39138]],[[195075,195075],\"mapped\",[19251]],[[195076,195076],\"mapped\",[39209]],[[195077,195077],\"mapped\",[39335]],[[195078,195078],\"mapped\",[39362]],[[195079,195079],\"mapped\",[39422]],[[195080,195080],\"mapped\",[19406]],[[195081,195081],\"mapped\",[170800]],[[195082,195082],\"mapped\",[39698]],[[195083,195083],\"mapped\",[40000]],[[195084,195084],\"mapped\",[40189]],[[195085,195085],\"mapped\",[19662]],[[195086,195086],\"mapped\",[19693]],[[195087,195087],\"mapped\",[40295]],[[195088,195088],\"mapped\",[172238]],[[195089,195089],\"mapped\",[19704]],[[195090,195090],\"mapped\",[172293]],[[195091,195091],\"mapped\",[172558]],[[195092,195092],\"mapped\",[172689]],[[195093,195093],\"mapped\",[40635]],[[195094,195094],\"mapped\",[19798]],[[195095,195095],\"mapped\",[40697]],[[195096,195096],\"mapped\",[40702]],[[195097,195097],\"mapped\",[40709]],[[195098,195098],\"mapped\",[40719]],[[195099,195099],\"mapped\",[40726]],[[195100,195100],\"mapped\",[40763]],[[195101,195101],\"mapped\",[173568]],[[195102,196605],\"disallowed\"],[[196606,196607],\"disallowed\"],[[196608,262141],\"disallowed\"],[[262142,262143],\"disallowed\"],[[262144,327677],\"disallowed\"],[[327678,327679],\"disallowed\"],[[327680,393213],\"disallowed\"],[[393214,393215],\"disallowed\"],[[393216,458749],\"disallowed\"],[[458750,458751],\"disallowed\"],[[458752,524285],\"disallowed\"],[[524286,524287],\"disallowed\"],[[524288,589821],\"disallowed\"],[[589822,589823],\"disallowed\"],[[589824,655357],\"disallowed\"],[[655358,655359],\"disallowed\"],[[655360,720893],\"disallowed\"],[[720894,720895],\"disallowed\"],[[720896,786429],\"disallowed\"],[[786430,786431],\"disallowed\"],[[786432,851965],\"disallowed\"],[[851966,851967],\"disallowed\"],[[851968,917501],\"disallowed\"],[[917502,917503],\"disallowed\"],[[917504,917504],\"disallowed\"],[[917505,917505],\"disallowed\"],[[917506,917535],\"disallowed\"],[[917536,917631],\"disallowed\"],[[917632,917759],\"disallowed\"],[[917760,917999],\"ignored\"],[[918000,983037],\"disallowed\"],[[983038,983039],\"disallowed\"],[[983040,1048573],\"disallowed\"],[[1048574,1048575],\"disallowed\"],[[1048576,1114109],\"disallowed\"],[[1114110,1114111],\"disallowed\"]]");

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(15);

const shared = __webpack_require__(5);

const mimeTypes = __webpack_require__(46);

const MailComposer = __webpack_require__(91);

const DKIM = __webpack_require__(95);

const httpProxyClient = __webpack_require__(99);

const util = __webpack_require__(12);

const urllib = __webpack_require__(1);

const packageData = __webpack_require__(8);

const MailMessage = __webpack_require__(100);

const net = __webpack_require__(26);

const dns = __webpack_require__(45);

const crypto = __webpack_require__(13);
/**
 * Creates an object for exposing the Mail API
 *
 * @constructor
 * @param {Object} transporter Transport object instance to pass the mails to
 */


class Mail extends EventEmitter {
  constructor(transporter, options, defaults) {
    super();
    this.options = options || {};
    this._defaults = defaults || {};
    this._defaultPlugins = {
      compile: [(...args) => this._convertDataImages(...args)],
      stream: []
    };
    this._userPlugins = {
      compile: [],
      stream: []
    };
    this.meta = new Map();
    this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;
    this.transporter = transporter;
    this.transporter.mailer = this;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'mail'
    });
    this.logger.debug({
      tnx: 'create'
    }, 'Creating transport: %s', this.getVersionString()); // setup emit handlers for the transporter

    if (typeof this.transporter.on === 'function') {
      // deprecated log interface
      this.transporter.on('log', log => {
        this.logger.debug({
          tnx: 'transport'
        }, '%s: %s', log.type, log.message);
      }); // transporter errors

      this.transporter.on('error', err => {
        this.logger.error({
          err,
          tnx: 'transport'
        }, 'Transport Error: %s', err.message);
        this.emit('error', err);
      }); // indicates if the sender has became idle

      this.transporter.on('idle', (...args) => {
        this.emit('idle', ...args);
      });
    }
    /**
     * Optional methods passed to the underlying transport object
     */


    ['close', 'isIdle', 'verify'].forEach(method => {
      this[method] = (...args) => {
        if (typeof this.transporter[method] === 'function') {
          if (method === 'verify' && typeof this.getSocket === 'function') {
            this.transporter.getSocket = this.getSocket;
            this.getSocket = false;
          }

          return this.transporter[method](...args);
        } else {
          this.logger.warn({
            tnx: 'transport',
            methodName: method
          }, 'Non existing method %s called for transport', method);
          return false;
        }
      };
    }); // setup proxy handling

    if (this.options.proxy && typeof this.options.proxy === 'string') {
      this.setupProxy(this.options.proxy);
    }
  }

  use(step, plugin) {
    step = (step || '').toString();

    if (!this._userPlugins.hasOwnProperty(step)) {
      this._userPlugins[step] = [plugin];
    } else {
      this._userPlugins[step].push(plugin);
    }

    return this;
  }
  /**
   * Sends an email using the preselected transport object
   *
   * @param {Object} data E-data description
   * @param {Function?} callback Callback to run once the sending succeeded or failed
   */


  sendMail(data, callback) {
    let promise;

    if (!callback) {
      promise = new Promise((resolve, reject) => {
        callback = shared.callbackPromise(resolve, reject);
      });
    }

    if (typeof this.getSocket === 'function') {
      this.transporter.getSocket = this.getSocket;
      this.getSocket = false;
    }

    let mail = new MailMessage(this, data);
    this.logger.debug({
      tnx: 'transport',
      name: this.transporter.name,
      version: this.transporter.version,
      action: 'send'
    }, 'Sending mail using %s/%s', this.transporter.name, this.transporter.version);

    this._processPlugins('compile', mail, err => {
      if (err) {
        this.logger.error({
          err,
          tnx: 'plugin',
          action: 'compile'
        }, 'PluginCompile Error: %s', err.message);
        return callback(err);
      }

      mail.message = new MailComposer(mail.data).compile();
      mail.setMailerHeader();
      mail.setPriorityHeaders();
      mail.setListHeaders();

      this._processPlugins('stream', mail, err => {
        if (err) {
          this.logger.error({
            err,
            tnx: 'plugin',
            action: 'stream'
          }, 'PluginStream Error: %s', err.message);
          return callback(err);
        }

        if (mail.data.dkim || this.dkim) {
          mail.message.processFunc(input => {
            let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;
            this.logger.debug({
              tnx: 'DKIM',
              messageId: mail.message.messageId(),
              dkimDomains: dkim.keys.map(key => key.keySelector + '.' + key.domainName).join(', ')
            }, 'Signing outgoing message with %s keys', dkim.keys.length);
            return dkim.sign(input, mail.data._dkim);
          });
        }

        this.transporter.send(mail, (...args) => {
          if (args[0]) {
            this.logger.error({
              err: args[0],
              tnx: 'transport',
              action: 'send'
            }, 'Send Error: %s', args[0].message);
          }

          callback(...args);
        });
      });
    });

    return promise;
  }

  getVersionString() {
    return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);
  }

  _processPlugins(step, mail, callback) {
    step = (step || '').toString();

    if (!this._userPlugins.hasOwnProperty(step)) {
      return callback();
    }

    let userPlugins = this._userPlugins[step] || [];
    let defaultPlugins = this._defaultPlugins[step] || [];

    if (userPlugins.length) {
      this.logger.debug({
        tnx: 'transaction',
        pluginCount: userPlugins.length,
        step
      }, 'Using %s plugins for %s', userPlugins.length, step);
    }

    if (userPlugins.length + defaultPlugins.length === 0) {
      return callback();
    }

    let pos = 0;
    let block = 'default';

    let processPlugins = () => {
      let curplugins = block === 'default' ? defaultPlugins : userPlugins;

      if (pos >= curplugins.length) {
        if (block === 'default' && userPlugins.length) {
          block = 'user';
          pos = 0;
          curplugins = userPlugins;
        } else {
          return callback();
        }
      }

      let plugin = curplugins[pos++];
      plugin(mail, err => {
        if (err) {
          return callback(err);
        }

        processPlugins();
      });
    };

    processPlugins();
  }
  /**
   * Sets up proxy handler for a Nodemailer object
   *
   * @param {String} proxyUrl Proxy configuration url
   */


  setupProxy(proxyUrl) {
    let proxy = urllib.parse(proxyUrl); // setup socket handler for the mailer object

    this.getSocket = (options, callback) => {
      let protocol = proxy.protocol.replace(/:$/, '').toLowerCase();

      if (this.meta.has('proxy_handler_' + protocol)) {
        return this.meta.get('proxy_handler_' + protocol)(proxy, options, callback);
      }

      switch (protocol) {
        // Connect using a HTTP CONNECT method
        case 'http':
        case 'https':
          httpProxyClient(proxy.href, options.port, options.host, (err, socket) => {
            if (err) {
              return callback(err);
            }

            return callback(null, {
              connection: socket
            });
          });
          return;

        case 'socks':
        case 'socks5':
        case 'socks4':
        case 'socks4a':
          {
            if (!this.meta.has('proxy_socks_module')) {
              return callback(new Error('Socks module not loaded'));
            }

            let connect = ipaddress => {
              let proxyV2 = !!this.meta.get('proxy_socks_module').SocksClient;
              let socksClient = proxyV2 ? this.meta.get('proxy_socks_module').SocksClient : this.meta.get('proxy_socks_module');
              let proxyType = Number(proxy.protocol.replace(/\D/g, '')) || 5;
              let connectionOpts = {
                proxy: {
                  ipaddress,
                  port: Number(proxy.port),
                  type: proxyType
                },
                [proxyV2 ? 'destination' : 'target']: {
                  host: options.host,
                  port: options.port
                },
                command: 'connect'
              };

              if (proxy.auth) {
                let username = decodeURIComponent(proxy.auth.split(':').shift());
                let password = decodeURIComponent(proxy.auth.split(':').pop());

                if (proxyV2) {
                  connectionOpts.proxy.userId = username;
                  connectionOpts.proxy.password = password;
                } else if (proxyType === 4) {
                  connectionOpts.userid = username;
                } else {
                  connectionOpts.authentication = {
                    username,
                    password
                  };
                }
              }

              socksClient.createConnection(connectionOpts, (err, info) => {
                if (err) {
                  return callback(err);
                }

                return callback(null, {
                  connection: info.socket || info
                });
              });
            };

            if (net.isIP(proxy.hostname)) {
              return connect(proxy.hostname);
            }

            return dns.resolve(proxy.hostname, (err, address) => {
              if (err) {
                return callback(err);
              }

              connect(Array.isArray(address) ? address[0] : address);
            });
          }
      }

      callback(new Error('Unknown proxy configuration'));
    };
  }

  _convertDataImages(mail, callback) {
    if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {
      return callback();
    }

    mail.resolveContent(mail.data, 'html', (err, html) => {
      if (err) {
        return callback(err);
      }

      let cidCounter = 0;
      html = (html || '').toString().replace(/(<img\b[^>]* src\s*=[\s"']*)(data:([^;]+);[^"'>\s]+)/gi, (match, prefix, dataUri, mimeType) => {
        let cid = crypto.randomBytes(10).toString('hex') + '@localhost';

        if (!mail.data.attachments) {
          mail.data.attachments = [];
        }

        if (!Array.isArray(mail.data.attachments)) {
          mail.data.attachments = [].concat(mail.data.attachments || []);
        }

        mail.data.attachments.push({
          path: dataUri,
          cid,
          filename: 'image-' + ++cidCounter + '.' + mimeTypes.detectExtension(mimeType)
        });
        return prefix + 'cid:' + cid;
      });
      mail.data.html = html;
      callback();
    });
  }

  set(key, value) {
    return this.meta.set(key, value);
  }

  get(key) {
    return this.meta.get(key);
  }

}

module.exports = Mail;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // module to handle cookies

const urllib = __webpack_require__(1);

const SESSION_TIMEOUT = 1800; // 30 min

/**
 * Creates a biskviit cookie jar for managing cookie values in memory
 *
 * @constructor
 * @param {Object} [options] Optional options object
 */

class Cookies {
  constructor(options) {
    this.options = options || {};
    this.cookies = [];
  }
  /**
   * Stores a cookie string to the cookie storage
   *
   * @param {String} cookieStr Value from the 'Set-Cookie:' header
   * @param {String} url Current URL
   */


  set(cookieStr, url) {
    let urlparts = urllib.parse(url || '');
    let cookie = this.parse(cookieStr);
    let domain;

    if (cookie.domain) {
      domain = cookie.domain.replace(/^\./, ''); // do not allow cross origin cookies

      if ( // can't be valid if the requested domain is shorter than current hostname
      urlparts.hostname.length < domain.length || // prefix domains with dot to be sure that partial matches are not used
      ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain) {
        cookie.domain = urlparts.hostname;
      }
    } else {
      cookie.domain = urlparts.hostname;
    }

    if (!cookie.path) {
      cookie.path = this.getPath(urlparts.pathname);
    } // if no expire date, then use sessionTimeout value


    if (!cookie.expires) {
      cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);
    }

    return this.add(cookie);
  }
  /**
   * Returns cookie string for the 'Cookie:' header.
   *
   * @param {String} url URL to check for
   * @returns {String} Cookie header or empty string if no matches were found
   */


  get(url) {
    return this.list(url).map(cookie => cookie.name + '=' + cookie.value).join('; ');
  }
  /**
   * Lists all valied cookie objects for the specified URL
   *
   * @param {String} url URL to check for
   * @returns {Array} An array of cookie objects
   */


  list(url) {
    let result = [];
    let i;
    let cookie;

    for (i = this.cookies.length - 1; i >= 0; i--) {
      cookie = this.cookies[i];

      if (this.isExpired(cookie)) {
        this.cookies.splice(i, i);
        continue;
      }

      if (this.match(cookie, url)) {
        result.unshift(cookie);
      }
    }

    return result;
  }
  /**
   * Parses cookie string from the 'Set-Cookie:' header
   *
   * @param {String} cookieStr String from the 'Set-Cookie:' header
   * @returns {Object} Cookie object
   */


  parse(cookieStr) {
    let cookie = {};
    (cookieStr || '').toString().split(';').forEach(cookiePart => {
      let valueParts = cookiePart.split('=');
      let key = valueParts.shift().trim().toLowerCase();
      let value = valueParts.join('=').trim();
      let domain;

      if (!key) {
        // skip empty parts
        return;
      }

      switch (key) {
        case 'expires':
          value = new Date(value); // ignore date if can not parse it

          if (value.toString() !== 'Invalid Date') {
            cookie.expires = value;
          }

          break;

        case 'path':
          cookie.path = value;
          break;

        case 'domain':
          domain = value.toLowerCase();

          if (domain.length && domain.charAt(0) !== '.') {
            domain = '.' + domain; // ensure preceeding dot for user set domains
          }

          cookie.domain = domain;
          break;

        case 'max-age':
          cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);
          break;

        case 'secure':
          cookie.secure = true;
          break;

        case 'httponly':
          cookie.httponly = true;
          break;

        default:
          if (!cookie.name) {
            cookie.name = key;
            cookie.value = value;
          }

      }
    });
    return cookie;
  }
  /**
   * Checks if a cookie object is valid for a specified URL
   *
   * @param {Object} cookie Cookie object
   * @param {String} url URL to check for
   * @returns {Boolean} true if cookie is valid for specifiec URL
   */


  match(cookie, url) {
    let urlparts = urllib.parse(url || ''); // check if hostname matches
    // .foo.com also matches subdomains, foo.com does not

    if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {
      return false;
    } // check if path matches


    let path = this.getPath(urlparts.pathname);

    if (path.substr(0, cookie.path.length) !== cookie.path) {
      return false;
    } // check secure argument


    if (cookie.secure && urlparts.protocol !== 'https:') {
      return false;
    }

    return true;
  }
  /**
   * Adds (or updates/removes if needed) a cookie object to the cookie storage
   *
   * @param {Object} cookie Cookie value to be stored
   */


  add(cookie) {
    let i;
    let len; // nothing to do here

    if (!cookie || !cookie.name) {
      return false;
    } // overwrite if has same params


    for (i = 0, len = this.cookies.length; i < len; i++) {
      if (this.compare(this.cookies[i], cookie)) {
        // check if the cookie needs to be removed instead
        if (this.isExpired(cookie)) {
          this.cookies.splice(i, 1); // remove expired/unset cookie

          return false;
        }

        this.cookies[i] = cookie;
        return true;
      }
    } // add as new if not already expired


    if (!this.isExpired(cookie)) {
      this.cookies.push(cookie);
    }

    return true;
  }
  /**
   * Checks if two cookie objects are the same
   *
   * @param {Object} a Cookie to check against
   * @param {Object} b Cookie to check against
   * @returns {Boolean} True, if the cookies are the same
   */


  compare(a, b) {
    return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;
  }
  /**
   * Checks if a cookie is expired
   *
   * @param {Object} cookie Cookie object to check against
   * @returns {Boolean} True, if the cookie is expired
   */


  isExpired(cookie) {
    return cookie.expires && cookie.expires < new Date() || !cookie.value;
  }
  /**
   * Returns normalized cookie path for an URL path argument
   *
   * @param {String} pathname
   * @returns {String} Normalized path
   */


  getPath(pathname) {
    let path = (pathname || '/').split('/');
    path.pop(); // remove filename part

    path = path.join('/').trim(); // ensure path prefix /

    if (path.charAt(0) !== '/') {
      path = '/' + path;
    } // ensure path suffix /


    if (path.substr(-1) !== '/') {
      path += '/';
    }

    return path;
  }

}

module.exports = Cookies;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-undefined: 0 */


const MimeNode = __webpack_require__(47);

const mimeFuncs = __webpack_require__(29);
/**
 * Creates the object for composing a MimeNode instance out from the mail options
 *
 * @constructor
 * @param {Object} mail Mail options
 */


class MailComposer {
  constructor(mail) {
    this.mail = mail || {};
    this.message = false;
  }
  /**
   * Builds MimeNode instance
   */


  compile() {
    this._alternatives = this.getAlternatives();
    this._htmlNode = this._alternatives.filter(alternative => /^text\/html\b/i.test(alternative.contentType)).pop();
    this._attachments = this.getAttachments(!!this._htmlNode);
    this._useRelated = !!(this._htmlNode && this._attachments.related.length);
    this._useAlternative = this._alternatives.length > 1;
    this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1; // Compose MIME tree

    if (this.mail.raw) {
      this.message = new MimeNode('message/rfc822', {
        newline: this.mail.newline
      }).setRaw(this.mail.raw);
    } else if (this._useMixed) {
      this.message = this._createMixed();
    } else if (this._useAlternative) {
      this.message = this._createAlternative();
    } else if (this._useRelated) {
      this.message = this._createRelated();
    } else {
      this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {
        contentType: 'text/plain',
        content: ''
      });
    } // Add custom headers


    if (this.mail.headers) {
      this.message.addHeader(this.mail.headers);
    } // Add headers to the root node, always overrides custom headers


    ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {
      let key = header.replace(/-(\w)/g, (o, c) => c.toUpperCase());

      if (this.mail[key]) {
        this.message.setHeader(header, this.mail[key]);
      }
    }); // Sets custom envelope

    if (this.mail.envelope) {
      this.message.setEnvelope(this.mail.envelope);
    } // ensure Message-Id value


    this.message.messageId();
    return this.message;
  }
  /**
   * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes
   *
   * @param {Boolean} findRelated If true separate related attachments from attached ones
   * @returns {Object} An object of arrays (`related` and `attached`)
   */


  getAttachments(findRelated) {
    let icalEvent, eventObject;
    let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {
      let data;
      let isMessageNode = /^message\//i.test(attachment.contentType);

      if (/^data:/i.test(attachment.path || attachment.href)) {
        attachment = this._processDataUrl(attachment);
      }

      data = {
        contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),
        contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),
        contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'
      };

      if (attachment.filename) {
        data.filename = attachment.filename;
      } else if (!isMessageNode && attachment.filename !== false) {
        data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);

        if (data.filename.indexOf('.') < 0) {
          data.filename += '.' + mimeFuncs.detectExtension(data.contentType);
        }
      }

      if (/^https?:\/\//i.test(attachment.path)) {
        attachment.href = attachment.path;
        attachment.path = undefined;
      }

      if (attachment.cid) {
        data.cid = attachment.cid;
      }

      if (attachment.raw) {
        data.raw = attachment.raw;
      } else if (attachment.path) {
        data.content = {
          path: attachment.path
        };
      } else if (attachment.href) {
        data.content = {
          href: attachment.href,
          httpHeaders: attachment.httpHeaders
        };
      } else {
        data.content = attachment.content || '';
      }

      if (attachment.encoding) {
        data.encoding = attachment.encoding;
      }

      if (attachment.headers) {
        data.headers = attachment.headers;
      }

      return data;
    });

    if (this.mail.icalEvent) {
      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {
        icalEvent = this.mail.icalEvent;
      } else {
        icalEvent = {
          content: this.mail.icalEvent
        };
      }

      eventObject = {};
      Object.keys(icalEvent).forEach(key => {
        eventObject[key] = icalEvent[key];
      });
      eventObject.contentType = 'application/ics';

      if (!eventObject.headers) {
        eventObject.headers = {};
      }

      eventObject.filename = eventObject.filename || 'invite.ics';
      eventObject.headers['Content-Disposition'] = 'attachment';
      eventObject.headers['Content-Transfer-Encoding'] = 'base64';
    }

    if (!findRelated) {
      return {
        attached: attachments.concat(eventObject || []),
        related: []
      };
    } else {
      return {
        attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),
        related: attachments.filter(attachment => !!attachment.cid)
      };
    }
  }
  /**
   * List alternatives. Resulting objects can be used as input for MimeNode nodes
   *
   * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well
   */


  getAlternatives() {
    let alternatives = [],
        text,
        html,
        watchHtml,
        amp,
        icalEvent,
        eventObject;

    if (this.mail.text) {
      if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {
        text = this.mail.text;
      } else {
        text = {
          content: this.mail.text
        };
      }

      text.contentType = 'text/plain; charset=utf-8';
    }

    if (this.mail.watchHtml) {
      if (typeof this.mail.watchHtml === 'object' && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {
        watchHtml = this.mail.watchHtml;
      } else {
        watchHtml = {
          content: this.mail.watchHtml
        };
      }

      watchHtml.contentType = 'text/watch-html; charset=utf-8';
    }

    if (this.mail.amp) {
      if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {
        amp = this.mail.amp;
      } else {
        amp = {
          content: this.mail.amp
        };
      }

      amp.contentType = 'text/x-amp-html; charset=utf-8';
    } // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients


    if (this.mail.icalEvent) {
      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {
        icalEvent = this.mail.icalEvent;
      } else {
        icalEvent = {
          content: this.mail.icalEvent
        };
      }

      eventObject = {};
      Object.keys(icalEvent).forEach(key => {
        eventObject[key] = icalEvent[key];
      });

      if (eventObject.content && typeof eventObject.content === 'object') {
        // we are going to have the same attachment twice, so mark this to be
        // resolved just once
        eventObject.content._resolve = true;
      }

      eventObject.filename = false;
      eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();

      if (!eventObject.headers) {
        eventObject.headers = {};
      }
    }

    if (this.mail.html) {
      if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {
        html = this.mail.html;
      } else {
        html = {
          content: this.mail.html
        };
      }

      html.contentType = 'text/html; charset=utf-8';
    }

    [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach(alternative => {
      let data;

      if (/^data:/i.test(alternative.path || alternative.href)) {
        alternative = this._processDataUrl(alternative);
      }

      data = {
        contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),
        contentTransferEncoding: alternative.contentTransferEncoding
      };

      if (alternative.filename) {
        data.filename = alternative.filename;
      }

      if (/^https?:\/\//i.test(alternative.path)) {
        alternative.href = alternative.path;
        alternative.path = undefined;
      }

      if (alternative.raw) {
        data.raw = alternative.raw;
      } else if (alternative.path) {
        data.content = {
          path: alternative.path
        };
      } else if (alternative.href) {
        data.content = {
          href: alternative.href
        };
      } else {
        data.content = alternative.content || '';
      }

      if (alternative.encoding) {
        data.encoding = alternative.encoding;
      }

      if (alternative.headers) {
        data.headers = alternative.headers;
      }

      alternatives.push(data);
    });
    return alternatives;
  }
  /**
   * Builds multipart/mixed node. It should always contain different type of elements on the same level
   * eg. text + attachments
   *
   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
   * @returns {Object} MimeNode node element
   */


  _createMixed(parentNode) {
    let node;

    if (!parentNode) {
      node = new MimeNode('multipart/mixed', {
        baseBoundary: this.mail.baseBoundary,
        textEncoding: this.mail.textEncoding,
        boundaryPrefix: this.mail.boundaryPrefix,
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    } else {
      node = parentNode.createChild('multipart/mixed', {
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    }

    if (this._useAlternative) {
      this._createAlternative(node);
    } else if (this._useRelated) {
      this._createRelated(node);
    }

    [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach(element => {
      // if the element is a html node from related subpart then ignore it
      if (!this._useRelated || element !== this._htmlNode) {
        this._createContentNode(node, element);
      }
    });
    return node;
  }
  /**
   * Builds multipart/alternative node. It should always contain same type of elements on the same level
   * eg. text + html view of the same data
   *
   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
   * @returns {Object} MimeNode node element
   */


  _createAlternative(parentNode) {
    let node;

    if (!parentNode) {
      node = new MimeNode('multipart/alternative', {
        baseBoundary: this.mail.baseBoundary,
        textEncoding: this.mail.textEncoding,
        boundaryPrefix: this.mail.boundaryPrefix,
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    } else {
      node = parentNode.createChild('multipart/alternative', {
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    }

    this._alternatives.forEach(alternative => {
      if (this._useRelated && this._htmlNode === alternative) {
        this._createRelated(node);
      } else {
        this._createContentNode(node, alternative);
      }
    });

    return node;
  }
  /**
   * Builds multipart/related node. It should always contain html node with related attachments
   *
   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
   * @returns {Object} MimeNode node element
   */


  _createRelated(parentNode) {
    let node;

    if (!parentNode) {
      node = new MimeNode('multipart/related; type="text/html"', {
        baseBoundary: this.mail.baseBoundary,
        textEncoding: this.mail.textEncoding,
        boundaryPrefix: this.mail.boundaryPrefix,
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    } else {
      node = parentNode.createChild('multipart/related; type="text/html"', {
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    }

    this._createContentNode(node, this._htmlNode);

    this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));

    return node;
  }
  /**
   * Creates a regular node with contents
   *
   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
   * @param {Object} element Node data
   * @returns {Object} MimeNode node element
   */


  _createContentNode(parentNode, element) {
    element = element || {};
    element.content = element.content || '';
    let node;
    let encoding = (element.encoding || 'utf8').toString().toLowerCase().replace(/[-_\s]/g, '');

    if (!parentNode) {
      node = new MimeNode(element.contentType, {
        filename: element.filename,
        baseBoundary: this.mail.baseBoundary,
        textEncoding: this.mail.textEncoding,
        boundaryPrefix: this.mail.boundaryPrefix,
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    } else {
      node = parentNode.createChild(element.contentType, {
        filename: element.filename,
        textEncoding: this.mail.textEncoding,
        disableUrlAccess: this.mail.disableUrlAccess,
        disableFileAccess: this.mail.disableFileAccess,
        normalizeHeaderKey: this.mail.normalizeHeaderKey,
        newline: this.mail.newline
      });
    } // add custom headers


    if (element.headers) {
      node.addHeader(element.headers);
    }

    if (element.cid) {
      node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');
    }

    if (element.contentTransferEncoding) {
      node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);
    } else if (this.mail.encoding && /^text\//i.test(element.contentType)) {
      node.setHeader('Content-Transfer-Encoding', this.mail.encoding);
    }

    if (!/^text\//i.test(element.contentType) || element.contentDisposition) {
      node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));
    }

    if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {
      element.content = Buffer.from(element.content, encoding);
    } // prefer pregenerated raw content


    if (element.raw) {
      node.setRaw(element.raw);
    } else {
      node.setContent(element.content);
    }

    return node;
  }
  /**
   * Parses data uri and converts it to a Buffer
   *
   * @param {Object} element Content element
   * @return {Object} Parsed element
   */


  _processDataUrl(element) {
    let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);

    if (!parts) {
      return element;
    }

    element.content = /\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));

    if ('path' in element) {
      element.path = false;
    }

    if ('href' in element) {
      element.href = false;
    }

    parts[1].split(';').forEach(item => {
      if (/^\w+\/[^/]+$/i.test(item)) {
        element.contentType = element.contentType || item.toLowerCase();
      }
    });
    return element;
  }

}

module.exports = MailComposer;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Converts tokens for a single address into an address object
 *
 * @param {Array} tokens Tokens object
 * @return {Object} Address object
 */

function _handleAddress(tokens) {
  let token;
  let isGroup = false;
  let state = 'text';
  let address;
  let addresses = [];
  let data = {
    address: [],
    comment: [],
    group: [],
    text: []
  };
  let i;
  let len; // Filter out <addresses>, (comments) and regular text

  for (i = 0, len = tokens.length; i < len; i++) {
    token = tokens[i];

    if (token.type === 'operator') {
      switch (token.value) {
        case '<':
          state = 'address';
          break;

        case '(':
          state = 'comment';
          break;

        case ':':
          state = 'group';
          isGroup = true;
          break;

        default:
          state = 'text';
      }
    } else if (token.value) {
      if (state === 'address') {
        // handle use case where unquoted name includes a "<"
        // Apple Mail truncates everything between an unexpected < and an address
        // and so will we
        token.value = token.value.replace(/^[^<]*<\s*/, '');
      }

      data[state].push(token.value);
    }
  } // If there is no text but a comment, replace the two


  if (!data.text.length && data.comment.length) {
    data.text = data.comment;
    data.comment = [];
  }

  if (isGroup) {
    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3
    data.text = data.text.join(' ');
    addresses.push({
      name: data.text || address && address.name,
      group: data.group.length ? addressparser(data.group.join(',')) : []
    });
  } else {
    // If no address was found, try to detect one from regular text
    if (!data.address.length && data.text.length) {
      for (i = data.text.length - 1; i >= 0; i--) {
        if (data.text[i].match(/^[^@\s]+@[^@\s]+$/)) {
          data.address = data.text.splice(i, 1);
          break;
        }
      }

      let _regexHandler = function (address) {
        if (!data.address.length) {
          data.address = [address.trim()];
          return ' ';
        } else {
          return address;
        }
      }; // still no address


      if (!data.address.length) {
        for (i = data.text.length - 1; i >= 0; i--) {
          // fixed the regex to parse email address correctly when email address has more than one @
          data.text[i] = data.text[i].replace(/\s*\b[^@\s]+@[^\s]+\b\s*/, _regexHandler).trim();

          if (data.address.length) {
            break;
          }
        }
      }
    } // If there's still is no text but a comment exixts, replace the two


    if (!data.text.length && data.comment.length) {
      data.text = data.comment;
      data.comment = [];
    } // Keep only the first address occurence, push others to regular text


    if (data.address.length > 1) {
      data.text = data.text.concat(data.address.splice(1));
    } // Join values with spaces


    data.text = data.text.join(' ');
    data.address = data.address.join(' ');

    if (!data.address && isGroup) {
      return [];
    } else {
      address = {
        address: data.address || data.text || '',
        name: data.text || data.address || ''
      };

      if (address.address === address.name) {
        if ((address.address || '').match(/@/)) {
          address.name = '';
        } else {
          address.address = '';
        }
      }

      addresses.push(address);
    }
  }

  return addresses;
}
/**
 * Creates a Tokenizer object for tokenizing address field strings
 *
 * @constructor
 * @param {String} str Address field string
 */


class Tokenizer {
  constructor(str) {
    this.str = (str || '').toString();
    this.operatorCurrent = '';
    this.operatorExpecting = '';
    this.node = null;
    this.escaped = false;
    this.list = [];
    /**
     * Operator tokens and which tokens are expected to end the sequence
     */

    this.operators = {
      '"': '"',
      '(': ')',
      '<': '>',
      ',': '',
      ':': ';',
      // Semicolons are not a legal delimiter per the RFC2822 grammar other
      // than for terminating a group, but they are also not valid for any
      // other use in this context.  Given that some mail clients have
      // historically allowed the semicolon as a delimiter equivalent to the
      // comma in their UI, it makes sense to treat them the same as a comma
      // when used outside of a group.
      ';': ''
    };
  }
  /**
   * Tokenizes the original input string
   *
   * @return {Array} An array of operator|text tokens
   */


  tokenize() {
    let chr,
        list = [];

    for (let i = 0, len = this.str.length; i < len; i++) {
      chr = this.str.charAt(i);
      this.checkChar(chr);
    }

    this.list.forEach(node => {
      node.value = (node.value || '').toString().trim();

      if (node.value) {
        list.push(node);
      }
    });
    return list;
  }
  /**
   * Checks if a character is an operator or text and acts accordingly
   *
   * @param {String} chr Character from the address field
   */


  checkChar(chr) {
    if (this.escaped) {// ignore next condition blocks
    } else if (chr === this.operatorExpecting) {
      this.node = {
        type: 'operator',
        value: chr
      };
      this.list.push(this.node);
      this.node = null;
      this.operatorExpecting = '';
      this.escaped = false;
      return;
    } else if (!this.operatorExpecting && chr in this.operators) {
      this.node = {
        type: 'operator',
        value: chr
      };
      this.list.push(this.node);
      this.node = null;
      this.operatorExpecting = this.operators[chr];
      this.escaped = false;
      return;
    } else if (['"', "'"].includes(this.operatorExpecting) && chr === '\\') {
      this.escaped = true;
      return;
    }

    if (!this.node) {
      this.node = {
        type: 'text',
        value: ''
      };
      this.list.push(this.node);
    }

    if (chr === '\n') {
      // Convert newlines to spaces. Carriage return is ignored as \r and \n usually
      // go together anyway and there already is a WS for \n. Lone \r means something is fishy.
      chr = ' ';
    }

    if (chr.charCodeAt(0) >= 0x21 || [' ', '\t'].includes(chr)) {
      // skip command bytes
      this.node.value += chr;
    }

    this.escaped = false;
  }

}
/**
 * Parses structured e-mail addresses from an address field
 *
 * Example:
 *
 *    'Name <address@domain>'
 *
 * will be converted to
 *
 *     [{name: 'Name', address: 'address@domain'}]
 *
 * @param {String} str Address field
 * @return {Array} An array of address objects
 */


function addressparser(str, options) {
  options = options || {};
  let tokenizer = new Tokenizer(str);
  let tokens = tokenizer.tokenize();
  let addresses = [];
  let address = [];
  let parsedAddresses = [];
  tokens.forEach(token => {
    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {
      if (address.length) {
        addresses.push(address);
      }

      address = [];
    } else {
      address.push(token);
    }
  });

  if (address.length) {
    addresses.push(address);
  }

  addresses.forEach(address => {
    address = _handleAddress(address);

    if (address.length) {
      parsedAddresses = parsedAddresses.concat(address);
    }
  });

  if (options.flatten) {
    let addresses = [];

    let walkAddressList = list => {
      list.forEach(address => {
        if (address.group) {
          return walkAddressList(address.group);
        } else {
          addresses.push(address);
        }
      });
    };

    walkAddressList(parsedAddresses);
    return addresses;
  }

  return parsedAddresses;
} // expose to the world


module.exports = addressparser;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Transform = __webpack_require__(0).Transform;

class LastNewline extends Transform {
  constructor() {
    super();
    this.lastByte = false;
  }

  _transform(chunk, encoding, done) {
    if (chunk.length) {
      this.lastByte = chunk[chunk.length - 1];
    }

    this.push(chunk);
    done();
  }

  _flush(done) {
    if (this.lastByte === 0x0a) {
      return done();
    }

    if (this.lastByte === 0x0d) {
      this.push(Buffer.from('\n'));
      return done();
    }

    this.push(Buffer.from('\r\n'));
    return done();
  }

}

module.exports = LastNewline;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const stream = __webpack_require__(0);

const Transform = stream.Transform;
/**
 * Ensures that only <LF> is used for linebreaks
 *
 * @param {Object} options Stream options
 */

class LeWindows extends Transform {
  constructor(options) {
    super(options); // init Transform

    this.options = options || {};
  }
  /**
   * Escapes dots
   */


  _transform(chunk, encoding, done) {
    let buf;
    let lastPos = 0;

    for (let i = 0, len = chunk.length; i < len; i++) {
      if (chunk[i] === 0x0d) {
        // \n
        buf = chunk.slice(lastPos, i);
        lastPos = i + 1;
        this.push(buf);
      }
    }

    if (lastPos && lastPos < chunk.length) {
      buf = chunk.slice(lastPos);
      this.push(buf);
    } else if (!lastPos) {
      this.push(chunk);
    }

    done();
  }

}

module.exports = LeWindows;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // FIXME:
// replace this Transform mess with a method that pipes input argument to output argument

const MessageParser = __webpack_require__(96);

const RelaxedBody = __webpack_require__(97);

const sign = __webpack_require__(98);

const PassThrough = __webpack_require__(0).PassThrough;

const fs = __webpack_require__(24);

const path = __webpack_require__(28);

const crypto = __webpack_require__(13);

const DKIM_ALGO = 'sha256';
const MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk

/*
// Usage:

let dkim = new DKIM({
    domainName: 'example.com',
    keySelector: 'key-selector',
    privateKey,
    cacheDir: '/tmp'
});
dkim.sign(input).pipe(process.stdout);

// Where inputStream is a rfc822 message (either a stream, string or Buffer)
// and outputStream is a DKIM signed rfc822 message
*/

class DKIMSigner {
  constructor(options, keys, input, output) {
    this.options = options || {};
    this.keys = keys;
    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;
    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;
    this.cacheDir = this.options.cacheDir || false;
    this.chunks = [];
    this.chunklen = 0;
    this.readPos = 0;
    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;
    this.cache = false;
    this.headers = false;
    this.bodyHash = false;
    this.parser = false;
    this.relaxedBody = false;
    this.input = input;
    this.output = output;
    this.output.usingCache = false;
    this.errored = false;
    this.input.on('error', err => {
      this.errored = true;
      this.cleanup();
      output.emit('error', err);
    });
  }

  cleanup() {
    if (!this.cache || !this.cachePath) {
      return;
    }

    fs.unlink(this.cachePath, () => false);
  }

  createReadCache() {
    // pipe remainings to cache file
    this.cache = fs.createReadStream(this.cachePath);
    this.cache.once('error', err => {
      this.cleanup();
      this.output.emit('error', err);
    });
    this.cache.once('close', () => {
      this.cleanup();
    });
    this.cache.pipe(this.output);
  }

  sendNextChunk() {
    if (this.errored) {
      return;
    }

    if (this.readPos >= this.chunks.length) {
      if (!this.cache) {
        return this.output.end();
      }

      return this.createReadCache();
    }

    let chunk = this.chunks[this.readPos++];

    if (this.output.write(chunk) === false) {
      return this.output.once('drain', () => {
        this.sendNextChunk();
      });
    }

    setImmediate(() => this.sendNextChunk());
  }

  sendSignedOutput() {
    let keyPos = 0;

    let signNextKey = () => {
      if (keyPos >= this.keys.length) {
        this.output.write(this.parser.rawHeaders);
        return setImmediate(() => this.sendNextChunk());
      }

      let key = this.keys[keyPos++];
      let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {
        domainName: key.domainName,
        keySelector: key.keySelector,
        privateKey: key.privateKey,
        headerFieldNames: this.options.headerFieldNames,
        skipFields: this.options.skipFields
      });

      if (dkimField) {
        this.output.write(Buffer.from(dkimField + '\r\n'));
      }

      return setImmediate(signNextKey);
    };

    if (this.bodyHash && this.headers) {
      return signNextKey();
    }

    this.output.write(this.parser.rawHeaders);
    this.sendNextChunk();
  }

  createWriteCache() {
    this.output.usingCache = true; // pipe remainings to cache file

    this.cache = fs.createWriteStream(this.cachePath);
    this.cache.once('error', err => {
      this.cleanup(); // drain input

      this.relaxedBody.unpipe(this.cache);
      this.relaxedBody.on('readable', () => {
        while (this.relaxedBody.read() !== null) {// do nothing
        }
      });
      this.errored = true; // emit error

      this.output.emit('error', err);
    });
    this.cache.once('close', () => {
      this.sendSignedOutput();
    });
    this.relaxedBody.removeAllListeners('readable');
    this.relaxedBody.pipe(this.cache);
  }

  signStream() {
    this.parser = new MessageParser();
    this.relaxedBody = new RelaxedBody({
      hashAlgo: this.hashAlgo
    });
    this.parser.on('headers', value => {
      this.headers = value;
    });
    this.relaxedBody.on('hash', value => {
      this.bodyHash = value;
    });
    this.relaxedBody.on('readable', () => {
      let chunk;

      if (this.cache) {
        return;
      }

      while ((chunk = this.relaxedBody.read()) !== null) {
        this.chunks.push(chunk);
        this.chunklen += chunk.length;

        if (this.chunklen >= this.cacheTreshold && this.cachePath) {
          return this.createWriteCache();
        }
      }
    });
    this.relaxedBody.on('end', () => {
      if (this.cache) {
        return;
      }

      this.sendSignedOutput();
    });
    this.parser.pipe(this.relaxedBody);
    setImmediate(() => this.input.pipe(this.parser));
  }

}

class DKIM {
  constructor(options) {
    this.options = options || {};
    this.keys = [].concat(this.options.keys || {
      domainName: options.domainName,
      keySelector: options.keySelector,
      privateKey: options.privateKey
    });
  }

  sign(input, extraOptions) {
    let output = new PassThrough();
    let inputStream = input;
    let writeValue = false;

    if (Buffer.isBuffer(input)) {
      writeValue = input;
      inputStream = new PassThrough();
    } else if (typeof input === 'string') {
      writeValue = Buffer.from(input);
      inputStream = new PassThrough();
    }

    let options = this.options;

    if (extraOptions && Object.keys(extraOptions).length) {
      options = {};
      Object.keys(this.options || {}).forEach(key => {
        options[key] = this.options[key];
      });
      Object.keys(extraOptions || {}).forEach(key => {
        if (!(key in options)) {
          options[key] = extraOptions[key];
        }
      });
    }

    let signer = new DKIMSigner(options, this.keys, inputStream, output);
    setImmediate(() => {
      signer.signStream();

      if (writeValue) {
        setImmediate(() => {
          inputStream.end(writeValue);
        });
      }
    });
    return output;
  }

}

module.exports = DKIM;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Transform = __webpack_require__(0).Transform;
/**
 * MessageParser instance is a transform stream that separates message headers
 * from the rest of the body. Headers are emitted with the 'headers' event. Message
 * body is passed on as the resulting stream.
 */


class MessageParser extends Transform {
  constructor(options) {
    super(options);
    this.lastBytes = Buffer.alloc(4);
    this.headersParsed = false;
    this.headerBytes = 0;
    this.headerChunks = [];
    this.rawHeaders = false;
    this.bodySize = 0;
  }
  /**
   * Keeps count of the last 4 bytes in order to detect line breaks on chunk boundaries
   *
   * @param {Buffer} data Next data chunk from the stream
   */


  updateLastBytes(data) {
    let lblen = this.lastBytes.length;
    let nblen = Math.min(data.length, lblen); // shift existing bytes

    for (let i = 0, len = lblen - nblen; i < len; i++) {
      this.lastBytes[i] = this.lastBytes[i + nblen];
    } // add new bytes


    for (let i = 1; i <= nblen; i++) {
      this.lastBytes[lblen - i] = data[data.length - i];
    }
  }
  /**
   * Finds and removes message headers from the remaining body. We want to keep
   * headers separated until final delivery to be able to modify these
   *
   * @param {Buffer} data Next chunk of data
   * @return {Boolean} Returns true if headers are already found or false otherwise
   */


  checkHeaders(data) {
    if (this.headersParsed) {
      return true;
    }

    let lblen = this.lastBytes.length;
    let headerPos = 0;
    this.curLinePos = 0;

    for (let i = 0, len = this.lastBytes.length + data.length; i < len; i++) {
      let chr;

      if (i < lblen) {
        chr = this.lastBytes[i];
      } else {
        chr = data[i - lblen];
      }

      if (chr === 0x0a && i) {
        let pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];
        let pr2 = i > 1 ? i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen] : false;

        if (pr1 === 0x0a) {
          this.headersParsed = true;
          headerPos = i - lblen + 1;
          this.headerBytes += headerPos;
          break;
        } else if (pr1 === 0x0d && pr2 === 0x0a) {
          this.headersParsed = true;
          headerPos = i - lblen + 1;
          this.headerBytes += headerPos;
          break;
        }
      }
    }

    if (this.headersParsed) {
      this.headerChunks.push(data.slice(0, headerPos));
      this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);
      this.headerChunks = null;
      this.emit('headers', this.parseHeaders());

      if (data.length - 1 > headerPos) {
        let chunk = data.slice(headerPos);
        this.bodySize += chunk.length; // this would be the first chunk of data sent downstream

        setImmediate(() => this.push(chunk));
      }

      return false;
    } else {
      this.headerBytes += data.length;
      this.headerChunks.push(data);
    } // store last 4 bytes to catch header break


    this.updateLastBytes(data);
    return false;
  }

  _transform(chunk, encoding, callback) {
    if (!chunk || !chunk.length) {
      return callback();
    }

    if (typeof chunk === 'string') {
      chunk = Buffer.from(chunk, encoding);
    }

    let headersFound;

    try {
      headersFound = this.checkHeaders(chunk);
    } catch (E) {
      return callback(E);
    }

    if (headersFound) {
      this.bodySize += chunk.length;
      this.push(chunk);
    }

    setImmediate(callback);
  }

  _flush(callback) {
    if (this.headerChunks) {
      let chunk = Buffer.concat(this.headerChunks, this.headerBytes);
      this.bodySize += chunk.length;
      this.push(chunk);
      this.headerChunks = null;
    }

    callback();
  }

  parseHeaders() {
    let lines = (this.rawHeaders || '').toString().split(/\r?\n/);

    for (let i = lines.length - 1; i > 0; i--) {
      if (/^\s/.test(lines[i])) {
        lines[i - 1] += '\n' + lines[i];
        lines.splice(i, 1);
      }
    }

    return lines.filter(line => line.trim()).map(line => ({
      key: line.substr(0, line.indexOf(':')).trim().toLowerCase(),
      line
    }));
  }

}

module.exports = MessageParser;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // streams through a message body and calculates relaxed body hash

const Transform = __webpack_require__(0).Transform;

const crypto = __webpack_require__(13);

class RelaxedBody extends Transform {
  constructor(options) {
    super();
    options = options || {};
    this.chunkBuffer = [];
    this.chunkBufferLen = 0;
    this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');
    this.remainder = '';
    this.byteLength = 0;
    this.debug = options.debug;
    this._debugBody = options.debug ? [] : false;
  }

  updateHash(chunk) {
    let bodyStr; // find next remainder

    let nextRemainder = ''; // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line
    // If we get another chunk that does not match this description then we can restore the previously processed data

    let state = 'file';

    for (let i = chunk.length - 1; i >= 0; i--) {
      let c = chunk[i];

      if (state === 'file' && (c === 0x0a || c === 0x0d)) {// do nothing, found \n or \r at the end of chunk, stil end of file
      } else if (state === 'file' && (c === 0x09 || c === 0x20)) {
        // switch to line ending mode, this is the last non-empty line
        state = 'line';
      } else if (state === 'line' && (c === 0x09 || c === 0x20)) {// do nothing, found ' ' or \t at the end of line, keep processing the last non-empty line
      } else if (state === 'file' || state === 'line') {
        // non line/file ending character found, switch to body mode
        state = 'body';

        if (i === chunk.length - 1) {
          // final char is not part of line end or file end, so do nothing
          break;
        }
      }

      if (i === 0) {
        // reached to the beginning of the chunk, check if it is still about the ending
        // and if the remainder also matches
        if (state === 'file' && (!this.remainder || /[\r\n]$/.test(this.remainder)) || state === 'line' && (!this.remainder || /[ \t]$/.test(this.remainder))) {
          // keep everything
          this.remainder += chunk.toString('binary');
          return;
        } else if (state === 'line' || state === 'file') {
          // process existing remainder as normal line but store the current chunk
          nextRemainder = chunk.toString('binary');
          chunk = false;
          break;
        }
      }

      if (state !== 'body') {
        continue;
      } // reached first non ending byte


      nextRemainder = chunk.slice(i + 1).toString('binary');
      chunk = chunk.slice(0, i + 1);
      break;
    }

    let needsFixing = !!this.remainder;

    if (chunk && !needsFixing) {
      // check if we even need to change anything
      for (let i = 0, len = chunk.length; i < len; i++) {
        if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {
          // missing \r before \n
          needsFixing = true;
          break;
        } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {
          // trailing WSP found
          needsFixing = true;
          break;
        } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {
          // multiple spaces found, needs to be replaced with just one
          needsFixing = true;
          break;
        } else if (chunk[i] === 0x09) {
          // TAB found, needs to be replaced with a space
          needsFixing = true;
          break;
        }
      }
    }

    if (needsFixing) {
      bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');
      this.remainder = nextRemainder;
      bodyStr = bodyStr.replace(/\r?\n/g, '\n') // use js line endings
      .replace(/[ \t]*$/gm, '') // remove line endings, rtrim
      .replace(/[ \t]+/gm, ' ') // single spaces
      .replace(/\n/g, '\r\n'); // restore rfc822 line endings

      chunk = Buffer.from(bodyStr, 'binary');
    } else if (nextRemainder) {
      this.remainder = nextRemainder;
    }

    if (this.debug) {
      this._debugBody.push(chunk);
    }

    this.bodyHash.update(chunk);
  }

  _transform(chunk, encoding, callback) {
    if (!chunk || !chunk.length) {
      return callback();
    }

    if (typeof chunk === 'string') {
      chunk = Buffer.from(chunk, encoding);
    }

    this.updateHash(chunk);
    this.byteLength += chunk.length;
    this.push(chunk);
    callback();
  }

  _flush(callback) {
    // generate final hash and emit it
    if (/[\r\n]$/.test(this.remainder) && this.byteLength > 2) {
      // add terminating line end
      this.bodyHash.update(Buffer.from('\r\n'));
    }

    if (!this.byteLength) {
      // emit empty line buffer to keep the stream flowing
      this.push(Buffer.from('\r\n')); // this.bodyHash.update(Buffer.from('\r\n'));
    }

    this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);
    callback();
  }

}

module.exports = RelaxedBody;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const punycode = __webpack_require__(23);

const mimeFuncs = __webpack_require__(29);

const crypto = __webpack_require__(13);
/**
 * Returns DKIM signature header line
 *
 * @param {Object} headers Parsed headers object from MessageParser
 * @param {String} bodyHash Base64 encoded hash of the message
 * @param {Object} options DKIM options
 * @param {String} options.domainName Domain name to be signed for
 * @param {String} options.keySelector DKIM key selector to use
 * @param {String} options.privateKey DKIM private key to use
 * @return {String} Complete header line
 */


module.exports = (headers, hashAlgo, bodyHash, options) => {
  options = options || {}; // all listed fields from RFC4871 #5.5

  let defaultFieldNames = 'From:Sender:Reply-To:Subject:Date:Message-ID:To:' + 'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' + 'Content-Description:Resent-Date:Resent-From:Resent-Sender:' + 'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' + 'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' + 'List-Owner:List-Archive';
  let fieldNames = options.headerFieldNames || defaultFieldNames;
  let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);
  let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);
  let signer, signature;
  canonicalizedHeaderData.headers += 'dkim-signature:' + relaxedHeaderLine(dkimHeader);
  signer = crypto.createSign(('rsa-' + hashAlgo).toUpperCase());
  signer.update(canonicalizedHeaderData.headers);

  try {
    signature = signer.sign(options.privateKey, 'base64');
  } catch (E) {
    return false;
  }

  return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\r?\n|\r))/g, '$&\r\n ').trim();
};

module.exports.relaxedHeaders = relaxedHeaders;

function generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {
  let dkim = ['v=1', 'a=rsa-' + hashAlgo, 'c=relaxed/relaxed', 'd=' + punycode.toASCII(domainName), 'q=dns/txt', 's=' + keySelector, 'bh=' + bodyHash, 'h=' + fieldNames].join('; ');
  return mimeFuncs.foldLines('DKIM-Signature: ' + dkim, 76) + ';\r\n b=';
}

function relaxedHeaders(headers, fieldNames, skipFields) {
  let includedFields = new Set();
  let skip = new Set();
  let headerFields = new Map();
  (skipFields || '').toLowerCase().split(':').forEach(field => {
    skip.add(field.trim());
  });
  (fieldNames || '').toLowerCase().split(':').filter(field => !skip.has(field.trim())).forEach(field => {
    includedFields.add(field.trim());
  });

  for (let i = headers.length - 1; i >= 0; i--) {
    let line = headers[i]; // only include the first value from bottom to top

    if (includedFields.has(line.key) && !headerFields.has(line.key)) {
      headerFields.set(line.key, relaxedHeaderLine(line.line));
    }
  }

  let headersList = [];
  let fields = [];
  includedFields.forEach(field => {
    if (headerFields.has(field)) {
      fields.push(field);
      headersList.push(field + ':' + headerFields.get(field));
    }
  });
  return {
    headers: headersList.join('\r\n') + '\r\n',
    fieldNames: fields.join(':')
  };
}

function relaxedHeaderLine(line) {
  return line.substr(line.indexOf(':') + 1).replace(/\r?\n/g, '').replace(/\s+/g, ' ').trim();
}

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Minimal HTTP/S proxy client
 */

const net = __webpack_require__(26);

const tls = __webpack_require__(51);

const urllib = __webpack_require__(1);
/**
 * Establishes proxied connection to destinationPort
 *
 * httpProxyClient("http://localhost:3128/", 80, "google.com", function(err, socket){
 *     socket.write("GET / HTTP/1.0\r\n\r\n");
 * });
 *
 * @param {String} proxyUrl proxy configuration, etg "http://proxy.host:3128/"
 * @param {Number} destinationPort Port to open in destination host
 * @param {String} destinationHost Destination hostname
 * @param {Function} callback Callback to run with the rocket object once connection is established
 */


function httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {
  let proxy = urllib.parse(proxyUrl); // create a socket connection to the proxy server

  let options;
  let connect;
  let socket;
  options = {
    host: proxy.hostname,
    port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === 'https:' ? 443 : 80
  };

  if (proxy.protocol === 'https:') {
    // we can use untrusted proxies as long as we verify actual SMTP certificates
    options.rejectUnauthorized = false;
    connect = tls.connect.bind(tls);
  } else {
    connect = net.connect.bind(net);
  } // Error harness for initial connection. Once connection is established, the responsibility
  // to handle errors is passed to whoever uses this socket


  let finished = false;

  let tempSocketErr = function (err) {
    if (finished) {
      return;
    }

    finished = true;

    try {
      socket.destroy();
    } catch (E) {// ignore
    }

    callback(err);
  };

  socket = connect(options, () => {
    if (finished) {
      return;
    }

    let reqHeaders = {
      Host: destinationHost + ':' + destinationPort,
      Connection: 'close'
    };

    if (proxy.auth) {
      reqHeaders['Proxy-Authorization'] = 'Basic ' + Buffer.from(proxy.auth).toString('base64');
    }

    socket.write( // HTTP method
    'CONNECT ' + destinationHost + ':' + destinationPort + ' HTTP/1.1\r\n' + // HTTP request headers
    Object.keys(reqHeaders).map(key => key + ': ' + reqHeaders[key]).join('\r\n') + // End request
    '\r\n\r\n');
    let headers = '';

    let onSocketData = chunk => {
      let match;
      let remainder;

      if (finished) {
        return;
      }

      headers += chunk.toString('binary');

      if (match = headers.match(/\r\n\r\n/)) {
        socket.removeListener('data', onSocketData);
        remainder = headers.substr(match.index + match[0].length);
        headers = headers.substr(0, match.index);

        if (remainder) {
          socket.unshift(Buffer.from(remainder, 'binary'));
        } // proxy connection is now established


        finished = true; // check response code

        match = headers.match(/^HTTP\/\d+\.\d+ (\d+)/i);

        if (!match || (match[1] || '').charAt(0) !== '2') {
          try {
            socket.destroy();
          } catch (E) {// ignore
          }

          return callback(new Error('Invalid response from proxy' + (match && ': ' + match[1] || '')));
        }

        socket.removeListener('error', tempSocketErr);
        return callback(null, socket);
      }
    };

    socket.on('data', onSocketData);
  });
  socket.once('error', tempSocketErr);
}

module.exports = httpProxyClient;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const shared = __webpack_require__(5);

const MimeNode = __webpack_require__(47);

const mimeFuncs = __webpack_require__(29);

class MailMessage {
  constructor(mailer, data) {
    this.mailer = mailer;
    this.data = {};
    this.message = null;
    data = data || {};
    let options = mailer.options || {};
    let defaults = mailer._defaults || {};
    Object.keys(data).forEach(key => {
      this.data[key] = data[key];
    });
    this.data.headers = this.data.headers || {}; // apply defaults

    Object.keys(defaults).forEach(key => {
      if (!(key in this.data)) {
        this.data[key] = defaults[key];
      } else if (key === 'headers') {
        // headers is a special case. Allow setting individual default headers
        Object.keys(defaults.headers).forEach(key => {
          if (!(key in this.data.headers)) {
            this.data.headers[key] = defaults.headers[key];
          }
        });
      }
    }); // force specific keys from transporter options

    ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(key => {
      if (key in options) {
        this.data[key] = options[key];
      }
    });
  }

  resolveContent(...args) {
    return shared.resolveContent(...args);
  }

  resolveAll(callback) {
    let keys = [[this.data, 'html'], [this.data, 'text'], [this.data, 'watchHtml'], [this.data, 'amp'], [this.data, 'icalEvent']];

    if (this.data.alternatives && this.data.alternatives.length) {
      this.data.alternatives.forEach((alternative, i) => {
        keys.push([this.data.alternatives, i]);
      });
    }

    if (this.data.attachments && this.data.attachments.length) {
      this.data.attachments.forEach((attachment, i) => {
        if (!attachment.filename) {
          attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);

          if (attachment.filename.indexOf('.') < 0) {
            attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);
          }
        }

        if (!attachment.contentType) {
          attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');
        }

        keys.push([this.data.attachments, i]);
      });
    }

    let mimeNode = new MimeNode();
    let addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];
    addressKeys.forEach(address => {
      let value;

      if (this.message) {
        value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);
      } else if (this.data[address]) {
        value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);
      }

      if (value && value.length) {
        this.data[address] = value;
      } else if (address in this.data) {
        this.data[address] = null;
      }
    });
    let singleKeys = ['from', 'sender', 'replyTo'];
    singleKeys.forEach(address => {
      if (this.data[address]) {
        this.data[address] = this.data[address].shift();
      }
    });
    let pos = 0;

    let resolveNext = () => {
      if (pos >= keys.length) {
        return callback(null, this.data);
      }

      let args = keys[pos++];

      if (!args[0] || !args[0][args[1]]) {
        return resolveNext();
      }

      shared.resolveContent(...args, (err, value) => {
        if (err) {
          return callback(err);
        }

        let node = {
          content: value
        };

        if (args[0][args[1]] && typeof args[0][args[1]] === 'object' && !Buffer.isBuffer(args[0][args[1]])) {
          Object.keys(args[0][args[1]]).forEach(key => {
            if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {
              node[key] = args[0][args[1]][key];
            }
          });
        }

        args[0][args[1]] = node;
        resolveNext();
      });
    };

    setImmediate(() => resolveNext());
  }

  normalize(callback) {
    let envelope = this.data.envelope || this.message.getEnvelope();
    let messageId = this.message.messageId();
    this.resolveAll((err, data) => {
      if (err) {
        return callback(err);
      }

      data.envelope = envelope;
      data.messageId = messageId;
      ['html', 'text', 'watchHtml', 'amp'].forEach(key => {
        if (data[key] && data[key].content) {
          if (typeof data[key].content === 'string') {
            data[key] = data[key].content;
          } else if (Buffer.isBuffer(data[key].content)) {
            data[key] = data[key].content.toString();
          }
        }
      });

      if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {
        data.icalEvent.content = data.icalEvent.content.toString('base64');
        data.icalEvent.encoding = 'base64';
      }

      if (data.alternatives && data.alternatives.length) {
        data.alternatives.forEach(alternative => {
          if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {
            alternative.content = alternative.content.toString('base64');
            alternative.encoding = 'base64';
          }
        });
      }

      if (data.attachments && data.attachments.length) {
        data.attachments.forEach(attachment => {
          if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {
            attachment.content = attachment.content.toString('base64');
            attachment.encoding = 'base64';
          }
        });
      }

      data.normalizedHeaders = {};
      Object.keys(data.headers || {}).forEach(key => {
        let value = [].concat(data.headers[key] || []).shift();
        value = value && value.value || value;

        if (value) {
          if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {
            value = this.message._encodeHeaderValue(key, value);
          }

          data.normalizedHeaders[key] = value;
        }
      });

      if (data.list && typeof data.list === 'object') {
        let listHeaders = this._getListHeaders(data.list);

        listHeaders.forEach(entry => {
          data.normalizedHeaders[entry.key] = entry.value.map(val => val && val.value || val).join(', ');
        });
      }

      if (data.references) {
        data.normalizedHeaders.references = this.message._encodeHeaderValue('references', data.references);
      }

      if (data.inReplyTo) {
        data.normalizedHeaders['in-reply-to'] = this.message._encodeHeaderValue('in-reply-to', data.inReplyTo);
      }

      return callback(null, data);
    });
  }

  setMailerHeader() {
    if (!this.message || !this.data.xMailer) {
      return;
    }

    this.message.setHeader('X-Mailer', this.data.xMailer);
  }

  setPriorityHeaders() {
    if (!this.message || !this.data.priority) {
      return;
    }

    switch ((this.data.priority || '').toString().toLowerCase()) {
      case 'high':
        this.message.setHeader('X-Priority', '1 (Highest)');
        this.message.setHeader('X-MSMail-Priority', 'High');
        this.message.setHeader('Importance', 'High');
        break;

      case 'low':
        this.message.setHeader('X-Priority', '5 (Lowest)');
        this.message.setHeader('X-MSMail-Priority', 'Low');
        this.message.setHeader('Importance', 'Low');
        break;

      default: // do not add anything, since all messages are 'Normal' by default

    }
  }

  setListHeaders() {
    if (!this.message || !this.data.list || typeof this.data.list !== 'object') {
      return;
    } // add optional List-* headers


    if (this.data.list && typeof this.data.list === 'object') {
      this._getListHeaders(this.data.list).forEach(listHeader => {
        listHeader.value.forEach(value => {
          this.message.addHeader(listHeader.key, value);
        });
      });
    }
  }

  _getListHeaders(listData) {
    // make sure an url looks like <protocol:url>
    return Object.keys(listData).map(key => ({
      key: 'list-' + key.toLowerCase().trim(),
      value: [].concat(listData[key] || []).map(value => ({
        prepared: true,
        foldLines: true,
        value: [].concat(value || []).map(value => {
          if (typeof value === 'string') {
            value = {
              url: value
            };
          }

          if (value && value.url) {
            if (key.toLowerCase().trim() === 'id') {
              // List-ID: "comment" <domain>
              let comment = value.comment || '';

              if (mimeFuncs.isPlainText(comment)) {
                comment = '"' + comment + '"';
              } else {
                comment = mimeFuncs.encodeWord(comment);
              }

              return (value.comment ? comment + ' ' : '') + this._formatListUrl(value.url).replace(/^<[^:]+\/{,2}/, '');
            } // List-*: <http://domain> (comment)


            let comment = value.comment || '';

            if (!mimeFuncs.isPlainText(comment)) {
              comment = mimeFuncs.encodeWord(comment);
            }

            return this._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');
          }

          return '';
        }).filter(value => value).join(', ')
      }))
    }));
  }

  _formatListUrl(url) {
    url = url.replace(/[\s<]+|[\s>]+/g, '');

    if (/^(https?|mailto|ftp):/.test(url)) {
      return '<' + url + '>';
    }

    if (/^[^@]+@[^@]+$/.test(url)) {
      return '<mailto:' + url + '>';
    }

    return '<http://' + url + '>';
  }

}

module.exports = MailMessage;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(15);

const PoolResource = __webpack_require__(102);

const SMTPConnection = __webpack_require__(31);

const wellKnown = __webpack_require__(53);

const shared = __webpack_require__(5);

const packageData = __webpack_require__(8);
/**
 * Creates a SMTP pool transport object for Nodemailer
 *
 * @constructor
 * @param {Object} options SMTP Connection options
 */


class SMTPPool extends EventEmitter {
  constructor(options) {
    super();
    options = options || {};

    if (typeof options === 'string') {
      options = {
        url: options
      };
    }

    let urlData;
    let service = options.service;

    if (typeof options.getSocket === 'function') {
      this.getSocket = options.getSocket;
    }

    if (options.url) {
      urlData = shared.parseConnectionUrl(options.url);
      service = service || urlData.service;
    }

    this.options = shared.assign(false, // create new object
    options, // regular options
    urlData, // url options
    service && wellKnown(service) // wellknown options
    );
    this.options.maxConnections = this.options.maxConnections || 5;
    this.options.maxMessages = this.options.maxMessages || 100;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'smtp-pool'
    }); // temporary object

    let connection = new SMTPConnection(this.options);
    this.name = 'SMTP (pool)';
    this.version = packageData.version + '[client:' + connection.version + ']';
    this._rateLimit = {
      counter: 0,
      timeout: null,
      waiting: [],
      checkpoint: false,
      delta: Number(this.options.rateDelta) || 1000,
      limit: Number(this.options.rateLimit) || 0
    };
    this._closed = false;
    this._queue = [];
    this._connections = [];
    this._connectionCounter = 0;
    this.idling = true;
    setImmediate(() => {
      if (this.idling) {
        this.emit('idle');
      }
    });
  }
  /**
   * Placeholder function for creating proxy sockets. This method immediatelly returns
   * without a socket
   *
   * @param {Object} options Connection options
   * @param {Function} callback Callback function to run with the socket keys
   */


  getSocket(options, callback) {
    // return immediatelly
    return setImmediate(() => callback(null, false));
  }
  /**
   * Queues an e-mail to be sent using the selected settings
   *
   * @param {Object} mail Mail object
   * @param {Function} callback Callback function
   */


  send(mail, callback) {
    if (this._closed) {
      return false;
    }

    this._queue.push({
      mail,
      requeueAttempts: 0,
      callback
    });

    if (this.idling && this._queue.length >= this.options.maxConnections) {
      this.idling = false;
    }

    setImmediate(() => this._processMessages());
    return true;
  }
  /**
   * Closes all connections in the pool. If there is a message being sent, the connection
   * is closed later
   */


  close() {
    let connection;
    let len = this._connections.length;
    this._closed = true; // clear rate limit timer if it exists

    clearTimeout(this._rateLimit.timeout);

    if (!len && !this._queue.length) {
      return;
    } // remove all available connections


    for (let i = len - 1; i >= 0; i--) {
      if (this._connections[i] && this._connections[i].available) {
        connection = this._connections[i];
        connection.close();
        this.logger.info({
          tnx: 'connection',
          cid: connection.id,
          action: 'removed'
        }, 'Connection #%s removed', connection.id);
      }
    }

    if (len && !this._connections.length) {
      this.logger.debug({
        tnx: 'connection'
      }, 'All connections removed');
    }

    if (!this._queue.length) {
      return;
    } // make sure that entire queue would be cleaned


    let invokeCallbacks = () => {
      if (!this._queue.length) {
        this.logger.debug({
          tnx: 'connection'
        }, 'Pending queue entries cleared');
        return;
      }

      let entry = this._queue.shift();

      if (entry && typeof entry.callback === 'function') {
        try {
          entry.callback(new Error('Connection pool was closed'));
        } catch (E) {
          this.logger.error({
            err: E,
            tnx: 'callback',
            cid: connection.id
          }, 'Callback error for #%s: %s', connection.id, E.message);
        }
      }

      setImmediate(invokeCallbacks);
    };

    setImmediate(invokeCallbacks);
  }
  /**
   * Check the queue and available connections. If there is a message to be sent and there is
   * an available connection, then use this connection to send the mail
   */


  _processMessages() {
    let connection;
    let i, len; // do nothing if already closed

    if (this._closed) {
      return;
    } // do nothing if queue is empty


    if (!this._queue.length) {
      if (!this.idling) {
        // no pending jobs
        this.idling = true;
        this.emit('idle');
      }

      return;
    } // find first available connection


    for (i = 0, len = this._connections.length; i < len; i++) {
      if (this._connections[i].available) {
        connection = this._connections[i];
        break;
      }
    }

    if (!connection && this._connections.length < this.options.maxConnections) {
      connection = this._createConnection();
    }

    if (!connection) {
      // no more free connection slots available
      this.idling = false;
      return;
    } // check if there is free space in the processing queue


    if (!this.idling && this._queue.length < this.options.maxConnections) {
      this.idling = true;
      this.emit('idle');
    }

    let entry = connection.queueEntry = this._queue.shift();

    entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\s]/g, '');
    connection.available = false;
    this.logger.debug({
      tnx: 'pool',
      cid: connection.id,
      messageId: entry.messageId,
      action: 'assign'
    }, 'Assigned message <%s> to #%s (%s)', entry.messageId, connection.id, connection.messages + 1);

    if (this._rateLimit.limit) {
      this._rateLimit.counter++;

      if (!this._rateLimit.checkpoint) {
        this._rateLimit.checkpoint = Date.now();
      }
    }

    connection.send(entry.mail, (err, info) => {
      // only process callback if current handler is not changed
      if (entry === connection.queueEntry) {
        try {
          entry.callback(err, info);
        } catch (E) {
          this.logger.error({
            err: E,
            tnx: 'callback',
            cid: connection.id
          }, 'Callback error for #%s: %s', connection.id, E.message);
        }

        connection.queueEntry = false;
      }
    });
  }
  /**
   * Creates a new pool resource
   */


  _createConnection() {
    let connection = new PoolResource(this);
    connection.id = ++this._connectionCounter;
    this.logger.info({
      tnx: 'pool',
      cid: connection.id,
      action: 'conection'
    }, 'Created new pool resource #%s', connection.id); // resource comes available

    connection.on('available', () => {
      this.logger.debug({
        tnx: 'connection',
        cid: connection.id,
        action: 'available'
      }, 'Connection #%s became available', connection.id);

      if (this._closed) {
        // if already closed run close() that will remove this connections from connections list
        this.close();
      } else {
        // check if there's anything else to send
        this._processMessages();
      }
    }); // resource is terminated with an error

    connection.once('error', err => {
      if (err.code !== 'EMAXLIMIT') {
        this.logger.error({
          err,
          tnx: 'pool',
          cid: connection.id
        }, 'Pool Error for #%s: %s', connection.id, err.message);
      } else {
        this.logger.debug({
          tnx: 'pool',
          cid: connection.id,
          action: 'maxlimit'
        }, 'Max messages limit exchausted for #%s', connection.id);
      }

      if (connection.queueEntry) {
        try {
          connection.queueEntry.callback(err);
        } catch (E) {
          this.logger.error({
            err: E,
            tnx: 'callback',
            cid: connection.id
          }, 'Callback error for #%s: %s', connection.id, E.message);
        }

        connection.queueEntry = false;
      } // remove the erroneus connection from connections list


      this._removeConnection(connection);

      this._continueProcessing();
    });
    connection.once('close', () => {
      this.logger.info({
        tnx: 'connection',
        cid: connection.id,
        action: 'closed'
      }, 'Connection #%s was closed', connection.id);

      this._removeConnection(connection);

      if (connection.queueEntry) {
        // If the connection closed when sending, add the message to the queue again
        // if max number of requeues is not reached yet
        // Note that we must wait a bit.. because the callback of the 'error' handler might be called
        // in the next event loop
        setTimeout(() => {
          if (connection.queueEntry) {
            if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {
              this._requeueEntryOnConnectionClose(connection);
            } else {
              this._failDeliveryOnConnectionClose(connection);
            }
          }

          this._continueProcessing();
        }, 50);
      } else {
        this._continueProcessing();
      }
    });

    this._connections.push(connection);

    return connection;
  }

  _shouldRequeuOnConnectionClose(queueEntry) {
    if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {
      return true;
    }

    return queueEntry.requeueAttempts < this.options.maxRequeues;
  }

  _failDeliveryOnConnectionClose(connection) {
    if (connection.queueEntry && connection.queueEntry.callback) {
      try {
        connection.queueEntry.callback(new Error('Reached maximum number of retries after connection was closed'));
      } catch (E) {
        this.logger.error({
          err: E,
          tnx: 'callback',
          messageId: connection.queueEntry.messageId,
          cid: connection.id
        }, 'Callback error for #%s: %s', connection.id, E.message);
      }

      connection.queueEntry = false;
    }
  }

  _requeueEntryOnConnectionClose(connection) {
    connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;
    this.logger.debug({
      tnx: 'pool',
      cid: connection.id,
      messageId: connection.queueEntry.messageId,
      action: 'requeue'
    }, 'Re-queued message <%s> for #%s. Attempt: #%s', connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);

    this._queue.unshift(connection.queueEntry);

    connection.queueEntry = false;
  }
  /**
   * Continue to process message if the pool hasn't closed
   */


  _continueProcessing() {
    if (this._closed) {
      this.close();
    } else {
      setTimeout(() => this._processMessages(), 100);
    }
  }
  /**
   * Remove resource from pool
   *
   * @param {Object} connection The PoolResource to remove
   */


  _removeConnection(connection) {
    let index = this._connections.indexOf(connection);

    if (index !== -1) {
      this._connections.splice(index, 1);
    }
  }
  /**
   * Checks if connections have hit current rate limit and if so, queues the availability callback
   *
   * @param {Function} callback Callback function to run once rate limiter has been cleared
   */


  _checkRateLimit(callback) {
    if (!this._rateLimit.limit) {
      return callback();
    }

    let now = Date.now();

    if (this._rateLimit.counter < this._rateLimit.limit) {
      return callback();
    }

    this._rateLimit.waiting.push(callback);

    if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {
      return this._clearRateLimit();
    } else if (!this._rateLimit.timeout) {
      this._rateLimit.timeout = setTimeout(() => this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));
      this._rateLimit.checkpoint = now;
    }
  }
  /**
   * Clears current rate limit limitation and runs paused callback
   */


  _clearRateLimit() {
    clearTimeout(this._rateLimit.timeout);
    this._rateLimit.timeout = null;
    this._rateLimit.counter = 0;
    this._rateLimit.checkpoint = false; // resume all paused connections

    while (this._rateLimit.waiting.length) {
      let cb = this._rateLimit.waiting.shift();

      setImmediate(cb);
    }
  }
  /**
   * Returns true if there are free slots in the queue
   */


  isIdle() {
    return this.idling;
  }
  /**
   * Verifies SMTP configuration
   *
   * @param {Function} callback Callback function
   */


  verify(callback) {
    let promise;

    if (!callback) {
      promise = new Promise((resolve, reject) => {
        callback = shared.callbackPromise(resolve, reject);
      });
    }

    let auth = new PoolResource(this).auth;
    this.getSocket(this.options, (err, socketOptions) => {
      if (err) {
        return callback(err);
      }

      let options = this.options;

      if (socketOptions && socketOptions.connection) {
        this.logger.info({
          tnx: 'proxy',
          remoteAddress: socketOptions.connection.remoteAddress,
          remotePort: socketOptions.connection.remotePort,
          destHost: options.host || '',
          destPort: options.port || '',
          action: 'connected'
        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');
        options = shared.assign(false, options);
        Object.keys(socketOptions).forEach(key => {
          options[key] = socketOptions[key];
        });
      }

      let connection = new SMTPConnection(options);
      let returned = false;
      connection.once('error', err => {
        if (returned) {
          return;
        }

        returned = true;
        connection.close();
        return callback(err);
      });
      connection.once('end', () => {
        if (returned) {
          return;
        }

        returned = true;
        return callback(new Error('Connection closed'));
      });

      let finalize = () => {
        if (returned) {
          return;
        }

        returned = true;
        connection.quit();
        return callback(null, true);
      };

      connection.connect(() => {
        if (returned) {
          return;
        }

        if (auth && (connection.allowsAuth || options.forceAuth)) {
          connection.login(auth, err => {
            if (returned) {
              return;
            }

            if (err) {
              returned = true;
              connection.close();
              return callback(err);
            }

            finalize();
          });
        } else {
          finalize();
        }
      });
    });
    return promise;
  }

} // expose to the world


module.exports = SMTPPool;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const SMTPConnection = __webpack_require__(31);

const assign = __webpack_require__(5).assign;

const XOAuth2 = __webpack_require__(52);

const EventEmitter = __webpack_require__(15);
/**
 * Creates an element for the pool
 *
 * @constructor
 * @param {Object} options SMTPPool instance
 */


class PoolResource extends EventEmitter {
  constructor(pool) {
    super();
    this.pool = pool;
    this.options = pool.options;
    this.logger = this.pool.logger;

    if (this.options.auth) {
      switch ((this.options.auth.type || '').toString().toUpperCase()) {
        case 'OAUTH2':
          {
            let oauth2 = new XOAuth2(this.options.auth, this.logger);
            oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;
            this.auth = {
              type: 'OAUTH2',
              user: this.options.auth.user,
              oauth2,
              method: 'XOAUTH2'
            };
            oauth2.on('token', token => this.pool.mailer.emit('token', token));
            oauth2.on('error', err => this.emit('error', err));
            break;
          }

        default:
          if (!this.options.auth.user && !this.options.auth.pass) {
            break;
          }

          this.auth = {
            type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',
            user: this.options.auth.user,
            credentials: {
              user: this.options.auth.user || '',
              pass: this.options.auth.pass,
              options: this.options.auth.options
            },
            method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false
          };
      }
    }

    this._connection = false;
    this._connected = false;
    this.messages = 0;
    this.available = true;
  }
  /**
   * Initiates a connection to the SMTP server
   *
   * @param {Function} callback Callback function to run once the connection is established or failed
   */


  connect(callback) {
    this.pool.getSocket(this.options, (err, socketOptions) => {
      if (err) {
        return callback(err);
      }

      let returned = false;
      let options = this.options;

      if (socketOptions && socketOptions.connection) {
        this.logger.info({
          tnx: 'proxy',
          remoteAddress: socketOptions.connection.remoteAddress,
          remotePort: socketOptions.connection.remotePort,
          destHost: options.host || '',
          destPort: options.port || '',
          action: 'connected'
        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');
        options = assign(false, options);
        Object.keys(socketOptions).forEach(key => {
          options[key] = socketOptions[key];
        });
      }

      this.connection = new SMTPConnection(options);
      this.connection.once('error', err => {
        this.emit('error', err);

        if (returned) {
          return;
        }

        returned = true;
        return callback(err);
      });
      this.connection.once('end', () => {
        this.close();

        if (returned) {
          return;
        }

        returned = true;
        let timer = setTimeout(() => {
          if (returned) {
            return;
          } // still have not returned, this means we have an unexpected connection close


          let err = new Error('Unexpected socket close');

          if (this.connection && this.connection._socket && this.connection._socket.upgrading) {
            // starttls connection errors
            err.code = 'ETLS';
          }

          callback(err);
        }, 1000);

        try {
          timer.unref();
        } catch (E) {// Ignore. Happens on envs with non-node timer implementation
        }
      });
      this.connection.connect(() => {
        if (returned) {
          return;
        }

        if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {
          this.connection.login(this.auth, err => {
            if (returned) {
              return;
            }

            returned = true;

            if (err) {
              this.connection.close();
              this.emit('error', err);
              return callback(err);
            }

            this._connected = true;
            callback(null, true);
          });
        } else {
          returned = true;
          this._connected = true;
          return callback(null, true);
        }
      });
    });
  }
  /**
   * Sends an e-mail to be sent using the selected settings
   *
   * @param {Object} mail Mail object
   * @param {Function} callback Callback function
   */


  send(mail, callback) {
    if (!this._connected) {
      return this.connect(err => {
        if (err) {
          return callback(err);
        }

        return this.send(mail, callback);
      });
    }

    let envelope = mail.message.getEnvelope();
    let messageId = mail.message.messageId();
    let recipients = [].concat(envelope.to || []);

    if (recipients.length > 3) {
      recipients.push('...and ' + recipients.splice(2).length + ' more');
    }

    this.logger.info({
      tnx: 'send',
      messageId,
      cid: this.id
    }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));

    if (mail.data.dsn) {
      envelope.dsn = mail.data.dsn;
    }

    this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {
      this.messages++;

      if (err) {
        this.connection.close();
        this.emit('error', err);
        return callback(err);
      }

      info.envelope = {
        from: envelope.from,
        to: envelope.to
      };
      info.messageId = messageId;
      setImmediate(() => {
        let err;

        if (this.messages >= this.options.maxMessages) {
          err = new Error('Resource exhausted');
          err.code = 'EMAXLIMIT';
          this.connection.close();
          this.emit('error', err);
        } else {
          this.pool._checkRateLimit(() => {
            this.available = true;
            this.emit('available');
          });
        }
      });
      callback(null, info);
    });
  }
  /**
   * Closes the connection
   */


  close() {
    this._connected = false;

    if (this.auth && this.auth.oauth2) {
      this.auth.oauth2.removeAllListeners();
    }

    if (this.connection) {
      this.connection.close();
    }

    this.emit('close');
  }

}

module.exports = PoolResource;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const stream = __webpack_require__(0);

const Transform = stream.Transform;
/**
 * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>
 * Also makes sure that only <CR><LF> sequences are used for linebreaks
 *
 * @param {Object} options Stream options
 */

class DataStream extends Transform {
  constructor(options) {
    super(options); // init Transform

    this.options = options || {};
    this._curLine = '';
    this.inByteCount = 0;
    this.outByteCount = 0;
    this.lastByte = false;
  }
  /**
   * Escapes dots
   */


  _transform(chunk, encoding, done) {
    let chunks = [];
    let chunklen = 0;
    let i,
        len,
        lastPos = 0;
    let buf;

    if (!chunk || !chunk.length) {
      return done();
    }

    if (typeof chunk === 'string') {
      chunk = Buffer.from(chunk);
    }

    this.inByteCount += chunk.length;

    for (i = 0, len = chunk.length; i < len; i++) {
      if (chunk[i] === 0x2e) {
        // .
        if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {
          buf = chunk.slice(lastPos, i + 1);
          chunks.push(buf);
          chunks.push(Buffer.from('.'));
          chunklen += buf.length + 1;
          lastPos = i + 1;
        }
      } else if (chunk[i] === 0x0a) {
        // .
        if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {
          if (i > lastPos) {
            buf = chunk.slice(lastPos, i);
            chunks.push(buf);
            chunklen += buf.length + 2;
          } else {
            chunklen += 2;
          }

          chunks.push(Buffer.from('\r\n'));
          lastPos = i + 1;
        }
      }
    }

    if (chunklen) {
      // add last piece
      if (lastPos < chunk.length) {
        buf = chunk.slice(lastPos);
        chunks.push(buf);
        chunklen += buf.length;
      }

      this.outByteCount += chunklen;
      this.push(Buffer.concat(chunks, chunklen));
    } else {
      this.outByteCount += chunk.length;
      this.push(chunk);
    }

    this.lastByte = chunk[chunk.length - 1];
    done();
  }
  /**
   * Finalizes the stream with a dot on a single line
   */


  _flush(done) {
    let buf;

    if (this.lastByte === 0x0a) {
      buf = Buffer.from('.\r\n');
    } else if (this.lastByte === 0x0d) {
      buf = Buffer.from('\n.\r\n');
    } else {
      buf = Buffer.from('\r\n.\r\n');
    }

    this.outByteCount += buf.length;
    this.push(buf);
    done();
  }

}

module.exports = DataStream;

/***/ }),
/* 104 */
/***/ (function(module) {

module.exports = JSON.parse("{\"126\":{\"host\":\"smtp.126.com\",\"port\":465,\"secure\":true},\"163\":{\"host\":\"smtp.163.com\",\"port\":465,\"secure\":true},\"1und1\":{\"host\":\"smtp.1und1.de\",\"port\":465,\"secure\":true,\"authMethod\":\"LOGIN\"},\"AOL\":{\"domains\":[\"aol.com\"],\"host\":\"smtp.aol.com\",\"port\":587},\"DebugMail\":{\"host\":\"debugmail.io\",\"port\":25},\"DynectEmail\":{\"aliases\":[\"Dynect\"],\"host\":\"smtp.dynect.net\",\"port\":25},\"Ethereal\":{\"aliases\":[\"ethereal.email\"],\"host\":\"smtp.ethereal.email\",\"port\":587},\"FastMail\":{\"domains\":[\"fastmail.fm\"],\"host\":\"smtp.fastmail.com\",\"port\":465,\"secure\":true},\"GandiMail\":{\"aliases\":[\"Gandi\",\"Gandi Mail\"],\"host\":\"mail.gandi.net\",\"port\":587},\"Gmail\":{\"aliases\":[\"Google Mail\"],\"domains\":[\"gmail.com\",\"googlemail.com\"],\"host\":\"smtp.gmail.com\",\"port\":465,\"secure\":true},\"Godaddy\":{\"host\":\"smtpout.secureserver.net\",\"port\":25},\"GodaddyAsia\":{\"host\":\"smtp.asia.secureserver.net\",\"port\":25},\"GodaddyEurope\":{\"host\":\"smtp.europe.secureserver.net\",\"port\":25},\"hot.ee\":{\"host\":\"mail.hot.ee\"},\"Hotmail\":{\"aliases\":[\"Outlook\",\"Outlook.com\",\"Hotmail.com\"],\"domains\":[\"hotmail.com\",\"outlook.com\"],\"host\":\"smtp-mail.outlook.com\",\"port\":587},\"iCloud\":{\"aliases\":[\"Me\",\"Mac\"],\"domains\":[\"me.com\",\"mac.com\"],\"host\":\"smtp.mail.me.com\",\"port\":587},\"Infomaniak\":{\"host\":\"mail.infomaniak.com\",\"domains\":[\"ik.me\",\"ikmail.com\",\"etik.com\"],\"port\":587},\"mail.ee\":{\"host\":\"smtp.mail.ee\"},\"Mail.ru\":{\"host\":\"smtp.mail.ru\",\"port\":465,\"secure\":true},\"Maildev\":{\"port\":1025,\"ignoreTLS\":true},\"Mailgun\":{\"host\":\"smtp.mailgun.org\",\"port\":465,\"secure\":true},\"Mailjet\":{\"host\":\"in.mailjet.com\",\"port\":587},\"Mailosaur\":{\"host\":\"mailosaur.io\",\"port\":25},\"Mailtrap\":{\"host\":\"smtp.mailtrap.io\",\"port\":2525},\"Mandrill\":{\"host\":\"smtp.mandrillapp.com\",\"port\":587},\"Naver\":{\"host\":\"smtp.naver.com\",\"port\":587},\"One\":{\"host\":\"send.one.com\",\"port\":465,\"secure\":true},\"OpenMailBox\":{\"aliases\":[\"OMB\",\"openmailbox.org\"],\"host\":\"smtp.openmailbox.org\",\"port\":465,\"secure\":true},\"Outlook365\":{\"host\":\"smtp.office365.com\",\"port\":587,\"secure\":false},\"OhMySMTP\":{\"host\":\"smtp.ohmysmtp.com\",\"port\":587,\"secure\":false},\"Postmark\":{\"aliases\":[\"PostmarkApp\"],\"host\":\"smtp.postmarkapp.com\",\"port\":2525},\"qiye.aliyun\":{\"host\":\"smtp.mxhichina.com\",\"port\":\"465\",\"secure\":true},\"QQ\":{\"domains\":[\"qq.com\"],\"host\":\"smtp.qq.com\",\"port\":465,\"secure\":true},\"QQex\":{\"aliases\":[\"QQ Enterprise\"],\"domains\":[\"exmail.qq.com\"],\"host\":\"smtp.exmail.qq.com\",\"port\":465,\"secure\":true},\"SendCloud\":{\"host\":\"smtpcloud.sohu.com\",\"port\":25},\"SendGrid\":{\"host\":\"smtp.sendgrid.net\",\"port\":587},\"SendinBlue\":{\"host\":\"smtp-relay.sendinblue.com\",\"port\":587},\"SendPulse\":{\"host\":\"smtp-pulse.com\",\"port\":465,\"secure\":true},\"SES\":{\"host\":\"email-smtp.us-east-1.amazonaws.com\",\"port\":465,\"secure\":true},\"SES-US-EAST-1\":{\"host\":\"email-smtp.us-east-1.amazonaws.com\",\"port\":465,\"secure\":true},\"SES-US-WEST-2\":{\"host\":\"email-smtp.us-west-2.amazonaws.com\",\"port\":465,\"secure\":true},\"SES-EU-WEST-1\":{\"host\":\"email-smtp.eu-west-1.amazonaws.com\",\"port\":465,\"secure\":true},\"Sparkpost\":{\"aliases\":[\"SparkPost\",\"SparkPost Mail\"],\"domains\":[\"sparkpost.com\"],\"host\":\"smtp.sparkpostmail.com\",\"port\":587,\"secure\":false},\"Tipimail\":{\"host\":\"smtp.tipimail.com\",\"port\":587},\"Yahoo\":{\"domains\":[\"yahoo.com\"],\"host\":\"smtp.mail.yahoo.com\",\"port\":465,\"secure\":true},\"Yandex\":{\"domains\":[\"yandex.ru\"],\"host\":\"smtp.yandex.ru\",\"port\":465,\"secure\":true},\"Zoho\":{\"host\":\"smtp.zoho.com\",\"port\":465,\"secure\":true,\"authMethod\":\"LOGIN\"}}");

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(15);

const SMTPConnection = __webpack_require__(31);

const wellKnown = __webpack_require__(53);

const shared = __webpack_require__(5);

const XOAuth2 = __webpack_require__(52);

const packageData = __webpack_require__(8);
/**
 * Creates a SMTP transport object for Nodemailer
 *
 * @constructor
 * @param {Object} options Connection options
 */


class SMTPTransport extends EventEmitter {
  constructor(options) {
    super();
    options = options || {};

    if (typeof options === 'string') {
      options = {
        url: options
      };
    }

    let urlData;
    let service = options.service;

    if (typeof options.getSocket === 'function') {
      this.getSocket = options.getSocket;
    }

    if (options.url) {
      urlData = shared.parseConnectionUrl(options.url);
      service = service || urlData.service;
    }

    this.options = shared.assign(false, // create new object
    options, // regular options
    urlData, // url options
    service && wellKnown(service) // wellknown options
    );
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'smtp-transport'
    }); // temporary object

    let connection = new SMTPConnection(this.options);
    this.name = 'SMTP';
    this.version = packageData.version + '[client:' + connection.version + ']';

    if (this.options.auth) {
      this.auth = this.getAuth({});
    }
  }
  /**
   * Placeholder function for creating proxy sockets. This method immediatelly returns
   * without a socket
   *
   * @param {Object} options Connection options
   * @param {Function} callback Callback function to run with the socket keys
   */


  getSocket(options, callback) {
    // return immediatelly
    return setImmediate(() => callback(null, false));
  }

  getAuth(authOpts) {
    if (!authOpts) {
      return this.auth;
    }

    let hasAuth = false;
    let authData = {};

    if (this.options.auth && typeof this.options.auth === 'object') {
      Object.keys(this.options.auth).forEach(key => {
        hasAuth = true;
        authData[key] = this.options.auth[key];
      });
    }

    if (authOpts && typeof authOpts === 'object') {
      Object.keys(authOpts).forEach(key => {
        hasAuth = true;
        authData[key] = authOpts[key];
      });
    }

    if (!hasAuth) {
      return false;
    }

    switch ((authData.type || '').toString().toUpperCase()) {
      case 'OAUTH2':
        {
          if (!authData.service && !authData.user) {
            return false;
          }

          let oauth2 = new XOAuth2(authData, this.logger);
          oauth2.provisionCallback = this.mailer && this.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;
          oauth2.on('token', token => this.mailer.emit('token', token));
          oauth2.on('error', err => this.emit('error', err));
          return {
            type: 'OAUTH2',
            user: authData.user,
            oauth2,
            method: 'XOAUTH2'
          };
        }

      default:
        return {
          type: (authData.type || '').toString().toUpperCase() || 'LOGIN',
          user: authData.user,
          credentials: {
            user: authData.user || '',
            pass: authData.pass,
            options: authData.options
          },
          method: (authData.method || '').trim().toUpperCase() || this.options.authMethod || false
        };
    }
  }
  /**
   * Sends an e-mail using the selected settings
   *
   * @param {Object} mail Mail object
   * @param {Function} callback Callback function
   */


  send(mail, callback) {
    this.getSocket(this.options, (err, socketOptions) => {
      if (err) {
        return callback(err);
      }

      let returned = false;
      let options = this.options;

      if (socketOptions && socketOptions.connection) {
        this.logger.info({
          tnx: 'proxy',
          remoteAddress: socketOptions.connection.remoteAddress,
          remotePort: socketOptions.connection.remotePort,
          destHost: options.host || '',
          destPort: options.port || '',
          action: 'connected'
        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || ''); // only copy options if we need to modify it

        options = shared.assign(false, options);
        Object.keys(socketOptions).forEach(key => {
          options[key] = socketOptions[key];
        });
      }

      let connection = new SMTPConnection(options);
      connection.once('error', err => {
        if (returned) {
          return;
        }

        returned = true;
        connection.close();
        return callback(err);
      });
      connection.once('end', () => {
        if (returned) {
          return;
        }

        let timer = setTimeout(() => {
          if (returned) {
            return;
          }

          returned = true; // still have not returned, this means we have an unexpected connection close

          let err = new Error('Unexpected socket close');

          if (connection && connection._socket && connection._socket.upgrading) {
            // starttls connection errors
            err.code = 'ETLS';
          }

          callback(err);
        }, 1000);

        try {
          timer.unref();
        } catch (E) {// Ignore. Happens on envs with non-node timer implementation
        }
      });

      let sendMessage = () => {
        let envelope = mail.message.getEnvelope();
        let messageId = mail.message.messageId();
        let recipients = [].concat(envelope.to || []);

        if (recipients.length > 3) {
          recipients.push('...and ' + recipients.splice(2).length + ' more');
        }

        if (mail.data.dsn) {
          envelope.dsn = mail.data.dsn;
        }

        this.logger.info({
          tnx: 'send',
          messageId
        }, 'Sending message %s to <%s>', messageId, recipients.join(', '));
        connection.send(envelope, mail.message.createReadStream(), (err, info) => {
          returned = true;
          connection.close();

          if (err) {
            this.logger.error({
              err,
              tnx: 'send'
            }, 'Send error for %s: %s', messageId, err.message);
            return callback(err);
          }

          info.envelope = {
            from: envelope.from,
            to: envelope.to
          };
          info.messageId = messageId;

          try {
            return callback(null, info);
          } catch (E) {
            this.logger.error({
              err: E,
              tnx: 'callback'
            }, 'Callback error for %s: %s', messageId, E.message);
          }
        });
      };

      connection.connect(() => {
        if (returned) {
          return;
        }

        let auth = this.getAuth(mail.data.auth);

        if (auth && (connection.allowsAuth || options.forceAuth)) {
          connection.login(auth, err => {
            if (auth && auth !== this.auth && auth.oauth2) {
              auth.oauth2.removeAllListeners();
            }

            if (returned) {
              return;
            }

            if (err) {
              returned = true;
              connection.close();
              return callback(err);
            }

            sendMessage();
          });
        } else {
          sendMessage();
        }
      });
    });
  }
  /**
   * Verifies SMTP configuration
   *
   * @param {Function} callback Callback function
   */


  verify(callback) {
    let promise;

    if (!callback) {
      promise = new Promise((resolve, reject) => {
        callback = shared.callbackPromise(resolve, reject);
      });
    }

    this.getSocket(this.options, (err, socketOptions) => {
      if (err) {
        return callback(err);
      }

      let options = this.options;

      if (socketOptions && socketOptions.connection) {
        this.logger.info({
          tnx: 'proxy',
          remoteAddress: socketOptions.connection.remoteAddress,
          remotePort: socketOptions.connection.remotePort,
          destHost: options.host || '',
          destPort: options.port || '',
          action: 'connected'
        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');
        options = shared.assign(false, options);
        Object.keys(socketOptions).forEach(key => {
          options[key] = socketOptions[key];
        });
      }

      let connection = new SMTPConnection(options);
      let returned = false;
      connection.once('error', err => {
        if (returned) {
          return;
        }

        returned = true;
        connection.close();
        return callback(err);
      });
      connection.once('end', () => {
        if (returned) {
          return;
        }

        returned = true;
        return callback(new Error('Connection closed'));
      });

      let finalize = () => {
        if (returned) {
          return;
        }

        returned = true;
        connection.quit();
        return callback(null, true);
      };

      connection.connect(() => {
        if (returned) {
          return;
        }

        let authData = this.getAuth({});

        if (authData && (connection.allowsAuth || options.forceAuth)) {
          connection.login(authData, err => {
            if (returned) {
              return;
            }

            if (err) {
              returned = true;
              connection.close();
              return callback(err);
            }

            finalize();
          });
        } else {
          finalize();
        }
      });
    });
    return promise;
  }
  /**
   * Releases resources
   */


  close() {
    if (this.auth && this.auth.oauth2) {
      this.auth.oauth2.removeAllListeners();
    }

    this.emit('close');
  }

} // expose to the world


module.exports = SMTPTransport;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const spawn = __webpack_require__(107).spawn;

const packageData = __webpack_require__(8);

const shared = __webpack_require__(5);
/**
 * Generates a Transport object for Sendmail
 *
 * Possible options can be the following:
 *
 *  * **path** optional path to sendmail binary
 *  * **newline** either 'windows' or 'unix'
 *  * **args** an array of arguments for the sendmail binary
 *
 * @constructor
 * @param {Object} optional config parameter for Sendmail
 */


class SendmailTransport {
  constructor(options) {
    options = options || {}; // use a reference to spawn for mocking purposes

    this._spawn = spawn;
    this.options = options || {};
    this.name = 'Sendmail';
    this.version = packageData.version;
    this.path = 'sendmail';
    this.args = false;
    this.winbreak = false;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'sendmail'
    });

    if (options) {
      if (typeof options === 'string') {
        this.path = options;
      } else if (typeof options === 'object') {
        if (options.path) {
          this.path = options.path;
        }

        if (Array.isArray(options.args)) {
          this.args = options.args;
        }

        this.winbreak = ['win', 'windows', 'dos', '\r\n'].includes((options.newline || '').toString().toLowerCase());
      }
    }
  }
  /**
   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  send(mail, done) {
    // Sendmail strips this header line by itself
    mail.message.keepBcc = true;
    let envelope = mail.data.envelope || mail.message.getEnvelope();
    let messageId = mail.message.messageId();
    let args;
    let sendmail;
    let returned;
    const hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some(addr => /^-/.test(addr));

    if (hasInvalidAddresses) {
      return done(new Error('Can not send mail. Invalid envelope addresses.'));
    }

    if (this.args) {
      // force -i to keep single dots
      args = ['-i'].concat(this.args).concat(envelope.to);
    } else {
      args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);
    }

    let callback = err => {
      if (returned) {
        // ignore any additional responses, already done
        return;
      }

      returned = true;

      if (typeof done === 'function') {
        if (err) {
          return done(err);
        } else {
          return done(null, {
            envelope: mail.data.envelope || mail.message.getEnvelope(),
            messageId,
            response: 'Messages queued for delivery'
          });
        }
      }
    };

    try {
      sendmail = this._spawn(this.path, args);
    } catch (E) {
      this.logger.error({
        err: E,
        tnx: 'spawn',
        messageId
      }, 'Error occurred while spawning sendmail. %s', E.message);
      return callback(E);
    }

    if (sendmail) {
      sendmail.on('error', err => {
        this.logger.error({
          err,
          tnx: 'spawn',
          messageId
        }, 'Error occurred when sending message %s. %s', messageId, err.message);
        callback(err);
      });
      sendmail.once('exit', code => {
        if (!code) {
          return callback();
        }

        let err;

        if (code === 127) {
          err = new Error('Sendmail command not found, process exited with code ' + code);
        } else {
          err = new Error('Sendmail exited with code ' + code);
        }

        this.logger.error({
          err,
          tnx: 'stdin',
          messageId
        }, 'Error sending message %s to sendmail. %s', messageId, err.message);
        callback(err);
      });
      sendmail.once('close', callback);
      sendmail.stdin.on('error', err => {
        this.logger.error({
          err,
          tnx: 'stdin',
          messageId
        }, 'Error occurred when piping message %s to sendmail. %s', messageId, err.message);
        callback(err);
      });
      let recipients = [].concat(envelope.to || []);

      if (recipients.length > 3) {
        recipients.push('...and ' + recipients.splice(2).length + ' more');
      }

      this.logger.info({
        tnx: 'send',
        messageId
      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));
      let sourceStream = mail.message.createReadStream();
      sourceStream.once('error', err => {
        this.logger.error({
          err,
          tnx: 'stdin',
          messageId
        }, 'Error occurred when generating message %s. %s', messageId, err.message);
        sendmail.kill('SIGINT'); // do not deliver the message

        callback(err);
      });
      sourceStream.pipe(sendmail.stdin);
    } else {
      return callback(new Error('sendmail was not found'));
    }
  }

}

module.exports = SendmailTransport;

/***/ }),
/* 107 */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const packageData = __webpack_require__(8);

const shared = __webpack_require__(5);
/**
 * Generates a Transport object for streaming
 *
 * Possible options can be the following:
 *
 *  * **buffer** if true, then returns the message as a Buffer object instead of a stream
 *  * **newline** either 'windows' or 'unix'
 *
 * @constructor
 * @param {Object} optional config parameter
 */


class StreamTransport {
  constructor(options) {
    options = options || {};
    this.options = options || {};
    this.name = 'StreamTransport';
    this.version = packageData.version;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'stream-transport'
    });
    this.winbreak = ['win', 'windows', 'dos', '\r\n'].includes((options.newline || '').toString().toLowerCase());
  }
  /**
   * Compiles a mailcomposer message and forwards it to handler that sends it
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  send(mail, done) {
    // We probably need this in the output
    mail.message.keepBcc = true;
    let envelope = mail.data.envelope || mail.message.getEnvelope();
    let messageId = mail.message.messageId();
    let recipients = [].concat(envelope.to || []);

    if (recipients.length > 3) {
      recipients.push('...and ' + recipients.splice(2).length + ' more');
    }

    this.logger.info({
      tnx: 'send',
      messageId
    }, 'Sending message %s to <%s> using %s line breaks', messageId, recipients.join(', '), this.winbreak ? '<CR><LF>' : '<LF>');
    setImmediate(() => {
      let stream;

      try {
        stream = mail.message.createReadStream();
      } catch (E) {
        this.logger.error({
          err: E,
          tnx: 'send',
          messageId
        }, 'Creating send stream failed for %s. %s', messageId, E.message);
        return done(E);
      }

      if (!this.options.buffer) {
        stream.once('error', err => {
          this.logger.error({
            err,
            tnx: 'send',
            messageId
          }, 'Failed creating message for %s. %s', messageId, err.message);
        });
        return done(null, {
          envelope: mail.data.envelope || mail.message.getEnvelope(),
          messageId,
          message: stream
        });
      }

      let chunks = [];
      let chunklen = 0;
      stream.on('readable', () => {
        let chunk;

        while ((chunk = stream.read()) !== null) {
          chunks.push(chunk);
          chunklen += chunk.length;
        }
      });
      stream.once('error', err => {
        this.logger.error({
          err,
          tnx: 'send',
          messageId
        }, 'Failed creating message for %s. %s', messageId, err.message);
        return done(err);
      });
      stream.on('end', () => done(null, {
        envelope: mail.data.envelope || mail.message.getEnvelope(),
        messageId,
        message: Buffer.concat(chunks, chunklen)
      }));
    });
  }

}

module.exports = StreamTransport;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const packageData = __webpack_require__(8);

const shared = __webpack_require__(5);
/**
 * Generates a Transport object to generate JSON output
 *
 * @constructor
 * @param {Object} optional config parameter
 */


class JSONTransport {
  constructor(options) {
    options = options || {};
    this.options = options || {};
    this.name = 'JSONTransport';
    this.version = packageData.version;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'json-transport'
    });
  }
  /**
   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  send(mail, done) {
    // Sendmail strips this header line by itself
    mail.message.keepBcc = true;
    let envelope = mail.data.envelope || mail.message.getEnvelope();
    let messageId = mail.message.messageId();
    let recipients = [].concat(envelope.to || []);

    if (recipients.length > 3) {
      recipients.push('...and ' + recipients.splice(2).length + ' more');
    }

    this.logger.info({
      tnx: 'send',
      messageId
    }, 'Composing JSON structure of %s to <%s>', messageId, recipients.join(', '));
    setImmediate(() => {
      mail.normalize((err, data) => {
        if (err) {
          this.logger.error({
            err,
            tnx: 'send',
            messageId
          }, 'Failed building JSON structure for %s. %s', messageId, err.message);
          return done(err);
        }

        delete data.envelope;
        delete data.normalizedHeaders;
        return done(null, {
          envelope,
          messageId,
          message: this.options.skipEncoding ? data : JSON.stringify(data)
        });
      });
    });
  }

}

module.exports = JSONTransport;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(15);

const packageData = __webpack_require__(8);

const shared = __webpack_require__(5);

const LeWindows = __webpack_require__(50);
/**
 * Generates a Transport object for AWS SES
 *
 * Possible options can be the following:
 *
 *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES
 *  * **maxConnections** optional Number specifying max number of parallel connections to SES
 *
 * @constructor
 * @param {Object} optional config parameter
 */


class SESTransport extends EventEmitter {
  constructor(options) {
    super();
    options = options || {};
    this.options = options || {};
    this.ses = this.options.SES;
    this.name = 'SESTransport';
    this.version = packageData.version;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'ses-transport'
    }); // parallel sending connections

    this.maxConnections = Number(this.options.maxConnections) || Infinity;
    this.connections = 0; // max messages per second

    this.sendingRate = Number(this.options.sendingRate) || Infinity;
    this.sendingRateTTL = null;
    this.rateInterval = 1000; // milliseconds

    this.rateMessages = [];
    this.pending = [];
    this.idling = true;
    setImmediate(() => {
      if (this.idling) {
        this.emit('idle');
      }
    });
  }
  /**
   * Schedules a sending of a message
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  send(mail, callback) {
    if (this.connections >= this.maxConnections) {
      this.idling = false;
      return this.pending.push({
        mail,
        callback
      });
    }

    if (!this._checkSendingRate()) {
      this.idling = false;
      return this.pending.push({
        mail,
        callback
      });
    }

    this._send(mail, (...args) => {
      setImmediate(() => callback(...args));

      this._sent();
    });
  }

  _checkRatedQueue() {
    if (this.connections >= this.maxConnections || !this._checkSendingRate()) {
      return;
    }

    if (!this.pending.length) {
      if (!this.idling) {
        this.idling = true;
        this.emit('idle');
      }

      return;
    }

    let next = this.pending.shift();

    this._send(next.mail, (...args) => {
      setImmediate(() => next.callback(...args));

      this._sent();
    });
  }

  _checkSendingRate() {
    clearTimeout(this.sendingRateTTL);
    let now = Date.now();
    let oldest = false; // delete older messages

    for (let i = this.rateMessages.length - 1; i >= 0; i--) {
      if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {
        oldest = this.rateMessages[i].ts;
      }

      if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {
        this.rateMessages.splice(i, 1);
      }
    }

    if (this.rateMessages.length < this.sendingRate) {
      return true;
    }

    let delay = Math.max(oldest + 1001, now + 20);
    this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);

    try {
      this.sendingRateTTL.unref();
    } catch (E) {// Ignore. Happens on envs with non-node timer implementation
    }

    return false;
  }

  _sent() {
    this.connections--;

    this._checkRatedQueue();
  }
  /**
   * Returns true if there are free slots in the queue
   */


  isIdle() {
    return this.idling;
  }
  /**
   * Compiles a mailcomposer message and forwards it to SES
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  _send(mail, callback) {
    let statObject = {
      ts: Date.now(),
      pending: true
    };
    this.connections++;
    this.rateMessages.push(statObject);
    let envelope = mail.data.envelope || mail.message.getEnvelope();
    let messageId = mail.message.messageId();
    let recipients = [].concat(envelope.to || []);

    if (recipients.length > 3) {
      recipients.push('...and ' + recipients.splice(2).length + ' more');
    }

    this.logger.info({
      tnx: 'send',
      messageId
    }, 'Sending message %s to <%s>', messageId, recipients.join(', '));

    let getRawMessage = next => {
      // do not use Message-ID and Date in DKIM signature
      if (!mail.data._dkim) {
        mail.data._dkim = {};
      }

      if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {
        mail.data._dkim.skipFields += ':date:message-id';
      } else {
        mail.data._dkim.skipFields = 'date:message-id';
      }

      let sourceStream = mail.message.createReadStream();
      let stream = sourceStream.pipe(new LeWindows());
      let chunks = [];
      let chunklen = 0;
      stream.on('readable', () => {
        let chunk;

        while ((chunk = stream.read()) !== null) {
          chunks.push(chunk);
          chunklen += chunk.length;
        }
      });
      sourceStream.once('error', err => stream.emit('error', err));
      stream.once('error', err => {
        next(err);
      });
      stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));
    };

    setImmediate(() => getRawMessage((err, raw) => {
      if (err) {
        this.logger.error({
          err,
          tnx: 'send',
          messageId
        }, 'Failed creating message for %s. %s', messageId, err.message);
        statObject.pending = false;
        return callback(err);
      }

      let sesMessage = {
        RawMessage: {
          // required
          Data: raw // required

        },
        Source: envelope.from,
        Destinations: envelope.to
      };
      Object.keys(mail.data.ses || {}).forEach(key => {
        sesMessage[key] = mail.data.ses[key];
      });
      let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};
      let aws = this.ses.aws || {};

      let getRegion = cb => {
        if (ses.config && typeof ses.config.region === 'function') {
          // promise
          return ses.config.region().then(region => cb(null, region)).catch(err => cb(err));
        }

        return cb(null, ses.config && ses.config.region || 'us-east-1');
      };

      getRegion((err, region) => {
        if (err || !region) {
          region = 'us-east-1';
        }

        let sendPromise;

        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {
          // v3 API
          sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));
        } else {
          // v2 API
          sendPromise = ses.sendRawEmail(sesMessage).promise();
        }

        sendPromise.then(data => {
          if (region === 'us-east-1') {
            region = 'email';
          }

          statObject.pending = false;
          callback(null, {
            envelope: {
              from: envelope.from,
              to: envelope.to
            },
            messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',
            response: data.MessageId,
            raw
          });
        }).catch(err => {
          this.logger.error({
            err,
            tnx: 'send'
          }, 'Send error for %s: %s', messageId, err.message);
          statObject.pending = false;
          callback(err);
        });
      });
    }));
  }
  /**
   * Verifies SES configuration
   *
   * @param {Function} callback Callback function
   */


  verify(callback) {
    let promise;
    let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};
    let aws = this.ses.aws || {};
    const sesMessage = {
      RawMessage: {
        // required
        Data: 'From: invalid@invalid\r\nTo: invalid@invalid\r\n Subject: Invalid\r\n\r\nInvalid'
      },
      Source: 'invalid@invalid',
      Destinations: ['invalid@invalid']
    };

    if (!callback) {
      promise = new Promise((resolve, reject) => {
        callback = shared.callbackPromise(resolve, reject);
      });
    }

    const cb = err => {
      if (err && (err.code || err.Code) !== 'InvalidParameterValue') {
        return callback(err);
      }

      return callback(null, true);
    };

    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {
      // v3 API
      sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);
      ses.send(new aws.SendRawEmailCommand(sesMessage), cb);
    } else {
      // v2 API
      ses.sendRawEmail(sesMessage, cb);
    }

    return promise;
  }

}

module.exports = SESTransport;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

var bind = __webpack_require__(54);

var Axios = __webpack_require__(112);

var mergeConfig = __webpack_require__(63);

var defaults = __webpack_require__(18);
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context); // Factory for creating new instances

  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Expose Cancel & CancelToken

axios.Cancel = __webpack_require__(19);
axios.CancelToken = __webpack_require__(131);
axios.isCancel = __webpack_require__(62);
axios.VERSION = __webpack_require__(35).version; // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(132); // Expose isAxiosError

axios.isAxiosError = __webpack_require__(133);
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports.default = axios;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

var buildURL = __webpack_require__(32);

var InterceptorManager = __webpack_require__(113);

var dispatchRequest = __webpack_require__(114);

var mergeConfig = __webpack_require__(63);

var validator = __webpack_require__(130);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config); // Set config.method

  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  } // filter out skipped interceptors


  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];
    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);
    promise = Promise.resolve(config);

    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }

  var newConfig = config;

  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();

    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
module.exports = Axios;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

var transformData = __webpack_require__(115);

var isCancel = __webpack_require__(62);

var defaults = __webpack_require__(18);

var Cancel = __webpack_require__(19);
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Ensure headers exist

  config.headers = config.headers || {}; // Transform request data

  config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

var defaults = __webpack_require__(18);
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/

  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });
  return data;
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

var settle = __webpack_require__(55);

var cookies = __webpack_require__(118);

var buildURL = __webpack_require__(32);

var buildFullPath = __webpack_require__(56);

var parseHeaders = __webpack_require__(121);

var isURLSameOrigin = __webpack_require__(122);

var createError = __webpack_require__(34);

var defaults = __webpack_require__(18);

var Cancel = __webpack_require__(19);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;

    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response); // Clean up request

      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        } // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request


        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        } // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'


        setTimeout(onloadend);
      };
    } // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || defaults.transitional;

      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }

      reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    } // Add responseType to request if needed


    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function (cancel) {
        if (!request) {
          return;
        }

        reject(!cancel || cancel && cancel.type ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);

      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(4);

var settle = __webpack_require__(55);

var buildFullPath = __webpack_require__(56);

var buildURL = __webpack_require__(32);

var http = __webpack_require__(6);

var https = __webpack_require__(10);

var httpFollow = __webpack_require__(57).http;

var httpsFollow = __webpack_require__(57).https;

var url = __webpack_require__(1);

var zlib = __webpack_require__(2);

var VERSION = __webpack_require__(35).version;

var createError = __webpack_require__(34);

var enhanceError = __webpack_require__(33);

var defaults = __webpack_require__(18);

var Cancel = __webpack_require__(19);

var isHttps = /https:?/;
/**
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} proxy
 * @param {string} location
 */

function setProxy(options, proxy, location) {
  options.hostname = proxy.host;
  options.host = proxy.host;
  options.port = proxy.port;
  options.path = location; // Basic proxy authorization

  if (proxy.auth) {
    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
    options.headers['Proxy-Authorization'] = 'Basic ' + base64;
  } // If a proxy is used, any redirects must also pass through the proxy


  options.beforeRedirect = function beforeRedirect(redirection) {
    redirection.headers.host = redirection.host;
    setProxy(redirection, proxy, redirection.href);
  };
}
/*eslint consistent-return:0*/


module.exports = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var onCanceled;

    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    var resolve = function resolve(value) {
      done();
      resolvePromise(value);
    };

    var reject = function reject(value) {
      done();
      rejectPromise(value);
    };

    var data = config.data;
    var headers = config.headers;
    var headerNames = {};
    Object.keys(headers).forEach(function storeLowerName(name) {
      headerNames[name.toLowerCase()] = name;
    }); // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69

    if ('user-agent' in headerNames) {
      // User-Agent is specified; handle case where no UA header is desired
      if (!headers[headerNames['user-agent']]) {
        delete headers[headerNames['user-agent']];
      } // Otherwise, use specified value

    } else {
      // Only set header if it hasn't been set in config
      headers['User-Agent'] = 'axios/' + VERSION;
    }

    if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) {// Nothing to do...
      } else if (utils.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(createError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', config));
      } // Add Content-Length header if data exists


      if (!headerNames['content-length']) {
        headers['Content-Length'] = data.length;
      }
    } // HTTP basic authentication


    var auth = undefined;

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    } // Parse url


    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url.parse(fullPath);
    var protocol = parsed.protocol || 'http:';

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth && headerNames.authorization) {
      delete headers[headerNames.authorization];
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: {
        http: config.httpAgent,
        https: config.httpsAgent
      },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;

    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];

      if (proxyUrl) {
        var parsedProxyUrl = url.parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });
          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }

            if (proxyElement === '*') {
              return true;
            }

            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }

        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port,
            protocol: parsedProxyUrl.protocol
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);

    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }

      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    }

    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    } // Create the request


    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return; // uncompress the response body transparently if required

      var stream = res; // return the last request in case of redirects

      var lastRequest = res.req || req; // if no content, is HEAD request or decompress disabled we should not decompress

      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
        switch (res.headers['content-encoding']) {
          /*eslint default-case:0*/
          case 'gzip':
          case 'compress':
          case 'deflate':
            // add the unzipper to the body stream processing pipeline
            stream = stream.pipe(zlib.createUnzip()); // remove the content-encoding in order to not confuse downstream operations

            delete res.headers['content-encoding'];
            break;
        }
      }

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        var totalResponseBytes = 0;
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length; // make sure the content length is not over the maxContentLength if specified

          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            stream.destroy();
            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded', config, null, lastRequest));
          }
        });
        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(enhanceError(err, config, null, lastRequest));
        });
        stream.on('end', function handleStreamEnd() {
          var responseData = Buffer.concat(responseBuffer);

          if (config.responseType !== 'arraybuffer') {
            responseData = responseData.toString(config.responseEncoding);

            if (!config.responseEncoding || config.responseEncoding === 'utf8') {
              responseData = utils.stripBOM(responseData);
            }
          }

          response.data = responseData;
          settle(resolve, reject, response);
        });
      }
    }); // Handle errors

    req.on('error', function handleRequestError(err) {
      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
      reject(enhanceError(err, config, null, req));
    }); // Handle request timeout

    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      var timeout = parseInt(config.timeout, 10);

      if (isNaN(timeout)) {
        reject(createError('error trying to parse `config.timeout` to int', config, 'ERR_PARSE_TIMEOUT', req));
        return;
      } // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.


      req.setTimeout(timeout, function handleRequestTimeout() {
        req.abort();
        var transitional = config.transitional || defaults.transitional;
        reject(createError('timeout of ' + timeout + 'ms exceeded', config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', req));
      });
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function (cancel) {
        if (req.aborted) return;
        req.abort();
        reject(!cancel || cancel && cancel.type ? new Cancel('canceled') : cancel);
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);

      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    } // Send the request


    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(enhanceError(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var debug;

module.exports = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = __webpack_require__(59)("follow-redirects");
    } catch (error) {
      /* */
    }

    if (typeof debug !== "function") {
      debug = function () {
        /* */
      };
    }
  }

  debug.apply(null, arguments);
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

exports.destroy = (() => {
  let warned = false;
  return () => {
    if (!warned) {
      warned = true;
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
  };
})();
/**
 * Colors.
 */


exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  const c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  let index = 0;
  let lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, match => {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */


exports.log = console.debug || console.log || (() => {});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  let r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__(60)(exports);
const {
  formatters
} = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};

/***/ }),
/* 126 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */
const tty = __webpack_require__(61);

const util = __webpack_require__(12);
/**
 * This is the Node.js implementation of `debug()`.
 */


exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(() => {}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
  // eslint-disable-next-line import/no-extraneous-dependencies
  const supportsColor = __webpack_require__(128);

  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
  }
} catch (error) {// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */


exports.inspectOpts = Object.keys(process.env).filter(key => {
  return /^debug_/i.test(key);
}).reduce((obj, key) => {
  // Camel-case
  const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
    return k.toUpperCase();
  }); // Coerce string value into JS value

  let val = process.env[key];

  if (/^(yes|on|true|enabled)$/i.test(val)) {
    val = true;
  } else if (/^(no|off|false|disabled)$/i.test(val)) {
    val = false;
  } else if (val === 'null') {
    val = null;
  } else {
    val = Number(val);
  }

  obj[prop] = val;
  return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  const {
    namespace: name,
    useColors
  } = this;

  if (useColors) {
    const c = this.color;
    const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
    const prefix = `  ${colorCode};1m${name} \u001B[0m`;
    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
  } else {
    args[0] = getDate() + name + ' ' + args[0];
  }
}

function getDate() {
  if (exports.inspectOpts.hideDate) {
    return '';
  }

  return new Date().toISOString() + ' ';
}
/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */


function log(...args) {
  return process.stderr.write(util.format(...args) + '\n');
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  if (namespaces) {
    process.env.DEBUG = namespaces;
  } else {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */


function init(debug) {
  debug.inspectOpts = {};
  const keys = Object.keys(exports.inspectOpts);

  for (let i = 0; i < keys.length; i++) {
    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  }
}

module.exports = __webpack_require__(60)(exports);
const {
  formatters
} = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts).split('\n').map(str => str.trim()).join(' ');
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */


formatters.O = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts);
};

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const os = __webpack_require__(27);

const tty = __webpack_require__(61);

const hasFlag = __webpack_require__(129);

const {
  env
} = process;
let forceColor;

if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) {
  forceColor = 0;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
  forceColor = 1;
}

if ('FORCE_COLOR' in env) {
  if (env.FORCE_COLOR === 'true') {
    forceColor = 1;
  } else if (env.FORCE_COLOR === 'false') {
    forceColor = 0;
  } else {
    forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
  }
}

function translateLevel(level) {
  if (level === 0) {
    return false;
  }

  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}

function supportsColor(haveStream, streamIsTTY) {
  if (forceColor === 0) {
    return 0;
  }

  if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
    return 3;
  }

  if (hasFlag('color=256')) {
    return 2;
  }

  if (haveStream && !streamIsTTY && forceColor === undefined) {
    return 0;
  }

  const min = forceColor || 0;

  if (env.TERM === 'dumb') {
    return min;
  }

  if (process.platform === 'win32') {
    // Windows 10 build 10586 is the first Windows release that supports 256 colors.
    // Windows 10 build 14931 is the first release that supports 16m/TrueColor.
    const osRelease = os.release().split('.');

    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }

    return 1;
  }

  if ('CI' in env) {
    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
      return 1;
    }

    return min;
  }

  if ('TEAMCITY_VERSION' in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }

  if (env.COLORTERM === 'truecolor') {
    return 3;
  }

  if ('TERM_PROGRAM' in env) {
    const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    switch (env.TERM_PROGRAM) {
      case 'iTerm.app':
        return version >= 3 ? 3 : 2;

      case 'Apple_Terminal':
        return 2;
      // No default
    }
  }

  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }

  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }

  if ('COLORTERM' in env) {
    return 1;
  }

  return min;
}

function getSupportLevel(stream) {
  const level = supportsColor(stream, stream && stream.isTTY);
  return translateLevel(level);
}

module.exports = {
  supportsColor: getSupportLevel,
  stdout: translateLevel(supportsColor(true, tty.isatty(1))),
  stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = (flag, argv = process.argv) => {
  const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
  const position = argv.indexOf(prefix + flag);
  const terminatorPosition = argv.indexOf('--');
  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var VERSION = __webpack_require__(35).version;

var validators = {}; // eslint-disable-next-line func-names

['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */

validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  } // eslint-disable-next-line func-names


  return function (value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console

      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }

    return validator ? validator(value, opt, opts) : true;
  };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */


function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }

  var keys = Object.keys(options);
  var i = keys.length;

  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];

    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);

      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }

      continue;
    }

    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(19);
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this; // eslint-disable-next-line func-names

  this.promise.then(function (cancel) {
    if (!token._listeners) return;
    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }

    token._listeners = null;
  }); // eslint-disable-next-line func-names

  this.promise.then = function (onfulfilled) {
    var _resolve; // eslint-disable-next-line func-names


    var promise = new Promise(function (resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Subscribe to the cancel signal
 */


CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};
/**
 * Unsubscribe from the cancel signal
 */


CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }

  var index = this._listeners.indexOf(listener);

  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */

module.exports = function isAxiosError(payload) {
  return typeof payload === 'object' && payload.isAxiosError === true;
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(135);

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

var bind = __webpack_require__(64);

var Axios = __webpack_require__(136);

var mergeConfig = __webpack_require__(75);

var defaults = __webpack_require__(37);
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context); // Factory for creating new instances

  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Expose Cancel & CancelToken

axios.CanceledError = __webpack_require__(20);
axios.CancelToken = __webpack_require__(163);
axios.isCancel = __webpack_require__(74);
axios.VERSION = __webpack_require__(40).version;
axios.toFormData = __webpack_require__(65); // Expose AxiosError class

axios.AxiosError = __webpack_require__(14); // alias for CanceledError for backward compatibility

axios.Cancel = axios.CanceledError; // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(164); // Expose isAxiosError

axios.isAxiosError = __webpack_require__(165);
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports.default = axios;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

var buildURL = __webpack_require__(36);

var InterceptorManager = __webpack_require__(137);

var dispatchRequest = __webpack_require__(138);

var mergeConfig = __webpack_require__(75);

var buildFullPath = __webpack_require__(39);

var validator = __webpack_require__(162);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config); // Set config.method

  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  } // filter out skipped interceptors


  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];
    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);
    promise = Promise.resolve(config);

    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }

  var newConfig = config;

  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();

    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  var fullPath = buildFullPath(config.baseURL, config.url);
  return buildURL(fullPath, config.params, config.paramsSerializer);
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url: url,
        data: data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});
module.exports = Axios;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

var transformData = __webpack_require__(139);

var isCancel = __webpack_require__(74);

var defaults = __webpack_require__(37);

var CanceledError = __webpack_require__(20);
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Ensure headers exist

  config.headers = config.headers || {}; // Transform request data

  config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

var defaults = __webpack_require__(37);
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/

  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });
  return data;
};

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

var settle = __webpack_require__(66);

var cookies = __webpack_require__(142);

var buildURL = __webpack_require__(36);

var buildFullPath = __webpack_require__(39);

var parseHeaders = __webpack_require__(145);

var isURLSameOrigin = __webpack_require__(146);

var transitionalDefaults = __webpack_require__(38);

var AxiosError = __webpack_require__(14);

var CanceledError = __webpack_require__(20);

var parseProtocol = __webpack_require__(147);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;

    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response); // Clean up request

      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        } // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request


        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        } // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'


        setTimeout(onloadend);
      };
    } // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;

      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }

      reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    } // Add responseType to request if needed


    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function (cancel) {
        if (!request) {
          return;
        }

        reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);

      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    var protocol = parseProtocol(fullPath);

    if (protocol && ['http', 'https', 'file'].indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function parseProtocol(url) {
  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
};

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);

var settle = __webpack_require__(66);

var buildFullPath = __webpack_require__(39);

var buildURL = __webpack_require__(36);

var http = __webpack_require__(6);

var https = __webpack_require__(10);

var httpFollow = __webpack_require__(67).http;

var httpsFollow = __webpack_require__(67).https;

var url = __webpack_require__(1);

var zlib = __webpack_require__(2);

var VERSION = __webpack_require__(40).version;

var transitionalDefaults = __webpack_require__(38);

var AxiosError = __webpack_require__(14);

var CanceledError = __webpack_require__(20);

var isHttps = /https:?/;
var supportedProtocols = ['http:', 'https:', 'file:'];
/**
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} proxy
 * @param {string} location
 */

function setProxy(options, proxy, location) {
  options.hostname = proxy.host;
  options.host = proxy.host;
  options.port = proxy.port;
  options.path = location; // Basic proxy authorization

  if (proxy.auth) {
    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
    options.headers['Proxy-Authorization'] = 'Basic ' + base64;
  } // If a proxy is used, any redirects must also pass through the proxy


  options.beforeRedirect = function beforeRedirect(redirection) {
    redirection.headers.host = redirection.host;
    setProxy(redirection, proxy, redirection.href);
  };
}
/*eslint consistent-return:0*/


module.exports = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var onCanceled;

    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    var resolve = function resolve(value) {
      done();
      resolvePromise(value);
    };

    var rejected = false;

    var reject = function reject(value) {
      done();
      rejected = true;
      rejectPromise(value);
    };

    var data = config.data;
    var headers = config.headers;
    var headerNames = {};
    Object.keys(headers).forEach(function storeLowerName(name) {
      headerNames[name.toLowerCase()] = name;
    }); // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69

    if ('user-agent' in headerNames) {
      // User-Agent is specified; handle case where no UA header is desired
      if (!headers[headerNames['user-agent']]) {
        delete headers[headerNames['user-agent']];
      } // Otherwise, use specified value

    } else {
      // Only set header if it hasn't been set in config
      headers['User-Agent'] = 'axios/' + VERSION;
    } // support for https://www.npmjs.com/package/form-data api


    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {
      Object.assign(headers, data.getHeaders());
    } else if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) {// Nothing to do...
      } else if (utils.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));
      }

      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));
      } // Add Content-Length header if data exists


      if (!headerNames['content-length']) {
        headers['Content-Length'] = data.length;
      }
    } // HTTP basic authentication


    var auth = undefined;

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    } // Parse url


    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url.parse(fullPath);
    var protocol = parsed.protocol || supportedProtocols[0];

    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));
    }

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth && headerNames.authorization) {
      delete headers[headerNames.authorization];
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

    try {
      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, '');
    } catch (err) {
      var customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      reject(customErr);
    }

    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: {
        http: config.httpAgent,
        https: config.httpsAgent
      },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;

    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];

      if (proxyUrl) {
        var parsedProxyUrl = url.parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });
          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }

            if (proxyElement === '*') {
              return true;
            }

            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }

        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port,
            protocol: parsedProxyUrl.protocol
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);

    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }

      if (config.beforeRedirect) {
        options.beforeRedirect = config.beforeRedirect;
      }

      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    }

    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    } // Create the request


    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return; // uncompress the response body transparently if required

      var stream = res; // return the last request in case of redirects

      var lastRequest = res.req || req; // if no content, is HEAD request or decompress disabled we should not decompress

      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
        switch (res.headers['content-encoding']) {
          /*eslint default-case:0*/
          case 'gzip':
          case 'compress':
          case 'deflate':
            // add the unzipper to the body stream processing pipeline
            stream = stream.pipe(zlib.createUnzip()); // remove the content-encoding in order to not confuse downstream operations

            delete res.headers['content-encoding'];
            break;
        }
      }

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        var totalResponseBytes = 0;
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length; // make sure the content length is not over the maxContentLength if specified

          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            // stream.destoy() emit aborted event before calling reject() on Node.js v16
            rejected = true;
            stream.destroy();
            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));
          }
        });
        stream.on('aborted', function handlerStreamAborted() {
          if (rejected) {
            return;
          }

          stream.destroy();
          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));
        });
        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(AxiosError.from(err, null, config, lastRequest));
        });
        stream.on('end', function handleStreamEnd() {
          try {
            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);

            if (config.responseType !== 'arraybuffer') {
              responseData = responseData.toString(config.responseEncoding);

              if (!config.responseEncoding || config.responseEncoding === 'utf8') {
                responseData = utils.stripBOM(responseData);
              }
            }

            response.data = responseData;
          } catch (err) {
            reject(AxiosError.from(err, null, config, response.request, response));
          }

          settle(resolve, reject, response);
        });
      }
    }); // Handle errors

    req.on('error', function handleRequestError(err) {
      // @todo remove
      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
      reject(AxiosError.from(err, null, config, req));
    }); // set tcp keep alive to prevent drop connection by peer

    req.on('socket', function handleRequestSocket(socket) {
      // default interval of sending ack packet is 1 minute
      socket.setKeepAlive(true, 1000 * 60);
    }); // Handle request timeout

    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      var timeout = parseInt(config.timeout, 10);

      if (isNaN(timeout)) {
        reject(new AxiosError('error trying to parse `config.timeout` to int', AxiosError.ERR_BAD_OPTION_VALUE, config, req));
        return;
      } // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.


      req.setTimeout(timeout, function handleRequestTimeout() {
        req.abort();
        var transitional = config.transitional || transitionalDefaults;
        reject(new AxiosError('timeout of ' + timeout + 'ms exceeded', transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));
      });
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function (cancel) {
        if (req.aborted) return;
        req.abort();
        reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);

      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    } // Send the request


    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(AxiosError.from(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var debug;

module.exports = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = __webpack_require__(59)("follow-redirects");
    } catch (error) {
      /* */
    }

    if (typeof debug !== "function") {
      debug = function () {
        /* */
      };
    }
  }

  debug.apply(null, arguments);
};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

// eslint-disable-next-line strict
module.exports = __webpack_require__(151);

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var CombinedStream = __webpack_require__(152);

var util = __webpack_require__(12);

var path = __webpack_require__(28);

var http = __webpack_require__(6);

var https = __webpack_require__(10);

var parseUrl = __webpack_require__(1).parse;

var fs = __webpack_require__(24);

var Stream = __webpack_require__(0).Stream;

var mime = __webpack_require__(154);

var asynckit = __webpack_require__(157);

var populate = __webpack_require__(161); // Public API


module.exports = FormData; // make it a Stream

util.inherits(FormData, CombinedStream);
/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */

function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData(options);
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];
  CombinedStream.call(this);
  options = options || {};

  for (var option in options) {
    this[option] = options[option];
  }
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function (field, value, options) {
  options = options || {}; // allow filename as single option

  if (typeof options == 'string') {
    options = {
      filename: options
    };
  }

  var append = CombinedStream.prototype.append.bind(this); // all that streamy business can't handle numbers

  if (typeof value == 'number') {
    value = '' + value;
  } // https://github.com/felixge/node-form-data/issues/38


  if (util.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));

    return;
  }

  var header = this._multiPartHeader(field, value, options);

  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer); // pass along options.knownLength

  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function (header, value, options) {
  var valueLength = 0; // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.

  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength; // @check why add CRLF? does this account for custom/multiple CRLFs?

  this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length; // empty or either doesn't have path or not an http response or not a stream

  if (!value || !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream)) {
    return;
  } // no need to bother with the length


  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData.prototype._lengthRetriever = function (value, callback) {
  if (value.hasOwnProperty('fd')) {
    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {
      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0)); // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs.stat(value.path, function (err, stat) {
        var fileSize;

        if (err) {
          callback(err);
          return;
        } // update final size based on the range options


        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    } // or http response

  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']); // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function (response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume(); // something else
  } else {
    callback('Unknown stream');
  }
};

FormData.prototype._multiPartHeader = function (field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);

  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  }; // allow custom headers.

  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }

  var header;

  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop]; // skip nullish headers.

    if (header == null) {
      continue;
    } // convert all headers to arrays.


    if (!Array.isArray(header)) {
      header = [header];
    } // add non-empty headers.


    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function (value, options) {
  var filename, contentDisposition;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function (value, options) {
  // use custom content-type above all
  var contentType = options.contentType; // or try `name` from formidable, browser

  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  } // or try `path` from fs-, request- streams


  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  } // or if it's http-reponse


  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  } // or guess it from the filepath or filename


  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  } // fallback to the default content type if `value` is not simple value


  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function () {
  return function (next) {
    var footer = FormData.LINE_BREAK;
    var lastPart = this._streams.length === 0;

    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function () {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function (userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.setBoundary = function (boundary) {
  this._boundary = boundary;
};

FormData.prototype.getBoundary = function () {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype.getBuffer = function () {
  var dataBuffer = new Buffer.alloc(0);
  var boundary = this.getBoundary(); // Create the form content. Add Line breaks to the end of data.

  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {
      // Add content to the buffer.
      if (Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
      } else {
        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
      } // Add break after content.


      if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
      }
    }
  } // Add the footer and return the Buffer object.


  return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
};

FormData.prototype._generateBoundary = function () {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';

  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
}; // Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option


FormData.prototype.getLengthSync = function () {
  var knownLength = this._overheadLength + this._valueLength; // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  } // https://github.com/form-data/form-data/issues/40


  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
}; // Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262


FormData.prototype.hasKnownLength = function () {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData.prototype.getLength = function (cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function (err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function (length) {
      knownLength += length;
    });
    cb(null, knownLength);
  });
};

FormData.prototype.submit = function (params, cb) {
  var request,
      options,
      defaults = {
    method: 'post'
  }; // parse provided url if it's string
  // or treat it as options object

  if (typeof params == 'string') {
    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults); // use custom params
  } else {
    options = populate(params, defaults); // if no port provided use default one

    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  } // put that good code in getHeaders to some use


  options.headers = this.getHeaders(params.headers); // https if specified, fallback to http in any other case

  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  } // get content length and fire away


  this.getLength(function (err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);

      return;
    } // add content length


    if (length) {
      request.setHeader('Content-Length', length);
    }

    this.pipe(request);

    if (cb) {
      var onResponse;

      var callback = function (error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);
        return cb.call(this, error, responce);
      };

      onResponse = callback.bind(this, null);
      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));
  return request;
};

FormData.prototype._error = function (err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData.prototype.toString = function () {
  return '[object FormData]';
};

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(12);

var Stream = __webpack_require__(0).Stream;

var DelayedStream = __webpack_require__(153);

module.exports = CombinedStream;

function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;
  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}

util.inherits(CombinedStream, Stream);

CombinedStream.create = function (options) {
  var combinedStream = new this();
  options = options || {};

  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function (stream) {
  return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);
};

CombinedStream.prototype.append = function (stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);

  return this;
};

CombinedStream.prototype.pipe = function (dest, options) {
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function () {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;

  try {
    do {
      this._pendingNext = false;

      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream.prototype._realGetNext = function () {
  var stream = this._streams.shift();

  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);

    return;
  }

  var getStream = stream;
  getStream(function (stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);

    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));

      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream.prototype._pipeNext = function (stream) {
  this._currentStream = stream;
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {
      end: false
    });
    return;
  }

  var value = stream;
  this.write(value);

  this._getNext();
};

CombinedStream.prototype._handleErrors = function (stream) {
  var self = this;
  stream.on('error', function (err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function (data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function () {
  if (!this.pauseStreams) {
    return;
  }

  if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function () {
  if (!this._released) {
    this._released = true;
    this.writable = true;

    this._getNext();
  }

  if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function () {
  this._reset();

  this.emit('end');
};

CombinedStream.prototype.destroy = function () {
  this._reset();

  this.emit('close');
};

CombinedStream.prototype._reset = function () {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function () {
  this._updateDataSize();

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';

  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function () {
  this.dataSize = 0;
  var self = this;

  this._streams.forEach(function (stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function (err) {
  this._reset();

  this.emit('error', err);
};

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var Stream = __webpack_require__(0).Stream;

var util = __webpack_require__(12);

module.exports = DelayedStream;

function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;
  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}

util.inherits(DelayedStream, Stream);

DelayedStream.create = function (source, options) {
  var delayedStream = new this();
  options = options || {};

  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;
  var realEmit = source.emit;

  source.emit = function () {
    delayedStream._handleEmit(arguments);

    return realEmit.apply(source, arguments);
  };

  source.on('error', function () {});

  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function () {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function () {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function () {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function () {
  this.source.pause();
};

DelayedStream.prototype.release = function () {
  this._released = true;

  this._bufferedEvents.forEach(function (args) {
    this.emit.apply(this, args);
  }.bind(this));

  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function () {
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function (args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;

    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function () {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this.emit('error', new Error(message));
};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var db = __webpack_require__(155);

var extname = __webpack_require__(28).extname;
/**
 * Module variables.
 * @private
 */


var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
var TEXT_TYPE_REGEXP = /^text\//i;
/**
 * Module exports.
 * @public
 */

exports.charset = charset;
exports.charsets = {
  lookup: charset
};
exports.contentType = contentType;
exports.extension = extension;
exports.extensions = Object.create(null);
exports.lookup = lookup;
exports.types = Object.create(null); // Populate the extensions/types maps

populateMaps(exports.extensions, exports.types);
/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset(type) {
  if (!type || typeof type !== 'string') {
    return false;
  } // TODO: use media-typer


  var match = EXTRACT_TYPE_REGEXP.exec(type);
  var mime = match && db[match[1].toLowerCase()];

  if (mime && mime.charset) {
    return mime.charset;
  } // default text/* to utf-8


  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8';
  }

  return false;
}
/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */


function contentType(str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false;
  }

  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;

  if (!mime) {
    return false;
  } // TODO: use content-type or other module


  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime);
    if (charset) mime += '; charset=' + charset.toLowerCase();
  }

  return mime;
}
/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */


function extension(type) {
  if (!type || typeof type !== 'string') {
    return false;
  } // TODO: use media-typer


  var match = EXTRACT_TYPE_REGEXP.exec(type); // get extensions

  var exts = match && exports.extensions[match[1].toLowerCase()];

  if (!exts || !exts.length) {
    return false;
  }

  return exts[0];
}
/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */


function lookup(path) {
  if (!path || typeof path !== 'string') {
    return false;
  } // get the extension ("ext" or ".ext" or full path)


  var extension = extname('x.' + path).toLowerCase().substr(1);

  if (!extension) {
    return false;
  }

  return exports.types[extension] || false;
}
/**
 * Populate the extensions and types maps.
 * @private
 */


function populateMaps(extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana'];
  Object.keys(db).forEach(function forEachMimeType(type) {
    var mime = db[type];
    var exts = mime.extensions;

    if (!exts || !exts.length) {
      return;
    } // mime -> extensions


    extensions[type] = exts; // extension -> mime

    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i];

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source);
        var to = preference.indexOf(mime.source);

        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
          // skip the remapping
          continue;
        }
      } // set the extension -> mime


      types[extension] = type;
    }
  });
}

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */
module.exports = __webpack_require__(156);

/***/ }),
/* 156 */
/***/ (function(module) {

module.exports = JSON.parse("{\"application/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"application/3gpdash-qoe-report+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/3gpp-ims+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/3gpphal+json\":{\"source\":\"iana\",\"compressible\":true},\"application/3gpphalforms+json\":{\"source\":\"iana\",\"compressible\":true},\"application/a2l\":{\"source\":\"iana\"},\"application/ace+cbor\":{\"source\":\"iana\"},\"application/activemessage\":{\"source\":\"iana\"},\"application/activity+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-costmap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-costmapfilter+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-directory+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointcost+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointcostparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointprop+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointpropparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-error+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-networkmap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-networkmapfilter+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-updatestreamcontrol+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-updatestreamparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/aml\":{\"source\":\"iana\"},\"application/andrew-inset\":{\"source\":\"iana\",\"extensions\":[\"ez\"]},\"application/applefile\":{\"source\":\"iana\"},\"application/applixware\":{\"source\":\"apache\",\"extensions\":[\"aw\"]},\"application/at+jwt\":{\"source\":\"iana\"},\"application/atf\":{\"source\":\"iana\"},\"application/atfx\":{\"source\":\"iana\"},\"application/atom+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atom\"]},\"application/atomcat+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomcat\"]},\"application/atomdeleted+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomdeleted\"]},\"application/atomicmail\":{\"source\":\"iana\"},\"application/atomsvc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomsvc\"]},\"application/atsc-dwd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dwd\"]},\"application/atsc-dynamic-event-message\":{\"source\":\"iana\"},\"application/atsc-held+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"held\"]},\"application/atsc-rdt+json\":{\"source\":\"iana\",\"compressible\":true},\"application/atsc-rsat+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rsat\"]},\"application/atxml\":{\"source\":\"iana\"},\"application/auth-policy+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/bacnet-xdd+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/batch-smtp\":{\"source\":\"iana\"},\"application/bdoc\":{\"compressible\":false,\"extensions\":[\"bdoc\"]},\"application/beep+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/calendar+json\":{\"source\":\"iana\",\"compressible\":true},\"application/calendar+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xcs\"]},\"application/call-completion\":{\"source\":\"iana\"},\"application/cals-1840\":{\"source\":\"iana\"},\"application/captive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/cbor\":{\"source\":\"iana\"},\"application/cbor-seq\":{\"source\":\"iana\"},\"application/cccex\":{\"source\":\"iana\"},\"application/ccmp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ccxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ccxml\"]},\"application/cdfx+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"cdfx\"]},\"application/cdmi-capability\":{\"source\":\"iana\",\"extensions\":[\"cdmia\"]},\"application/cdmi-container\":{\"source\":\"iana\",\"extensions\":[\"cdmic\"]},\"application/cdmi-domain\":{\"source\":\"iana\",\"extensions\":[\"cdmid\"]},\"application/cdmi-object\":{\"source\":\"iana\",\"extensions\":[\"cdmio\"]},\"application/cdmi-queue\":{\"source\":\"iana\",\"extensions\":[\"cdmiq\"]},\"application/cdni\":{\"source\":\"iana\"},\"application/cea\":{\"source\":\"iana\"},\"application/cea-2018+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cellml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cfw\":{\"source\":\"iana\"},\"application/clr\":{\"source\":\"iana\"},\"application/clue+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/clue_info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cms\":{\"source\":\"iana\"},\"application/cnrp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/coap-group+json\":{\"source\":\"iana\",\"compressible\":true},\"application/coap-payload\":{\"source\":\"iana\"},\"application/commonground\":{\"source\":\"iana\"},\"application/conference-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cose\":{\"source\":\"iana\"},\"application/cose-key\":{\"source\":\"iana\"},\"application/cose-key-set\":{\"source\":\"iana\"},\"application/cpl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/csrattrs\":{\"source\":\"iana\"},\"application/csta+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cstadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/csvm+json\":{\"source\":\"iana\",\"compressible\":true},\"application/cu-seeme\":{\"source\":\"apache\",\"extensions\":[\"cu\"]},\"application/cwt\":{\"source\":\"iana\"},\"application/cybercash\":{\"source\":\"iana\"},\"application/dart\":{\"compressible\":true},\"application/dash+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpd\"]},\"application/dashdelta\":{\"source\":\"iana\"},\"application/davmount+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"davmount\"]},\"application/dca-rft\":{\"source\":\"iana\"},\"application/dcd\":{\"source\":\"iana\"},\"application/dec-dx\":{\"source\":\"iana\"},\"application/dialog-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dicom\":{\"source\":\"iana\"},\"application/dicom+json\":{\"source\":\"iana\",\"compressible\":true},\"application/dicom+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dii\":{\"source\":\"iana\"},\"application/dit\":{\"source\":\"iana\"},\"application/dns\":{\"source\":\"iana\"},\"application/dns+json\":{\"source\":\"iana\",\"compressible\":true},\"application/dns-message\":{\"source\":\"iana\"},\"application/docbook+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"dbk\"]},\"application/dots+cbor\":{\"source\":\"iana\"},\"application/dskpp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dssc+der\":{\"source\":\"iana\",\"extensions\":[\"dssc\"]},\"application/dssc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdssc\"]},\"application/dvcs\":{\"source\":\"iana\"},\"application/ecmascript\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"es\",\"ecma\"]},\"application/edi-consent\":{\"source\":\"iana\"},\"application/edi-x12\":{\"source\":\"iana\",\"compressible\":false},\"application/edifact\":{\"source\":\"iana\",\"compressible\":false},\"application/efi\":{\"source\":\"iana\"},\"application/elm+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/elm+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.cap+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/emergencycalldata.comment+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.deviceinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.ecall.msd\":{\"source\":\"iana\"},\"application/emergencycalldata.providerinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.serviceinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.subscriberinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.veds+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emma+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"emma\"]},\"application/emotionml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"emotionml\"]},\"application/encaprtp\":{\"source\":\"iana\"},\"application/epp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/epub+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"epub\"]},\"application/eshop\":{\"source\":\"iana\"},\"application/exi\":{\"source\":\"iana\",\"extensions\":[\"exi\"]},\"application/expect-ct-report+json\":{\"source\":\"iana\",\"compressible\":true},\"application/express\":{\"source\":\"iana\",\"extensions\":[\"exp\"]},\"application/fastinfoset\":{\"source\":\"iana\"},\"application/fastsoap\":{\"source\":\"iana\"},\"application/fdt+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"fdt\"]},\"application/fhir+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/fhir+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/fido.trusted-apps+json\":{\"compressible\":true},\"application/fits\":{\"source\":\"iana\"},\"application/flexfec\":{\"source\":\"iana\"},\"application/font-sfnt\":{\"source\":\"iana\"},\"application/font-tdpfr\":{\"source\":\"iana\",\"extensions\":[\"pfr\"]},\"application/font-woff\":{\"source\":\"iana\",\"compressible\":false},\"application/framework-attributes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/geo+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"geojson\"]},\"application/geo+json-seq\":{\"source\":\"iana\"},\"application/geopackage+sqlite3\":{\"source\":\"iana\"},\"application/geoxacml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/gltf-buffer\":{\"source\":\"iana\"},\"application/gml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"gml\"]},\"application/gpx+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"gpx\"]},\"application/gxf\":{\"source\":\"apache\",\"extensions\":[\"gxf\"]},\"application/gzip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"gz\"]},\"application/h224\":{\"source\":\"iana\"},\"application/held+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/hjson\":{\"extensions\":[\"hjson\"]},\"application/http\":{\"source\":\"iana\"},\"application/hyperstudio\":{\"source\":\"iana\",\"extensions\":[\"stk\"]},\"application/ibe-key-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ibe-pkg-reply+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ibe-pp-data\":{\"source\":\"iana\"},\"application/iges\":{\"source\":\"iana\"},\"application/im-iscomposing+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/index\":{\"source\":\"iana\"},\"application/index.cmd\":{\"source\":\"iana\"},\"application/index.obj\":{\"source\":\"iana\"},\"application/index.response\":{\"source\":\"iana\"},\"application/index.vnd\":{\"source\":\"iana\"},\"application/inkml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ink\",\"inkml\"]},\"application/iotp\":{\"source\":\"iana\"},\"application/ipfix\":{\"source\":\"iana\",\"extensions\":[\"ipfix\"]},\"application/ipp\":{\"source\":\"iana\"},\"application/isup\":{\"source\":\"iana\"},\"application/its+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"its\"]},\"application/java-archive\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"jar\",\"war\",\"ear\"]},\"application/java-serialized-object\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"ser\"]},\"application/java-vm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"class\"]},\"application/javascript\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"js\",\"mjs\"]},\"application/jf2feed+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jose\":{\"source\":\"iana\"},\"application/jose+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jrd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jscalendar+json\":{\"source\":\"iana\",\"compressible\":true},\"application/json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"json\",\"map\"]},\"application/json-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/json-seq\":{\"source\":\"iana\"},\"application/json5\":{\"extensions\":[\"json5\"]},\"application/jsonml+json\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"jsonml\"]},\"application/jwk+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jwk-set+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jwt\":{\"source\":\"iana\"},\"application/kpml-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/kpml-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ld+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"jsonld\"]},\"application/lgr+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lgr\"]},\"application/link-format\":{\"source\":\"iana\"},\"application/load-control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/lost+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lostxml\"]},\"application/lostsync+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/lpf+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/lxf\":{\"source\":\"iana\"},\"application/mac-binhex40\":{\"source\":\"iana\",\"extensions\":[\"hqx\"]},\"application/mac-compactpro\":{\"source\":\"apache\",\"extensions\":[\"cpt\"]},\"application/macwriteii\":{\"source\":\"iana\"},\"application/mads+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mads\"]},\"application/manifest+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"webmanifest\"]},\"application/marc\":{\"source\":\"iana\",\"extensions\":[\"mrc\"]},\"application/marcxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mrcx\"]},\"application/mathematica\":{\"source\":\"iana\",\"extensions\":[\"ma\",\"nb\",\"mb\"]},\"application/mathml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mathml\"]},\"application/mathml-content+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mathml-presentation+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-associated-procedure-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-deregister+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-envelope+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-msk+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-msk-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-protection-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-reception-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-register+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-register-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-schedule+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-user-service-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbox\":{\"source\":\"iana\",\"extensions\":[\"mbox\"]},\"application/media-policy-dataset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/media_control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mediaservercontrol+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mscml\"]},\"application/merge-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/metalink+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"metalink\"]},\"application/metalink4+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"meta4\"]},\"application/mets+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mets\"]},\"application/mf4\":{\"source\":\"iana\"},\"application/mikey\":{\"source\":\"iana\"},\"application/mipc\":{\"source\":\"iana\"},\"application/missing-blocks+cbor-seq\":{\"source\":\"iana\"},\"application/mmt-aei+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"maei\"]},\"application/mmt-usd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"musd\"]},\"application/mods+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mods\"]},\"application/moss-keys\":{\"source\":\"iana\"},\"application/moss-signature\":{\"source\":\"iana\"},\"application/mosskey-data\":{\"source\":\"iana\"},\"application/mosskey-request\":{\"source\":\"iana\"},\"application/mp21\":{\"source\":\"iana\",\"extensions\":[\"m21\",\"mp21\"]},\"application/mp4\":{\"source\":\"iana\",\"extensions\":[\"mp4s\",\"m4p\"]},\"application/mpeg4-generic\":{\"source\":\"iana\"},\"application/mpeg4-iod\":{\"source\":\"iana\"},\"application/mpeg4-iod-xmt\":{\"source\":\"iana\"},\"application/mrb-consumer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mrb-publish+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/msc-ivr+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/msc-mixer+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/msword\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"doc\",\"dot\"]},\"application/mud+json\":{\"source\":\"iana\",\"compressible\":true},\"application/multipart-core\":{\"source\":\"iana\"},\"application/mxf\":{\"source\":\"iana\",\"extensions\":[\"mxf\"]},\"application/n-quads\":{\"source\":\"iana\",\"extensions\":[\"nq\"]},\"application/n-triples\":{\"source\":\"iana\",\"extensions\":[\"nt\"]},\"application/nasdata\":{\"source\":\"iana\"},\"application/news-checkgroups\":{\"source\":\"iana\",\"charset\":\"US-ASCII\"},\"application/news-groupinfo\":{\"source\":\"iana\",\"charset\":\"US-ASCII\"},\"application/news-transmission\":{\"source\":\"iana\"},\"application/nlsml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/node\":{\"source\":\"iana\",\"extensions\":[\"cjs\"]},\"application/nss\":{\"source\":\"iana\"},\"application/oauth-authz-req+jwt\":{\"source\":\"iana\"},\"application/ocsp-request\":{\"source\":\"iana\"},\"application/ocsp-response\":{\"source\":\"iana\"},\"application/octet-stream\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"]},\"application/oda\":{\"source\":\"iana\",\"extensions\":[\"oda\"]},\"application/odm+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/odx\":{\"source\":\"iana\"},\"application/oebps-package+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"opf\"]},\"application/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ogx\"]},\"application/omdoc+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"omdoc\"]},\"application/onenote\":{\"source\":\"apache\",\"extensions\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"]},\"application/opc-nodeset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/oscore\":{\"source\":\"iana\"},\"application/oxps\":{\"source\":\"iana\",\"extensions\":[\"oxps\"]},\"application/p21\":{\"source\":\"iana\"},\"application/p21+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/p2p-overlay+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"relo\"]},\"application/parityfec\":{\"source\":\"iana\"},\"application/passport\":{\"source\":\"iana\"},\"application/patch-ops-error+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xer\"]},\"application/pdf\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pdf\"]},\"application/pdx\":{\"source\":\"iana\"},\"application/pem-certificate-chain\":{\"source\":\"iana\"},\"application/pgp-encrypted\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pgp\"]},\"application/pgp-keys\":{\"source\":\"iana\"},\"application/pgp-signature\":{\"source\":\"iana\",\"extensions\":[\"asc\",\"sig\"]},\"application/pics-rules\":{\"source\":\"apache\",\"extensions\":[\"prf\"]},\"application/pidf+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/pidf-diff+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/pkcs10\":{\"source\":\"iana\",\"extensions\":[\"p10\"]},\"application/pkcs12\":{\"source\":\"iana\"},\"application/pkcs7-mime\":{\"source\":\"iana\",\"extensions\":[\"p7m\",\"p7c\"]},\"application/pkcs7-signature\":{\"source\":\"iana\",\"extensions\":[\"p7s\"]},\"application/pkcs8\":{\"source\":\"iana\",\"extensions\":[\"p8\"]},\"application/pkcs8-encrypted\":{\"source\":\"iana\"},\"application/pkix-attr-cert\":{\"source\":\"iana\",\"extensions\":[\"ac\"]},\"application/pkix-cert\":{\"source\":\"iana\",\"extensions\":[\"cer\"]},\"application/pkix-crl\":{\"source\":\"iana\",\"extensions\":[\"crl\"]},\"application/pkix-pkipath\":{\"source\":\"iana\",\"extensions\":[\"pkipath\"]},\"application/pkixcmp\":{\"source\":\"iana\",\"extensions\":[\"pki\"]},\"application/pls+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"pls\"]},\"application/poc-settings+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/postscript\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ai\",\"eps\",\"ps\"]},\"application/ppsp-tracker+json\":{\"source\":\"iana\",\"compressible\":true},\"application/problem+json\":{\"source\":\"iana\",\"compressible\":true},\"application/problem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/provenance+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"provx\"]},\"application/prs.alvestrand.titrax-sheet\":{\"source\":\"iana\"},\"application/prs.cww\":{\"source\":\"iana\",\"extensions\":[\"cww\"]},\"application/prs.cyn\":{\"source\":\"iana\",\"charset\":\"7-BIT\"},\"application/prs.hpub+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/prs.nprend\":{\"source\":\"iana\"},\"application/prs.plucker\":{\"source\":\"iana\"},\"application/prs.rdf-xml-crypt\":{\"source\":\"iana\"},\"application/prs.xsf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/pskc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"pskcxml\"]},\"application/pvd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/qsig\":{\"source\":\"iana\"},\"application/raml+yaml\":{\"compressible\":true,\"extensions\":[\"raml\"]},\"application/raptorfec\":{\"source\":\"iana\"},\"application/rdap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/rdf+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rdf\",\"owl\"]},\"application/reginfo+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rif\"]},\"application/relax-ng-compact-syntax\":{\"source\":\"iana\",\"extensions\":[\"rnc\"]},\"application/remote-printing\":{\"source\":\"iana\"},\"application/reputon+json\":{\"source\":\"iana\",\"compressible\":true},\"application/resource-lists+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rl\"]},\"application/resource-lists-diff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rld\"]},\"application/rfc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/riscos\":{\"source\":\"iana\"},\"application/rlmi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/rls-services+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rs\"]},\"application/route-apd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rapd\"]},\"application/route-s-tsid+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sls\"]},\"application/route-usd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rusd\"]},\"application/rpki-ghostbusters\":{\"source\":\"iana\",\"extensions\":[\"gbr\"]},\"application/rpki-manifest\":{\"source\":\"iana\",\"extensions\":[\"mft\"]},\"application/rpki-publication\":{\"source\":\"iana\"},\"application/rpki-roa\":{\"source\":\"iana\",\"extensions\":[\"roa\"]},\"application/rpki-updown\":{\"source\":\"iana\"},\"application/rsd+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"rsd\"]},\"application/rss+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"rss\"]},\"application/rtf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtf\"]},\"application/rtploopback\":{\"source\":\"iana\"},\"application/rtx\":{\"source\":\"iana\"},\"application/samlassertion+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/samlmetadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sarif+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sarif-external-properties+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sbe\":{\"source\":\"iana\"},\"application/sbml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sbml\"]},\"application/scaip+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/scim+json\":{\"source\":\"iana\",\"compressible\":true},\"application/scvp-cv-request\":{\"source\":\"iana\",\"extensions\":[\"scq\"]},\"application/scvp-cv-response\":{\"source\":\"iana\",\"extensions\":[\"scs\"]},\"application/scvp-vp-request\":{\"source\":\"iana\",\"extensions\":[\"spq\"]},\"application/scvp-vp-response\":{\"source\":\"iana\",\"extensions\":[\"spp\"]},\"application/sdp\":{\"source\":\"iana\",\"extensions\":[\"sdp\"]},\"application/secevent+jwt\":{\"source\":\"iana\"},\"application/senml+cbor\":{\"source\":\"iana\"},\"application/senml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/senml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"senmlx\"]},\"application/senml-etch+cbor\":{\"source\":\"iana\"},\"application/senml-etch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/senml-exi\":{\"source\":\"iana\"},\"application/sensml+cbor\":{\"source\":\"iana\"},\"application/sensml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sensml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sensmlx\"]},\"application/sensml-exi\":{\"source\":\"iana\"},\"application/sep+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sep-exi\":{\"source\":\"iana\"},\"application/session-info\":{\"source\":\"iana\"},\"application/set-payment\":{\"source\":\"iana\"},\"application/set-payment-initiation\":{\"source\":\"iana\",\"extensions\":[\"setpay\"]},\"application/set-registration\":{\"source\":\"iana\"},\"application/set-registration-initiation\":{\"source\":\"iana\",\"extensions\":[\"setreg\"]},\"application/sgml\":{\"source\":\"iana\"},\"application/sgml-open-catalog\":{\"source\":\"iana\"},\"application/shf+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"shf\"]},\"application/sieve\":{\"source\":\"iana\",\"extensions\":[\"siv\",\"sieve\"]},\"application/simple-filter+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/simple-message-summary\":{\"source\":\"iana\"},\"application/simplesymbolcontainer\":{\"source\":\"iana\"},\"application/sipc\":{\"source\":\"iana\"},\"application/slate\":{\"source\":\"iana\"},\"application/smil\":{\"source\":\"iana\"},\"application/smil+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"smi\",\"smil\"]},\"application/smpte336m\":{\"source\":\"iana\"},\"application/soap+fastinfoset\":{\"source\":\"iana\"},\"application/soap+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sparql-query\":{\"source\":\"iana\",\"extensions\":[\"rq\"]},\"application/sparql-results+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"srx\"]},\"application/spdx+json\":{\"source\":\"iana\",\"compressible\":true},\"application/spirits-event+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sql\":{\"source\":\"iana\"},\"application/srgs\":{\"source\":\"iana\",\"extensions\":[\"gram\"]},\"application/srgs+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"grxml\"]},\"application/sru+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sru\"]},\"application/ssdl+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ssdl\"]},\"application/ssml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ssml\"]},\"application/stix+json\":{\"source\":\"iana\",\"compressible\":true},\"application/swid+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"swidtag\"]},\"application/tamp-apex-update\":{\"source\":\"iana\"},\"application/tamp-apex-update-confirm\":{\"source\":\"iana\"},\"application/tamp-community-update\":{\"source\":\"iana\"},\"application/tamp-community-update-confirm\":{\"source\":\"iana\"},\"application/tamp-error\":{\"source\":\"iana\"},\"application/tamp-sequence-adjust\":{\"source\":\"iana\"},\"application/tamp-sequence-adjust-confirm\":{\"source\":\"iana\"},\"application/tamp-status-query\":{\"source\":\"iana\"},\"application/tamp-status-response\":{\"source\":\"iana\"},\"application/tamp-update\":{\"source\":\"iana\"},\"application/tamp-update-confirm\":{\"source\":\"iana\"},\"application/tar\":{\"compressible\":true},\"application/taxii+json\":{\"source\":\"iana\",\"compressible\":true},\"application/td+json\":{\"source\":\"iana\",\"compressible\":true},\"application/tei+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tei\",\"teicorpus\"]},\"application/tetra_isi\":{\"source\":\"iana\"},\"application/thraud+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tfi\"]},\"application/timestamp-query\":{\"source\":\"iana\"},\"application/timestamp-reply\":{\"source\":\"iana\"},\"application/timestamped-data\":{\"source\":\"iana\",\"extensions\":[\"tsd\"]},\"application/tlsrpt+gzip\":{\"source\":\"iana\"},\"application/tlsrpt+json\":{\"source\":\"iana\",\"compressible\":true},\"application/tnauthlist\":{\"source\":\"iana\"},\"application/token-introspection+jwt\":{\"source\":\"iana\"},\"application/toml\":{\"compressible\":true,\"extensions\":[\"toml\"]},\"application/trickle-ice-sdpfrag\":{\"source\":\"iana\"},\"application/trig\":{\"source\":\"iana\",\"extensions\":[\"trig\"]},\"application/ttml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ttml\"]},\"application/tve-trigger\":{\"source\":\"iana\"},\"application/tzif\":{\"source\":\"iana\"},\"application/tzif-leap\":{\"source\":\"iana\"},\"application/ubjson\":{\"compressible\":false,\"extensions\":[\"ubj\"]},\"application/ulpfec\":{\"source\":\"iana\"},\"application/urc-grpsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/urc-ressheet+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rsheet\"]},\"application/urc-targetdesc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"td\"]},\"application/urc-uisocketdesc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vcard+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vcard+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vemmi\":{\"source\":\"iana\"},\"application/vividence.scriptfile\":{\"source\":\"apache\"},\"application/vnd.1000minds.decision-model+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"1km\"]},\"application/vnd.3gpp-prose+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp-prose-pc3ch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp-v2x-local-service-information\":{\"source\":\"iana\"},\"application/vnd.3gpp.5gnas\":{\"source\":\"iana\"},\"application/vnd.3gpp.access-transfer-events+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.bsf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.gmop+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.gtpc\":{\"source\":\"iana\"},\"application/vnd.3gpp.interworking-data\":{\"source\":\"iana\"},\"application/vnd.3gpp.lpp\":{\"source\":\"iana\"},\"application/vnd.3gpp.mc-signalling-ear\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-payload\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-signalling\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-floor-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-location-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-mbms-usage-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-signed+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-ue-init-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-affiliation-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-location-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-transmission-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mid-call+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.ngap\":{\"source\":\"iana\"},\"application/vnd.3gpp.pfcp\":{\"source\":\"iana\"},\"application/vnd.3gpp.pic-bw-large\":{\"source\":\"iana\",\"extensions\":[\"plb\"]},\"application/vnd.3gpp.pic-bw-small\":{\"source\":\"iana\",\"extensions\":[\"psb\"]},\"application/vnd.3gpp.pic-bw-var\":{\"source\":\"iana\",\"extensions\":[\"pvb\"]},\"application/vnd.3gpp.s1ap\":{\"source\":\"iana\"},\"application/vnd.3gpp.sms\":{\"source\":\"iana\"},\"application/vnd.3gpp.sms+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.srvcc-ext+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.srvcc-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.state-and-event-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.ussd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp2.bcmcsinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp2.sms\":{\"source\":\"iana\"},\"application/vnd.3gpp2.tcap\":{\"source\":\"iana\",\"extensions\":[\"tcap\"]},\"application/vnd.3lightssoftware.imagescal\":{\"source\":\"iana\"},\"application/vnd.3m.post-it-notes\":{\"source\":\"iana\",\"extensions\":[\"pwn\"]},\"application/vnd.accpac.simply.aso\":{\"source\":\"iana\",\"extensions\":[\"aso\"]},\"application/vnd.accpac.simply.imp\":{\"source\":\"iana\",\"extensions\":[\"imp\"]},\"application/vnd.acucobol\":{\"source\":\"iana\",\"extensions\":[\"acu\"]},\"application/vnd.acucorp\":{\"source\":\"iana\",\"extensions\":[\"atc\",\"acutc\"]},\"application/vnd.adobe.air-application-installer-package+zip\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"air\"]},\"application/vnd.adobe.flash.movie\":{\"source\":\"iana\"},\"application/vnd.adobe.formscentral.fcdt\":{\"source\":\"iana\",\"extensions\":[\"fcdt\"]},\"application/vnd.adobe.fxp\":{\"source\":\"iana\",\"extensions\":[\"fxp\",\"fxpl\"]},\"application/vnd.adobe.partial-upload\":{\"source\":\"iana\"},\"application/vnd.adobe.xdp+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdp\"]},\"application/vnd.adobe.xfdf\":{\"source\":\"iana\",\"extensions\":[\"xfdf\"]},\"application/vnd.aether.imp\":{\"source\":\"iana\"},\"application/vnd.afpc.afplinedata\":{\"source\":\"iana\"},\"application/vnd.afpc.afplinedata-pagedef\":{\"source\":\"iana\"},\"application/vnd.afpc.cmoca-cmresource\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-charset\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-codedfont\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-codepage\":{\"source\":\"iana\"},\"application/vnd.afpc.modca\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-cmtable\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-formdef\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-mediummap\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-objectcontainer\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-overlay\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-pagesegment\":{\"source\":\"iana\"},\"application/vnd.age\":{\"source\":\"iana\",\"extensions\":[\"age\"]},\"application/vnd.ah-barcode\":{\"source\":\"iana\"},\"application/vnd.ahead.space\":{\"source\":\"iana\",\"extensions\":[\"ahead\"]},\"application/vnd.airzip.filesecure.azf\":{\"source\":\"iana\",\"extensions\":[\"azf\"]},\"application/vnd.airzip.filesecure.azs\":{\"source\":\"iana\",\"extensions\":[\"azs\"]},\"application/vnd.amadeus+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.amazon.ebook\":{\"source\":\"apache\",\"extensions\":[\"azw\"]},\"application/vnd.amazon.mobi8-ebook\":{\"source\":\"iana\"},\"application/vnd.americandynamics.acc\":{\"source\":\"iana\",\"extensions\":[\"acc\"]},\"application/vnd.amiga.ami\":{\"source\":\"iana\",\"extensions\":[\"ami\"]},\"application/vnd.amundsen.maze+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.android.ota\":{\"source\":\"iana\"},\"application/vnd.android.package-archive\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"apk\"]},\"application/vnd.anki\":{\"source\":\"iana\"},\"application/vnd.anser-web-certificate-issue-initiation\":{\"source\":\"iana\",\"extensions\":[\"cii\"]},\"application/vnd.anser-web-funds-transfer-initiation\":{\"source\":\"apache\",\"extensions\":[\"fti\"]},\"application/vnd.antix.game-component\":{\"source\":\"iana\",\"extensions\":[\"atx\"]},\"application/vnd.apache.arrow.file\":{\"source\":\"iana\"},\"application/vnd.apache.arrow.stream\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.binary\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.compact\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.json\":{\"source\":\"iana\"},\"application/vnd.api+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.aplextor.warrp+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.apothekende.reservation+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.apple.installer+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpkg\"]},\"application/vnd.apple.keynote\":{\"source\":\"iana\",\"extensions\":[\"key\"]},\"application/vnd.apple.mpegurl\":{\"source\":\"iana\",\"extensions\":[\"m3u8\"]},\"application/vnd.apple.numbers\":{\"source\":\"iana\",\"extensions\":[\"numbers\"]},\"application/vnd.apple.pages\":{\"source\":\"iana\",\"extensions\":[\"pages\"]},\"application/vnd.apple.pkpass\":{\"compressible\":false,\"extensions\":[\"pkpass\"]},\"application/vnd.arastra.swi\":{\"source\":\"iana\"},\"application/vnd.aristanetworks.swi\":{\"source\":\"iana\",\"extensions\":[\"swi\"]},\"application/vnd.artisan+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.artsquare\":{\"source\":\"iana\"},\"application/vnd.astraea-software.iota\":{\"source\":\"iana\",\"extensions\":[\"iota\"]},\"application/vnd.audiograph\":{\"source\":\"iana\",\"extensions\":[\"aep\"]},\"application/vnd.autopackage\":{\"source\":\"iana\"},\"application/vnd.avalon+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.avistar+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.balsamiq.bmml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"bmml\"]},\"application/vnd.balsamiq.bmpr\":{\"source\":\"iana\"},\"application/vnd.banana-accounting\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.error\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.msg\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.msg+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.bekitzur-stech+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.bint.med-content\":{\"source\":\"iana\"},\"application/vnd.biopax.rdf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.blink-idb-value-wrapper\":{\"source\":\"iana\"},\"application/vnd.blueice.multipass\":{\"source\":\"iana\",\"extensions\":[\"mpm\"]},\"application/vnd.bluetooth.ep.oob\":{\"source\":\"iana\"},\"application/vnd.bluetooth.le.oob\":{\"source\":\"iana\"},\"application/vnd.bmi\":{\"source\":\"iana\",\"extensions\":[\"bmi\"]},\"application/vnd.bpf\":{\"source\":\"iana\"},\"application/vnd.bpf3\":{\"source\":\"iana\"},\"application/vnd.businessobjects\":{\"source\":\"iana\",\"extensions\":[\"rep\"]},\"application/vnd.byu.uapi+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cab-jscript\":{\"source\":\"iana\"},\"application/vnd.canon-cpdl\":{\"source\":\"iana\"},\"application/vnd.canon-lips\":{\"source\":\"iana\"},\"application/vnd.capasystems-pg+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cendio.thinlinc.clientconf\":{\"source\":\"iana\"},\"application/vnd.century-systems.tcp_stream\":{\"source\":\"iana\"},\"application/vnd.chemdraw+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"cdxml\"]},\"application/vnd.chess-pgn\":{\"source\":\"iana\"},\"application/vnd.chipnuts.karaoke-mmd\":{\"source\":\"iana\",\"extensions\":[\"mmd\"]},\"application/vnd.ciedi\":{\"source\":\"iana\"},\"application/vnd.cinderella\":{\"source\":\"iana\",\"extensions\":[\"cdy\"]},\"application/vnd.cirpack.isdn-ext\":{\"source\":\"iana\"},\"application/vnd.citationstyles.style+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"csl\"]},\"application/vnd.claymore\":{\"source\":\"iana\",\"extensions\":[\"cla\"]},\"application/vnd.cloanto.rp9\":{\"source\":\"iana\",\"extensions\":[\"rp9\"]},\"application/vnd.clonk.c4group\":{\"source\":\"iana\",\"extensions\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"]},\"application/vnd.cluetrust.cartomobile-config\":{\"source\":\"iana\",\"extensions\":[\"c11amc\"]},\"application/vnd.cluetrust.cartomobile-config-pkg\":{\"source\":\"iana\",\"extensions\":[\"c11amz\"]},\"application/vnd.coffeescript\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.document\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.document-template\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.presentation\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.presentation-template\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet-template\":{\"source\":\"iana\"},\"application/vnd.collection+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.collection.doc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.collection.next+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.comicbook+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.comicbook-rar\":{\"source\":\"iana\"},\"application/vnd.commerce-battelle\":{\"source\":\"iana\"},\"application/vnd.commonspace\":{\"source\":\"iana\",\"extensions\":[\"csp\"]},\"application/vnd.contact.cmsg\":{\"source\":\"iana\",\"extensions\":[\"cdbcmsg\"]},\"application/vnd.coreos.ignition+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cosmocaller\":{\"source\":\"iana\",\"extensions\":[\"cmc\"]},\"application/vnd.crick.clicker\":{\"source\":\"iana\",\"extensions\":[\"clkx\"]},\"application/vnd.crick.clicker.keyboard\":{\"source\":\"iana\",\"extensions\":[\"clkk\"]},\"application/vnd.crick.clicker.palette\":{\"source\":\"iana\",\"extensions\":[\"clkp\"]},\"application/vnd.crick.clicker.template\":{\"source\":\"iana\",\"extensions\":[\"clkt\"]},\"application/vnd.crick.clicker.wordbank\":{\"source\":\"iana\",\"extensions\":[\"clkw\"]},\"application/vnd.criticaltools.wbs+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wbs\"]},\"application/vnd.cryptii.pipe+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.crypto-shade-file\":{\"source\":\"iana\"},\"application/vnd.cryptomator.encrypted\":{\"source\":\"iana\"},\"application/vnd.cryptomator.vault\":{\"source\":\"iana\"},\"application/vnd.ctc-posml\":{\"source\":\"iana\",\"extensions\":[\"pml\"]},\"application/vnd.ctct.ws+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cups-pdf\":{\"source\":\"iana\"},\"application/vnd.cups-postscript\":{\"source\":\"iana\"},\"application/vnd.cups-ppd\":{\"source\":\"iana\",\"extensions\":[\"ppd\"]},\"application/vnd.cups-raster\":{\"source\":\"iana\"},\"application/vnd.cups-raw\":{\"source\":\"iana\"},\"application/vnd.curl\":{\"source\":\"iana\"},\"application/vnd.curl.car\":{\"source\":\"apache\",\"extensions\":[\"car\"]},\"application/vnd.curl.pcurl\":{\"source\":\"apache\",\"extensions\":[\"pcurl\"]},\"application/vnd.cyan.dean.root+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cybank\":{\"source\":\"iana\"},\"application/vnd.cyclonedx+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cyclonedx+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.d2l.coursepackage1p0+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.d3m-dataset\":{\"source\":\"iana\"},\"application/vnd.d3m-problem\":{\"source\":\"iana\"},\"application/vnd.dart\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dart\"]},\"application/vnd.data-vision.rdz\":{\"source\":\"iana\",\"extensions\":[\"rdz\"]},\"application/vnd.datapackage+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dataresource+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dbf\":{\"source\":\"iana\",\"extensions\":[\"dbf\"]},\"application/vnd.debian.binary-package\":{\"source\":\"iana\"},\"application/vnd.dece.data\":{\"source\":\"iana\",\"extensions\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"]},\"application/vnd.dece.ttml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uvt\",\"uvvt\"]},\"application/vnd.dece.unspecified\":{\"source\":\"iana\",\"extensions\":[\"uvx\",\"uvvx\"]},\"application/vnd.dece.zip\":{\"source\":\"iana\",\"extensions\":[\"uvz\",\"uvvz\"]},\"application/vnd.denovo.fcselayout-link\":{\"source\":\"iana\",\"extensions\":[\"fe_launch\"]},\"application/vnd.desmume.movie\":{\"source\":\"iana\"},\"application/vnd.dir-bi.plate-dl-nosuffix\":{\"source\":\"iana\"},\"application/vnd.dm.delegation+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dna\":{\"source\":\"iana\",\"extensions\":[\"dna\"]},\"application/vnd.document+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dolby.mlp\":{\"source\":\"apache\",\"extensions\":[\"mlp\"]},\"application/vnd.dolby.mobile.1\":{\"source\":\"iana\"},\"application/vnd.dolby.mobile.2\":{\"source\":\"iana\"},\"application/vnd.doremir.scorecloud-binary-document\":{\"source\":\"iana\"},\"application/vnd.dpgraph\":{\"source\":\"iana\",\"extensions\":[\"dpg\"]},\"application/vnd.dreamfactory\":{\"source\":\"iana\",\"extensions\":[\"dfac\"]},\"application/vnd.drive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ds-keypoint\":{\"source\":\"apache\",\"extensions\":[\"kpxx\"]},\"application/vnd.dtg.local\":{\"source\":\"iana\"},\"application/vnd.dtg.local.flash\":{\"source\":\"iana\"},\"application/vnd.dtg.local.html\":{\"source\":\"iana\"},\"application/vnd.dvb.ait\":{\"source\":\"iana\",\"extensions\":[\"ait\"]},\"application/vnd.dvb.dvbisl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.dvbj\":{\"source\":\"iana\"},\"application/vnd.dvb.esgcontainer\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcdftnotifaccess\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgaccess\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgaccess2\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgpdd\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcroaming\":{\"source\":\"iana\"},\"application/vnd.dvb.iptv.alfec-base\":{\"source\":\"iana\"},\"application/vnd.dvb.iptv.alfec-enhancement\":{\"source\":\"iana\"},\"application/vnd.dvb.notif-aggregate-root+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-container+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-generic+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-msglist+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-registration-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-registration-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-init+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.pfr\":{\"source\":\"iana\"},\"application/vnd.dvb.service\":{\"source\":\"iana\",\"extensions\":[\"svc\"]},\"application/vnd.dxr\":{\"source\":\"iana\"},\"application/vnd.dynageo\":{\"source\":\"iana\",\"extensions\":[\"geo\"]},\"application/vnd.dzr\":{\"source\":\"iana\"},\"application/vnd.easykaraoke.cdgdownload\":{\"source\":\"iana\"},\"application/vnd.ecdis-update\":{\"source\":\"iana\"},\"application/vnd.ecip.rlp\":{\"source\":\"iana\"},\"application/vnd.ecowin.chart\":{\"source\":\"iana\",\"extensions\":[\"mag\"]},\"application/vnd.ecowin.filerequest\":{\"source\":\"iana\"},\"application/vnd.ecowin.fileupdate\":{\"source\":\"iana\"},\"application/vnd.ecowin.series\":{\"source\":\"iana\"},\"application/vnd.ecowin.seriesrequest\":{\"source\":\"iana\"},\"application/vnd.ecowin.seriesupdate\":{\"source\":\"iana\"},\"application/vnd.efi.img\":{\"source\":\"iana\"},\"application/vnd.efi.iso\":{\"source\":\"iana\"},\"application/vnd.emclient.accessrequest+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.enliven\":{\"source\":\"iana\",\"extensions\":[\"nml\"]},\"application/vnd.enphase.envoy\":{\"source\":\"iana\"},\"application/vnd.eprints.data+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.epson.esf\":{\"source\":\"iana\",\"extensions\":[\"esf\"]},\"application/vnd.epson.msf\":{\"source\":\"iana\",\"extensions\":[\"msf\"]},\"application/vnd.epson.quickanime\":{\"source\":\"iana\",\"extensions\":[\"qam\"]},\"application/vnd.epson.salt\":{\"source\":\"iana\",\"extensions\":[\"slt\"]},\"application/vnd.epson.ssf\":{\"source\":\"iana\",\"extensions\":[\"ssf\"]},\"application/vnd.ericsson.quickcall\":{\"source\":\"iana\"},\"application/vnd.espass-espass+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.eszigno3+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"es3\",\"et3\"]},\"application/vnd.etsi.aoc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.asic-e+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.etsi.asic-s+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.etsi.cug+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvcommand+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvdiscovery+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-bc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-cod+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-npvr+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvservice+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsync+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvueprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.mcid+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.mheg5\":{\"source\":\"iana\"},\"application/vnd.etsi.overload-control-policy-dataset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.pstn+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.sci+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.simservs+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.timestamp-token\":{\"source\":\"iana\"},\"application/vnd.etsi.tsl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.tsl.der\":{\"source\":\"iana\"},\"application/vnd.eudora.data\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.profile\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.settings\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.theme\":{\"source\":\"iana\"},\"application/vnd.exstream-empower+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.exstream-package\":{\"source\":\"iana\"},\"application/vnd.ezpix-album\":{\"source\":\"iana\",\"extensions\":[\"ez2\"]},\"application/vnd.ezpix-package\":{\"source\":\"iana\",\"extensions\":[\"ez3\"]},\"application/vnd.f-secure.mobile\":{\"source\":\"iana\"},\"application/vnd.fastcopy-disk-image\":{\"source\":\"iana\"},\"application/vnd.fdf\":{\"source\":\"iana\",\"extensions\":[\"fdf\"]},\"application/vnd.fdsn.mseed\":{\"source\":\"iana\",\"extensions\":[\"mseed\"]},\"application/vnd.fdsn.seed\":{\"source\":\"iana\",\"extensions\":[\"seed\",\"dataless\"]},\"application/vnd.ffsns\":{\"source\":\"iana\"},\"application/vnd.ficlab.flb+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.filmit.zfc\":{\"source\":\"iana\"},\"application/vnd.fints\":{\"source\":\"iana\"},\"application/vnd.firemonkeys.cloudcell\":{\"source\":\"iana\"},\"application/vnd.flographit\":{\"source\":\"iana\",\"extensions\":[\"gph\"]},\"application/vnd.fluxtime.clip\":{\"source\":\"iana\",\"extensions\":[\"ftc\"]},\"application/vnd.font-fontforge-sfd\":{\"source\":\"iana\"},\"application/vnd.framemaker\":{\"source\":\"iana\",\"extensions\":[\"fm\",\"frame\",\"maker\",\"book\"]},\"application/vnd.frogans.fnc\":{\"source\":\"iana\",\"extensions\":[\"fnc\"]},\"application/vnd.frogans.ltf\":{\"source\":\"iana\",\"extensions\":[\"ltf\"]},\"application/vnd.fsc.weblaunch\":{\"source\":\"iana\",\"extensions\":[\"fsc\"]},\"application/vnd.fujifilm.fb.docuworks\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.docuworks.binder\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.docuworks.container\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.jfi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.fujitsu.oasys\":{\"source\":\"iana\",\"extensions\":[\"oas\"]},\"application/vnd.fujitsu.oasys2\":{\"source\":\"iana\",\"extensions\":[\"oa2\"]},\"application/vnd.fujitsu.oasys3\":{\"source\":\"iana\",\"extensions\":[\"oa3\"]},\"application/vnd.fujitsu.oasysgp\":{\"source\":\"iana\",\"extensions\":[\"fg5\"]},\"application/vnd.fujitsu.oasysprs\":{\"source\":\"iana\",\"extensions\":[\"bh2\"]},\"application/vnd.fujixerox.art-ex\":{\"source\":\"iana\"},\"application/vnd.fujixerox.art4\":{\"source\":\"iana\"},\"application/vnd.fujixerox.ddd\":{\"source\":\"iana\",\"extensions\":[\"ddd\"]},\"application/vnd.fujixerox.docuworks\":{\"source\":\"iana\",\"extensions\":[\"xdw\"]},\"application/vnd.fujixerox.docuworks.binder\":{\"source\":\"iana\",\"extensions\":[\"xbd\"]},\"application/vnd.fujixerox.docuworks.container\":{\"source\":\"iana\"},\"application/vnd.fujixerox.hbpl\":{\"source\":\"iana\"},\"application/vnd.fut-misnet\":{\"source\":\"iana\"},\"application/vnd.futoin+cbor\":{\"source\":\"iana\"},\"application/vnd.futoin+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.fuzzysheet\":{\"source\":\"iana\",\"extensions\":[\"fzs\"]},\"application/vnd.genomatix.tuxedo\":{\"source\":\"iana\",\"extensions\":[\"txd\"]},\"application/vnd.gentics.grd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geo+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geocube+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geogebra.file\":{\"source\":\"iana\",\"extensions\":[\"ggb\"]},\"application/vnd.geogebra.slides\":{\"source\":\"iana\"},\"application/vnd.geogebra.tool\":{\"source\":\"iana\",\"extensions\":[\"ggt\"]},\"application/vnd.geometry-explorer\":{\"source\":\"iana\",\"extensions\":[\"gex\",\"gre\"]},\"application/vnd.geonext\":{\"source\":\"iana\",\"extensions\":[\"gxt\"]},\"application/vnd.geoplan\":{\"source\":\"iana\",\"extensions\":[\"g2w\"]},\"application/vnd.geospace\":{\"source\":\"iana\",\"extensions\":[\"g3w\"]},\"application/vnd.gerber\":{\"source\":\"iana\"},\"application/vnd.globalplatform.card-content-mgt\":{\"source\":\"iana\"},\"application/vnd.globalplatform.card-content-mgt-response\":{\"source\":\"iana\"},\"application/vnd.gmx\":{\"source\":\"iana\",\"extensions\":[\"gmx\"]},\"application/vnd.google-apps.document\":{\"compressible\":false,\"extensions\":[\"gdoc\"]},\"application/vnd.google-apps.presentation\":{\"compressible\":false,\"extensions\":[\"gslides\"]},\"application/vnd.google-apps.spreadsheet\":{\"compressible\":false,\"extensions\":[\"gsheet\"]},\"application/vnd.google-earth.kml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"kml\"]},\"application/vnd.google-earth.kmz\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"kmz\"]},\"application/vnd.gov.sk.e-form+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.gov.sk.e-form+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.gov.sk.xmldatacontainer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.grafeq\":{\"source\":\"iana\",\"extensions\":[\"gqf\",\"gqs\"]},\"application/vnd.gridmp\":{\"source\":\"iana\"},\"application/vnd.groove-account\":{\"source\":\"iana\",\"extensions\":[\"gac\"]},\"application/vnd.groove-help\":{\"source\":\"iana\",\"extensions\":[\"ghf\"]},\"application/vnd.groove-identity-message\":{\"source\":\"iana\",\"extensions\":[\"gim\"]},\"application/vnd.groove-injector\":{\"source\":\"iana\",\"extensions\":[\"grv\"]},\"application/vnd.groove-tool-message\":{\"source\":\"iana\",\"extensions\":[\"gtm\"]},\"application/vnd.groove-tool-template\":{\"source\":\"iana\",\"extensions\":[\"tpl\"]},\"application/vnd.groove-vcard\":{\"source\":\"iana\",\"extensions\":[\"vcg\"]},\"application/vnd.hal+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hal+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"hal\"]},\"application/vnd.handheld-entertainment+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"zmm\"]},\"application/vnd.hbci\":{\"source\":\"iana\",\"extensions\":[\"hbci\"]},\"application/vnd.hc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hcl-bireports\":{\"source\":\"iana\"},\"application/vnd.hdt\":{\"source\":\"iana\"},\"application/vnd.heroku+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hhe.lesson-player\":{\"source\":\"iana\",\"extensions\":[\"les\"]},\"application/vnd.hp-hpgl\":{\"source\":\"iana\",\"extensions\":[\"hpgl\"]},\"application/vnd.hp-hpid\":{\"source\":\"iana\",\"extensions\":[\"hpid\"]},\"application/vnd.hp-hps\":{\"source\":\"iana\",\"extensions\":[\"hps\"]},\"application/vnd.hp-jlyt\":{\"source\":\"iana\",\"extensions\":[\"jlt\"]},\"application/vnd.hp-pcl\":{\"source\":\"iana\",\"extensions\":[\"pcl\"]},\"application/vnd.hp-pclxl\":{\"source\":\"iana\",\"extensions\":[\"pclxl\"]},\"application/vnd.httphone\":{\"source\":\"iana\"},\"application/vnd.hydrostatix.sof-data\":{\"source\":\"iana\",\"extensions\":[\"sfd-hdstx\"]},\"application/vnd.hyper+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hyper-item+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hyperdrive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hzn-3d-crossword\":{\"source\":\"iana\"},\"application/vnd.ibm.afplinedata\":{\"source\":\"iana\"},\"application/vnd.ibm.electronic-media\":{\"source\":\"iana\"},\"application/vnd.ibm.minipay\":{\"source\":\"iana\",\"extensions\":[\"mpy\"]},\"application/vnd.ibm.modcap\":{\"source\":\"iana\",\"extensions\":[\"afp\",\"listafp\",\"list3820\"]},\"application/vnd.ibm.rights-management\":{\"source\":\"iana\",\"extensions\":[\"irm\"]},\"application/vnd.ibm.secure-container\":{\"source\":\"iana\",\"extensions\":[\"sc\"]},\"application/vnd.iccprofile\":{\"source\":\"iana\",\"extensions\":[\"icc\",\"icm\"]},\"application/vnd.ieee.1905\":{\"source\":\"iana\"},\"application/vnd.igloader\":{\"source\":\"iana\",\"extensions\":[\"igl\"]},\"application/vnd.imagemeter.folder+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.imagemeter.image+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.immervision-ivp\":{\"source\":\"iana\",\"extensions\":[\"ivp\"]},\"application/vnd.immervision-ivu\":{\"source\":\"iana\",\"extensions\":[\"ivu\"]},\"application/vnd.ims.imsccv1p1\":{\"source\":\"iana\"},\"application/vnd.ims.imsccv1p2\":{\"source\":\"iana\"},\"application/vnd.ims.imsccv1p3\":{\"source\":\"iana\"},\"application/vnd.ims.lis.v2.result+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolconsumerprofile+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolproxy+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolproxy.id+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolsettings+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolsettings.simple+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.informedcontrol.rms+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.informix-visionary\":{\"source\":\"iana\"},\"application/vnd.infotech.project\":{\"source\":\"iana\"},\"application/vnd.infotech.project+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.innopath.wamp.notification\":{\"source\":\"iana\"},\"application/vnd.insors.igm\":{\"source\":\"iana\",\"extensions\":[\"igm\"]},\"application/vnd.intercon.formnet\":{\"source\":\"iana\",\"extensions\":[\"xpw\",\"xpx\"]},\"application/vnd.intergeo\":{\"source\":\"iana\",\"extensions\":[\"i2g\"]},\"application/vnd.intertrust.digibox\":{\"source\":\"iana\"},\"application/vnd.intertrust.nncp\":{\"source\":\"iana\"},\"application/vnd.intu.qbo\":{\"source\":\"iana\",\"extensions\":[\"qbo\"]},\"application/vnd.intu.qfx\":{\"source\":\"iana\",\"extensions\":[\"qfx\"]},\"application/vnd.iptc.g2.catalogitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.conceptitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.knowledgeitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.newsitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.newsmessage+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.packageitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.planningitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ipunplugged.rcprofile\":{\"source\":\"iana\",\"extensions\":[\"rcprofile\"]},\"application/vnd.irepository.package+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"irp\"]},\"application/vnd.is-xpr\":{\"source\":\"iana\",\"extensions\":[\"xpr\"]},\"application/vnd.isac.fcs\":{\"source\":\"iana\",\"extensions\":[\"fcs\"]},\"application/vnd.iso11783-10+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.jam\":{\"source\":\"iana\",\"extensions\":[\"jam\"]},\"application/vnd.japannet-directory-service\":{\"source\":\"iana\"},\"application/vnd.japannet-jpnstore-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-payment-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-registration\":{\"source\":\"iana\"},\"application/vnd.japannet-registration-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-setstore-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-verification\":{\"source\":\"iana\"},\"application/vnd.japannet-verification-wakeup\":{\"source\":\"iana\"},\"application/vnd.jcp.javame.midlet-rms\":{\"source\":\"iana\",\"extensions\":[\"rms\"]},\"application/vnd.jisp\":{\"source\":\"iana\",\"extensions\":[\"jisp\"]},\"application/vnd.joost.joda-archive\":{\"source\":\"iana\",\"extensions\":[\"joda\"]},\"application/vnd.jsk.isdn-ngn\":{\"source\":\"iana\"},\"application/vnd.kahootz\":{\"source\":\"iana\",\"extensions\":[\"ktz\",\"ktr\"]},\"application/vnd.kde.karbon\":{\"source\":\"iana\",\"extensions\":[\"karbon\"]},\"application/vnd.kde.kchart\":{\"source\":\"iana\",\"extensions\":[\"chrt\"]},\"application/vnd.kde.kformula\":{\"source\":\"iana\",\"extensions\":[\"kfo\"]},\"application/vnd.kde.kivio\":{\"source\":\"iana\",\"extensions\":[\"flw\"]},\"application/vnd.kde.kontour\":{\"source\":\"iana\",\"extensions\":[\"kon\"]},\"application/vnd.kde.kpresenter\":{\"source\":\"iana\",\"extensions\":[\"kpr\",\"kpt\"]},\"application/vnd.kde.kspread\":{\"source\":\"iana\",\"extensions\":[\"ksp\"]},\"application/vnd.kde.kword\":{\"source\":\"iana\",\"extensions\":[\"kwd\",\"kwt\"]},\"application/vnd.kenameaapp\":{\"source\":\"iana\",\"extensions\":[\"htke\"]},\"application/vnd.kidspiration\":{\"source\":\"iana\",\"extensions\":[\"kia\"]},\"application/vnd.kinar\":{\"source\":\"iana\",\"extensions\":[\"kne\",\"knp\"]},\"application/vnd.koan\":{\"source\":\"iana\",\"extensions\":[\"skp\",\"skd\",\"skt\",\"skm\"]},\"application/vnd.kodak-descriptor\":{\"source\":\"iana\",\"extensions\":[\"sse\"]},\"application/vnd.las\":{\"source\":\"iana\"},\"application/vnd.las.las+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.las.las+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lasxml\"]},\"application/vnd.laszip\":{\"source\":\"iana\"},\"application/vnd.leap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.liberty-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.llamagraphics.life-balance.desktop\":{\"source\":\"iana\",\"extensions\":[\"lbd\"]},\"application/vnd.llamagraphics.life-balance.exchange+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lbe\"]},\"application/vnd.logipipe.circuit+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.loom\":{\"source\":\"iana\"},\"application/vnd.lotus-1-2-3\":{\"source\":\"iana\",\"extensions\":[\"123\"]},\"application/vnd.lotus-approach\":{\"source\":\"iana\",\"extensions\":[\"apr\"]},\"application/vnd.lotus-freelance\":{\"source\":\"iana\",\"extensions\":[\"pre\"]},\"application/vnd.lotus-notes\":{\"source\":\"iana\",\"extensions\":[\"nsf\"]},\"application/vnd.lotus-organizer\":{\"source\":\"iana\",\"extensions\":[\"org\"]},\"application/vnd.lotus-screencam\":{\"source\":\"iana\",\"extensions\":[\"scm\"]},\"application/vnd.lotus-wordpro\":{\"source\":\"iana\",\"extensions\":[\"lwp\"]},\"application/vnd.macports.portpkg\":{\"source\":\"iana\",\"extensions\":[\"portpkg\"]},\"application/vnd.mapbox-vector-tile\":{\"source\":\"iana\",\"extensions\":[\"mvt\"]},\"application/vnd.marlin.drm.actiontoken+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.conftoken+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.license+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.mdcf\":{\"source\":\"iana\"},\"application/vnd.mason+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.maxmind.maxmind-db\":{\"source\":\"iana\"},\"application/vnd.mcd\":{\"source\":\"iana\",\"extensions\":[\"mcd\"]},\"application/vnd.medcalcdata\":{\"source\":\"iana\",\"extensions\":[\"mc1\"]},\"application/vnd.mediastation.cdkey\":{\"source\":\"iana\",\"extensions\":[\"cdkey\"]},\"application/vnd.meridian-slingshot\":{\"source\":\"iana\"},\"application/vnd.mfer\":{\"source\":\"iana\",\"extensions\":[\"mwf\"]},\"application/vnd.mfmp\":{\"source\":\"iana\",\"extensions\":[\"mfm\"]},\"application/vnd.micro+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.micrografx.flo\":{\"source\":\"iana\",\"extensions\":[\"flo\"]},\"application/vnd.micrografx.igx\":{\"source\":\"iana\",\"extensions\":[\"igx\"]},\"application/vnd.microsoft.portable-executable\":{\"source\":\"iana\"},\"application/vnd.microsoft.windows.thumbnail-cache\":{\"source\":\"iana\"},\"application/vnd.miele+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.mif\":{\"source\":\"iana\",\"extensions\":[\"mif\"]},\"application/vnd.minisoft-hp3000-save\":{\"source\":\"iana\"},\"application/vnd.mitsubishi.misty-guard.trustweb\":{\"source\":\"iana\"},\"application/vnd.mobius.daf\":{\"source\":\"iana\",\"extensions\":[\"daf\"]},\"application/vnd.mobius.dis\":{\"source\":\"iana\",\"extensions\":[\"dis\"]},\"application/vnd.mobius.mbk\":{\"source\":\"iana\",\"extensions\":[\"mbk\"]},\"application/vnd.mobius.mqy\":{\"source\":\"iana\",\"extensions\":[\"mqy\"]},\"application/vnd.mobius.msl\":{\"source\":\"iana\",\"extensions\":[\"msl\"]},\"application/vnd.mobius.plc\":{\"source\":\"iana\",\"extensions\":[\"plc\"]},\"application/vnd.mobius.txf\":{\"source\":\"iana\",\"extensions\":[\"txf\"]},\"application/vnd.mophun.application\":{\"source\":\"iana\",\"extensions\":[\"mpn\"]},\"application/vnd.mophun.certificate\":{\"source\":\"iana\",\"extensions\":[\"mpc\"]},\"application/vnd.motorola.flexsuite\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.adsi\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.fis\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.gotap\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.kmr\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.ttc\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.wem\":{\"source\":\"iana\"},\"application/vnd.motorola.iprm\":{\"source\":\"iana\"},\"application/vnd.mozilla.xul+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xul\"]},\"application/vnd.ms-3mfdocument\":{\"source\":\"iana\"},\"application/vnd.ms-artgalry\":{\"source\":\"iana\",\"extensions\":[\"cil\"]},\"application/vnd.ms-asf\":{\"source\":\"iana\"},\"application/vnd.ms-cab-compressed\":{\"source\":\"iana\",\"extensions\":[\"cab\"]},\"application/vnd.ms-color.iccprofile\":{\"source\":\"apache\"},\"application/vnd.ms-excel\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"]},\"application/vnd.ms-excel.addin.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlam\"]},\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlsb\"]},\"application/vnd.ms-excel.sheet.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlsm\"]},\"application/vnd.ms-excel.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xltm\"]},\"application/vnd.ms-fontobject\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"eot\"]},\"application/vnd.ms-htmlhelp\":{\"source\":\"iana\",\"extensions\":[\"chm\"]},\"application/vnd.ms-ims\":{\"source\":\"iana\",\"extensions\":[\"ims\"]},\"application/vnd.ms-lrm\":{\"source\":\"iana\",\"extensions\":[\"lrm\"]},\"application/vnd.ms-office.activex+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-officetheme\":{\"source\":\"iana\",\"extensions\":[\"thmx\"]},\"application/vnd.ms-opentype\":{\"source\":\"apache\",\"compressible\":true},\"application/vnd.ms-outlook\":{\"compressible\":false,\"extensions\":[\"msg\"]},\"application/vnd.ms-package.obfuscated-opentype\":{\"source\":\"apache\"},\"application/vnd.ms-pki.seccat\":{\"source\":\"apache\",\"extensions\":[\"cat\"]},\"application/vnd.ms-pki.stl\":{\"source\":\"apache\",\"extensions\":[\"stl\"]},\"application/vnd.ms-playready.initiator+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-powerpoint\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ppt\",\"pps\",\"pot\"]},\"application/vnd.ms-powerpoint.addin.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"ppam\"]},\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"pptm\"]},\"application/vnd.ms-powerpoint.slide.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"sldm\"]},\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"ppsm\"]},\"application/vnd.ms-powerpoint.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"potm\"]},\"application/vnd.ms-printdevicecapabilities+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-printing.printticket+xml\":{\"source\":\"apache\",\"compressible\":true},\"application/vnd.ms-printschematicket+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-project\":{\"source\":\"iana\",\"extensions\":[\"mpp\",\"mpt\"]},\"application/vnd.ms-tnef\":{\"source\":\"iana\"},\"application/vnd.ms-windows.devicepairing\":{\"source\":\"iana\"},\"application/vnd.ms-windows.nwprinting.oob\":{\"source\":\"iana\"},\"application/vnd.ms-windows.printerpairing\":{\"source\":\"iana\"},\"application/vnd.ms-windows.wsd.oob\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.lic-chlg-req\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.lic-resp\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.meter-chlg-req\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.meter-resp\":{\"source\":\"iana\"},\"application/vnd.ms-word.document.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"docm\"]},\"application/vnd.ms-word.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"dotm\"]},\"application/vnd.ms-works\":{\"source\":\"iana\",\"extensions\":[\"wps\",\"wks\",\"wcm\",\"wdb\"]},\"application/vnd.ms-wpl\":{\"source\":\"iana\",\"extensions\":[\"wpl\"]},\"application/vnd.ms-xpsdocument\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xps\"]},\"application/vnd.msa-disk-image\":{\"source\":\"iana\"},\"application/vnd.mseq\":{\"source\":\"iana\",\"extensions\":[\"mseq\"]},\"application/vnd.msign\":{\"source\":\"iana\"},\"application/vnd.multiad.creator\":{\"source\":\"iana\"},\"application/vnd.multiad.creator.cif\":{\"source\":\"iana\"},\"application/vnd.music-niff\":{\"source\":\"iana\"},\"application/vnd.musician\":{\"source\":\"iana\",\"extensions\":[\"mus\"]},\"application/vnd.muvee.style\":{\"source\":\"iana\",\"extensions\":[\"msty\"]},\"application/vnd.mynfc\":{\"source\":\"iana\",\"extensions\":[\"taglet\"]},\"application/vnd.nacamar.ybrid+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ncd.control\":{\"source\":\"iana\"},\"application/vnd.ncd.reference\":{\"source\":\"iana\"},\"application/vnd.nearst.inv+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nebumind.line\":{\"source\":\"iana\"},\"application/vnd.nervana\":{\"source\":\"iana\"},\"application/vnd.netfpx\":{\"source\":\"iana\"},\"application/vnd.neurolanguage.nlu\":{\"source\":\"iana\",\"extensions\":[\"nlu\"]},\"application/vnd.nimn\":{\"source\":\"iana\"},\"application/vnd.nintendo.nitro.rom\":{\"source\":\"iana\"},\"application/vnd.nintendo.snes.rom\":{\"source\":\"iana\"},\"application/vnd.nitf\":{\"source\":\"iana\",\"extensions\":[\"ntf\",\"nitf\"]},\"application/vnd.noblenet-directory\":{\"source\":\"iana\",\"extensions\":[\"nnd\"]},\"application/vnd.noblenet-sealer\":{\"source\":\"iana\",\"extensions\":[\"nns\"]},\"application/vnd.noblenet-web\":{\"source\":\"iana\",\"extensions\":[\"nnw\"]},\"application/vnd.nokia.catalogs\":{\"source\":\"iana\"},\"application/vnd.nokia.conml+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.conml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.iptv.config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.isds-radio-presets\":{\"source\":\"iana\"},\"application/vnd.nokia.landmark+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.landmark+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.landmarkcollection+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.n-gage.ac+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ac\"]},\"application/vnd.nokia.n-gage.data\":{\"source\":\"iana\",\"extensions\":[\"ngdat\"]},\"application/vnd.nokia.n-gage.symbian.install\":{\"source\":\"iana\",\"extensions\":[\"n-gage\"]},\"application/vnd.nokia.ncd\":{\"source\":\"iana\"},\"application/vnd.nokia.pcd+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.pcd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.radio-preset\":{\"source\":\"iana\",\"extensions\":[\"rpst\"]},\"application/vnd.nokia.radio-presets\":{\"source\":\"iana\",\"extensions\":[\"rpss\"]},\"application/vnd.novadigm.edm\":{\"source\":\"iana\",\"extensions\":[\"edm\"]},\"application/vnd.novadigm.edx\":{\"source\":\"iana\",\"extensions\":[\"edx\"]},\"application/vnd.novadigm.ext\":{\"source\":\"iana\",\"extensions\":[\"ext\"]},\"application/vnd.ntt-local.content-share\":{\"source\":\"iana\"},\"application/vnd.ntt-local.file-transfer\":{\"source\":\"iana\"},\"application/vnd.ntt-local.ogw_remote-access\":{\"source\":\"iana\"},\"application/vnd.ntt-local.sip-ta_remote\":{\"source\":\"iana\"},\"application/vnd.ntt-local.sip-ta_tcp_stream\":{\"source\":\"iana\"},\"application/vnd.oasis.opendocument.chart\":{\"source\":\"iana\",\"extensions\":[\"odc\"]},\"application/vnd.oasis.opendocument.chart-template\":{\"source\":\"iana\",\"extensions\":[\"otc\"]},\"application/vnd.oasis.opendocument.database\":{\"source\":\"iana\",\"extensions\":[\"odb\"]},\"application/vnd.oasis.opendocument.formula\":{\"source\":\"iana\",\"extensions\":[\"odf\"]},\"application/vnd.oasis.opendocument.formula-template\":{\"source\":\"iana\",\"extensions\":[\"odft\"]},\"application/vnd.oasis.opendocument.graphics\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odg\"]},\"application/vnd.oasis.opendocument.graphics-template\":{\"source\":\"iana\",\"extensions\":[\"otg\"]},\"application/vnd.oasis.opendocument.image\":{\"source\":\"iana\",\"extensions\":[\"odi\"]},\"application/vnd.oasis.opendocument.image-template\":{\"source\":\"iana\",\"extensions\":[\"oti\"]},\"application/vnd.oasis.opendocument.presentation\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odp\"]},\"application/vnd.oasis.opendocument.presentation-template\":{\"source\":\"iana\",\"extensions\":[\"otp\"]},\"application/vnd.oasis.opendocument.spreadsheet\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ods\"]},\"application/vnd.oasis.opendocument.spreadsheet-template\":{\"source\":\"iana\",\"extensions\":[\"ots\"]},\"application/vnd.oasis.opendocument.text\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odt\"]},\"application/vnd.oasis.opendocument.text-master\":{\"source\":\"iana\",\"extensions\":[\"odm\"]},\"application/vnd.oasis.opendocument.text-template\":{\"source\":\"iana\",\"extensions\":[\"ott\"]},\"application/vnd.oasis.opendocument.text-web\":{\"source\":\"iana\",\"extensions\":[\"oth\"]},\"application/vnd.obn\":{\"source\":\"iana\"},\"application/vnd.ocf+cbor\":{\"source\":\"iana\"},\"application/vnd.oci.image.manifest.v1+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oftn.l10n+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.contentaccessdownload+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.contentaccessstreaming+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.cspg-hexbinary\":{\"source\":\"iana\"},\"application/vnd.oipf.dae.svg+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.dae.xhtml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.mippvcontrolmessage+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.pae.gem\":{\"source\":\"iana\"},\"application/vnd.oipf.spdiscovery+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.spdlist+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.ueprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.userprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.olpc-sugar\":{\"source\":\"iana\",\"extensions\":[\"xo\"]},\"application/vnd.oma-scws-config\":{\"source\":\"iana\"},\"application/vnd.oma-scws-http-request\":{\"source\":\"iana\"},\"application/vnd.oma-scws-http-response\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.associated-procedure-parameter+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.drm-trigger+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.imd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.ltkm\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.notification+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.provisioningtrigger\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.sgboot\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.sgdd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.sgdu\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.simple-symbol-container\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.smartcard-trigger+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.sprov+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.stkm\":{\"source\":\"iana\"},\"application/vnd.oma.cab-address-book+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-feature-handler+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-pcc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-subs-invite+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-user-prefs+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.dcd\":{\"source\":\"iana\"},\"application/vnd.oma.dcdc\":{\"source\":\"iana\"},\"application/vnd.oma.dd2+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dd2\"]},\"application/vnd.oma.drm.risd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.group-usage-list+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.lwm2m+cbor\":{\"source\":\"iana\"},\"application/vnd.oma.lwm2m+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.lwm2m+tlv\":{\"source\":\"iana\"},\"application/vnd.oma.pal+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.detailed-progress-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.final-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.groups+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.invocation-descriptor+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.optimized-progress-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.push\":{\"source\":\"iana\"},\"application/vnd.oma.scidm.messages+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.xcap-directory+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.omads-email+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omads-file+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omads-folder+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omaloc-supl-init\":{\"source\":\"iana\"},\"application/vnd.onepager\":{\"source\":\"iana\"},\"application/vnd.onepagertamp\":{\"source\":\"iana\"},\"application/vnd.onepagertamx\":{\"source\":\"iana\"},\"application/vnd.onepagertat\":{\"source\":\"iana\"},\"application/vnd.onepagertatp\":{\"source\":\"iana\"},\"application/vnd.onepagertatx\":{\"source\":\"iana\"},\"application/vnd.openblox.game+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"obgx\"]},\"application/vnd.openblox.game-binary\":{\"source\":\"iana\"},\"application/vnd.openeye.oeb\":{\"source\":\"iana\"},\"application/vnd.openofficeorg.extension\":{\"source\":\"apache\",\"extensions\":[\"oxt\"]},\"application/vnd.openstreetmap.data+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"osm\"]},\"application/vnd.opentimestamps.ots\":{\"source\":\"iana\"},\"application/vnd.openxmlformats-officedocument.custom-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawing+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.extended-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pptx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slide\":{\"source\":\"iana\",\"extensions\":[\"sldx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":{\"source\":\"iana\",\"extensions\":[\"ppsx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.template\":{\"source\":\"iana\",\"extensions\":[\"potx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xlsx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":{\"source\":\"iana\",\"extensions\":[\"xltx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.theme+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.themeoverride+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.vmldrawing\":{\"source\":\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"docx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":{\"source\":\"iana\",\"extensions\":[\"dotx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.core-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.relationships+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oracle.resource+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.orange.indata\":{\"source\":\"iana\"},\"application/vnd.osa.netdeploy\":{\"source\":\"iana\"},\"application/vnd.osgeo.mapguide.package\":{\"source\":\"iana\",\"extensions\":[\"mgp\"]},\"application/vnd.osgi.bundle\":{\"source\":\"iana\"},\"application/vnd.osgi.dp\":{\"source\":\"iana\",\"extensions\":[\"dp\"]},\"application/vnd.osgi.subsystem\":{\"source\":\"iana\",\"extensions\":[\"esa\"]},\"application/vnd.otps.ct-kip+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oxli.countgraph\":{\"source\":\"iana\"},\"application/vnd.pagerduty+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.palm\":{\"source\":\"iana\",\"extensions\":[\"pdb\",\"pqa\",\"oprc\"]},\"application/vnd.panoply\":{\"source\":\"iana\"},\"application/vnd.paos.xml\":{\"source\":\"iana\"},\"application/vnd.patentdive\":{\"source\":\"iana\"},\"application/vnd.patientecommsdoc\":{\"source\":\"iana\"},\"application/vnd.pawaafile\":{\"source\":\"iana\",\"extensions\":[\"paw\"]},\"application/vnd.pcos\":{\"source\":\"iana\"},\"application/vnd.pg.format\":{\"source\":\"iana\",\"extensions\":[\"str\"]},\"application/vnd.pg.osasli\":{\"source\":\"iana\",\"extensions\":[\"ei6\"]},\"application/vnd.piaccess.application-licence\":{\"source\":\"iana\"},\"application/vnd.picsel\":{\"source\":\"iana\",\"extensions\":[\"efif\"]},\"application/vnd.pmi.widget\":{\"source\":\"iana\",\"extensions\":[\"wg\"]},\"application/vnd.poc.group-advertisement+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.pocketlearn\":{\"source\":\"iana\",\"extensions\":[\"plf\"]},\"application/vnd.powerbuilder6\":{\"source\":\"iana\",\"extensions\":[\"pbd\"]},\"application/vnd.powerbuilder6-s\":{\"source\":\"iana\"},\"application/vnd.powerbuilder7\":{\"source\":\"iana\"},\"application/vnd.powerbuilder7-s\":{\"source\":\"iana\"},\"application/vnd.powerbuilder75\":{\"source\":\"iana\"},\"application/vnd.powerbuilder75-s\":{\"source\":\"iana\"},\"application/vnd.preminet\":{\"source\":\"iana\"},\"application/vnd.previewsystems.box\":{\"source\":\"iana\",\"extensions\":[\"box\"]},\"application/vnd.proteus.magazine\":{\"source\":\"iana\",\"extensions\":[\"mgz\"]},\"application/vnd.psfs\":{\"source\":\"iana\"},\"application/vnd.publishare-delta-tree\":{\"source\":\"iana\",\"extensions\":[\"qps\"]},\"application/vnd.pvi.ptid1\":{\"source\":\"iana\",\"extensions\":[\"ptid\"]},\"application/vnd.pwg-multiplexed\":{\"source\":\"iana\"},\"application/vnd.pwg-xhtml-print+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.qualcomm.brew-app-res\":{\"source\":\"iana\"},\"application/vnd.quarantainenet\":{\"source\":\"iana\"},\"application/vnd.quark.quarkxpress\":{\"source\":\"iana\",\"extensions\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"]},\"application/vnd.quobject-quoxdocument\":{\"source\":\"iana\"},\"application/vnd.radisys.moml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-conf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-conn+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-dialog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-stream+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-conf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-base+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-fax-detect+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-group+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-speech+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-transform+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.rainstor.data\":{\"source\":\"iana\"},\"application/vnd.rapid\":{\"source\":\"iana\"},\"application/vnd.rar\":{\"source\":\"iana\",\"extensions\":[\"rar\"]},\"application/vnd.realvnc.bed\":{\"source\":\"iana\",\"extensions\":[\"bed\"]},\"application/vnd.recordare.musicxml\":{\"source\":\"iana\",\"extensions\":[\"mxl\"]},\"application/vnd.recordare.musicxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"musicxml\"]},\"application/vnd.renlearn.rlprint\":{\"source\":\"iana\"},\"application/vnd.resilient.logic\":{\"source\":\"iana\"},\"application/vnd.restful+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.rig.cryptonote\":{\"source\":\"iana\",\"extensions\":[\"cryptonote\"]},\"application/vnd.rim.cod\":{\"source\":\"apache\",\"extensions\":[\"cod\"]},\"application/vnd.rn-realmedia\":{\"source\":\"apache\",\"extensions\":[\"rm\"]},\"application/vnd.rn-realmedia-vbr\":{\"source\":\"apache\",\"extensions\":[\"rmvb\"]},\"application/vnd.route66.link66+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"link66\"]},\"application/vnd.rs-274x\":{\"source\":\"iana\"},\"application/vnd.ruckus.download\":{\"source\":\"iana\"},\"application/vnd.s3sms\":{\"source\":\"iana\"},\"application/vnd.sailingtracker.track\":{\"source\":\"iana\",\"extensions\":[\"st\"]},\"application/vnd.sar\":{\"source\":\"iana\"},\"application/vnd.sbm.cid\":{\"source\":\"iana\"},\"application/vnd.sbm.mid2\":{\"source\":\"iana\"},\"application/vnd.scribus\":{\"source\":\"iana\"},\"application/vnd.sealed.3df\":{\"source\":\"iana\"},\"application/vnd.sealed.csf\":{\"source\":\"iana\"},\"application/vnd.sealed.doc\":{\"source\":\"iana\"},\"application/vnd.sealed.eml\":{\"source\":\"iana\"},\"application/vnd.sealed.mht\":{\"source\":\"iana\"},\"application/vnd.sealed.net\":{\"source\":\"iana\"},\"application/vnd.sealed.ppt\":{\"source\":\"iana\"},\"application/vnd.sealed.tiff\":{\"source\":\"iana\"},\"application/vnd.sealed.xls\":{\"source\":\"iana\"},\"application/vnd.sealedmedia.softseal.html\":{\"source\":\"iana\"},\"application/vnd.sealedmedia.softseal.pdf\":{\"source\":\"iana\"},\"application/vnd.seemail\":{\"source\":\"iana\",\"extensions\":[\"see\"]},\"application/vnd.seis+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.sema\":{\"source\":\"iana\",\"extensions\":[\"sema\"]},\"application/vnd.semd\":{\"source\":\"iana\",\"extensions\":[\"semd\"]},\"application/vnd.semf\":{\"source\":\"iana\",\"extensions\":[\"semf\"]},\"application/vnd.shade-save-file\":{\"source\":\"iana\"},\"application/vnd.shana.informed.formdata\":{\"source\":\"iana\",\"extensions\":[\"ifm\"]},\"application/vnd.shana.informed.formtemplate\":{\"source\":\"iana\",\"extensions\":[\"itp\"]},\"application/vnd.shana.informed.interchange\":{\"source\":\"iana\",\"extensions\":[\"iif\"]},\"application/vnd.shana.informed.package\":{\"source\":\"iana\",\"extensions\":[\"ipk\"]},\"application/vnd.shootproof+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.shopkick+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.shp\":{\"source\":\"iana\"},\"application/vnd.shx\":{\"source\":\"iana\"},\"application/vnd.sigrok.session\":{\"source\":\"iana\"},\"application/vnd.simtech-mindmapper\":{\"source\":\"iana\",\"extensions\":[\"twd\",\"twds\"]},\"application/vnd.siren+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.smaf\":{\"source\":\"iana\",\"extensions\":[\"mmf\"]},\"application/vnd.smart.notebook\":{\"source\":\"iana\"},\"application/vnd.smart.teacher\":{\"source\":\"iana\",\"extensions\":[\"teacher\"]},\"application/vnd.snesdev-page-table\":{\"source\":\"iana\"},\"application/vnd.software602.filler.form+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"fo\"]},\"application/vnd.software602.filler.form-xml-zip\":{\"source\":\"iana\"},\"application/vnd.solent.sdkm+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sdkm\",\"sdkd\"]},\"application/vnd.spotfire.dxp\":{\"source\":\"iana\",\"extensions\":[\"dxp\"]},\"application/vnd.spotfire.sfs\":{\"source\":\"iana\",\"extensions\":[\"sfs\"]},\"application/vnd.sqlite3\":{\"source\":\"iana\"},\"application/vnd.sss-cod\":{\"source\":\"iana\"},\"application/vnd.sss-dtf\":{\"source\":\"iana\"},\"application/vnd.sss-ntf\":{\"source\":\"iana\"},\"application/vnd.stardivision.calc\":{\"source\":\"apache\",\"extensions\":[\"sdc\"]},\"application/vnd.stardivision.draw\":{\"source\":\"apache\",\"extensions\":[\"sda\"]},\"application/vnd.stardivision.impress\":{\"source\":\"apache\",\"extensions\":[\"sdd\"]},\"application/vnd.stardivision.math\":{\"source\":\"apache\",\"extensions\":[\"smf\"]},\"application/vnd.stardivision.writer\":{\"source\":\"apache\",\"extensions\":[\"sdw\",\"vor\"]},\"application/vnd.stardivision.writer-global\":{\"source\":\"apache\",\"extensions\":[\"sgl\"]},\"application/vnd.stepmania.package\":{\"source\":\"iana\",\"extensions\":[\"smzip\"]},\"application/vnd.stepmania.stepchart\":{\"source\":\"iana\",\"extensions\":[\"sm\"]},\"application/vnd.street-stream\":{\"source\":\"iana\"},\"application/vnd.sun.wadl+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wadl\"]},\"application/vnd.sun.xml.calc\":{\"source\":\"apache\",\"extensions\":[\"sxc\"]},\"application/vnd.sun.xml.calc.template\":{\"source\":\"apache\",\"extensions\":[\"stc\"]},\"application/vnd.sun.xml.draw\":{\"source\":\"apache\",\"extensions\":[\"sxd\"]},\"application/vnd.sun.xml.draw.template\":{\"source\":\"apache\",\"extensions\":[\"std\"]},\"application/vnd.sun.xml.impress\":{\"source\":\"apache\",\"extensions\":[\"sxi\"]},\"application/vnd.sun.xml.impress.template\":{\"source\":\"apache\",\"extensions\":[\"sti\"]},\"application/vnd.sun.xml.math\":{\"source\":\"apache\",\"extensions\":[\"sxm\"]},\"application/vnd.sun.xml.writer\":{\"source\":\"apache\",\"extensions\":[\"sxw\"]},\"application/vnd.sun.xml.writer.global\":{\"source\":\"apache\",\"extensions\":[\"sxg\"]},\"application/vnd.sun.xml.writer.template\":{\"source\":\"apache\",\"extensions\":[\"stw\"]},\"application/vnd.sus-calendar\":{\"source\":\"iana\",\"extensions\":[\"sus\",\"susp\"]},\"application/vnd.svd\":{\"source\":\"iana\",\"extensions\":[\"svd\"]},\"application/vnd.swiftview-ics\":{\"source\":\"iana\"},\"application/vnd.sycle+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.symbian.install\":{\"source\":\"apache\",\"extensions\":[\"sis\",\"sisx\"]},\"application/vnd.syncml+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"xsm\"]},\"application/vnd.syncml.dm+wbxml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"bdm\"]},\"application/vnd.syncml.dm+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"xdm\"]},\"application/vnd.syncml.dm.notification\":{\"source\":\"iana\"},\"application/vnd.syncml.dmddf+wbxml\":{\"source\":\"iana\"},\"application/vnd.syncml.dmddf+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"ddf\"]},\"application/vnd.syncml.dmtnds+wbxml\":{\"source\":\"iana\"},\"application/vnd.syncml.dmtnds+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.syncml.ds.notification\":{\"source\":\"iana\"},\"application/vnd.tableschema+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tao.intent-module-archive\":{\"source\":\"iana\",\"extensions\":[\"tao\"]},\"application/vnd.tcpdump.pcap\":{\"source\":\"iana\",\"extensions\":[\"pcap\",\"cap\",\"dmp\"]},\"application/vnd.think-cell.ppttc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tmd.mediaflex.api+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tml\":{\"source\":\"iana\"},\"application/vnd.tmobile-livetv\":{\"source\":\"iana\",\"extensions\":[\"tmo\"]},\"application/vnd.tri.onesource\":{\"source\":\"iana\"},\"application/vnd.trid.tpt\":{\"source\":\"iana\",\"extensions\":[\"tpt\"]},\"application/vnd.triscape.mxs\":{\"source\":\"iana\",\"extensions\":[\"mxs\"]},\"application/vnd.trueapp\":{\"source\":\"iana\",\"extensions\":[\"tra\"]},\"application/vnd.truedoc\":{\"source\":\"iana\"},\"application/vnd.ubisoft.webplayer\":{\"source\":\"iana\"},\"application/vnd.ufdl\":{\"source\":\"iana\",\"extensions\":[\"ufd\",\"ufdl\"]},\"application/vnd.uiq.theme\":{\"source\":\"iana\",\"extensions\":[\"utz\"]},\"application/vnd.umajin\":{\"source\":\"iana\",\"extensions\":[\"umj\"]},\"application/vnd.unity\":{\"source\":\"iana\",\"extensions\":[\"unityweb\"]},\"application/vnd.uoml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uoml\"]},\"application/vnd.uplanet.alert\":{\"source\":\"iana\"},\"application/vnd.uplanet.alert-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.bearer-choice\":{\"source\":\"iana\"},\"application/vnd.uplanet.bearer-choice-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.cacheop\":{\"source\":\"iana\"},\"application/vnd.uplanet.cacheop-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.channel\":{\"source\":\"iana\"},\"application/vnd.uplanet.channel-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.list\":{\"source\":\"iana\"},\"application/vnd.uplanet.list-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.listcmd\":{\"source\":\"iana\"},\"application/vnd.uplanet.listcmd-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.signal\":{\"source\":\"iana\"},\"application/vnd.uri-map\":{\"source\":\"iana\"},\"application/vnd.valve.source.material\":{\"source\":\"iana\"},\"application/vnd.vcx\":{\"source\":\"iana\",\"extensions\":[\"vcx\"]},\"application/vnd.vd-study\":{\"source\":\"iana\"},\"application/vnd.vectorworks\":{\"source\":\"iana\"},\"application/vnd.vel+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.verimatrix.vcas\":{\"source\":\"iana\"},\"application/vnd.veritone.aion+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.veryant.thin\":{\"source\":\"iana\"},\"application/vnd.ves.encrypted\":{\"source\":\"iana\"},\"application/vnd.vidsoft.vidconference\":{\"source\":\"iana\"},\"application/vnd.visio\":{\"source\":\"iana\",\"extensions\":[\"vsd\",\"vst\",\"vss\",\"vsw\"]},\"application/vnd.visionary\":{\"source\":\"iana\",\"extensions\":[\"vis\"]},\"application/vnd.vividence.scriptfile\":{\"source\":\"iana\"},\"application/vnd.vsf\":{\"source\":\"iana\",\"extensions\":[\"vsf\"]},\"application/vnd.wap.sic\":{\"source\":\"iana\"},\"application/vnd.wap.slc\":{\"source\":\"iana\"},\"application/vnd.wap.wbxml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"wbxml\"]},\"application/vnd.wap.wmlc\":{\"source\":\"iana\",\"extensions\":[\"wmlc\"]},\"application/vnd.wap.wmlscriptc\":{\"source\":\"iana\",\"extensions\":[\"wmlsc\"]},\"application/vnd.webturbo\":{\"source\":\"iana\",\"extensions\":[\"wtb\"]},\"application/vnd.wfa.dpp\":{\"source\":\"iana\"},\"application/vnd.wfa.p2p\":{\"source\":\"iana\"},\"application/vnd.wfa.wsc\":{\"source\":\"iana\"},\"application/vnd.windows.devicepairing\":{\"source\":\"iana\"},\"application/vnd.wmc\":{\"source\":\"iana\"},\"application/vnd.wmf.bootstrap\":{\"source\":\"iana\"},\"application/vnd.wolfram.mathematica\":{\"source\":\"iana\"},\"application/vnd.wolfram.mathematica.package\":{\"source\":\"iana\"},\"application/vnd.wolfram.player\":{\"source\":\"iana\",\"extensions\":[\"nbp\"]},\"application/vnd.wordperfect\":{\"source\":\"iana\",\"extensions\":[\"wpd\"]},\"application/vnd.wqd\":{\"source\":\"iana\",\"extensions\":[\"wqd\"]},\"application/vnd.wrq-hp3000-labelled\":{\"source\":\"iana\"},\"application/vnd.wt.stf\":{\"source\":\"iana\",\"extensions\":[\"stf\"]},\"application/vnd.wv.csp+wbxml\":{\"source\":\"iana\"},\"application/vnd.wv.csp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.wv.ssp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xacml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xara\":{\"source\":\"iana\",\"extensions\":[\"xar\"]},\"application/vnd.xfdl\":{\"source\":\"iana\",\"extensions\":[\"xfdl\"]},\"application/vnd.xfdl.webform\":{\"source\":\"iana\"},\"application/vnd.xmi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xmpie.cpkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.dpkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.plan\":{\"source\":\"iana\"},\"application/vnd.xmpie.ppkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.xlim\":{\"source\":\"iana\"},\"application/vnd.yamaha.hv-dic\":{\"source\":\"iana\",\"extensions\":[\"hvd\"]},\"application/vnd.yamaha.hv-script\":{\"source\":\"iana\",\"extensions\":[\"hvs\"]},\"application/vnd.yamaha.hv-voice\":{\"source\":\"iana\",\"extensions\":[\"hvp\"]},\"application/vnd.yamaha.openscoreformat\":{\"source\":\"iana\",\"extensions\":[\"osf\"]},\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"osfpvg\"]},\"application/vnd.yamaha.remote-setup\":{\"source\":\"iana\"},\"application/vnd.yamaha.smaf-audio\":{\"source\":\"iana\",\"extensions\":[\"saf\"]},\"application/vnd.yamaha.smaf-phrase\":{\"source\":\"iana\",\"extensions\":[\"spf\"]},\"application/vnd.yamaha.through-ngn\":{\"source\":\"iana\"},\"application/vnd.yamaha.tunnel-udpencap\":{\"source\":\"iana\"},\"application/vnd.yaoweme\":{\"source\":\"iana\"},\"application/vnd.yellowriver-custom-menu\":{\"source\":\"iana\",\"extensions\":[\"cmp\"]},\"application/vnd.youtube.yt\":{\"source\":\"iana\"},\"application/vnd.zul\":{\"source\":\"iana\",\"extensions\":[\"zir\",\"zirz\"]},\"application/vnd.zzazz.deck+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"zaz\"]},\"application/voicexml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"vxml\"]},\"application/voucher-cms+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vq-rtcpxr\":{\"source\":\"iana\"},\"application/wasm\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wasm\"]},\"application/watcherinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/webpush-options+json\":{\"source\":\"iana\",\"compressible\":true},\"application/whoispp-query\":{\"source\":\"iana\"},\"application/whoispp-response\":{\"source\":\"iana\"},\"application/widget\":{\"source\":\"iana\",\"extensions\":[\"wgt\"]},\"application/winhlp\":{\"source\":\"apache\",\"extensions\":[\"hlp\"]},\"application/wita\":{\"source\":\"iana\"},\"application/wordperfect5.1\":{\"source\":\"iana\"},\"application/wsdl+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wsdl\"]},\"application/wspolicy+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wspolicy\"]},\"application/x-7z-compressed\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"7z\"]},\"application/x-abiword\":{\"source\":\"apache\",\"extensions\":[\"abw\"]},\"application/x-ace-compressed\":{\"source\":\"apache\",\"extensions\":[\"ace\"]},\"application/x-amf\":{\"source\":\"apache\"},\"application/x-apple-diskimage\":{\"source\":\"apache\",\"extensions\":[\"dmg\"]},\"application/x-arj\":{\"compressible\":false,\"extensions\":[\"arj\"]},\"application/x-authorware-bin\":{\"source\":\"apache\",\"extensions\":[\"aab\",\"x32\",\"u32\",\"vox\"]},\"application/x-authorware-map\":{\"source\":\"apache\",\"extensions\":[\"aam\"]},\"application/x-authorware-seg\":{\"source\":\"apache\",\"extensions\":[\"aas\"]},\"application/x-bcpio\":{\"source\":\"apache\",\"extensions\":[\"bcpio\"]},\"application/x-bdoc\":{\"compressible\":false,\"extensions\":[\"bdoc\"]},\"application/x-bittorrent\":{\"source\":\"apache\",\"extensions\":[\"torrent\"]},\"application/x-blorb\":{\"source\":\"apache\",\"extensions\":[\"blb\",\"blorb\"]},\"application/x-bzip\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"bz\"]},\"application/x-bzip2\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"bz2\",\"boz\"]},\"application/x-cbr\":{\"source\":\"apache\",\"extensions\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"]},\"application/x-cdlink\":{\"source\":\"apache\",\"extensions\":[\"vcd\"]},\"application/x-cfs-compressed\":{\"source\":\"apache\",\"extensions\":[\"cfs\"]},\"application/x-chat\":{\"source\":\"apache\",\"extensions\":[\"chat\"]},\"application/x-chess-pgn\":{\"source\":\"apache\",\"extensions\":[\"pgn\"]},\"application/x-chrome-extension\":{\"extensions\":[\"crx\"]},\"application/x-cocoa\":{\"source\":\"nginx\",\"extensions\":[\"cco\"]},\"application/x-compress\":{\"source\":\"apache\"},\"application/x-conference\":{\"source\":\"apache\",\"extensions\":[\"nsc\"]},\"application/x-cpio\":{\"source\":\"apache\",\"extensions\":[\"cpio\"]},\"application/x-csh\":{\"source\":\"apache\",\"extensions\":[\"csh\"]},\"application/x-deb\":{\"compressible\":false},\"application/x-debian-package\":{\"source\":\"apache\",\"extensions\":[\"deb\",\"udeb\"]},\"application/x-dgc-compressed\":{\"source\":\"apache\",\"extensions\":[\"dgc\"]},\"application/x-director\":{\"source\":\"apache\",\"extensions\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"]},\"application/x-doom\":{\"source\":\"apache\",\"extensions\":[\"wad\"]},\"application/x-dtbncx+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ncx\"]},\"application/x-dtbook+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"dtb\"]},\"application/x-dtbresource+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"res\"]},\"application/x-dvi\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"dvi\"]},\"application/x-envoy\":{\"source\":\"apache\",\"extensions\":[\"evy\"]},\"application/x-eva\":{\"source\":\"apache\",\"extensions\":[\"eva\"]},\"application/x-font-bdf\":{\"source\":\"apache\",\"extensions\":[\"bdf\"]},\"application/x-font-dos\":{\"source\":\"apache\"},\"application/x-font-framemaker\":{\"source\":\"apache\"},\"application/x-font-ghostscript\":{\"source\":\"apache\",\"extensions\":[\"gsf\"]},\"application/x-font-libgrx\":{\"source\":\"apache\"},\"application/x-font-linux-psf\":{\"source\":\"apache\",\"extensions\":[\"psf\"]},\"application/x-font-pcf\":{\"source\":\"apache\",\"extensions\":[\"pcf\"]},\"application/x-font-snf\":{\"source\":\"apache\",\"extensions\":[\"snf\"]},\"application/x-font-speedo\":{\"source\":\"apache\"},\"application/x-font-sunos-news\":{\"source\":\"apache\"},\"application/x-font-type1\":{\"source\":\"apache\",\"extensions\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"]},\"application/x-font-vfont\":{\"source\":\"apache\"},\"application/x-freearc\":{\"source\":\"apache\",\"extensions\":[\"arc\"]},\"application/x-futuresplash\":{\"source\":\"apache\",\"extensions\":[\"spl\"]},\"application/x-gca-compressed\":{\"source\":\"apache\",\"extensions\":[\"gca\"]},\"application/x-glulx\":{\"source\":\"apache\",\"extensions\":[\"ulx\"]},\"application/x-gnumeric\":{\"source\":\"apache\",\"extensions\":[\"gnumeric\"]},\"application/x-gramps-xml\":{\"source\":\"apache\",\"extensions\":[\"gramps\"]},\"application/x-gtar\":{\"source\":\"apache\",\"extensions\":[\"gtar\"]},\"application/x-gzip\":{\"source\":\"apache\"},\"application/x-hdf\":{\"source\":\"apache\",\"extensions\":[\"hdf\"]},\"application/x-httpd-php\":{\"compressible\":true,\"extensions\":[\"php\"]},\"application/x-install-instructions\":{\"source\":\"apache\",\"extensions\":[\"install\"]},\"application/x-iso9660-image\":{\"source\":\"apache\",\"extensions\":[\"iso\"]},\"application/x-iwork-keynote-sffkey\":{\"extensions\":[\"key\"]},\"application/x-iwork-numbers-sffnumbers\":{\"extensions\":[\"numbers\"]},\"application/x-iwork-pages-sffpages\":{\"extensions\":[\"pages\"]},\"application/x-java-archive-diff\":{\"source\":\"nginx\",\"extensions\":[\"jardiff\"]},\"application/x-java-jnlp-file\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"jnlp\"]},\"application/x-javascript\":{\"compressible\":true},\"application/x-keepass2\":{\"extensions\":[\"kdbx\"]},\"application/x-latex\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"latex\"]},\"application/x-lua-bytecode\":{\"extensions\":[\"luac\"]},\"application/x-lzh-compressed\":{\"source\":\"apache\",\"extensions\":[\"lzh\",\"lha\"]},\"application/x-makeself\":{\"source\":\"nginx\",\"extensions\":[\"run\"]},\"application/x-mie\":{\"source\":\"apache\",\"extensions\":[\"mie\"]},\"application/x-mobipocket-ebook\":{\"source\":\"apache\",\"extensions\":[\"prc\",\"mobi\"]},\"application/x-mpegurl\":{\"compressible\":false},\"application/x-ms-application\":{\"source\":\"apache\",\"extensions\":[\"application\"]},\"application/x-ms-shortcut\":{\"source\":\"apache\",\"extensions\":[\"lnk\"]},\"application/x-ms-wmd\":{\"source\":\"apache\",\"extensions\":[\"wmd\"]},\"application/x-ms-wmz\":{\"source\":\"apache\",\"extensions\":[\"wmz\"]},\"application/x-ms-xbap\":{\"source\":\"apache\",\"extensions\":[\"xbap\"]},\"application/x-msaccess\":{\"source\":\"apache\",\"extensions\":[\"mdb\"]},\"application/x-msbinder\":{\"source\":\"apache\",\"extensions\":[\"obd\"]},\"application/x-mscardfile\":{\"source\":\"apache\",\"extensions\":[\"crd\"]},\"application/x-msclip\":{\"source\":\"apache\",\"extensions\":[\"clp\"]},\"application/x-msdos-program\":{\"extensions\":[\"exe\"]},\"application/x-msdownload\":{\"source\":\"apache\",\"extensions\":[\"exe\",\"dll\",\"com\",\"bat\",\"msi\"]},\"application/x-msmediaview\":{\"source\":\"apache\",\"extensions\":[\"mvb\",\"m13\",\"m14\"]},\"application/x-msmetafile\":{\"source\":\"apache\",\"extensions\":[\"wmf\",\"wmz\",\"emf\",\"emz\"]},\"application/x-msmoney\":{\"source\":\"apache\",\"extensions\":[\"mny\"]},\"application/x-mspublisher\":{\"source\":\"apache\",\"extensions\":[\"pub\"]},\"application/x-msschedule\":{\"source\":\"apache\",\"extensions\":[\"scd\"]},\"application/x-msterminal\":{\"source\":\"apache\",\"extensions\":[\"trm\"]},\"application/x-mswrite\":{\"source\":\"apache\",\"extensions\":[\"wri\"]},\"application/x-netcdf\":{\"source\":\"apache\",\"extensions\":[\"nc\",\"cdf\"]},\"application/x-ns-proxy-autoconfig\":{\"compressible\":true,\"extensions\":[\"pac\"]},\"application/x-nzb\":{\"source\":\"apache\",\"extensions\":[\"nzb\"]},\"application/x-perl\":{\"source\":\"nginx\",\"extensions\":[\"pl\",\"pm\"]},\"application/x-pilot\":{\"source\":\"nginx\",\"extensions\":[\"prc\",\"pdb\"]},\"application/x-pkcs12\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"p12\",\"pfx\"]},\"application/x-pkcs7-certificates\":{\"source\":\"apache\",\"extensions\":[\"p7b\",\"spc\"]},\"application/x-pkcs7-certreqresp\":{\"source\":\"apache\",\"extensions\":[\"p7r\"]},\"application/x-pki-message\":{\"source\":\"iana\"},\"application/x-rar-compressed\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"rar\"]},\"application/x-redhat-package-manager\":{\"source\":\"nginx\",\"extensions\":[\"rpm\"]},\"application/x-research-info-systems\":{\"source\":\"apache\",\"extensions\":[\"ris\"]},\"application/x-sea\":{\"source\":\"nginx\",\"extensions\":[\"sea\"]},\"application/x-sh\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"sh\"]},\"application/x-shar\":{\"source\":\"apache\",\"extensions\":[\"shar\"]},\"application/x-shockwave-flash\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"swf\"]},\"application/x-silverlight-app\":{\"source\":\"apache\",\"extensions\":[\"xap\"]},\"application/x-sql\":{\"source\":\"apache\",\"extensions\":[\"sql\"]},\"application/x-stuffit\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"sit\"]},\"application/x-stuffitx\":{\"source\":\"apache\",\"extensions\":[\"sitx\"]},\"application/x-subrip\":{\"source\":\"apache\",\"extensions\":[\"srt\"]},\"application/x-sv4cpio\":{\"source\":\"apache\",\"extensions\":[\"sv4cpio\"]},\"application/x-sv4crc\":{\"source\":\"apache\",\"extensions\":[\"sv4crc\"]},\"application/x-t3vm-image\":{\"source\":\"apache\",\"extensions\":[\"t3\"]},\"application/x-tads\":{\"source\":\"apache\",\"extensions\":[\"gam\"]},\"application/x-tar\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"tar\"]},\"application/x-tcl\":{\"source\":\"apache\",\"extensions\":[\"tcl\",\"tk\"]},\"application/x-tex\":{\"source\":\"apache\",\"extensions\":[\"tex\"]},\"application/x-tex-tfm\":{\"source\":\"apache\",\"extensions\":[\"tfm\"]},\"application/x-texinfo\":{\"source\":\"apache\",\"extensions\":[\"texinfo\",\"texi\"]},\"application/x-tgif\":{\"source\":\"apache\",\"extensions\":[\"obj\"]},\"application/x-ustar\":{\"source\":\"apache\",\"extensions\":[\"ustar\"]},\"application/x-virtualbox-hdd\":{\"compressible\":true,\"extensions\":[\"hdd\"]},\"application/x-virtualbox-ova\":{\"compressible\":true,\"extensions\":[\"ova\"]},\"application/x-virtualbox-ovf\":{\"compressible\":true,\"extensions\":[\"ovf\"]},\"application/x-virtualbox-vbox\":{\"compressible\":true,\"extensions\":[\"vbox\"]},\"application/x-virtualbox-vbox-extpack\":{\"compressible\":false,\"extensions\":[\"vbox-extpack\"]},\"application/x-virtualbox-vdi\":{\"compressible\":true,\"extensions\":[\"vdi\"]},\"application/x-virtualbox-vhd\":{\"compressible\":true,\"extensions\":[\"vhd\"]},\"application/x-virtualbox-vmdk\":{\"compressible\":true,\"extensions\":[\"vmdk\"]},\"application/x-wais-source\":{\"source\":\"apache\",\"extensions\":[\"src\"]},\"application/x-web-app-manifest+json\":{\"compressible\":true,\"extensions\":[\"webapp\"]},\"application/x-www-form-urlencoded\":{\"source\":\"iana\",\"compressible\":true},\"application/x-x509-ca-cert\":{\"source\":\"iana\",\"extensions\":[\"der\",\"crt\",\"pem\"]},\"application/x-x509-ca-ra-cert\":{\"source\":\"iana\"},\"application/x-x509-next-ca-cert\":{\"source\":\"iana\"},\"application/x-xfig\":{\"source\":\"apache\",\"extensions\":[\"fig\"]},\"application/x-xliff+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xlf\"]},\"application/x-xpinstall\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"xpi\"]},\"application/x-xz\":{\"source\":\"apache\",\"extensions\":[\"xz\"]},\"application/x-zmachine\":{\"source\":\"apache\",\"extensions\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"]},\"application/x400-bp\":{\"source\":\"iana\"},\"application/xacml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xaml+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xaml\"]},\"application/xcap-att+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xav\"]},\"application/xcap-caps+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xca\"]},\"application/xcap-diff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdf\"]},\"application/xcap-el+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xel\"]},\"application/xcap-error+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xcap-ns+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xns\"]},\"application/xcon-conference-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xcon-conference-info-diff+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xenc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xenc\"]},\"application/xhtml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xhtml\",\"xht\"]},\"application/xhtml-voice+xml\":{\"source\":\"apache\",\"compressible\":true},\"application/xliff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xlf\"]},\"application/xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xml\",\"xsl\",\"xsd\",\"rng\"]},\"application/xml-dtd\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dtd\"]},\"application/xml-external-parsed-entity\":{\"source\":\"iana\"},\"application/xml-patch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xmpp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xop+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xop\"]},\"application/xproc+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xpl\"]},\"application/xslt+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xsl\",\"xslt\"]},\"application/xspf+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xspf\"]},\"application/xv+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"]},\"application/yang\":{\"source\":\"iana\",\"extensions\":[\"yang\"]},\"application/yang-data+json\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-data+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-patch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/yin+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"yin\"]},\"application/zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"zip\"]},\"application/zlib\":{\"source\":\"iana\"},\"application/zstd\":{\"source\":\"iana\"},\"audio/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"audio/32kadpcm\":{\"source\":\"iana\"},\"audio/3gpp\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"3gpp\"]},\"audio/3gpp2\":{\"source\":\"iana\"},\"audio/aac\":{\"source\":\"iana\"},\"audio/ac3\":{\"source\":\"iana\"},\"audio/adpcm\":{\"source\":\"apache\",\"extensions\":[\"adp\"]},\"audio/amr\":{\"source\":\"iana\",\"extensions\":[\"amr\"]},\"audio/amr-wb\":{\"source\":\"iana\"},\"audio/amr-wb+\":{\"source\":\"iana\"},\"audio/aptx\":{\"source\":\"iana\"},\"audio/asc\":{\"source\":\"iana\"},\"audio/atrac-advanced-lossless\":{\"source\":\"iana\"},\"audio/atrac-x\":{\"source\":\"iana\"},\"audio/atrac3\":{\"source\":\"iana\"},\"audio/basic\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"au\",\"snd\"]},\"audio/bv16\":{\"source\":\"iana\"},\"audio/bv32\":{\"source\":\"iana\"},\"audio/clearmode\":{\"source\":\"iana\"},\"audio/cn\":{\"source\":\"iana\"},\"audio/dat12\":{\"source\":\"iana\"},\"audio/dls\":{\"source\":\"iana\"},\"audio/dsr-es201108\":{\"source\":\"iana\"},\"audio/dsr-es202050\":{\"source\":\"iana\"},\"audio/dsr-es202211\":{\"source\":\"iana\"},\"audio/dsr-es202212\":{\"source\":\"iana\"},\"audio/dv\":{\"source\":\"iana\"},\"audio/dvi4\":{\"source\":\"iana\"},\"audio/eac3\":{\"source\":\"iana\"},\"audio/encaprtp\":{\"source\":\"iana\"},\"audio/evrc\":{\"source\":\"iana\"},\"audio/evrc-qcp\":{\"source\":\"iana\"},\"audio/evrc0\":{\"source\":\"iana\"},\"audio/evrc1\":{\"source\":\"iana\"},\"audio/evrcb\":{\"source\":\"iana\"},\"audio/evrcb0\":{\"source\":\"iana\"},\"audio/evrcb1\":{\"source\":\"iana\"},\"audio/evrcnw\":{\"source\":\"iana\"},\"audio/evrcnw0\":{\"source\":\"iana\"},\"audio/evrcnw1\":{\"source\":\"iana\"},\"audio/evrcwb\":{\"source\":\"iana\"},\"audio/evrcwb0\":{\"source\":\"iana\"},\"audio/evrcwb1\":{\"source\":\"iana\"},\"audio/evs\":{\"source\":\"iana\"},\"audio/flexfec\":{\"source\":\"iana\"},\"audio/fwdred\":{\"source\":\"iana\"},\"audio/g711-0\":{\"source\":\"iana\"},\"audio/g719\":{\"source\":\"iana\"},\"audio/g722\":{\"source\":\"iana\"},\"audio/g7221\":{\"source\":\"iana\"},\"audio/g723\":{\"source\":\"iana\"},\"audio/g726-16\":{\"source\":\"iana\"},\"audio/g726-24\":{\"source\":\"iana\"},\"audio/g726-32\":{\"source\":\"iana\"},\"audio/g726-40\":{\"source\":\"iana\"},\"audio/g728\":{\"source\":\"iana\"},\"audio/g729\":{\"source\":\"iana\"},\"audio/g7291\":{\"source\":\"iana\"},\"audio/g729d\":{\"source\":\"iana\"},\"audio/g729e\":{\"source\":\"iana\"},\"audio/gsm\":{\"source\":\"iana\"},\"audio/gsm-efr\":{\"source\":\"iana\"},\"audio/gsm-hr-08\":{\"source\":\"iana\"},\"audio/ilbc\":{\"source\":\"iana\"},\"audio/ip-mr_v2.5\":{\"source\":\"iana\"},\"audio/isac\":{\"source\":\"apache\"},\"audio/l16\":{\"source\":\"iana\"},\"audio/l20\":{\"source\":\"iana\"},\"audio/l24\":{\"source\":\"iana\",\"compressible\":false},\"audio/l8\":{\"source\":\"iana\"},\"audio/lpc\":{\"source\":\"iana\"},\"audio/melp\":{\"source\":\"iana\"},\"audio/melp1200\":{\"source\":\"iana\"},\"audio/melp2400\":{\"source\":\"iana\"},\"audio/melp600\":{\"source\":\"iana\"},\"audio/mhas\":{\"source\":\"iana\"},\"audio/midi\":{\"source\":\"apache\",\"extensions\":[\"mid\",\"midi\",\"kar\",\"rmi\"]},\"audio/mobile-xmf\":{\"source\":\"iana\",\"extensions\":[\"mxmf\"]},\"audio/mp3\":{\"compressible\":false,\"extensions\":[\"mp3\"]},\"audio/mp4\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"m4a\",\"mp4a\"]},\"audio/mp4a-latm\":{\"source\":\"iana\"},\"audio/mpa\":{\"source\":\"iana\"},\"audio/mpa-robust\":{\"source\":\"iana\"},\"audio/mpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"]},\"audio/mpeg4-generic\":{\"source\":\"iana\"},\"audio/musepack\":{\"source\":\"apache\"},\"audio/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"oga\",\"ogg\",\"spx\",\"opus\"]},\"audio/opus\":{\"source\":\"iana\"},\"audio/parityfec\":{\"source\":\"iana\"},\"audio/pcma\":{\"source\":\"iana\"},\"audio/pcma-wb\":{\"source\":\"iana\"},\"audio/pcmu\":{\"source\":\"iana\"},\"audio/pcmu-wb\":{\"source\":\"iana\"},\"audio/prs.sid\":{\"source\":\"iana\"},\"audio/qcelp\":{\"source\":\"iana\"},\"audio/raptorfec\":{\"source\":\"iana\"},\"audio/red\":{\"source\":\"iana\"},\"audio/rtp-enc-aescm128\":{\"source\":\"iana\"},\"audio/rtp-midi\":{\"source\":\"iana\"},\"audio/rtploopback\":{\"source\":\"iana\"},\"audio/rtx\":{\"source\":\"iana\"},\"audio/s3m\":{\"source\":\"apache\",\"extensions\":[\"s3m\"]},\"audio/scip\":{\"source\":\"iana\"},\"audio/silk\":{\"source\":\"apache\",\"extensions\":[\"sil\"]},\"audio/smv\":{\"source\":\"iana\"},\"audio/smv-qcp\":{\"source\":\"iana\"},\"audio/smv0\":{\"source\":\"iana\"},\"audio/sofa\":{\"source\":\"iana\"},\"audio/sp-midi\":{\"source\":\"iana\"},\"audio/speex\":{\"source\":\"iana\"},\"audio/t140c\":{\"source\":\"iana\"},\"audio/t38\":{\"source\":\"iana\"},\"audio/telephone-event\":{\"source\":\"iana\"},\"audio/tetra_acelp\":{\"source\":\"iana\"},\"audio/tetra_acelp_bb\":{\"source\":\"iana\"},\"audio/tone\":{\"source\":\"iana\"},\"audio/tsvcis\":{\"source\":\"iana\"},\"audio/uemclip\":{\"source\":\"iana\"},\"audio/ulpfec\":{\"source\":\"iana\"},\"audio/usac\":{\"source\":\"iana\"},\"audio/vdvi\":{\"source\":\"iana\"},\"audio/vmr-wb\":{\"source\":\"iana\"},\"audio/vnd.3gpp.iufp\":{\"source\":\"iana\"},\"audio/vnd.4sb\":{\"source\":\"iana\"},\"audio/vnd.audiokoz\":{\"source\":\"iana\"},\"audio/vnd.celp\":{\"source\":\"iana\"},\"audio/vnd.cisco.nse\":{\"source\":\"iana\"},\"audio/vnd.cmles.radio-events\":{\"source\":\"iana\"},\"audio/vnd.cns.anp1\":{\"source\":\"iana\"},\"audio/vnd.cns.inf1\":{\"source\":\"iana\"},\"audio/vnd.dece.audio\":{\"source\":\"iana\",\"extensions\":[\"uva\",\"uvva\"]},\"audio/vnd.digital-winds\":{\"source\":\"iana\",\"extensions\":[\"eol\"]},\"audio/vnd.dlna.adts\":{\"source\":\"iana\"},\"audio/vnd.dolby.heaac.1\":{\"source\":\"iana\"},\"audio/vnd.dolby.heaac.2\":{\"source\":\"iana\"},\"audio/vnd.dolby.mlp\":{\"source\":\"iana\"},\"audio/vnd.dolby.mps\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2x\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2z\":{\"source\":\"iana\"},\"audio/vnd.dolby.pulse.1\":{\"source\":\"iana\"},\"audio/vnd.dra\":{\"source\":\"iana\",\"extensions\":[\"dra\"]},\"audio/vnd.dts\":{\"source\":\"iana\",\"extensions\":[\"dts\"]},\"audio/vnd.dts.hd\":{\"source\":\"iana\",\"extensions\":[\"dtshd\"]},\"audio/vnd.dts.uhd\":{\"source\":\"iana\"},\"audio/vnd.dvb.file\":{\"source\":\"iana\"},\"audio/vnd.everad.plj\":{\"source\":\"iana\"},\"audio/vnd.hns.audio\":{\"source\":\"iana\"},\"audio/vnd.lucent.voice\":{\"source\":\"iana\",\"extensions\":[\"lvp\"]},\"audio/vnd.ms-playready.media.pya\":{\"source\":\"iana\",\"extensions\":[\"pya\"]},\"audio/vnd.nokia.mobile-xmf\":{\"source\":\"iana\"},\"audio/vnd.nortel.vbk\":{\"source\":\"iana\"},\"audio/vnd.nuera.ecelp4800\":{\"source\":\"iana\",\"extensions\":[\"ecelp4800\"]},\"audio/vnd.nuera.ecelp7470\":{\"source\":\"iana\",\"extensions\":[\"ecelp7470\"]},\"audio/vnd.nuera.ecelp9600\":{\"source\":\"iana\",\"extensions\":[\"ecelp9600\"]},\"audio/vnd.octel.sbc\":{\"source\":\"iana\"},\"audio/vnd.presonus.multitrack\":{\"source\":\"iana\"},\"audio/vnd.qcelp\":{\"source\":\"iana\"},\"audio/vnd.rhetorex.32kadpcm\":{\"source\":\"iana\"},\"audio/vnd.rip\":{\"source\":\"iana\",\"extensions\":[\"rip\"]},\"audio/vnd.rn-realaudio\":{\"compressible\":false},\"audio/vnd.sealedmedia.softseal.mpeg\":{\"source\":\"iana\"},\"audio/vnd.vmx.cvsd\":{\"source\":\"iana\"},\"audio/vnd.wave\":{\"compressible\":false},\"audio/vorbis\":{\"source\":\"iana\",\"compressible\":false},\"audio/vorbis-config\":{\"source\":\"iana\"},\"audio/wav\":{\"compressible\":false,\"extensions\":[\"wav\"]},\"audio/wave\":{\"compressible\":false,\"extensions\":[\"wav\"]},\"audio/webm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"weba\"]},\"audio/x-aac\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"aac\"]},\"audio/x-aiff\":{\"source\":\"apache\",\"extensions\":[\"aif\",\"aiff\",\"aifc\"]},\"audio/x-caf\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"caf\"]},\"audio/x-flac\":{\"source\":\"apache\",\"extensions\":[\"flac\"]},\"audio/x-m4a\":{\"source\":\"nginx\",\"extensions\":[\"m4a\"]},\"audio/x-matroska\":{\"source\":\"apache\",\"extensions\":[\"mka\"]},\"audio/x-mpegurl\":{\"source\":\"apache\",\"extensions\":[\"m3u\"]},\"audio/x-ms-wax\":{\"source\":\"apache\",\"extensions\":[\"wax\"]},\"audio/x-ms-wma\":{\"source\":\"apache\",\"extensions\":[\"wma\"]},\"audio/x-pn-realaudio\":{\"source\":\"apache\",\"extensions\":[\"ram\",\"ra\"]},\"audio/x-pn-realaudio-plugin\":{\"source\":\"apache\",\"extensions\":[\"rmp\"]},\"audio/x-realaudio\":{\"source\":\"nginx\",\"extensions\":[\"ra\"]},\"audio/x-tta\":{\"source\":\"apache\"},\"audio/x-wav\":{\"source\":\"apache\",\"extensions\":[\"wav\"]},\"audio/xm\":{\"source\":\"apache\",\"extensions\":[\"xm\"]},\"chemical/x-cdx\":{\"source\":\"apache\",\"extensions\":[\"cdx\"]},\"chemical/x-cif\":{\"source\":\"apache\",\"extensions\":[\"cif\"]},\"chemical/x-cmdf\":{\"source\":\"apache\",\"extensions\":[\"cmdf\"]},\"chemical/x-cml\":{\"source\":\"apache\",\"extensions\":[\"cml\"]},\"chemical/x-csml\":{\"source\":\"apache\",\"extensions\":[\"csml\"]},\"chemical/x-pdb\":{\"source\":\"apache\"},\"chemical/x-xyz\":{\"source\":\"apache\",\"extensions\":[\"xyz\"]},\"font/collection\":{\"source\":\"iana\",\"extensions\":[\"ttc\"]},\"font/otf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"otf\"]},\"font/sfnt\":{\"source\":\"iana\"},\"font/ttf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ttf\"]},\"font/woff\":{\"source\":\"iana\",\"extensions\":[\"woff\"]},\"font/woff2\":{\"source\":\"iana\",\"extensions\":[\"woff2\"]},\"image/aces\":{\"source\":\"iana\",\"extensions\":[\"exr\"]},\"image/apng\":{\"compressible\":false,\"extensions\":[\"apng\"]},\"image/avci\":{\"source\":\"iana\"},\"image/avcs\":{\"source\":\"iana\"},\"image/avif\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"avif\"]},\"image/bmp\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"bmp\"]},\"image/cgm\":{\"source\":\"iana\",\"extensions\":[\"cgm\"]},\"image/dicom-rle\":{\"source\":\"iana\",\"extensions\":[\"drle\"]},\"image/emf\":{\"source\":\"iana\",\"extensions\":[\"emf\"]},\"image/fits\":{\"source\":\"iana\",\"extensions\":[\"fits\"]},\"image/g3fax\":{\"source\":\"iana\",\"extensions\":[\"g3\"]},\"image/gif\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"gif\"]},\"image/heic\":{\"source\":\"iana\",\"extensions\":[\"heic\"]},\"image/heic-sequence\":{\"source\":\"iana\",\"extensions\":[\"heics\"]},\"image/heif\":{\"source\":\"iana\",\"extensions\":[\"heif\"]},\"image/heif-sequence\":{\"source\":\"iana\",\"extensions\":[\"heifs\"]},\"image/hej2k\":{\"source\":\"iana\",\"extensions\":[\"hej2\"]},\"image/hsj2\":{\"source\":\"iana\",\"extensions\":[\"hsj2\"]},\"image/ief\":{\"source\":\"iana\",\"extensions\":[\"ief\"]},\"image/jls\":{\"source\":\"iana\",\"extensions\":[\"jls\"]},\"image/jp2\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jp2\",\"jpg2\"]},\"image/jpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpeg\",\"jpg\",\"jpe\"]},\"image/jph\":{\"source\":\"iana\",\"extensions\":[\"jph\"]},\"image/jphc\":{\"source\":\"iana\",\"extensions\":[\"jhc\"]},\"image/jpm\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpm\"]},\"image/jpx\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpx\",\"jpf\"]},\"image/jxr\":{\"source\":\"iana\",\"extensions\":[\"jxr\"]},\"image/jxra\":{\"source\":\"iana\",\"extensions\":[\"jxra\"]},\"image/jxrs\":{\"source\":\"iana\",\"extensions\":[\"jxrs\"]},\"image/jxs\":{\"source\":\"iana\",\"extensions\":[\"jxs\"]},\"image/jxsc\":{\"source\":\"iana\",\"extensions\":[\"jxsc\"]},\"image/jxsi\":{\"source\":\"iana\",\"extensions\":[\"jxsi\"]},\"image/jxss\":{\"source\":\"iana\",\"extensions\":[\"jxss\"]},\"image/ktx\":{\"source\":\"iana\",\"extensions\":[\"ktx\"]},\"image/ktx2\":{\"source\":\"iana\",\"extensions\":[\"ktx2\"]},\"image/naplps\":{\"source\":\"iana\"},\"image/pjpeg\":{\"compressible\":false},\"image/png\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"png\"]},\"image/prs.btif\":{\"source\":\"iana\",\"extensions\":[\"btif\"]},\"image/prs.pti\":{\"source\":\"iana\",\"extensions\":[\"pti\"]},\"image/pwg-raster\":{\"source\":\"iana\"},\"image/sgi\":{\"source\":\"apache\",\"extensions\":[\"sgi\"]},\"image/svg+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"svg\",\"svgz\"]},\"image/t38\":{\"source\":\"iana\",\"extensions\":[\"t38\"]},\"image/tiff\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"tif\",\"tiff\"]},\"image/tiff-fx\":{\"source\":\"iana\",\"extensions\":[\"tfx\"]},\"image/vnd.adobe.photoshop\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"psd\"]},\"image/vnd.airzip.accelerator.azv\":{\"source\":\"iana\",\"extensions\":[\"azv\"]},\"image/vnd.cns.inf2\":{\"source\":\"iana\"},\"image/vnd.dece.graphic\":{\"source\":\"iana\",\"extensions\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"]},\"image/vnd.djvu\":{\"source\":\"iana\",\"extensions\":[\"djvu\",\"djv\"]},\"image/vnd.dvb.subtitle\":{\"source\":\"iana\",\"extensions\":[\"sub\"]},\"image/vnd.dwg\":{\"source\":\"iana\",\"extensions\":[\"dwg\"]},\"image/vnd.dxf\":{\"source\":\"iana\",\"extensions\":[\"dxf\"]},\"image/vnd.fastbidsheet\":{\"source\":\"iana\",\"extensions\":[\"fbs\"]},\"image/vnd.fpx\":{\"source\":\"iana\",\"extensions\":[\"fpx\"]},\"image/vnd.fst\":{\"source\":\"iana\",\"extensions\":[\"fst\"]},\"image/vnd.fujixerox.edmics-mmr\":{\"source\":\"iana\",\"extensions\":[\"mmr\"]},\"image/vnd.fujixerox.edmics-rlc\":{\"source\":\"iana\",\"extensions\":[\"rlc\"]},\"image/vnd.globalgraphics.pgb\":{\"source\":\"iana\"},\"image/vnd.microsoft.icon\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ico\"]},\"image/vnd.mix\":{\"source\":\"iana\"},\"image/vnd.mozilla.apng\":{\"source\":\"iana\"},\"image/vnd.ms-dds\":{\"compressible\":true,\"extensions\":[\"dds\"]},\"image/vnd.ms-modi\":{\"source\":\"iana\",\"extensions\":[\"mdi\"]},\"image/vnd.ms-photo\":{\"source\":\"apache\",\"extensions\":[\"wdp\"]},\"image/vnd.net-fpx\":{\"source\":\"iana\",\"extensions\":[\"npx\"]},\"image/vnd.pco.b16\":{\"source\":\"iana\",\"extensions\":[\"b16\"]},\"image/vnd.radiance\":{\"source\":\"iana\"},\"image/vnd.sealed.png\":{\"source\":\"iana\"},\"image/vnd.sealedmedia.softseal.gif\":{\"source\":\"iana\"},\"image/vnd.sealedmedia.softseal.jpg\":{\"source\":\"iana\"},\"image/vnd.svf\":{\"source\":\"iana\"},\"image/vnd.tencent.tap\":{\"source\":\"iana\",\"extensions\":[\"tap\"]},\"image/vnd.valve.source.texture\":{\"source\":\"iana\",\"extensions\":[\"vtf\"]},\"image/vnd.wap.wbmp\":{\"source\":\"iana\",\"extensions\":[\"wbmp\"]},\"image/vnd.xiff\":{\"source\":\"iana\",\"extensions\":[\"xif\"]},\"image/vnd.zbrush.pcx\":{\"source\":\"iana\",\"extensions\":[\"pcx\"]},\"image/webp\":{\"source\":\"apache\",\"extensions\":[\"webp\"]},\"image/wmf\":{\"source\":\"iana\",\"extensions\":[\"wmf\"]},\"image/x-3ds\":{\"source\":\"apache\",\"extensions\":[\"3ds\"]},\"image/x-cmu-raster\":{\"source\":\"apache\",\"extensions\":[\"ras\"]},\"image/x-cmx\":{\"source\":\"apache\",\"extensions\":[\"cmx\"]},\"image/x-freehand\":{\"source\":\"apache\",\"extensions\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"]},\"image/x-icon\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ico\"]},\"image/x-jng\":{\"source\":\"nginx\",\"extensions\":[\"jng\"]},\"image/x-mrsid-image\":{\"source\":\"apache\",\"extensions\":[\"sid\"]},\"image/x-ms-bmp\":{\"source\":\"nginx\",\"compressible\":true,\"extensions\":[\"bmp\"]},\"image/x-pcx\":{\"source\":\"apache\",\"extensions\":[\"pcx\"]},\"image/x-pict\":{\"source\":\"apache\",\"extensions\":[\"pic\",\"pct\"]},\"image/x-portable-anymap\":{\"source\":\"apache\",\"extensions\":[\"pnm\"]},\"image/x-portable-bitmap\":{\"source\":\"apache\",\"extensions\":[\"pbm\"]},\"image/x-portable-graymap\":{\"source\":\"apache\",\"extensions\":[\"pgm\"]},\"image/x-portable-pixmap\":{\"source\":\"apache\",\"extensions\":[\"ppm\"]},\"image/x-rgb\":{\"source\":\"apache\",\"extensions\":[\"rgb\"]},\"image/x-tga\":{\"source\":\"apache\",\"extensions\":[\"tga\"]},\"image/x-xbitmap\":{\"source\":\"apache\",\"extensions\":[\"xbm\"]},\"image/x-xcf\":{\"compressible\":false},\"image/x-xpixmap\":{\"source\":\"apache\",\"extensions\":[\"xpm\"]},\"image/x-xwindowdump\":{\"source\":\"apache\",\"extensions\":[\"xwd\"]},\"message/cpim\":{\"source\":\"iana\"},\"message/delivery-status\":{\"source\":\"iana\"},\"message/disposition-notification\":{\"source\":\"iana\",\"extensions\":[\"disposition-notification\"]},\"message/external-body\":{\"source\":\"iana\"},\"message/feedback-report\":{\"source\":\"iana\"},\"message/global\":{\"source\":\"iana\",\"extensions\":[\"u8msg\"]},\"message/global-delivery-status\":{\"source\":\"iana\",\"extensions\":[\"u8dsn\"]},\"message/global-disposition-notification\":{\"source\":\"iana\",\"extensions\":[\"u8mdn\"]},\"message/global-headers\":{\"source\":\"iana\",\"extensions\":[\"u8hdr\"]},\"message/http\":{\"source\":\"iana\",\"compressible\":false},\"message/imdn+xml\":{\"source\":\"iana\",\"compressible\":true},\"message/news\":{\"source\":\"iana\"},\"message/partial\":{\"source\":\"iana\",\"compressible\":false},\"message/rfc822\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"eml\",\"mime\"]},\"message/s-http\":{\"source\":\"iana\"},\"message/sip\":{\"source\":\"iana\"},\"message/sipfrag\":{\"source\":\"iana\"},\"message/tracking-status\":{\"source\":\"iana\"},\"message/vnd.si.simp\":{\"source\":\"iana\"},\"message/vnd.wfa.wsc\":{\"source\":\"iana\",\"extensions\":[\"wsc\"]},\"model/3mf\":{\"source\":\"iana\",\"extensions\":[\"3mf\"]},\"model/e57\":{\"source\":\"iana\"},\"model/gltf+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"gltf\"]},\"model/gltf-binary\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"glb\"]},\"model/iges\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"igs\",\"iges\"]},\"model/mesh\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"msh\",\"mesh\",\"silo\"]},\"model/mtl\":{\"source\":\"iana\",\"extensions\":[\"mtl\"]},\"model/obj\":{\"source\":\"iana\",\"extensions\":[\"obj\"]},\"model/step\":{\"source\":\"iana\"},\"model/step+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"stpx\"]},\"model/step+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"stpz\"]},\"model/step-xml+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"stpxz\"]},\"model/stl\":{\"source\":\"iana\",\"extensions\":[\"stl\"]},\"model/vnd.collada+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dae\"]},\"model/vnd.dwf\":{\"source\":\"iana\",\"extensions\":[\"dwf\"]},\"model/vnd.flatland.3dml\":{\"source\":\"iana\"},\"model/vnd.gdl\":{\"source\":\"iana\",\"extensions\":[\"gdl\"]},\"model/vnd.gs-gdl\":{\"source\":\"apache\"},\"model/vnd.gs.gdl\":{\"source\":\"iana\"},\"model/vnd.gtw\":{\"source\":\"iana\",\"extensions\":[\"gtw\"]},\"model/vnd.moml+xml\":{\"source\":\"iana\",\"compressible\":true},\"model/vnd.mts\":{\"source\":\"iana\",\"extensions\":[\"mts\"]},\"model/vnd.opengex\":{\"source\":\"iana\",\"extensions\":[\"ogex\"]},\"model/vnd.parasolid.transmit.binary\":{\"source\":\"iana\",\"extensions\":[\"x_b\"]},\"model/vnd.parasolid.transmit.text\":{\"source\":\"iana\",\"extensions\":[\"x_t\"]},\"model/vnd.pytha.pyox\":{\"source\":\"iana\"},\"model/vnd.rosette.annotated-data-model\":{\"source\":\"iana\"},\"model/vnd.sap.vds\":{\"source\":\"iana\",\"extensions\":[\"vds\"]},\"model/vnd.usdz+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"usdz\"]},\"model/vnd.valve.source.compiled-map\":{\"source\":\"iana\",\"extensions\":[\"bsp\"]},\"model/vnd.vtu\":{\"source\":\"iana\",\"extensions\":[\"vtu\"]},\"model/vrml\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"wrl\",\"vrml\"]},\"model/x3d+binary\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"x3db\",\"x3dbz\"]},\"model/x3d+fastinfoset\":{\"source\":\"iana\",\"extensions\":[\"x3db\"]},\"model/x3d+vrml\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"x3dv\",\"x3dvz\"]},\"model/x3d+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"x3d\",\"x3dz\"]},\"model/x3d-vrml\":{\"source\":\"iana\",\"extensions\":[\"x3dv\"]},\"multipart/alternative\":{\"source\":\"iana\",\"compressible\":false},\"multipart/appledouble\":{\"source\":\"iana\"},\"multipart/byteranges\":{\"source\":\"iana\"},\"multipart/digest\":{\"source\":\"iana\"},\"multipart/encrypted\":{\"source\":\"iana\",\"compressible\":false},\"multipart/form-data\":{\"source\":\"iana\",\"compressible\":false},\"multipart/header-set\":{\"source\":\"iana\"},\"multipart/mixed\":{\"source\":\"iana\"},\"multipart/multilingual\":{\"source\":\"iana\"},\"multipart/parallel\":{\"source\":\"iana\"},\"multipart/related\":{\"source\":\"iana\",\"compressible\":false},\"multipart/report\":{\"source\":\"iana\"},\"multipart/signed\":{\"source\":\"iana\",\"compressible\":false},\"multipart/vnd.bint.med-plus\":{\"source\":\"iana\"},\"multipart/voice-message\":{\"source\":\"iana\"},\"multipart/x-mixed-replace\":{\"source\":\"iana\"},\"text/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"text/cache-manifest\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"appcache\",\"manifest\"]},\"text/calendar\":{\"source\":\"iana\",\"extensions\":[\"ics\",\"ifb\"]},\"text/calender\":{\"compressible\":true},\"text/cmd\":{\"compressible\":true},\"text/coffeescript\":{\"extensions\":[\"coffee\",\"litcoffee\"]},\"text/cql\":{\"source\":\"iana\"},\"text/cql-expression\":{\"source\":\"iana\"},\"text/cql-identifier\":{\"source\":\"iana\"},\"text/css\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"css\"]},\"text/csv\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"csv\"]},\"text/csv-schema\":{\"source\":\"iana\"},\"text/directory\":{\"source\":\"iana\"},\"text/dns\":{\"source\":\"iana\"},\"text/ecmascript\":{\"source\":\"iana\"},\"text/encaprtp\":{\"source\":\"iana\"},\"text/enriched\":{\"source\":\"iana\"},\"text/fhirpath\":{\"source\":\"iana\"},\"text/flexfec\":{\"source\":\"iana\"},\"text/fwdred\":{\"source\":\"iana\"},\"text/gff3\":{\"source\":\"iana\"},\"text/grammar-ref-list\":{\"source\":\"iana\"},\"text/html\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"html\",\"htm\",\"shtml\"]},\"text/jade\":{\"extensions\":[\"jade\"]},\"text/javascript\":{\"source\":\"iana\",\"compressible\":true},\"text/jcr-cnd\":{\"source\":\"iana\"},\"text/jsx\":{\"compressible\":true,\"extensions\":[\"jsx\"]},\"text/less\":{\"compressible\":true,\"extensions\":[\"less\"]},\"text/markdown\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"markdown\",\"md\"]},\"text/mathml\":{\"source\":\"nginx\",\"extensions\":[\"mml\"]},\"text/mdx\":{\"compressible\":true,\"extensions\":[\"mdx\"]},\"text/mizar\":{\"source\":\"iana\"},\"text/n3\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"n3\"]},\"text/parameters\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/parityfec\":{\"source\":\"iana\"},\"text/plain\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"]},\"text/provenance-notation\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/prs.fallenstein.rst\":{\"source\":\"iana\"},\"text/prs.lines.tag\":{\"source\":\"iana\",\"extensions\":[\"dsc\"]},\"text/prs.prop.logic\":{\"source\":\"iana\"},\"text/raptorfec\":{\"source\":\"iana\"},\"text/red\":{\"source\":\"iana\"},\"text/rfc822-headers\":{\"source\":\"iana\"},\"text/richtext\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtx\"]},\"text/rtf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtf\"]},\"text/rtp-enc-aescm128\":{\"source\":\"iana\"},\"text/rtploopback\":{\"source\":\"iana\"},\"text/rtx\":{\"source\":\"iana\"},\"text/sgml\":{\"source\":\"iana\",\"extensions\":[\"sgml\",\"sgm\"]},\"text/shaclc\":{\"source\":\"iana\"},\"text/shex\":{\"source\":\"iana\",\"extensions\":[\"shex\"]},\"text/slim\":{\"extensions\":[\"slim\",\"slm\"]},\"text/spdx\":{\"source\":\"iana\",\"extensions\":[\"spdx\"]},\"text/strings\":{\"source\":\"iana\"},\"text/stylus\":{\"extensions\":[\"stylus\",\"styl\"]},\"text/t140\":{\"source\":\"iana\"},\"text/tab-separated-values\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tsv\"]},\"text/troff\":{\"source\":\"iana\",\"extensions\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"]},\"text/turtle\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"ttl\"]},\"text/ulpfec\":{\"source\":\"iana\"},\"text/uri-list\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uri\",\"uris\",\"urls\"]},\"text/vcard\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"vcard\"]},\"text/vnd.a\":{\"source\":\"iana\"},\"text/vnd.abc\":{\"source\":\"iana\"},\"text/vnd.ascii-art\":{\"source\":\"iana\"},\"text/vnd.curl\":{\"source\":\"iana\",\"extensions\":[\"curl\"]},\"text/vnd.curl.dcurl\":{\"source\":\"apache\",\"extensions\":[\"dcurl\"]},\"text/vnd.curl.mcurl\":{\"source\":\"apache\",\"extensions\":[\"mcurl\"]},\"text/vnd.curl.scurl\":{\"source\":\"apache\",\"extensions\":[\"scurl\"]},\"text/vnd.debian.copyright\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.dmclientscript\":{\"source\":\"iana\"},\"text/vnd.dvb.subtitle\":{\"source\":\"iana\",\"extensions\":[\"sub\"]},\"text/vnd.esmertec.theme-descriptor\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.familysearch.gedcom\":{\"source\":\"iana\",\"extensions\":[\"ged\"]},\"text/vnd.ficlab.flt\":{\"source\":\"iana\"},\"text/vnd.fly\":{\"source\":\"iana\",\"extensions\":[\"fly\"]},\"text/vnd.fmi.flexstor\":{\"source\":\"iana\",\"extensions\":[\"flx\"]},\"text/vnd.gml\":{\"source\":\"iana\"},\"text/vnd.graphviz\":{\"source\":\"iana\",\"extensions\":[\"gv\"]},\"text/vnd.hans\":{\"source\":\"iana\"},\"text/vnd.hgl\":{\"source\":\"iana\"},\"text/vnd.in3d.3dml\":{\"source\":\"iana\",\"extensions\":[\"3dml\"]},\"text/vnd.in3d.spot\":{\"source\":\"iana\",\"extensions\":[\"spot\"]},\"text/vnd.iptc.newsml\":{\"source\":\"iana\"},\"text/vnd.iptc.nitf\":{\"source\":\"iana\"},\"text/vnd.latex-z\":{\"source\":\"iana\"},\"text/vnd.motorola.reflex\":{\"source\":\"iana\"},\"text/vnd.ms-mediapackage\":{\"source\":\"iana\"},\"text/vnd.net2phone.commcenter.command\":{\"source\":\"iana\"},\"text/vnd.radisys.msml-basic-layout\":{\"source\":\"iana\"},\"text/vnd.senx.warpscript\":{\"source\":\"iana\"},\"text/vnd.si.uricatalogue\":{\"source\":\"iana\"},\"text/vnd.sosi\":{\"source\":\"iana\"},\"text/vnd.sun.j2me.app-descriptor\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"jad\"]},\"text/vnd.trolltech.linguist\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.wap.si\":{\"source\":\"iana\"},\"text/vnd.wap.sl\":{\"source\":\"iana\"},\"text/vnd.wap.wml\":{\"source\":\"iana\",\"extensions\":[\"wml\"]},\"text/vnd.wap.wmlscript\":{\"source\":\"iana\",\"extensions\":[\"wmls\"]},\"text/vtt\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"vtt\"]},\"text/x-asm\":{\"source\":\"apache\",\"extensions\":[\"s\",\"asm\"]},\"text/x-c\":{\"source\":\"apache\",\"extensions\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"]},\"text/x-component\":{\"source\":\"nginx\",\"extensions\":[\"htc\"]},\"text/x-fortran\":{\"source\":\"apache\",\"extensions\":[\"f\",\"for\",\"f77\",\"f90\"]},\"text/x-gwt-rpc\":{\"compressible\":true},\"text/x-handlebars-template\":{\"extensions\":[\"hbs\"]},\"text/x-java-source\":{\"source\":\"apache\",\"extensions\":[\"java\"]},\"text/x-jquery-tmpl\":{\"compressible\":true},\"text/x-lua\":{\"extensions\":[\"lua\"]},\"text/x-markdown\":{\"compressible\":true,\"extensions\":[\"mkd\"]},\"text/x-nfo\":{\"source\":\"apache\",\"extensions\":[\"nfo\"]},\"text/x-opml\":{\"source\":\"apache\",\"extensions\":[\"opml\"]},\"text/x-org\":{\"compressible\":true,\"extensions\":[\"org\"]},\"text/x-pascal\":{\"source\":\"apache\",\"extensions\":[\"p\",\"pas\"]},\"text/x-processing\":{\"compressible\":true,\"extensions\":[\"pde\"]},\"text/x-sass\":{\"extensions\":[\"sass\"]},\"text/x-scss\":{\"extensions\":[\"scss\"]},\"text/x-setext\":{\"source\":\"apache\",\"extensions\":[\"etx\"]},\"text/x-sfv\":{\"source\":\"apache\",\"extensions\":[\"sfv\"]},\"text/x-suse-ymp\":{\"compressible\":true,\"extensions\":[\"ymp\"]},\"text/x-uuencode\":{\"source\":\"apache\",\"extensions\":[\"uu\"]},\"text/x-vcalendar\":{\"source\":\"apache\",\"extensions\":[\"vcs\"]},\"text/x-vcard\":{\"source\":\"apache\",\"extensions\":[\"vcf\"]},\"text/xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xml\"]},\"text/xml-external-parsed-entity\":{\"source\":\"iana\"},\"text/yaml\":{\"compressible\":true,\"extensions\":[\"yaml\",\"yml\"]},\"video/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"video/3gpp\":{\"source\":\"iana\",\"extensions\":[\"3gp\",\"3gpp\"]},\"video/3gpp-tt\":{\"source\":\"iana\"},\"video/3gpp2\":{\"source\":\"iana\",\"extensions\":[\"3g2\"]},\"video/av1\":{\"source\":\"iana\"},\"video/bmpeg\":{\"source\":\"iana\"},\"video/bt656\":{\"source\":\"iana\"},\"video/celb\":{\"source\":\"iana\"},\"video/dv\":{\"source\":\"iana\"},\"video/encaprtp\":{\"source\":\"iana\"},\"video/ffv1\":{\"source\":\"iana\"},\"video/flexfec\":{\"source\":\"iana\"},\"video/h261\":{\"source\":\"iana\",\"extensions\":[\"h261\"]},\"video/h263\":{\"source\":\"iana\",\"extensions\":[\"h263\"]},\"video/h263-1998\":{\"source\":\"iana\"},\"video/h263-2000\":{\"source\":\"iana\"},\"video/h264\":{\"source\":\"iana\",\"extensions\":[\"h264\"]},\"video/h264-rcdo\":{\"source\":\"iana\"},\"video/h264-svc\":{\"source\":\"iana\"},\"video/h265\":{\"source\":\"iana\"},\"video/iso.segment\":{\"source\":\"iana\",\"extensions\":[\"m4s\"]},\"video/jpeg\":{\"source\":\"iana\",\"extensions\":[\"jpgv\"]},\"video/jpeg2000\":{\"source\":\"iana\"},\"video/jpm\":{\"source\":\"apache\",\"extensions\":[\"jpm\",\"jpgm\"]},\"video/jxsv\":{\"source\":\"iana\"},\"video/mj2\":{\"source\":\"iana\",\"extensions\":[\"mj2\",\"mjp2\"]},\"video/mp1s\":{\"source\":\"iana\"},\"video/mp2p\":{\"source\":\"iana\"},\"video/mp2t\":{\"source\":\"iana\",\"extensions\":[\"ts\"]},\"video/mp4\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mp4\",\"mp4v\",\"mpg4\"]},\"video/mp4v-es\":{\"source\":\"iana\"},\"video/mpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"]},\"video/mpeg4-generic\":{\"source\":\"iana\"},\"video/mpv\":{\"source\":\"iana\"},\"video/nv\":{\"source\":\"iana\"},\"video/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ogv\"]},\"video/parityfec\":{\"source\":\"iana\"},\"video/pointer\":{\"source\":\"iana\"},\"video/quicktime\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"qt\",\"mov\"]},\"video/raptorfec\":{\"source\":\"iana\"},\"video/raw\":{\"source\":\"iana\"},\"video/rtp-enc-aescm128\":{\"source\":\"iana\"},\"video/rtploopback\":{\"source\":\"iana\"},\"video/rtx\":{\"source\":\"iana\"},\"video/scip\":{\"source\":\"iana\"},\"video/smpte291\":{\"source\":\"iana\"},\"video/smpte292m\":{\"source\":\"iana\"},\"video/ulpfec\":{\"source\":\"iana\"},\"video/vc1\":{\"source\":\"iana\"},\"video/vc2\":{\"source\":\"iana\"},\"video/vnd.cctv\":{\"source\":\"iana\"},\"video/vnd.dece.hd\":{\"source\":\"iana\",\"extensions\":[\"uvh\",\"uvvh\"]},\"video/vnd.dece.mobile\":{\"source\":\"iana\",\"extensions\":[\"uvm\",\"uvvm\"]},\"video/vnd.dece.mp4\":{\"source\":\"iana\"},\"video/vnd.dece.pd\":{\"source\":\"iana\",\"extensions\":[\"uvp\",\"uvvp\"]},\"video/vnd.dece.sd\":{\"source\":\"iana\",\"extensions\":[\"uvs\",\"uvvs\"]},\"video/vnd.dece.video\":{\"source\":\"iana\",\"extensions\":[\"uvv\",\"uvvv\"]},\"video/vnd.directv.mpeg\":{\"source\":\"iana\"},\"video/vnd.directv.mpeg-tts\":{\"source\":\"iana\"},\"video/vnd.dlna.mpeg-tts\":{\"source\":\"iana\"},\"video/vnd.dvb.file\":{\"source\":\"iana\",\"extensions\":[\"dvb\"]},\"video/vnd.fvt\":{\"source\":\"iana\",\"extensions\":[\"fvt\"]},\"video/vnd.hns.video\":{\"source\":\"iana\"},\"video/vnd.iptvforum.1dparityfec-1010\":{\"source\":\"iana\"},\"video/vnd.iptvforum.1dparityfec-2005\":{\"source\":\"iana\"},\"video/vnd.iptvforum.2dparityfec-1010\":{\"source\":\"iana\"},\"video/vnd.iptvforum.2dparityfec-2005\":{\"source\":\"iana\"},\"video/vnd.iptvforum.ttsavc\":{\"source\":\"iana\"},\"video/vnd.iptvforum.ttsmpeg2\":{\"source\":\"iana\"},\"video/vnd.motorola.video\":{\"source\":\"iana\"},\"video/vnd.motorola.videop\":{\"source\":\"iana\"},\"video/vnd.mpegurl\":{\"source\":\"iana\",\"extensions\":[\"mxu\",\"m4u\"]},\"video/vnd.ms-playready.media.pyv\":{\"source\":\"iana\",\"extensions\":[\"pyv\"]},\"video/vnd.nokia.interleaved-multimedia\":{\"source\":\"iana\"},\"video/vnd.nokia.mp4vr\":{\"source\":\"iana\"},\"video/vnd.nokia.videovoip\":{\"source\":\"iana\"},\"video/vnd.objectvideo\":{\"source\":\"iana\"},\"video/vnd.radgamettools.bink\":{\"source\":\"iana\"},\"video/vnd.radgamettools.smacker\":{\"source\":\"iana\"},\"video/vnd.sealed.mpeg1\":{\"source\":\"iana\"},\"video/vnd.sealed.mpeg4\":{\"source\":\"iana\"},\"video/vnd.sealed.swf\":{\"source\":\"iana\"},\"video/vnd.sealedmedia.softseal.mov\":{\"source\":\"iana\"},\"video/vnd.uvvu.mp4\":{\"source\":\"iana\",\"extensions\":[\"uvu\",\"uvvu\"]},\"video/vnd.vivo\":{\"source\":\"iana\",\"extensions\":[\"viv\"]},\"video/vnd.youtube.yt\":{\"source\":\"iana\"},\"video/vp8\":{\"source\":\"iana\"},\"video/vp9\":{\"source\":\"iana\"},\"video/webm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"webm\"]},\"video/x-f4v\":{\"source\":\"apache\",\"extensions\":[\"f4v\"]},\"video/x-fli\":{\"source\":\"apache\",\"extensions\":[\"fli\"]},\"video/x-flv\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"flv\"]},\"video/x-m4v\":{\"source\":\"apache\",\"extensions\":[\"m4v\"]},\"video/x-matroska\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"mkv\",\"mk3d\",\"mks\"]},\"video/x-mng\":{\"source\":\"apache\",\"extensions\":[\"mng\"]},\"video/x-ms-asf\":{\"source\":\"apache\",\"extensions\":[\"asf\",\"asx\"]},\"video/x-ms-vob\":{\"source\":\"apache\",\"extensions\":[\"vob\"]},\"video/x-ms-wm\":{\"source\":\"apache\",\"extensions\":[\"wm\"]},\"video/x-ms-wmv\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"wmv\"]},\"video/x-ms-wmx\":{\"source\":\"apache\",\"extensions\":[\"wmx\"]},\"video/x-ms-wvx\":{\"source\":\"apache\",\"extensions\":[\"wvx\"]},\"video/x-msvideo\":{\"source\":\"apache\",\"extensions\":[\"avi\"]},\"video/x-sgi-movie\":{\"source\":\"apache\",\"extensions\":[\"movie\"]},\"video/x-smv\":{\"source\":\"apache\",\"extensions\":[\"smv\"]},\"x-conference/x-cooltalk\":{\"source\":\"apache\",\"extensions\":[\"ice\"]},\"x-shader/x-fragment\":{\"compressible\":true},\"x-shader/x-vertex\":{\"compressible\":true}}");

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  parallel: __webpack_require__(158),
  serial: __webpack_require__(160),
  serialOrdered: __webpack_require__(73)
};

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var iterate = __webpack_require__(68),
    initState = __webpack_require__(71),
    terminator = __webpack_require__(72); // Public API


module.exports = parallel;
/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

function parallel(list, iterator, callback) {
  var state = initState(list);

  while (state.index < (state['keyedList'] || list).length) {
    iterate(list, iterator, state, function (error, result) {
      if (error) {
        callback(error, result);
        return;
      } // looks like it's the last one


      if (Object.keys(state.jobs).length === 0) {
        callback(null, state.results);
        return;
      }
    });
    state.index++;
  }

  return terminator.bind(state, callback);
}

/***/ }),
/* 159 */
/***/ (function(module, exports) {

module.exports = defer;
/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */

function defer(fn) {
  var nextTick = typeof setImmediate == 'function' ? setImmediate : typeof process == 'object' && typeof process.nextTick == 'function' ? process.nextTick : null;

  if (nextTick) {
    nextTick(fn);
  } else {
    setTimeout(fn, 0);
  }
}

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var serialOrdered = __webpack_require__(73); // Public API


module.exports = serial;
/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

function serial(list, iterator, callback) {
  return serialOrdered(list, iterator, null, callback);
}

/***/ }),
/* 161 */
/***/ (function(module, exports) {

// populates missing values
module.exports = function (dst, src) {
  Object.keys(src).forEach(function (prop) {
    dst[prop] = dst[prop] || src[prop];
  });
  return dst;
};

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var VERSION = __webpack_require__(40).version;

var AxiosError = __webpack_require__(14);

var validators = {}; // eslint-disable-next-line func-names

['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */

validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  } // eslint-disable-next-line func-names


  return function (value, opt, opts) {
    if (validator === false) {
      throw new AxiosError(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError.ERR_DEPRECATED);
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console

      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }

    return validator ? validator(value, opt, opts) : true;
  };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */


function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }

  var keys = Object.keys(options);
  var i = keys.length;

  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];

    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);

      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }

      continue;
    }

    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var CanceledError = __webpack_require__(20);
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this; // eslint-disable-next-line func-names

  this.promise.then(function (cancel) {
    if (!token._listeners) return;
    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }

    token._listeners = null;
  }); // eslint-disable-next-line func-names

  this.promise.then = function (onfulfilled) {
    var _resolve; // eslint-disable-next-line func-names


    var promise = new Promise(function (resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new CanceledError(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Subscribe to the cancel signal
 */


CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};
/**
 * Unsubscribe from the cancel signal
 */


CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }

  var index = this._listeners.indexOf(listener);

  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(3);
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */


module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && payload.isAxiosError === true;
};

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getSideChannel = __webpack_require__(167);

var utils = __webpack_require__(76);

var formats = __webpack_require__(43);

var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
  brackets: function brackets(prefix) {
    return prefix + '[]';
  },
  comma: 'comma',
  indices: function indices(prefix, key) {
    return prefix + '[' + key + ']';
  },
  repeat: function repeat(prefix) {
    return prefix;
  }
};
var isArray = Array.isArray;
var split = String.prototype.split;
var push = Array.prototype.push;

var pushToArray = function (arr, valueOrArray) {
  push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;
var defaultFormat = formats['default'];
var defaults = {
  addQueryPrefix: false,
  allowDots: false,
  charset: 'utf-8',
  charsetSentinel: false,
  delimiter: '&',
  encode: true,
  encoder: utils.encode,
  encodeValuesOnly: false,
  format: defaultFormat,
  formatter: formats.formatters[defaultFormat],
  // deprecated
  indices: false,
  serializeDate: function serializeDate(date) {
    return toISO.call(date);
  },
  skipNulls: false,
  strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
  return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || typeof v === 'symbol' || typeof v === 'bigint';
};

var sentinel = {};

var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
  var obj = object;
  var tmpSc = sideChannel;
  var step = 0;
  var findFlag = false;

  while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
    // Where object last appeared in the ref tree
    var pos = tmpSc.get(object);
    step += 1;

    if (typeof pos !== 'undefined') {
      if (pos === step) {
        throw new RangeError('Cyclic object value');
      } else {
        findFlag = true; // Break while
      }
    }

    if (typeof tmpSc.get(sentinel) === 'undefined') {
      step = 0;
    }
  }

  if (typeof filter === 'function') {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate(obj);
  } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
    obj = utils.maybeMap(obj, function (value) {
      if (value instanceof Date) {
        return serializeDate(value);
      }

      return value;
    });
  }

  if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
    }

    obj = '';
  }

  if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
    if (encoder) {
      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);

      if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
        var valuesArray = split.call(String(obj), ',');
        var valuesJoined = '';

        for (var i = 0; i < valuesArray.length; ++i) {
          valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));
        }

        return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];
      }

      return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
    }

    return [formatter(prefix) + '=' + formatter(String(obj))];
  }

  var values = [];

  if (typeof obj === 'undefined') {
    return values;
  }

  var objKeys;

  if (generateArrayPrefix === 'comma' && isArray(obj)) {
    // we need to join elements in
    objKeys = [{
      value: obj.length > 0 ? obj.join(',') || null : void undefined
    }];
  } else if (isArray(filter)) {
    objKeys = filter;
  } else {
    var keys = Object.keys(obj);
    objKeys = sort ? keys.sort(sort) : keys;
  }

  var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;

  for (var j = 0; j < objKeys.length; ++j) {
    var key = objKeys[j];
    var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

    if (skipNulls && value === null) {
      continue;
    }

    var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');
    sideChannel.set(object, step);
    var valueSideChannel = getSideChannel();
    valueSideChannel.set(sentinel, sideChannel);
    pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
  }

  return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
  if (!opts) {
    return defaults;
  }

  if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
    throw new TypeError('Encoder has to be a function.');
  }

  var charset = opts.charset || defaults.charset;

  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }

  var format = formats['default'];

  if (typeof opts.format !== 'undefined') {
    if (!has.call(formats.formatters, opts.format)) {
      throw new TypeError('Unknown format option provided.');
    }

    format = opts.format;
  }

  var formatter = formats.formatters[format];
  var filter = defaults.filter;

  if (typeof opts.filter === 'function' || isArray(opts.filter)) {
    filter = opts.filter;
  }

  return {
    addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
    encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
    filter: filter,
    format: format,
    formatter: formatter,
    serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
    sort: typeof opts.sort === 'function' ? opts.sort : null,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};

module.exports = function (object, opts) {
  var obj = object;
  var options = normalizeStringifyOptions(opts);
  var objKeys;
  var filter;

  if (typeof options.filter === 'function') {
    filter = options.filter;
    obj = filter('', obj);
  } else if (isArray(options.filter)) {
    filter = options.filter;
    objKeys = filter;
  }

  var keys = [];

  if (typeof obj !== 'object' || obj === null) {
    return '';
  }

  var arrayFormat;

  if (opts && opts.arrayFormat in arrayPrefixGenerators) {
    arrayFormat = opts.arrayFormat;
  } else if (opts && 'indices' in opts) {
    arrayFormat = opts.indices ? 'indices' : 'repeat';
  } else {
    arrayFormat = 'indices';
  }

  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

  if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
    throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
  }

  var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;

  if (!objKeys) {
    objKeys = Object.keys(obj);
  }

  if (options.sort) {
    objKeys.sort(options.sort);
  }

  var sideChannel = getSideChannel();

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];

    if (options.skipNulls && obj[key] === null) {
      continue;
    }

    pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
  }

  var joined = keys.join(options.delimiter);
  var prefix = options.addQueryPrefix === true ? '?' : '';

  if (options.charsetSentinel) {
    if (options.charset === 'iso-8859-1') {
      // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
      prefix += 'utf8=%26%2310003%3B&';
    } else {
      // encodeURIComponent('✓')
      prefix += 'utf8=%E2%9C%93&';
    }
  }

  return joined.length > 0 ? prefix + joined : '';
};

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(41);

var callBound = __webpack_require__(172);

var inspect = __webpack_require__(174);

var $TypeError = GetIntrinsic('%TypeError%');
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);
var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);
/*
 * This function traverses the list returning the node corresponding to the
 * given key.
 *
 * That node is also moved to the head of the list, so that if it's accessed
 * again we don't need to traverse the whole list. By doing so, all the recently
 * used nodes can be accessed relatively quickly.
 */

var listGetNode = function (list, key) {
  // eslint-disable-line consistent-return
  for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
    if (curr.key === key) {
      prev.next = curr.next;
      curr.next = list.next;
      list.next = curr; // eslint-disable-line no-param-reassign

      return curr;
    }
  }
};

var listGet = function (objects, key) {
  var node = listGetNode(objects, key);
  return node && node.value;
};

var listSet = function (objects, key, value) {
  var node = listGetNode(objects, key);

  if (node) {
    node.value = value;
  } else {
    // Prepend the new node to the beginning of the list
    objects.next = {
      // eslint-disable-line no-param-reassign
      key: key,
      next: objects.next,
      value: value
    };
  }
};

var listHas = function (objects, key) {
  return !!listGetNode(objects, key);
};

module.exports = function getSideChannel() {
  var $wm;
  var $m;
  var $o;
  var channel = {
    assert: function (key) {
      if (!channel.has(key)) {
        throw new $TypeError('Side channel does not contain ' + inspect(key));
      }
    },
    get: function (key) {
      // eslint-disable-line consistent-return
      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
        if ($wm) {
          return $weakMapGet($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapGet($m, key);
        }
      } else {
        if ($o) {
          // eslint-disable-line no-lonely-if
          return listGet($o, key);
        }
      }
    },
    has: function (key) {
      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
        if ($wm) {
          return $weakMapHas($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapHas($m, key);
        }
      } else {
        if ($o) {
          // eslint-disable-line no-lonely-if
          return listHas($o, key);
        }
      }

      return false;
    },
    set: function (key, value) {
      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
        if (!$wm) {
          $wm = new $WeakMap();
        }

        $weakMapSet($wm, key, value);
      } else if ($Map) {
        if (!$m) {
          $m = new $Map();
        }

        $mapSet($m, key, value);
      } else {
        if (!$o) {
          /*
           * Initialize the linked list as an empty node, so that we don't have
           * to special-case handling of the first node: we can always refer to
           * it as (previous node).next, instead of something like (list).head
           */
          $o = {
            key: {},
            next: null
          };
        }

        listSet($o, key, value);
      }
    }
  };
  return channel;
};

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;

var hasSymbolSham = __webpack_require__(169);

module.exports = function hasNativeSymbols() {
  if (typeof origSymbol !== 'function') {
    return false;
  }

  if (typeof Symbol !== 'function') {
    return false;
  }

  if (typeof origSymbol('foo') !== 'symbol') {
    return false;
  }

  if (typeof Symbol('bar') !== 'symbol') {
    return false;
  }

  return hasSymbolSham();
};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint complexity: [2, 18], max-statements: [2, 33] */

module.exports = function hasSymbols() {
  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
    return false;
  }

  if (typeof Symbol.iterator === 'symbol') {
    return true;
  }

  var obj = {};
  var sym = Symbol('test');
  var symObj = Object(sym);

  if (typeof sym === 'string') {
    return false;
  }

  if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
    return false;
  }

  if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
    return false;
  } // temp disabled per https://github.com/ljharb/object.assign/issues/17
  // if (sym instanceof Symbol) { return false; }
  // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  // if (!(symObj instanceof Symbol)) { return false; }
  // if (typeof Symbol.prototype.toString !== 'function') { return false; }
  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


  var symVal = 42;
  obj[sym] = symVal;

  for (sym in obj) {
    return false;
  } // eslint-disable-line no-restricted-syntax, no-unreachable-loop


  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
    return false;
  }

  if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
    return false;
  }

  var syms = Object.getOwnPropertySymbols(obj);

  if (syms.length !== 1 || syms[0] !== sym) {
    return false;
  }

  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
    return false;
  }

  if (typeof Object.getOwnPropertyDescriptor === 'function') {
    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

    if (descriptor.value !== symVal || descriptor.enumerable !== true) {
      return false;
    }
  }

  return true;
};

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
  var target = this;

  if (typeof target !== 'function' || toStr.call(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }

  var args = slice.call(arguments, 1);
  var bound;

  var binder = function () {
    if (this instanceof bound) {
      var result = target.apply(this, args.concat(slice.call(arguments)));

      if (Object(result) === result) {
        return result;
      }

      return this;
    } else {
      return target.apply(that, args.concat(slice.call(arguments)));
    }
  };

  var boundLength = Math.max(0, target.length - args.length);
  var boundArgs = [];

  for (var i = 0; i < boundLength; i++) {
    boundArgs.push('$' + i);
  }

  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

  if (target.prototype) {
    var Empty = function Empty() {};

    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }

  return bound;
};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(42);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(41);

var callBind = __webpack_require__(173);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
  var intrinsic = GetIntrinsic(name, !!allowMissing);

  if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
    return callBind(intrinsic);
  }

  return intrinsic;
};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(42);

var GetIntrinsic = __webpack_require__(41);

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
  try {
    $defineProperty({}, 'a', {
      value: 1
    });
  } catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
  }
}

module.exports = function callBind(originalFunction) {
  var func = $reflectApply(bind, $call, arguments);

  if ($gOPD && $defineProperty) {
    var desc = $gOPD(func, 'length');

    if (desc.configurable) {
      // original length, plus the receiver, minus any additional arguments (after the receiver)
      $defineProperty(func, 'length', {
        value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
      });
    }
  }

  return func;
};

var applyBind = function applyBind() {
  return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
  $defineProperty(module.exports, 'apply', {
    value: applyBind
  });
} else {
  module.exports.apply = applyBind;
}

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var match = String.prototype.match;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object'; // ie, `has-tostringtag/shams

var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol') ? Symbol.toStringTag : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;
var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto
? function (O) {
  return O.__proto__; // eslint-disable-line no-proto
} : null);

var inspectCustom = __webpack_require__(175).custom;

var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
  var opts = options || {};

  if (has(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {
    throw new TypeError('option "quoteStyle" must be "single" or "double"');
  }

  if (has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
    throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
  }

  var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;

  if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
    throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
  }

  if (has(opts, 'indent') && opts.indent !== null && opts.indent !== '\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
    throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
  }

  if (typeof obj === 'undefined') {
    return 'undefined';
  }

  if (obj === null) {
    return 'null';
  }

  if (typeof obj === 'boolean') {
    return obj ? 'true' : 'false';
  }

  if (typeof obj === 'string') {
    return inspectString(obj, opts);
  }

  if (typeof obj === 'number') {
    if (obj === 0) {
      return Infinity / obj > 0 ? '0' : '-0';
    }

    return String(obj);
  }

  if (typeof obj === 'bigint') {
    return String(obj) + 'n';
  }

  var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;

  if (typeof depth === 'undefined') {
    depth = 0;
  }

  if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
    return isArray(obj) ? '[Array]' : '[Object]';
  }

  var indent = getIndent(opts, depth);

  if (typeof seen === 'undefined') {
    seen = [];
  } else if (indexOf(seen, obj) >= 0) {
    return '[Circular]';
  }

  function inspect(value, from, noIndent) {
    if (from) {
      seen = seen.slice();
      seen.push(from);
    }

    if (noIndent) {
      var newOpts = {
        depth: opts.depth
      };

      if (has(opts, 'quoteStyle')) {
        newOpts.quoteStyle = opts.quoteStyle;
      }

      return inspect_(value, newOpts, depth + 1, seen);
    }

    return inspect_(value, opts, depth + 1, seen);
  }

  if (typeof obj === 'function') {
    var name = nameOf(obj);
    var keys = arrObjKeys(obj, inspect);
    return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
  }

  if (isSymbol(obj)) {
    var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
    return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
  }

  if (isElement(obj)) {
    var s = '<' + String(obj.nodeName).toLowerCase();
    var attrs = obj.attributes || [];

    for (var i = 0; i < attrs.length; i++) {
      s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
    }

    s += '>';

    if (obj.childNodes && obj.childNodes.length) {
      s += '...';
    }

    s += '</' + String(obj.nodeName).toLowerCase() + '>';
    return s;
  }

  if (isArray(obj)) {
    if (obj.length === 0) {
      return '[]';
    }

    var xs = arrObjKeys(obj, inspect);

    if (indent && !singleLineValues(xs)) {
      return '[' + indentedJoin(xs, indent) + ']';
    }

    return '[ ' + xs.join(', ') + ' ]';
  }

  if (isError(obj)) {
    var parts = arrObjKeys(obj, inspect);

    if (parts.length === 0) {
      return '[' + String(obj) + ']';
    }

    return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
  }

  if (typeof obj === 'object' && customInspect) {
    if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
      return obj[inspectSymbol]();
    } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
      return obj.inspect();
    }
  }

  if (isMap(obj)) {
    var mapParts = [];
    mapForEach.call(obj, function (value, key) {
      mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
    });
    return collectionOf('Map', mapSize.call(obj), mapParts, indent);
  }

  if (isSet(obj)) {
    var setParts = [];
    setForEach.call(obj, function (value) {
      setParts.push(inspect(value, obj));
    });
    return collectionOf('Set', setSize.call(obj), setParts, indent);
  }

  if (isWeakMap(obj)) {
    return weakCollectionOf('WeakMap');
  }

  if (isWeakSet(obj)) {
    return weakCollectionOf('WeakSet');
  }

  if (isWeakRef(obj)) {
    return weakCollectionOf('WeakRef');
  }

  if (isNumber(obj)) {
    return markBoxed(inspect(Number(obj)));
  }

  if (isBigInt(obj)) {
    return markBoxed(inspect(bigIntValueOf.call(obj)));
  }

  if (isBoolean(obj)) {
    return markBoxed(booleanValueOf.call(obj));
  }

  if (isString(obj)) {
    return markBoxed(inspect(String(obj)));
  }

  if (!isDate(obj) && !isRegExp(obj)) {
    var ys = arrObjKeys(obj, inspect);
    var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
    var protoTag = obj instanceof Object ? '' : 'null prototype';
    var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';
    var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
    var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');

    if (ys.length === 0) {
      return tag + '{}';
    }

    if (indent) {
      return tag + '{' + indentedJoin(ys, indent) + '}';
    }

    return tag + '{ ' + ys.join(', ') + ' }';
  }

  return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
  var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
  return quoteChar + s + quoteChar;
}

function quote(s) {
  return String(s).replace(/"/g, '&quot;');
}

function isArray(obj) {
  return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}

function isDate(obj) {
  return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}

function isRegExp(obj) {
  return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}

function isError(obj) {
  return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}

function isString(obj) {
  return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}

function isNumber(obj) {
  return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}

function isBoolean(obj) {
  return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
} // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives


function isSymbol(obj) {
  if (hasShammedSymbols) {
    return obj && typeof obj === 'object' && obj instanceof Symbol;
  }

  if (typeof obj === 'symbol') {
    return true;
  }

  if (!obj || typeof obj !== 'object' || !symToString) {
    return false;
  }

  try {
    symToString.call(obj);
    return true;
  } catch (e) {}

  return false;
}

function isBigInt(obj) {
  if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
    return false;
  }

  try {
    bigIntValueOf.call(obj);
    return true;
  } catch (e) {}

  return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) {
  return key in this;
};

function has(obj, key) {
  return hasOwn.call(obj, key);
}

function toStr(obj) {
  return objectToString.call(obj);
}

function nameOf(f) {
  if (f.name) {
    return f.name;
  }

  var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);

  if (m) {
    return m[1];
  }

  return null;
}

function indexOf(xs, x) {
  if (xs.indexOf) {
    return xs.indexOf(x);
  }

  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) {
      return i;
    }
  }

  return -1;
}

function isMap(x) {
  if (!mapSize || !x || typeof x !== 'object') {
    return false;
  }

  try {
    mapSize.call(x);

    try {
      setSize.call(x);
    } catch (s) {
      return true;
    }

    return x instanceof Map; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isWeakMap(x) {
  if (!weakMapHas || !x || typeof x !== 'object') {
    return false;
  }

  try {
    weakMapHas.call(x, weakMapHas);

    try {
      weakSetHas.call(x, weakSetHas);
    } catch (s) {
      return true;
    }

    return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isWeakRef(x) {
  if (!weakRefDeref || !x || typeof x !== 'object') {
    return false;
  }

  try {
    weakRefDeref.call(x);
    return true;
  } catch (e) {}

  return false;
}

function isSet(x) {
  if (!setSize || !x || typeof x !== 'object') {
    return false;
  }

  try {
    setSize.call(x);

    try {
      mapSize.call(x);
    } catch (m) {
      return true;
    }

    return x instanceof Set; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isWeakSet(x) {
  if (!weakSetHas || !x || typeof x !== 'object') {
    return false;
  }

  try {
    weakSetHas.call(x, weakSetHas);

    try {
      weakMapHas.call(x, weakMapHas);
    } catch (s) {
      return true;
    }

    return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isElement(x) {
  if (!x || typeof x !== 'object') {
    return false;
  }

  if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
    return true;
  }

  return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
  if (str.length > opts.maxStringLength) {
    var remaining = str.length - opts.maxStringLength;
    var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
    return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
  } // eslint-disable-next-line no-control-regex


  var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
  return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
  var n = c.charCodeAt(0);
  var x = {
    8: 'b',
    9: 't',
    10: 'n',
    12: 'f',
    13: 'r'
  }[n];

  if (x) {
    return '\\' + x;
  }

  return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
}

function markBoxed(str) {
  return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
  return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
  var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');
  return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
  for (var i = 0; i < xs.length; i++) {
    if (indexOf(xs[i], '\n') >= 0) {
      return false;
    }
  }

  return true;
}

function getIndent(opts, depth) {
  var baseIndent;

  if (opts.indent === '\t') {
    baseIndent = '\t';
  } else if (typeof opts.indent === 'number' && opts.indent > 0) {
    baseIndent = Array(opts.indent + 1).join(' ');
  } else {
    return null;
  }

  return {
    base: baseIndent,
    prev: Array(depth + 1).join(baseIndent)
  };
}

function indentedJoin(xs, indent) {
  if (xs.length === 0) {
    return '';
  }

  var lineJoiner = '\n' + indent.prev + indent.base;
  return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
  var isArr = isArray(obj);
  var xs = [];

  if (isArr) {
    xs.length = obj.length;

    for (var i = 0; i < obj.length; i++) {
      xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
    }
  }

  var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
  var symMap;

  if (hasShammedSymbols) {
    symMap = {};

    for (var k = 0; k < syms.length; k++) {
      symMap['$' + syms[k]] = syms[k];
    }
  }

  for (var key in obj) {
    // eslint-disable-line no-restricted-syntax
    if (!has(obj, key)) {
      continue;
    } // eslint-disable-line no-restricted-syntax, no-continue


    if (isArr && String(Number(key)) === key && key < obj.length) {
      continue;
    } // eslint-disable-line no-restricted-syntax, no-continue


    if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
      // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
      continue; // eslint-disable-line no-restricted-syntax, no-continue
    } else if (/[^\w$]/.test(key)) {
      xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
    } else {
      xs.push(key + ': ' + inspect(obj[key], obj));
    }
  }

  if (typeof gOPS === 'function') {
    for (var j = 0; j < syms.length; j++) {
      if (isEnumerable.call(obj, syms[j])) {
        xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
      }
    }
  }

  return xs;
}

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(12).inspect;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(76);

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var defaults = {
  allowDots: false,
  allowPrototypes: false,
  allowSparse: false,
  arrayLimit: 20,
  charset: 'utf-8',
  charsetSentinel: false,
  comma: false,
  decoder: utils.decode,
  delimiter: '&',
  depth: 5,
  ignoreQueryPrefix: false,
  interpretNumericEntities: false,
  parameterLimit: 1000,
  parseArrays: true,
  plainObjects: false,
  strictNullHandling: false
};

var interpretNumericEntities = function (str) {
  return str.replace(/&#(\d+);/g, function ($0, numberStr) {
    return String.fromCharCode(parseInt(numberStr, 10));
  });
};

var parseArrayValue = function (val, options) {
  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
    return val.split(',');
  }

  return val;
}; // This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.


var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.

var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
  var obj = {};
  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
  var parts = cleanStr.split(options.delimiter, limit);
  var skipIndex = -1; // Keep track of where the utf8 sentinel was found

  var i;
  var charset = options.charset;

  if (options.charsetSentinel) {
    for (i = 0; i < parts.length; ++i) {
      if (parts[i].indexOf('utf8=') === 0) {
        if (parts[i] === charsetSentinel) {
          charset = 'utf-8';
        } else if (parts[i] === isoSentinel) {
          charset = 'iso-8859-1';
        }

        skipIndex = i;
        i = parts.length; // The eslint settings do not allow break;
      }
    }
  }

  for (i = 0; i < parts.length; ++i) {
    if (i === skipIndex) {
      continue;
    }

    var part = parts[i];
    var bracketEqualsPos = part.indexOf(']=');
    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
    var key, val;

    if (pos === -1) {
      key = options.decoder(part, defaults.decoder, charset, 'key');
      val = options.strictNullHandling ? null : '';
    } else {
      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
      val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {
        return options.decoder(encodedVal, defaults.decoder, charset, 'value');
      });
    }

    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
      val = interpretNumericEntities(val);
    }

    if (part.indexOf('[]=') > -1) {
      val = isArray(val) ? [val] : val;
    }

    if (has.call(obj, key)) {
      obj[key] = utils.combine(obj[key], val);
    } else {
      obj[key] = val;
    }
  }

  return obj;
};

var parseObject = function (chain, val, options, valuesParsed) {
  var leaf = valuesParsed ? val : parseArrayValue(val, options);

  for (var i = chain.length - 1; i >= 0; --i) {
    var obj;
    var root = chain[i];

    if (root === '[]' && options.parseArrays) {
      obj = [].concat(leaf);
    } else {
      obj = options.plainObjects ? Object.create(null) : {};
      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
      var index = parseInt(cleanRoot, 10);

      if (!options.parseArrays && cleanRoot === '') {
        obj = {
          0: leaf
        };
      } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
        obj = [];
        obj[index] = leaf;
      } else if (cleanRoot !== '__proto__') {
        obj[cleanRoot] = leaf;
      }
    }

    leaf = obj;
  }

  return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
  if (!givenKey) {
    return;
  } // Transform dot notation to bracket notation


  var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks

  var brackets = /(\[[^[\]]*])/;
  var child = /(\[[^[\]]*])/g; // Get the parent

  var segment = options.depth > 0 && brackets.exec(key);
  var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists

  var keys = [];

  if (parent) {
    // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
    if (!options.plainObjects && has.call(Object.prototype, parent)) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(parent);
  } // Loop through children appending to the array until we hit depth


  var i = 0;

  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
    i += 1;

    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(segment[1]);
  } // If there's a remainder, just add whatever is left


  if (segment) {
    keys.push('[' + key.slice(segment.index) + ']');
  }

  return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
  if (!opts) {
    return defaults;
  }

  if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
    throw new TypeError('Decoder has to be a function.');
  }

  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }

  var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
  return {
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
    allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
    delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
    // eslint-disable-next-line no-implicit-coercion, no-extra-parens
    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,
    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
    interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
    parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
    parseArrays: opts.parseArrays !== false,
    plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};

module.exports = function (str, opts) {
  var options = normalizeParseOptions(opts);

  if (str === '' || str === null || typeof str === 'undefined') {
    return options.plainObjects ? Object.create(null) : {};
  }

  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
  var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object

  var keys = Object.keys(tempObj);

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];
    var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
    obj = utils.merge(obj, newObj, options);
  }

  if (options.allowSparse === true) {
    return obj;
  }

  return utils.compact(obj);
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createContentfulApi;

var _contentfulSdkCore = __webpack_require__(9);

var _entities = _interopRequireDefault(__webpack_require__(178));

var _pagedSync = _interopRequireDefault(__webpack_require__(187));

var _normalizeSelect = _interopRequireDefault(__webpack_require__(188));

var _validateTimestamp = _interopRequireDefault(__webpack_require__(189));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

const ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;
/**
 * Creates API object with methods to access functionality from Contentful's
 * Delivery API
 * @private
 * @param {Object} params - API initialization params
 * @prop {Object} http - HTTP client instance
 * @prop {Object} entities - Object with wrapper methods for each kind of entity
 * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting
 * @return {ClientAPI}
 */

function createContentfulApi(_ref) {
  let {
    http,
    getGlobalOptions
  } = _ref;
  const {
    wrapSpace
  } = _entities.default.space;
  const {
    wrapContentType,
    wrapContentTypeCollection
  } = _entities.default.contentType;
  const {
    wrapEntry,
    wrapEntryCollection
  } = _entities.default.entry;
  const {
    wrapAsset,
    wrapAssetCollection
  } = _entities.default.asset;
  const {
    wrapTag,
    wrapTagCollection
  } = _entities.default.tag;
  const {
    wrapAssetKey
  } = _entities.default.assetKey;
  const {
    wrapLocaleCollection
  } = _entities.default.locale;

  const notFoundError = id => {
    const error = new Error('The resource could not be found.');
    error.sys = {
      type: 'Error',
      id: 'NotFound'
    };
    error.details = {
      type: 'Entry',
      id: id,
      environment: getGlobalOptions().environment,
      space: getGlobalOptions().space
    };
    return error;
  };
  /**
   * Gets the Space which the client is currently configured to use
   * @memberof ContentfulClientAPI
   * @return {Promise<Entities.Space>} Promise for a Space
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   * // returns the space object with the above <space-id>
   * const space = await client.getSpace()
   * console.log(space)
   */


  async function getSpace() {
    switchToSpace(http);

    try {
      const response = await http.get('/');
      return wrapSpace(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets a Content Type
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @return {Promise<Entities.ContentType>} Promise for a Content Type
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const contentType = await client.getContentType('<content_type_id>')
   * console.log(contentType)
   */


  async function getContentType(id) {
    switchToEnvironment(http);

    try {
      const response = await http.get(`content_types/${id}`);
      return wrapContentType(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets a collection of Content Types
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getContentTypes()
   * console.log(response.items)
   */


  async function getContentTypes() {
    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    switchToEnvironment(http);

    try {
      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({
        query: query
      }));
      return wrapContentTypeCollection(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets an Entry
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.
   * @return {Promise<Entities.Entry>} Promise for an Entry
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const entry = await client.getEntry('<entry_id>')
   * console.log(entry)
   */


  async function getEntry(id) {
    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!id) {
      throw notFoundError(id);
    }

    try {
      const response = await this.getEntries(_objectSpread({
        'sys.id': id
      }, query));

      if (response.items.length > 0) {
        return wrapEntry(response.items[0]);
      } else {
        throw notFoundError(id);
      }
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets a collection of Entries
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getEntries()
   * console.log(response.items)
   */


  async function getEntries() {
    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    switchToEnvironment(http);
    const {
      resolveLinks,
      removeUnresolved
    } = getGlobalOptions(query);
    query = (0, _normalizeSelect.default)(query);

    try {
      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({
        query: query
      }));
      return wrapEntryCollection(response.data, {
        resolveLinks,
        removeUnresolved
      });
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets an Asset
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.
   * @return {Promise<Entities.Asset>} Promise for an Asset
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const asset = await client.getAsset('<asset_id>')
   * console.log(asset)
   */


  async function getAsset(id) {
    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    switchToEnvironment(http);
    query = (0, _normalizeSelect.default)(query);

    try {
      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({
        query: query
      }));
      return wrapAsset(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets a collection of Assets
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getAssets()
   * console.log(response.items)
   */


  async function getAssets() {
    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    switchToEnvironment(http);
    query = (0, _normalizeSelect.default)(query);

    try {
      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({
        query: query
      }));
      return wrapAssetCollection(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets a Tag
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @return {Promise<Entities.Tag>} Promise for a Tag
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const tag = await client.getTag('<asset_id>')
   * console.log(tag)
   */


  async function getTag(id) {
    switchToEnvironment(http);

    try {
      const response = await http.get(`tags/${id}`);
      return wrapTag(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets a collection of Tags
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters.
   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getTags()
   * console.log(response.items)
   */


  async function getTags() {
    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    switchToEnvironment(http);
    query = (0, _normalizeSelect.default)(query);

    try {
      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({
        query: query
      }));
      return wrapTagCollection(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Creates an asset key for signing asset URLs (Embargoed Assets)
   * @memberof ContentfulClientAPI
   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now
   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const assetKey = await client.getAssetKey(<UNIX timestamp>)
   * console.log(assetKey)
   */


  async function createAssetKey(expiresAt) {
    switchToEnvironment(http);

    try {
      const now = Math.floor(Date.now() / 1000);
      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;
      (0, _validateTimestamp.default)('expiresAt', expiresAt, {
        maximum: currentMaxLifetime,
        now
      });
      const params = {
        expiresAt
      };
      const response = await http.post('asset_keys', params);
      return wrapAssetKey(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Gets a collection of Locale
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getLocales()
   * console.log(response.items)
   */


  async function getLocales() {
    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    switchToEnvironment(http);

    try {
      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({
        query: query
      }));
      return wrapLocaleCollection(response.data);
    } catch (error) {
      (0, _contentfulSdkCore.errorHandler)(error);
    }
  }
  /**
   * Synchronizes either all the content or only new content since last sync
   * See <a href="https://www.contentful.com/developers/docs/concepts/sync/">Synchronization</a> for more information.
   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.
   * However contentful.js is doing link resolution client side if you only make an initial sync.
   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.
   * @memberof ContentfulClientAPI
   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.
   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.
   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.
   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)
   * @param  {string=} query.content_type - Filter by this content type id
   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.
   * @param  {Object} options
   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination
   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.sync({
   *   initial: true
   * })
   * console.log({
   *   entries: response.entries,
   *   assets: response.assets,
   *   nextSyncToken: response.nextSyncToken
   * })
   */


  async function sync() {
    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      paginate: true
    };
    const {
      resolveLinks,
      removeUnresolved
    } = getGlobalOptions(query);
    switchToEnvironment(http);
    return (0, _pagedSync.default)(http, query, _objectSpread({
      resolveLinks,
      removeUnresolved
    }, options));
  }
  /**
  * Parse raw json data into collection of entry objects.Links will be resolved also
  * @memberof ContentfulClientAPI
  * @param {Object} raw json data
  * @example
  * let data = {items: [
  *    {
  *    sys: {type: 'Entry', locale: 'en-US'},
  *    fields: {
  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},
  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}
  *    }
  *  }
  * ],
  * includes: {
  *  Animal: [
  *    {
  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},
  *      fields: {
  *        name: 'Pig',
  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}
  *      }
  *    }
  *   ]
  *  }
  * }
  * console.log( data.items[0].fields.foo ); // undefined
  * let parsedData = client.parseEntries(data);
  * console.log( parsedData.items[0].fields.foo ); // foo
  */


  function parseEntries(data) {
    const {
      resolveLinks,
      removeUnresolved
    } = getGlobalOptions({});
    return wrapEntryCollection(data, {
      resolveLinks,
      removeUnresolved
    });
  }
  /*
   * Switches BaseURL to use /environments path
   * */


  function switchToEnvironment(http) {
    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;
  }
  /*
   * Switches BaseURL to use /spaces path
   * */


  function switchToSpace(http) {
    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;
  }

  return {
    getSpace,
    getContentType,
    getContentTypes,
    getEntry,
    getEntries,
    getAsset,
    getAssets,
    getTag,
    getTags,
    createAssetKey,
    getLocales,
    parseEntries,
    sync
  };
}

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var space = _interopRequireWildcard(__webpack_require__(179));

var entry = _interopRequireWildcard(__webpack_require__(180));

var asset = _interopRequireWildcard(__webpack_require__(182));

var assetKey = _interopRequireWildcard(__webpack_require__(183));

var contentType = _interopRequireWildcard(__webpack_require__(184));

var locale = _interopRequireWildcard(__webpack_require__(185));

var tag = _interopRequireWildcard(__webpack_require__(186));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var _default = {
  space,
  entry,
  asset,
  assetKey,
  contentType,
  locale,
  tag
};
exports.default = _default;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapSpace = wrapSpace;

var _contentfulSdkCore = __webpack_require__(9);
/**
 * @memberof Entities
 * @typedef Space
 * @prop {Object} sys - System metadata
 * @prop {string} sys.id - Space id
 * @prop {string} sys.type - Entity type
 * @prop {string} name - Space name
 * @prop {Array<string>} locales - Array with locale codes
 * @prop {function(): Object} toPlainObject() - Returns this Space as a plain JS object
 */

/**
 * @private
 * @param  {Object} data - API response for a Space
 * @return {Space}
 */


function wrapSpace(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)(data));
}

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapEntry = wrapEntry;
exports.wrapEntryCollection = wrapEntryCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(7));

var _contentfulSdkCore = __webpack_require__(9);

var _stringifySafe = _interopRequireDefault(__webpack_require__(77));

var _contentfulResolveResponse = _interopRequireDefault(__webpack_require__(78));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * Types of fields found in an Entry
 * @namespace EntryFields
 */

/**
 * @memberof EntryFields
 * @typedef Symbol
 * @type string
 */

/**
 * @memberof EntryFields
 * @typedef Text
 * @type string
 */

/**
 * @memberof EntryFields
 * @typedef Integer
 * @type number
 */

/**
 * @memberof EntryFields
 * @typedef Number
 * @type number
 */

/**
 * @memberof EntryFields
 * @typedef Date
 * @type string
 */

/**
 * @memberof EntryFields
 * @typedef Boolean
 * @type boolean
 */

/**
 * @memberof EntryFields
 * @typedef Location
 * @prop {string} lat - latitude
 * @prop {string} lon - longitude
 */

/**
 * A Field in an Entry can have one of the following types that can be defined in Contentful. See <a href="https://www.contentful.com/developers/docs/references/field-type/">Field Types</a> for more details.
 * @memberof Entities
 * @typedef Field
 * @type EntryFields.Symbol | EntryFields.Text | EntryFields.Integer | EntryFields.Number | EntryFields.Date | EntryFields.Boolean | EntryFields.Location | Entities.Link | Array<EntryFields.Symbol|Entities.Link> | Object
 */

/**
 * @memberof Entities
 * @typedef Entry
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {Entities.Link} sys.contentType - Content Type used by this Entry
 * @prop {string=} sys.locale - If present, indicates the locale which this entry uses
 * @prop {Object<EntryFields.Field>} fields - Object with content for each field
 * @prop {function(): Object} toPlainObject() - Returns this Entry as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw entry data
 * @return {Entry} Wrapped entry data
 */


function wrapEntry(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}
/**
 * @memberof Entities
 * @typedef EntryCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Entry>} items
 * @prop {Array<Object>=} errors - Array of errors that might occur when retrieving entries.
 * @prop {Object<Array>=} includes - Object with arrays of includes for Entries and Assets. This will be present if resolveLinks is on, and any linked entries or assets exist. Those links will be resolved in the Entries present in the items array, but they are also present here in raw form.
 * @prop {function(): Object} toPlainObject() - Returns this Entry collection as a plain JS object
 * @prop {function(?function=, space=): Object} stringifySafe(replacer,space) - Stringifies the entry collection, accounting for circular references. Circular references will be replaced with just a Link object, with a <code>circular</code> property set to <code>true</code>. See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN</a> and <a href="https://www.npmjs.com/package/json-stringify-safe">json-stringify-safe</a> for more details on the arguments this method can take.
 */

/**
 * Data is also mixed in with link getters if links exist and includes were requested
 * @private
 * @param {Object} data - Raw entry collection data
 * @param {Object} options - wrapper options
 * @return {EntryCollection} Wrapped entry collection data
 */


function wrapEntryCollection(data, _ref) {
  let {
    resolveLinks,
    removeUnresolved
  } = _ref;
  const wrappedData = (0, _stringifySafe.default)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));

  if (resolveLinks) {
    wrappedData.items = (0, _contentfulResolveResponse.default)(wrappedData, {
      removeUnresolved,
      itemEntryPoints: ['fields']
    });
  }

  return (0, _contentfulSdkCore.freezeSys)(wrappedData);
}

/***/ }),
/* 181 */
/***/ (function(module, exports) {

exports = module.exports = stringify;
exports.getSerialize = serializer;

function stringify(obj, replacer, spaces, cycleReplacer) {
  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
}

function serializer(replacer, cycleReplacer) {
  var stack = [],
      keys = [];
  if (cycleReplacer == null) cycleReplacer = function (key, value) {
    if (stack[0] === value) return "[Circular ~]";
    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
  };
  return function (key, value) {
    if (stack.length > 0) {
      var thisPos = stack.indexOf(this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value);
    } else stack.push(value);

    return replacer == null ? value : replacer.call(this, key, value);
  };
}

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAsset = wrapAsset;
exports.wrapAssetCollection = wrapAssetCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(7));

var _contentfulSdkCore = __webpack_require__(9);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @memberof Entities
 * @typedef Asset
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {string=} sys.locale - If present, indicates the locale which this asset uses
 * @prop {Object} fields - Object with content for each field
 * @prop {string} fields.title - Title for this asset
 * @prop {string} fields.description - Description for this asset
 * @prop {Object} fields.file - File object for this asset
 * @prop {string} fields.file.fileName - Name for the file
 * @prop {string} fields.file.contentType - Mime type for the file
 * @prop {string} fields.file.url - Url where the file is available at.
 * @prop {Object} fields.file.details - Details for the file, depending on file type (example: image size in bytes, etc)
 * @prop {function(): Object} toPlainObject() - Returns this Asset as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw asset data
 * @return {Asset} Wrapped asset data
 */


function wrapAsset(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}
/**
 * @memberof Entities
 * @typedef AssetCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Asset>} items
 * @prop {function(): Object} toPlainObject() - Returns this Asset collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw asset collection data
 * @return {AssetCollection} Wrapped asset collection data
 */


function wrapAssetCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAssetKey = wrapAssetKey;

var _fastCopy = _interopRequireDefault(__webpack_require__(7));

var _contentfulSdkCore = __webpack_require__(9);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @memberof Entities
 * @typedef AssetKey
 * @prop {string} policy - The asset key's policy
 * @prop {string} secret - The secret for creating a signing token
 * @prop {function(): Object} toPlainObject() - Returns this AssetKey as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw asset key data
 * @return {Asset} Wrapped asset key data
 */


function wrapAssetKey(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapContentType = wrapContentType;
exports.wrapContentTypeCollection = wrapContentTypeCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(7));

var _contentfulSdkCore = __webpack_require__(9);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @memberof Entities
 * @typedef ContentType
 * @prop {Entities.Sys} sys - System metadata
 * @prop {string} name
 * @prop {string} description
 * @prop {string} displayField - Field used as the main display field for Entries
 * @prop {string} Array<Field> - All the fields contained in this Content Type
 * @prop {function(): Object} toPlainObject() - Returns this Content Type as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw content type data
 * @return {ContentType} Wrapped content type data
 */


function wrapContentType(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}
/**
 * @memberof Entities
 * @typedef ContentTypeCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.ContentType>} items
 * @prop {function(): Object} toPlainObject() - Returns this Content Type collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw content type collection data
 * @return {ContentTypeCollection} Wrapped content type collection data
 */


function wrapContentTypeCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapLocale = wrapLocale;
exports.wrapLocaleCollection = wrapLocaleCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(7));

var _contentfulSdkCore = __webpack_require__(9);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @memberof Entities
 * @typedef Locale
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {string} name - locale name (example: English)
 * @prop {string} code - locale code (example: en-US)
 * @prop {string} fallbackCode - the locale code to fallback to when there is not content for the current locale
 * @prop {boolean} default - If this is the default locale
 * @prop {boolean} optional - If the locale needs to be filled in on entries or not
 * @prop {function(): Object} toPlainObject() - Returns this Locale as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw locale data
 * @return {Locale} Wrapped locale data
 */


function wrapLocale(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}
/**
 * @memberof Entities
 * @typedef LocaleCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Locale>} items
 * @prop {function(): Object} toPlainObject() - Returns this Locale collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw locale collection data
 * @return {LocaleCollection} Wrapped locale collection data
 */


function wrapLocaleCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapTag = wrapTag;
exports.wrapTagCollection = wrapTagCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(7));

var _contentfulSdkCore = __webpack_require__(9);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @memberof Entities
 * @typedef Tag
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {string} name - Tag name
 * @prop {function(): Object} toPlainObject() - Returns this tag as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw tag data
 * @return {Tag} Wrapped tag data
 */


function wrapTag(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}
/**
 * @memberof Entities
 * @typedef TagCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Tag>} items
 * @prop {function(): Object} toPlainObject() - Returns this Tag collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw tag collection data
 * @return {TagCollection} Wrapped tag collection data
 */


function wrapTagCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy.default)(data)));
}

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pagedSync;

var _contentfulSdkCore = __webpack_require__(9);

var _contentfulResolveResponse = _interopRequireDefault(__webpack_require__(78));

var _stringifySafe = _interopRequireDefault(__webpack_require__(77));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * @memberof Sync
 * @typedef SyncCollection
 * @prop {Array<Entities.Entry>} entries - All existing entries on first sync. New and updated entries on subsequent syncs.
 * @prop {Array<Entities.Asset>} assets - All existing assets on first sync. New and updated assets on subsequent syncs.
 * @prop {Array<Sync.DeletedEntry>} deletedEntries - List of deleted Entries since last sync
 * @prop {Array<Sync.DeletedAsset>} deletedAssets - List of deleted Assets since last sync
 * @prop {string} nextSyncToken - Token to be sent to the next sync call
 * @prop {function(): Object} toPlainObject() - Returns this Sync collection as a plain JS object
 * @prop {function(?function=, space=): Object} stringifySafe(replacer,space) - Stringifies the Sync collection, accounting for circular references. Circular references will be replaced with just a Link object, with a <code>circular</code> property set to <code>true</code>. See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN</a> and <a href="https://www.npmjs.com/package/json-stringify-safe">json-stringify-safe</a> for more details on the arguments this method can take.
 */

/**
 * Deleted Entries are the same as Entries, but only appear on the sync API.
 * @memberof Sync
 * @typedef DeletedEntry
 * @type Entities.Entry
 */

/**
 * Deleted Assets are the same as Assets, but only appear on the sync API.
 * @memberof Sync
 * @typedef DeletedAsset
 * @type Entities.Asset
 */

/**
 * This module retrieves all the available pages for a sync operation
 * @private
 * @param {Object} http - HTTP client
 * @param {Object} query - Query object
 * @param {Object} options - Sync options object
 * @param {boolean} [options.resolveLinks = true] - If links should be resolved
 * @param {boolean} [options.removeUnresolved = false] - If unresolvable links should get removed
 * @param {boolean} [options.paginate = true] - If further sync pages should automatically be crawled
 * @return {Promise<SyncCollection>}
 */


async function pagedSync(http, query) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!query || !query.initial && !query.nextSyncToken && !query.nextPageToken) {
    throw new Error('Please provide one of `initial`, `nextSyncToken` or `nextPageToken` parameters for syncing');
  }

  if (query && query.content_type && !query.type) {
    query.type = 'Entry';
  } else if (query && query.content_type && query.type && query.type !== 'Entry') {
    throw new Error('When using the `content_type` filter your `type` parameter cannot be different from `Entry`.');
  }

  const defaultOptions = {
    resolveLinks: true,
    removeUnresolved: false,
    paginate: true
  };

  const {
    resolveLinks,
    removeUnresolved,
    paginate
  } = _objectSpread(_objectSpread({}, defaultOptions), options);

  const syncOptions = {
    paginate
  };
  const response = await getSyncPage(http, [], query, syncOptions); // clones response.items used in includes because we don't want these to be mutated

  if (resolveLinks) {
    response.items = (0, _contentfulResolveResponse.default)(response, {
      removeUnresolved,
      itemEntryPoints: ['fields']
    });
  } // maps response items again after getters are attached


  const mappedResponseItems = mapResponseItems(response.items);

  if (response.nextSyncToken) {
    mappedResponseItems.nextSyncToken = response.nextSyncToken;
  }

  if (response.nextPageToken) {
    mappedResponseItems.nextPageToken = response.nextPageToken;
  }

  return (0, _contentfulSdkCore.freezeSys)((0, _stringifySafe.default)((0, _contentfulSdkCore.toPlainObject)(mappedResponseItems)));
}
/**
 * @private
 * @param {Array<Entities.Entry|Entities.Array|Sync.DeletedEntry|Sync.DeletedAsset>} items
 * @return {Object} Entities mapped to an object for each entity type
 */


function mapResponseItems(items) {
  const reducer = type => {
    return (accumulated, item) => {
      if (item.sys.type === type) {
        accumulated.push((0, _contentfulSdkCore.toPlainObject)(item));
      }

      return accumulated;
    };
  };

  return {
    entries: items.reduce(reducer('Entry'), []),
    assets: items.reduce(reducer('Asset'), []),
    deletedEntries: items.reduce(reducer('DeletedEntry'), []),
    deletedAssets: items.reduce(reducer('DeletedAsset'), [])
  };
}
/**
 * If the response contains a nextPageUrl, extracts the sync token to get the
 * next page and calls itself again with that token.
 * Otherwise, if the response contains a nextSyncUrl, extracts the sync token
 * and returns it.
 * On each call of this function, any retrieved items are collected in the
 * supplied items array, which gets returned in the end
 * @private
 * @param {Object} http
 * @param {Array<Entities.Entry|Entities.Array|Sync.DeletedEntry|Sync.DeletedAsset>} items
 * @param {Object} query
 * @param {Object} options - Sync page options object
 * @param {boolean} [options.paginate = true] - If further sync pages should automatically be crawled
 * @return {Promise<{items: Array, nextSyncToken: string}>}
 */


async function getSyncPage(http, items, query, _ref) {
  let {
    paginate
  } = _ref;

  if (query.nextSyncToken) {
    query.sync_token = query.nextSyncToken;
    delete query.nextSyncToken;
  }

  if (query.nextPageToken) {
    query.sync_token = query.nextPageToken;
    delete query.nextPageToken;
  }

  if (query.sync_token) {
    delete query.initial;
    delete query.type;
    delete query.content_type;
    delete query.limit;
  }

  const response = await http.get('sync', (0, _contentfulSdkCore.createRequestConfig)({
    query: query
  }));
  const data = response.data || {};
  items = items.concat(data.items || []);

  if (data.nextPageUrl) {
    if (paginate) {
      delete query.initial;
      query.sync_token = getToken(data.nextPageUrl);
      return getSyncPage(http, items, query, {
        paginate
      });
    }

    return {
      items: items,
      nextPageToken: getToken(data.nextPageUrl)
    };
  } else if (data.nextSyncUrl) {
    return {
      items: items,
      nextSyncToken: getToken(data.nextSyncUrl)
    };
  } else {
    return {
      items: []
    };
  }
}
/**
 * Extracts token out of an url
 * @private
 */


function getToken(url) {
  const urlParts = url.split('?');
  return urlParts.length > 0 ? urlParts[1].replace('sync_token=', '') : '';
}

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeSelect;

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/*
* sdk relies heavily on sys metadata
* so we cannot omit the sys property on sdk level entirely
* and we have to ensure that at least `id` and `type` are present
* */


function normalizeSelect(query) {
  if (!query.select) {
    return query;
  } // The selection of fields for the query is limited
  // Get the different parts that are listed for selection


  const allSelects = Array.isArray(query.select) ? query.select : query.select.split(','); // Move the parts into a set for easy access and deduplication

  const selectedSet = new Set(allSelects); // If we already select all of `sys` we can just return
  // since we're anyway fetching everything that is needed

  if (selectedSet.has('sys')) {
    return query;
  } // We don't select `sys` so we need to ensure the minimum set


  selectedSet.add('sys.id');
  selectedSet.add('sys.type'); // Reassign the normalized sys properties

  return _objectSpread(_objectSpread({}, query), {}, {
    select: [...selectedSet].join(',')
  });
}

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationError = void 0;
exports.default = validateTimestamp;

class ValidationError extends Error {
  constructor(name, message) {
    super(`Invalid "${name}" provided, ` + message);
    this.name = 'ValidationError';
  }

}

exports.ValidationError = ValidationError;

function validateTimestamp(name, timestamp, options) {
  options = options || {};

  if (typeof timestamp !== 'number') {
    throw new ValidationError(name, `only numeric values are allowed for timestamps, provided type was "${typeof timestamp}"`);
  }

  if (options.maximum && timestamp > options.maximum) {
    throw new ValidationError(name, `value (${timestamp}) cannot be further in the future than expected maximum (${options.maximum})`);
  }

  if (options.now && timestamp < options.now) {
    throw new ValidationError(name, `value (${timestamp}) cannot be in the past, current time was ${options.now}`);
  }
}

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createGlobalOptions;
/**
 * Link resolution can be set globally, or it can be turned off for the methods
 * which make use of it. The local setting always overrides the global setting.
 * @private
 * @param {boolean} globalSetting - Global library setting for link resolution
 * @returns {function} Link resolver method preconfigured with global setting
 */

function createGlobalOptions(globalSettings) {
  /**
   * Link resolver method
   * @param {Object} query - regular query object used for collection endpoints
   */
  return function getGlobalOptions(query) {
    return Object.assign({}, globalSettings, query);
  };
}

/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var AccountController_namespaceObject = {};
__webpack_require__.r(AccountController_namespaceObject);
__webpack_require__.d(AccountController_namespaceObject, "getAccount", function() { return getAccount; });
__webpack_require__.d(AccountController_namespaceObject, "register", function() { return register; });
__webpack_require__.d(AccountController_namespaceObject, "resendVerificationEmail", function() { return resendVerificationEmail; });
__webpack_require__.d(AccountController_namespaceObject, "confirm", function() { return AccountController_confirm; });
__webpack_require__.d(AccountController_namespaceObject, "login", function() { return login; });
__webpack_require__.d(AccountController_namespaceObject, "logout", function() { return logout; });
__webpack_require__.d(AccountController_namespaceObject, "password", function() { return AccountController_password; });
__webpack_require__.d(AccountController_namespaceObject, "requestReset", function() { return requestReset; });
__webpack_require__.d(AccountController_namespaceObject, "reset", function() { return AccountController_reset; });
__webpack_require__.d(AccountController_namespaceObject, "update", function() { return update; });
__webpack_require__.d(AccountController_namespaceObject, "addAddress", function() { return addAddress; });
__webpack_require__.d(AccountController_namespaceObject, "updateAddress", function() { return updateAddress; });
__webpack_require__.d(AccountController_namespaceObject, "removeAddress", function() { return removeAddress; });
__webpack_require__.d(AccountController_namespaceObject, "setDefaultBillingAddress", function() { return setDefaultBillingAddress; });
__webpack_require__.d(AccountController_namespaceObject, "setDefaultShippingAddress", function() { return setDefaultShippingAddress; });
var ProductController_namespaceObject = {};
__webpack_require__.r(ProductController_namespaceObject);
__webpack_require__.d(ProductController_namespaceObject, "getProduct", function() { return getProduct; });
__webpack_require__.d(ProductController_namespaceObject, "query", function() { return ProductController_query; });
__webpack_require__.d(ProductController_namespaceObject, "queryCategories", function() { return queryCategories; });
__webpack_require__.d(ProductController_namespaceObject, "searchableAttributes", function() { return searchableAttributes; });
var CartController_namespaceObject = {};
__webpack_require__.r(CartController_namespaceObject);
__webpack_require__.d(CartController_namespaceObject, "getCart", function() { return getCart; });
__webpack_require__.d(CartController_namespaceObject, "addToCart", function() { return addToCart; });
__webpack_require__.d(CartController_namespaceObject, "updateLineItem", function() { return updateLineItem; });
__webpack_require__.d(CartController_namespaceObject, "removeLineItem", function() { return removeLineItem; });
__webpack_require__.d(CartController_namespaceObject, "updateCart", function() { return updateCart; });
__webpack_require__.d(CartController_namespaceObject, "checkout", function() { return checkout; });
__webpack_require__.d(CartController_namespaceObject, "getOrders", function() { return getOrders; });
__webpack_require__.d(CartController_namespaceObject, "getShippingMethods", function() { return getShippingMethods; });
__webpack_require__.d(CartController_namespaceObject, "getAvailableShippingMethods", function() { return getAvailableShippingMethods; });
__webpack_require__.d(CartController_namespaceObject, "setShippingMethod", function() { return setShippingMethod; });
__webpack_require__.d(CartController_namespaceObject, "addPaymentByInvoice", function() { return addPaymentByInvoice; });
__webpack_require__.d(CartController_namespaceObject, "updatePayment", function() { return updatePayment; });
__webpack_require__.d(CartController_namespaceObject, "redeemDiscount", function() { return redeemDiscount; });
__webpack_require__.d(CartController_namespaceObject, "removeDiscount", function() { return removeDiscount; });
var WishlistController_namespaceObject = {};
__webpack_require__.r(WishlistController_namespaceObject);
__webpack_require__.d(WishlistController_namespaceObject, "getWishlist", function() { return getWishlist; });
__webpack_require__.d(WishlistController_namespaceObject, "createWishlist", function() { return createWishlist; });
__webpack_require__.d(WishlistController_namespaceObject, "addToWishlist", function() { return addToWishlist; });
__webpack_require__.d(WishlistController_namespaceObject, "removeLineItem", function() { return WishlistController_removeLineItem; });
__webpack_require__.d(WishlistController_namespaceObject, "updateLineItemCount", function() { return updateLineItemCount; });
var ProjectController_namespaceObject = {};
__webpack_require__.r(ProjectController_namespaceObject);
__webpack_require__.d(ProjectController_namespaceObject, "getProjectSettings", function() { return getProjectSettings; });
var AdyenController_namespaceObject = {};
__webpack_require__.r(AdyenController_namespaceObject);
__webpack_require__.d(AdyenController_namespaceObject, "createSession", function() { return createSession; });
__webpack_require__.d(AdyenController_namespaceObject, "checkout", function() { return AdyenController_checkout; });
__webpack_require__.d(AdyenController_namespaceObject, "notifications", function() { return notifications; });
var ContenfulController_namespaceObject = {};
__webpack_require__.r(ContenfulController_namespaceObject);
__webpack_require__.d(ContenfulController_namespaceObject, "getEntries", function() { return getEntries; });
__webpack_require__.d(ContenfulController_namespaceObject, "getEntry", function() { return getEntry; });

// EXTERNAL MODULE: external "querystring"
var external_querystring_ = __webpack_require__(16);
var external_querystring_default = /*#__PURE__*/__webpack_require__.n(external_querystring_);

// CONCATENATED MODULE: ./node_modules/@commercetools/platform-sdk/dist/commercetools-platform-sdk.esm.js


function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate <raml_file_path> -o <output_path> -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


function isDefined(value) {
  return typeof value !== 'undefined' && value !== null;
}

function cleanObject(obj) {
  return Object.keys(obj).reduce((result, key) => {
    const value = obj[key];

    if (Array.isArray(value)) {
      const values = value.filter(isDefined);

      if (!values.length) {
        return result;
      }

      return { ...result,
        [key]: values
      };
    }

    if (isDefined(value)) {
      return { ...result,
        [key]: value
      };
    }

    return result;
  }, {});
}

function formatQueryString(variableMap) {
  const map = cleanObject(variableMap);
  const result = Object(external_querystring_["stringify"])(map);

  if (result === '') {
    return '';
  }

  return `?${result}`;
}

function buildRelativeUri(commonRequest) {
  const pathMap = commonRequest.pathVariables;
  var uri = commonRequest.uriTemplate;

  for (const param in pathMap) {
    uri = uri.replace(`{${param}}`, `${pathMap[param]}`);
  }

  const resQuery = formatQueryString(commonRequest.queryParams || {});
  return `${uri}${resQuery}`;
}

class ApiRequest {
  constructor(request, requestExecutor) {
    this.requestExecutor = requestExecutor;

    _defineProperty(this, "request", void 0);

    this.request = { ...request,
      uri: buildRelativeUri(request)
    };
  }

  clientRequest() {
    return this.request;
  }

  execute() {
    return this.requestExecutor(this.request);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyApiClientsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/api-clients/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/api-clients/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyApiClientsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyApiClientsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/api-clients',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/api-clients',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartDiscountsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartDiscountsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartDiscountsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyCartDiscountsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyCartDiscountsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartsReplicateRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts/replicate',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the active cart of the customer that has been modified most recently.
   *	It does not consider carts with CartOrigin Merchant. If no active cart exists, a 404 Not Found error is returned.
   *
   *	The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
   *	send an Update request with the Recalculate update action instead.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts/customer-id={customerId}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  replicate() {
    return new ByProjectKeyCartsReplicateRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withCustomerId(childPathArgs) {
    return new ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withKey(childPathArgs) {
    return new ByProjectKeyCartsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyCartsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a cart can fail with an InvalidOperation if the referenced shipping method in the
   *	CartDraft has a predicate which does not match the cart.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCategoriesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCategoriesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCategoriesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyCategoriesKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyCategoriesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/categories',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a category produces the CategoryCreated message.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/categories',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyChannelsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/channels/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/channels/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/channels/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyChannelsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyChannelsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/channels',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/channels',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Get CustomObject by container and key
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/custom-objects/{container}/{key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Delete CustomObject by container and key
   */


  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/custom-objects/{container}/{key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomObjectsByContainerRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/custom-objects/{container}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomObjectsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withContainerAndKey(childPathArgs) {
    return new ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withContainer(childPathArgs) {
    return new ByProjectKeyCustomObjectsByContainerRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The query endpoint allows to retrieve custom objects in a specific container or all custom objects.
   *	For performance reasons, it is highly advisable to query only for custom objects in a container by using
   *	the container field in the where predicate.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/custom-objects',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a new custom object or updates an existing custom object.
   *	If an object with the given container/key exists,
   *	the object will be replaced with the new value and the version is incremented.
   *	If the request contains a version and an object with the given container/key exists then the version
   *	must match the version of the existing object. Concurrent updates for the same custom object still can result
   *	in a Conflict (409) even if the version is not provided.
   *	Fields with null values will not be saved.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/custom-objects',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomerGroupsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customer-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customer-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customer-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customer-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customer-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customer-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomerGroupsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyCustomerGroupsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customer-groups',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customer-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersEmailConfirmRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Verifies customer's email using a token.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/email/confirm',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Create a Token for verifying the Customer's Email
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/email-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	The token value is used to reset the password of the customer with the given email. The token is
   *	valid only for 10 minutes.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/password-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersPasswordRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Change a customers password
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/password',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersPasswordResetRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Set a new password using a token.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/password/reset',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/email-token={emailToken}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/password-token={passwordToken}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyCustomersRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withPasswordToken(childPathArgs) {
    return new ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withEmailToken(childPathArgs) {
    return new ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	To verify a customer's email, an email token can be created. This should be embedded in a link and sent to the
   *	customer via email. When the customer clicks on the link, the "verify customer's email" endpoint should be called,
   *	which sets customer's isVerifiedEmail field to true.
   *
   */


  emailToken() {
    return new ByProjectKeyCustomersEmailTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  emailConfirm() {
    return new ByProjectKeyCustomersEmailConfirmRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  password() {
    return new ByProjectKeyCustomersPasswordRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  passwordReset() {
    return new ByProjectKeyCustomersPasswordResetRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The following workflow can be used to reset the customer's password:
   *
   *	* Create a password reset token and send it embedded in a link to the customer.
   *	* When the customer clicks on the link, the customer is retrieved with the token.
   *	* The customer enters a new password and the "reset customer's password" endpoint is called.
   *
   */


  passwordToken() {
    return new ByProjectKeyCustomersPasswordTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withKey(childPathArgs) {
    return new ByProjectKeyCustomersKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyCustomersByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a customer. If an anonymous cart is passed in,
   *	then the cart is assigned to the created customer and the version number of the Cart will increase.
   *	If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyDiscountCodesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-codes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-codes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/discount-codes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyDiscountCodesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyDiscountCodesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-codes',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-codes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyExtensionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the representation of an extension by its id.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/extensions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/extensions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/extensions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyExtensionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the representation of an extension by its key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/extensions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/extensions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/extensions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyExtensionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyExtensionsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyExtensionsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/extensions',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Currently, a maximum of 25 extensions can be created per project.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/extensions',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyGraphqlRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Execute a GraphQL query
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/graphql',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/graphql',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/replicate',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a cart by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
   *	If the cart exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
   *	If the cart exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the active cart of the customer that has been modified most recently in a specific Store.
   *	The {storeKey} path parameter maps to a Store's key.
   *
   *	If the cart exists in the commercetools project but does not have the store field, or the store field
   *	references a different store, this method returns a ResourceNotFound error.
   *
   *	The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
   *	send an Update request with the Recalculate update action instead.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a cart by its key from a specific Store. The {storeKey} path parameter maps to a Store's key.
   *	If the cart exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
   *	If the cart exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withCustomerId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  replicate() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Queries carts in a specific Store. The {storeKey} path parameter maps to a Store's key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
   *	When using this endpoint the cart's store field is always set to the store specified in the path parameter.
   *	Creating a cart can fail with an InvalidOperation if the referenced shipping method
   *	in the CartDraft has a predicate which does not match the cart.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Verifies customer's email using a token.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email/confirm',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Create a Token for verifying the Customer's Email in store
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	The token value is used to reset the password of the customer with the given email. The token is
   *	valid only for 10 minutes.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Change a customers password
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Set a new password using a token.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password/reset',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a customer by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
   *	It also considers customers that do not have the stores field.
   *	If the customer exists in the commercetools project but the stores field references different stores,
   *	this method returns a ResourceNotFound error.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates a customer in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
   *	If the customer exists in the commercetools project but the stores field references a different store,
   *	this method returns a ResourceNotFound error.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a customer by its Key from a specific Store. The {storeKey} path parameter maps to a Store's key.
   *	It also considers customers that do not have the stores field.
   *	If the customer exists in the commercetools project but the stores field references different stores,
   *	this method returns a ResourceNotFound error.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the customer exists in the commercetools project but the stores field references a different store,
   *	this method returns a ResourceNotFound error.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withPasswordToken(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withEmailToken(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	To verify a customer's email, an email token can be created. This should be embedded in a link and sent to the
   *	customer via email. When the customer clicks on the link,
   *	the "verify customer's email" endpoint should be called,
   *	which sets customer's isVerifiedEmail field to true.
   *
   */


  emailToken() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  emailConfirm() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  password() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  passwordReset() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The following workflow can be used to reset the customer's password:
   *
   *	* Create a password reset token and send it embedded in a link to the customer.
   *	* When the customer clicks on the link, the customer is retrieved with the token.
   *	* The customer enters a new password and the "reset customer's password" endpoint is called.
   *
   */


  passwordToken() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a customer in a specific Store. The {storeKey} path parameter maps to a Store's key.
   *	When using this endpoint, if omitted,
   *	the customer's stores field is set to the store specified in the path parameter.
   *	If an anonymous cart is passed in as when using this method,
   *	then the cart is assigned to the created customer and the version number of the Cart increases.
   *	If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer and
   *	the store specified. If you pass in a cart with a store field specified,
   *	the store field must reference the same store specified in the {storeKey} path parameter.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Authenticate Customer (Sign In) in store
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/login',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/active-cart',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets a shopping list by ID.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets a shopping list by Key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Update a shopping list found by its Key.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */


  carts() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a order, usually after a checkout process has been completed.
   */


  orders() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  activeCart() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   *
   */


  shoppingLists() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns an order by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
   *	If the order exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
   *	If the order exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns an order by its order number from a specific Store.
   *	The {storeKey} path parameter maps to a Store's key.
   *	If the order exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *	In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
   *	it should be provided in URL-encoded format.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
   *	If the order exists in the commercetools project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *	In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
   *	it should be provided in URL-encoded format.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withOrderNumber(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Queries orders in a specific Store. The {storeKey} path parameter maps to a Store's key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an order from a Cart from a specific Store. The {storeKey} path parameter maps to a Store's key.
   *	When using this endpoint the orders's store field is always set to the store specified in the path parameter.
   *	The cart must have a shipping address set before creating an order. When using the Platform TaxMode,
   *	the shipping address is used for tax calculation.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Get ShippingMethods for a cart in a store
   */


  matchingCart() {
    return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets a shopping list by ID.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets a shopping list by Key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Update a shopping list found by its Key.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInStoreKeyByStoreKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */


  carts() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a cart, usually after a checkout process has been completed.
   */


  orders() {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  me() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A customer is a person purchasing products. customers, Orders,
   *	Comments and Reviews can be associated to a customer.
   *
   */


  customers() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Retrieves the authenticated customer.
   */


  login() {
    return new ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  shippingMethods() {
    return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   *
   */


  shoppingLists() {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInventoryByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/inventory/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/inventory/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/inventory/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyInventoryRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyInventoryByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/inventory',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/inventory',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyLoginRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Authenticate Customer (Sign In). Retrieves the authenticated
   *	customer (a customer that matches the given email/password pair).
   *	If used with an access token for Anonymous Sessions,
   *	all orders and carts belonging to the anonymousId will be assigned to the newly created customer.
   *	If a cart is is returned as part of the CustomerSignInResult,
   *	it has been recalculated (It will have up-to-date prices, taxes and discounts,
   *	and invalid line items have been removed.).
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/login',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeActiveCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/active-cart',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeCartsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyMeCartsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyMeCartsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeEmailConfirmRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/email/confirm',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeLoginRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/login',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyMeOrdersByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMePasswordResetRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/password/reset',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMePasswordRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  reset() {
    return new ByProjectKeyMePasswordResetRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/password',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMePaymentsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMePaymentsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMePaymentsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyMePaymentsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyMePaymentsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/payments',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyMeShoppingListsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withKey(childPathArgs) {
    return new ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeSignupRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/signup',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMeRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  emailConfirm() {
    return new ByProjectKeyMeEmailConfirmRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  password() {
    return new ByProjectKeyMePasswordRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  signup() {
    return new ByProjectKeyMeSignupRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  login() {
    return new ByProjectKeyMeLoginRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  activeCart() {
    return new ByProjectKeyMeActiveCartRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */


  carts() {
    return new ByProjectKeyMeCartsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a cart, usually after a checkout process has been completed.
   */


  orders() {
    return new ByProjectKeyMeOrdersRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Payments endpoint creates and provides access to payments scoped to a specific user.
   */


  payments() {
    return new ByProjectKeyMePaymentsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Shopping Lists endpoint creates and provides access to shopping lists scoped to a specific user.
   */


  shoppingLists() {
    return new ByProjectKeyMeShoppingListsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Update my customer
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Delete my Customer
   */


  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMessagesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/messages/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyMessagesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withId(childPathArgs) {
    return new ByProjectKeyMessagesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/messages',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersEditsByIDApplyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits/{ID}/apply',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersEditsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  apply() {
    return new ByProjectKeyOrdersEditsByIDApplyRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/edits/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/edits/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersEditsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/edits/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/edits/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersEditsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyOrdersEditsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyOrdersEditsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/edits',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersImportRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Create an Order by Import
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/import',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
   *	it should be provided in URL-encoded format.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  importOrder() {
    return new ByProjectKeyOrdersImportRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withOrderNumber(childPathArgs) {
    return new ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	OrderEdit are containers for financial changes after an Order has been placed.
   */


  edits() {
    return new ByProjectKeyOrdersEditsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyOrdersByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an order from a Cart.
   *	The cart must have a shipping address set before creating an order.
   *	When using the Platform TaxMode, the shipping address is used for tax calculation.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyPaymentsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyPaymentsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyPaymentsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyPaymentsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyPaymentsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payments',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	To create a payment object a payment draft object has to be given with the request.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductDiscountsMatchingRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts/matching',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductDiscountsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductDiscountsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductDiscountsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  matching() {
    return new ByProjectKeyProductDiscountsMatchingRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withKey(childPathArgs) {
    return new ByProjectKeyProductDiscountsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyProductDiscountsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-discounts',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductProjectionsSearchRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Search Product Projection
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-projections/search',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Search Product Projection
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/search',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductProjectionsSuggestRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/suggest',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductProjectionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a product in a catalog by ID.
   *	When used with an API client that has the view_published_products:{projectKey} scope,
   *	this endpoint only returns published (current) product projections.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductProjectionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a product found by Key.
   *	When used with an API client that has the view_published_products:{projectKey} scope,
   *	this endpoint only returns published (current) product projections.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductProjectionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This endpoint provides high performance search queries over ProductProjections. The query result contains the
   *	ProductProjections for which at least one ProductVariant matches the search query. This means that variants can
   *	be included in the result also for which the search query does not match. To determine which ProductVariants match
   *	the search query, the returned ProductProjections include the additional field isMatchingVariant.
   *
   */


  search() {
    return new ByProjectKeyProductProjectionsSearchRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The source of data for suggestions is the searchKeyword field in a product
   */


  suggest() {
    return new ByProjectKeyProductProjectionsSuggestRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withKey(childPathArgs) {
    return new ByProjectKeyProductProjectionsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyProductProjectionsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	You can use the product projections query endpoint to get the current or staged representations of Products.
   *	When used with an API client that has the view_published_products:{projectKey} scope,
   *	this endpoint only returns published (current) product projections.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductTypesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductTypesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductTypesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyProductTypesKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyProductTypesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-types',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-types',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductsByIDImagesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Uploads a binary image file to a given product variant. The supported image formats are JPEG, PNG and GIF.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products/{ID}/images',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  images() {
    return new ByProjectKeyProductsByIDImagesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Gets the full representation of a product by ID.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if product with given ID exists.
   */


  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the full representation of a product by Key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if product with given key exists.
   */


  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyProductsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyProductsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyProductsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	You can use the query endpoint to get the full representations of products.
   *	REMARK: We suggest to use the performance optimized search endpoint which has a bunch functionalities,
   *	the query API lacks like sorting on custom attributes, etc.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if products exist.
   */


  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/products',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }
  /**
   *	To create a new product, send a representation that is going to become the initial staged representation
   *	of the new product in the master catalog. If price selection query parameters are provided,
   *	the selected prices will be added to the response.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyReviewsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/reviews/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/reviews/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/reviews/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyReviewsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/reviews/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/reviews/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/reviews/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyReviewsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyReviewsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyReviewsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/reviews',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/reviews',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShippingMethodsMatchingCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/matching-cart',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShippingMethodsMatchingLocationRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/matching-location',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/matching-orderedit',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShippingMethodsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shipping-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shipping-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShippingMethodsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shipping-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shipping-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShippingMethodsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyShippingMethodsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get ShippingMethods for a cart
   */


  matchingCart() {
    return new ByProjectKeyShippingMethodsMatchingCartRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get ShippingMethods for an order edit
   */


  matchingOrderedit() {
    return new ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get ShippingMethods for a location
   */


  matchingLocation() {
    return new ByProjectKeyShippingMethodsMatchingLocationRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyShippingMethodsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shipping-methods',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets a shopping list by ID.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets a shopping list by Key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Update a shopping list found by its Key.
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyShoppingListsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyShoppingListsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyStatesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/states/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/states/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/states/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyStatesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/states/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/states/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/states/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyStatesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyStatesKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyStatesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/states',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/states',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyStoresByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/stores/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/stores/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/stores/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyStoresKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/stores/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/stores/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/stores/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyStoresRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyStoresKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyStoresByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/stores',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/stores',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeySubscriptionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the representation of a subscription by its id.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/subscriptions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/subscriptions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/subscriptions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeySubscriptionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the representation of a subscription by its key.
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/subscriptions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/subscriptions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/subscriptions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeySubscriptionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeySubscriptionsKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeySubscriptionsByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/subscriptions',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	The creation of a Subscription is eventually consistent, it may take up to a minute before it becomes fully active.
   *	In order to test that the destination is correctly configured, a test message will be put into the queue.
   *	If the message could not be delivered, the subscription will not be created.
   *	The payload of the test message is a notification of type ResourceCreated for the resourceTypeId subscription.
   *	Currently, a maximum of 25 subscriptions can be created per project.
   *
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/subscriptions',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyTaxCategoriesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/tax-categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/tax-categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/tax-categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/tax-categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/tax-categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/tax-categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyTaxCategoriesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyTaxCategoriesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/tax-categories',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/tax-categories',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyTypesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyTypesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyTypesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyTypesKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyTypesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/types',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/types',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyZonesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/zones/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/zones/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/zones/{ID}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyZonesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/zones/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/zones/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/zones/key={key}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyZonesRequestBuilder {
  constructor(args) {
    this.args = args;
  }

  withKey(childPathArgs) {
    return new ByProjectKeyZonesKeyByKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  withId(childPathArgs) {
    return new ByProjectKeyZonesByIDRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/zones',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }

  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/zones',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


class ByProjectKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Categories are used to organize products in a hierarchical structure.
   */


  categories() {
    return new ByProjectKeyCategoriesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */


  carts() {
    return new ByProjectKeyCartsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Cart discounts are used to change the prices of different elements within a cart.
   */


  cartDiscounts() {
    return new ByProjectKeyCartDiscountsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Channels represent a source or destination of different entities. They can be used to model warehouses or stores.
   *
   */


  channels() {
    return new ByProjectKeyChannelsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A customer is a person purchasing products. customers, Orders, Comments and Reviews can be associated to a customer.
   *
   */


  customers() {
    return new ByProjectKeyCustomersRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	customer-groups are used to evaluate products and channels.
   */


  customerGroups() {
    return new ByProjectKeyCustomerGroupsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Store custom JSON values.
   */


  customObjects() {
    return new ByProjectKeyCustomObjectsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Discount codes can be added to a discount-code to enable certain discount-code discounts.
   */


  discountCodes() {
    return new ByProjectKeyDiscountCodesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The commercetools™ platform provides a GraphQL API
   */


  graphql() {
    return new ByProjectKeyGraphqlRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Inventory allows you to track stock quantities.
   */


  inventory() {
    return new ByProjectKeyInventoryRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Retrieves the authenticated customer.
   */


  login() {
    return new ByProjectKeyLoginRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A message represents a change or an action performed on a resource (like an Order or a Product).
   */


  messages() {
    return new ByProjectKeyMessagesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a order, usually after a checkout process has been completed.
   */


  orders() {
    return new ByProjectKeyOrdersRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Payments hold information about the current state of receiving and/or refunding money
   */


  payments() {
    return new ByProjectKeyPaymentsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Products are the sellable goods in an e-commerce project on CTP. This document explains some design concepts
   *	of products on CTP and describes the available HTTP APIs for working with them.
   *
   */


  products() {
    return new ByProjectKeyProductsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Product discounts are used to change certain product prices.
   */


  productDiscounts() {
    return new ByProjectKeyProductDiscountsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A projected representation of a product shows the product with its current or staged data. The current or staged
   *	representation of a product in a catalog is called a product projection.
   *
   */


  productProjections() {
    return new ByProjectKeyProductProjectionsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Product Types are used to describe common characteristics, most importantly common custom attributes,
   *	of many concrete products.
   *
   */


  productTypes() {
    return new ByProjectKeyProductTypesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Reviews are used to evaluate products and channels.
   */


  reviews() {
    return new ByProjectKeyReviewsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Shipping Methods define where orders can be shipped and what the costs are.
   */


  shippingMethods() {
    return new ByProjectKeyShippingMethodsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   */


  shoppingLists() {
    return new ByProjectKeyShoppingListsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The commercetools platform allows you to model states of certain objects, such as orders, line items, products,
   *	reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
   *	implement.
   *
   */


  states() {
    return new ByProjectKeyStatesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice
   */


  subscriptions() {
    return new ByProjectKeySubscriptionsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Tax Categories define how products are to be taxed in different countries.
   */


  taxCategories() {
    return new ByProjectKeyTaxCategoriesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Types define custom fields that are used to enhance resources as you need.
   */


  types() {
    return new ByProjectKeyTypesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Zones allow defining ShippingRates for specific Locations.
   */


  zones() {
    return new ByProjectKeyZonesRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  me() {
    return new ByProjectKeyMeRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Extend the behavior of an API with your business logic
   */


  extensions() {
    return new ByProjectKeyExtensionsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.
   *
   */


  apiClients() {
    return new ByProjectKeyApiClientsRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Stores let you model the context your customers shop in.
   */


  stores() {
    return new ByProjectKeyStoresRequestBuilder({
      pathArgs: { ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  inStoreKeyWithStoreKeyValue(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyRequestBuilder({
      pathArgs: { ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The Endpoint is responding a limited set of information about settings and configuration of the project.
   *
   */


  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}',
      pathVariables: this.args.pathArgs,
      headers: { ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }
    }, this.args.executeRequest);
  }
  /**
   *	Update project
   */


  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...(methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }

}

class ApiRoot {
  constructor(args) {
    var _args$baseUri;

    _defineProperty(this, "executeRequest", void 0);

    _defineProperty(this, "baseUri", void 0);

    this.executeRequest = args.executeRequest;
    this.baseUri = (_args$baseUri = args.baseUri) !== null && _args$baseUri !== void 0 ? _args$baseUri : 'https://api.europe-west1.gcp.commercetools.com';
  }
  /**
   *	The Project endpoint is used to retrieve certain information from a project.
   */


  withProjectKey(childPathArgs) {
    return new ByProjectKeyRequestBuilder({
      pathArgs: { ...childPathArgs
      },
      executeRequest: this.executeRequest,
      baseUri: this.baseUri
    });
  }

}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate <raml_file_path> -o <output_path> -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


const createExecutorFromMiddlewares = (executor, midds) => {
  if (!midds || midds.length == 0) {
    return executor;
  }

  const reduced = midds.reduce(reduceMiddleware);
  return middlewareToExecutor(reduced, executor);
};

function reduceMiddleware(middleware1, middleware2) {
  return (request, executor) => middleware1(request, middlewareToExecutor(middleware2, executor));
}

function middlewareToExecutor(middleware, executor) {
  return request => middleware(request, executor);
}

function createApiBuilderFromCtpClient(ctpClient, baseUri) {
  return new ApiRoot({
    executeRequest: ctpClient.execute,
    baseUri: baseUri
  });
}


// EXTERNAL MODULE: external "stream"
var external_stream_ = __webpack_require__(0);

// EXTERNAL MODULE: external "http"
var external_http_ = __webpack_require__(6);

// EXTERNAL MODULE: external "url"
var external_url_ = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/whatwg-url/lib/public-api.js
var public_api = __webpack_require__(21);

// EXTERNAL MODULE: external "https"
var external_https_ = __webpack_require__(10);

// EXTERNAL MODULE: external "zlib"
var external_zlib_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/@commercetools/sdk-client-v2/node_modules/node-fetch/lib/index.mjs





 // Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js
// fix for "Readable" isn't a named export issue

const Readable = external_stream_.Readable;
const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
  constructor() {
    this[TYPE] = '';
    const blobParts = arguments[0];
    const options = arguments[1];
    const buffers = [];
    let size = 0;

    if (blobParts) {
      const a = blobParts;
      const length = Number(a.length);

      for (let i = 0; i < length; i++) {
        const element = a[i];
        let buffer;

        if (element instanceof Buffer) {
          buffer = element;
        } else if (ArrayBuffer.isView(element)) {
          buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
        } else if (element instanceof ArrayBuffer) {
          buffer = Buffer.from(element);
        } else if (element instanceof Blob) {
          buffer = element[BUFFER];
        } else {
          buffer = Buffer.from(typeof element === 'string' ? element : String(element));
        }

        size += buffer.length;
        buffers.push(buffer);
      }
    }

    this[BUFFER] = Buffer.concat(buffers);
    let type = options && options.type !== undefined && String(options.type).toLowerCase();

    if (type && !/[^\u0020-\u007E]/.test(type)) {
      this[TYPE] = type;
    }
  }

  get size() {
    return this[BUFFER].length;
  }

  get type() {
    return this[TYPE];
  }

  text() {
    return Promise.resolve(this[BUFFER].toString());
  }

  arrayBuffer() {
    const buf = this[BUFFER];
    const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    return Promise.resolve(ab);
  }

  stream() {
    const readable = new Readable();

    readable._read = function () {};

    readable.push(this[BUFFER]);
    readable.push(null);
    return readable;
  }

  toString() {
    return '[object Blob]';
  }

  slice() {
    const size = this.size;
    const start = arguments[0];
    const end = arguments[1];
    let relativeStart, relativeEnd;

    if (start === undefined) {
      relativeStart = 0;
    } else if (start < 0) {
      relativeStart = Math.max(size + start, 0);
    } else {
      relativeStart = Math.min(start, size);
    }

    if (end === undefined) {
      relativeEnd = size;
    } else if (end < 0) {
      relativeEnd = Math.max(size + end, 0);
    } else {
      relativeEnd = Math.min(end, size);
    }

    const span = Math.max(relativeEnd - relativeStart, 0);
    const buffer = this[BUFFER];
    const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
    const blob = new Blob([], {
      type: arguments[2]
    });
    blob[BUFFER] = slicedBuffer;
    return blob;
  }

}

Object.defineProperties(Blob.prototype, {
  size: {
    enumerable: true
  },
  type: {
    enumerable: true
  },
  slice: {
    enumerable: true
  }
});
Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
  value: 'Blob',
  writable: false,
  enumerable: false,
  configurable: true
});
/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */

function FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type; // when err.type is `system`, err.code contains system error code

  if (systemError) {
    this.code = this.errno = systemError.code;
  } // hide custom error implementation details from end-users


  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';
let convert;

try {
  convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals'); // fix an issue where "PassThrough" isn't a named export for node <10

const PassThrough = external_stream_.PassThrough;
/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */

function Body(body) {
  var _this = this;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$size = _ref.size;

  let size = _ref$size === undefined ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

  if (body == null) {
    // body is undefined or null
    body = null;
  } else if (isURLSearchParams(body)) {
    // body is a URLSearchParams
    body = Buffer.from(body.toString());
  } else if (isBlob(body)) ;else if (Buffer.isBuffer(body)) ;else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
    // body is ArrayBuffer
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    // body is ArrayBufferView
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof external_stream_) ;else {
    // none of the above
    // coerce to string then buffer
    body = Buffer.from(String(body));
  }

  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;

  if (body instanceof external_stream_) {
    body.on('error', function (err) {
      const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
      _this[INTERNALS].error = error;
    });
  }
}

Body.prototype = {
  get body() {
    return this[INTERNALS].body;
  },

  get bodyUsed() {
    return this[INTERNALS].disturbed;
  },

  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  arrayBuffer() {
    return consumeBody.call(this).then(function (buf) {
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    });
  },

  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  blob() {
    let ct = this.headers && this.headers.get('content-type') || '';
    return consumeBody.call(this).then(function (buf) {
      return Object.assign( // Prevent copying
      new Blob([], {
        type: ct.toLowerCase()
      }), {
        [BUFFER]: buf
      });
    });
  },

  /**
   * Decode response as json
   *
   * @return  Promise
   */
  json() {
    var _this2 = this;

    return consumeBody.call(this).then(function (buffer) {
      try {
        return JSON.parse(buffer.toString());
      } catch (err) {
        return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
      }
    });
  },

  /**
   * Decode response as text
   *
   * @return  Promise
   */
  text() {
    return consumeBody.call(this).then(function (buffer) {
      return buffer.toString();
    });
  },

  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return consumeBody.call(this);
  },

  /**
   * Decode response as text, while automatically detecting the encoding and
   * trying to decode to UTF-8 (non-spec api)
   *
   * @return  Promise
   */
  textConverted() {
    var _this3 = this;

    return consumeBody.call(this).then(function (buffer) {
      return convertBody(buffer, _this3.headers);
    });
  }

}; // In browsers, all properties are enumerable.

Object.defineProperties(Body.prototype, {
  body: {
    enumerable: true
  },
  bodyUsed: {
    enumerable: true
  },
  arrayBuffer: {
    enumerable: true
  },
  blob: {
    enumerable: true
  },
  json: {
    enumerable: true
  },
  text: {
    enumerable: true
  }
});

Body.mixIn = function (proto) {
  for (const name of Object.getOwnPropertyNames(Body.prototype)) {
    // istanbul ignore else: future proof
    if (!(name in proto)) {
      const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
      Object.defineProperty(proto, name, desc);
    }
  }
};
/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */


function consumeBody() {
  var _this4 = this;

  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }

  this[INTERNALS].disturbed = true;

  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }

  let body = this.body; // body is null

  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  } // body is blob


  if (isBlob(body)) {
    body = body.stream();
  } // body is buffer


  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  } // istanbul ignore if: should never happen


  if (!(body instanceof external_stream_)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  } // body is stream
  // get ready to actually consume the body


  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body.Promise(function (resolve, reject) {
    let resTimeout; // allow timeout on slow response body

    if (_this4.timeout) {
      resTimeout = setTimeout(function () {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
      }, _this4.timeout);
    } // handle stream errors


    body.on('error', function (err) {
      if (err.name === 'AbortError') {
        // if the request was aborted, reject with this Error
        abort = true;
        reject(err);
      } else {
        // other errors, such as incorrect content-encoding
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
      }
    });
    body.on('data', function (chunk) {
      if (abort || chunk === null) {
        return;
      }

      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
        return;
      }

      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on('end', function () {
      if (abort) {
        return;
      }

      clearTimeout(resTimeout);

      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        // handle streams that have accumulated too much data (issue #414)
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
      }
    });
  });
}
/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */


function convertBody(buffer, headers) {
  if (typeof convert !== 'function') {
    throw new Error('The package `encoding` must be installed to use the textConverted() function');
  }

  const ct = headers.get('content-type');
  let charset = 'utf-8';
  let res, str; // header

  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  } // no charset in content type, peek at response body for at most 1024 bytes


  str = buffer.slice(0, 1024).toString(); // html5

  if (!res && str) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
  } // html4


  if (!res && str) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);

      if (res) {
        res.pop(); // drop last quote
      }
    }

    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  } // xml


  if (!res && str) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
  } // found charset


  if (res) {
    charset = res.pop(); // prevent decode issues when sites use incorrect encoding
    // ref: https://hsivonen.fi/encoding-menu/

    if (charset === 'gb2312' || charset === 'gbk') {
      charset = 'gb18030';
    }
  } // turn raw buffers into a single utf-8 buffer


  return convert(buffer, 'UTF-8', charset).toString();
}
/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */


function isURLSearchParams(obj) {
  // Duck-typing as a necessary condition.
  if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
    return false;
  } // Brand-checking and more duck-typing as optional condition.


  return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}
/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */


function isBlob(obj) {
  return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */


function clone(instance) {
  let p1, p2;
  let body = instance.body; // don't allow cloning a used body

  if (instance.bodyUsed) {
    throw new Error('cannot clone body after it is used');
  } // check that body is a stream and not form-data object
  // note: we can't clone the form-data object without having it as a dependency


  if (body instanceof external_stream_ && typeof body.getBoundary !== 'function') {
    // tee instance body
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2); // set instance body to teed body and return the other teed body

    instance[INTERNALS].body = p1;
    body = p2;
  }

  return body;
}
/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */


function extractContentType(body) {
  if (body === null) {
    // body is null
    return null;
  } else if (typeof body === 'string') {
    // body is string
    return 'text/plain;charset=UTF-8';
  } else if (isURLSearchParams(body)) {
    // body is a URLSearchParams
    return 'application/x-www-form-urlencoded;charset=UTF-8';
  } else if (isBlob(body)) {
    // body is blob
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    // body is buffer
    return null;
  } else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
    // body is ArrayBuffer
    return null;
  } else if (ArrayBuffer.isView(body)) {
    // body is ArrayBufferView
    return null;
  } else if (typeof body.getBoundary === 'function') {
    // detect form data input from form-data module
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof external_stream_) {
    // body is stream
    // can't really do much about this
    return null;
  } else {
    // Body constructor defaults other things to string
    return 'text/plain;charset=UTF-8';
  }
}
/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */


function getTotalBytes(instance) {
  const body = instance.body;

  if (body === null) {
    // body is null
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    // body is buffer
    return body.length;
  } else if (body && typeof body.getLengthSync === 'function') {
    // detect form data input from form-data module
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
    body.hasKnownLength && body.hasKnownLength()) {
      // 2.x
      return body.getLengthSync();
    }

    return null;
  } else {
    // body is stream
    return null;
  }
}
/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */


function writeToStream(dest, instance) {
  const body = instance.body;

  if (body === null) {
    // body is null
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    // body is buffer
    dest.write(body);
    dest.end();
  } else {
    // body is stream
    body.pipe(dest);
  }
} // expose Promise


Body.Promise = global.Promise;
/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
  name = `${name}`;

  if (invalidTokenRegex.test(name) || name === '') {
    throw new TypeError(`${name} is not a legal HTTP header name`);
  }
}

function validateValue(value) {
  value = `${value}`;

  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */


function find(map, name) {
  name = name.toLowerCase();

  for (const key in map) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }

  return undefined;
}

const MAP = Symbol('map');

class Headers {
  /**
   * Headers class
   *
   * @param   Object  headers  Response headers
   * @return  Void
   */
  constructor() {
    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    this[MAP] = Object.create(null);

    if (init instanceof Headers) {
      const rawHeaders = init.raw();
      const headerNames = Object.keys(rawHeaders);

      for (const headerName of headerNames) {
        for (const value of rawHeaders[headerName]) {
          this.append(headerName, value);
        }
      }

      return;
    } // We don't worry about converting prop to ByteString here as append()
    // will handle it.


    if (init == null) ;else if (typeof init === 'object') {
      const method = init[Symbol.iterator];

      if (method != null) {
        if (typeof method !== 'function') {
          throw new TypeError('Header pairs must be iterable');
        } // sequence<sequence<ByteString>>
        // Note: per spec we have to first exhaust the lists then process them


        const pairs = [];

        for (const pair of init) {
          if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
            throw new TypeError('Each header pair must be iterable');
          }

          pairs.push(Array.from(pair));
        }

        for (const pair of pairs) {
          if (pair.length !== 2) {
            throw new TypeError('Each header pair must be a name/value tuple');
          }

          this.append(pair[0], pair[1]);
        }
      } else {
        // record<ByteString, ByteString>
        for (const key of Object.keys(init)) {
          const value = init[key];
          this.append(key, value);
        }
      }
    } else {
      throw new TypeError('Provided initializer must be an object');
    }
  }
  /**
   * Return combined header value given name
   *
   * @param   String  name  Header name
   * @return  Mixed
   */


  get(name) {
    name = `${name}`;
    validateName(name);
    const key = find(this[MAP], name);

    if (key === undefined) {
      return null;
    }

    return this[MAP][key].join(', ');
  }
  /**
   * Iterate over all headers
   *
   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
   * @param   Boolean   thisArg   `this` context for callback function
   * @return  Void
   */


  forEach(callback) {
    let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    let pairs = getHeaders(this);
    let i = 0;

    while (i < pairs.length) {
      var _pairs$i = pairs[i];
      const name = _pairs$i[0],
            value = _pairs$i[1];
      callback.call(thisArg, value, name, this);
      pairs = getHeaders(this);
      i++;
    }
  }
  /**
   * Overwrite header values given name
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */


  set(name, value) {
    name = `${name}`;
    value = `${value}`;
    validateName(name);
    validateValue(value);
    const key = find(this[MAP], name);
    this[MAP][key !== undefined ? key : name] = [value];
  }
  /**
   * Append a value onto existing header
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */


  append(name, value) {
    name = `${name}`;
    value = `${value}`;
    validateName(name);
    validateValue(value);
    const key = find(this[MAP], name);

    if (key !== undefined) {
      this[MAP][key].push(value);
    } else {
      this[MAP][name] = [value];
    }
  }
  /**
   * Check for header name existence
   *
   * @param   String   name  Header name
   * @return  Boolean
   */


  has(name) {
    name = `${name}`;
    validateName(name);
    return find(this[MAP], name) !== undefined;
  }
  /**
   * Delete all header values given name
   *
   * @param   String  name  Header name
   * @return  Void
   */


  delete(name) {
    name = `${name}`;
    validateName(name);
    const key = find(this[MAP], name);

    if (key !== undefined) {
      delete this[MAP][key];
    }
  }
  /**
   * Return raw headers (non-spec api)
   *
   * @return  Object
   */


  raw() {
    return this[MAP];
  }
  /**
   * Get an iterator on keys.
   *
   * @return  Iterator
   */


  keys() {
    return createHeadersIterator(this, 'key');
  }
  /**
   * Get an iterator on values.
   *
   * @return  Iterator
   */


  values() {
    return createHeadersIterator(this, 'value');
  }
  /**
   * Get an iterator on entries.
   *
   * This is the default iterator of the Headers object.
   *
   * @return  Iterator
   */


  [Symbol.iterator]() {
    return createHeadersIterator(this, 'key+value');
  }

}

Headers.prototype.entries = Headers.prototype[Symbol.iterator];
Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
  value: 'Headers',
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Headers.prototype, {
  get: {
    enumerable: true
  },
  forEach: {
    enumerable: true
  },
  set: {
    enumerable: true
  },
  append: {
    enumerable: true
  },
  has: {
    enumerable: true
  },
  delete: {
    enumerable: true
  },
  keys: {
    enumerable: true
  },
  values: {
    enumerable: true
  },
  entries: {
    enumerable: true
  }
});

function getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
  const keys = Object.keys(headers[MAP]).sort();
  return keys.map(kind === 'key' ? function (k) {
    return k.toLowerCase();
  } : kind === 'value' ? function (k) {
    return headers[MAP][k].join(', ');
  } : function (k) {
    return [k.toLowerCase(), headers[MAP][k].join(', ')];
  });
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
  const iterator = Object.create(HeadersIteratorPrototype);
  iterator[INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
  next() {
    // istanbul ignore if
    if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
      throw new TypeError('Value of `this` is not a HeadersIterator');
    }

    var _INTERNAL = this[INTERNAL];
    const target = _INTERNAL.target,
          kind = _INTERNAL.kind,
          index = _INTERNAL.index;
    const values = getHeaders(target, kind);
    const len = values.length;

    if (index >= len) {
      return {
        value: undefined,
        done: true
      };
    }

    this[INTERNAL].index = index + 1;
    return {
      value: values[index],
      done: false
    };
  }

}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
  value: 'HeadersIterator',
  writable: false,
  enumerable: false,
  configurable: true
});
/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */

function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({
    __proto__: null
  }, headers[MAP]); // http.request() only supports string as Host header. This hack makes
  // specifying custom Host header possible.

  const hostHeaderKey = find(headers[MAP], 'Host');

  if (hostHeaderKey !== undefined) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }

  return obj;
}
/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */


function createHeadersLenient(obj) {
  const headers = new Headers();

  for (const name of Object.keys(obj)) {
    if (invalidTokenRegex.test(name)) {
      continue;
    }

    if (Array.isArray(obj[name])) {
      for (const val of obj[name]) {
        if (invalidHeaderCharRegex.test(val)) {
          continue;
        }

        if (headers[MAP][name] === undefined) {
          headers[MAP][name] = [val];
        } else {
          headers[MAP][name].push(val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name])) {
      headers[MAP][name] = [obj[name]];
    }
  }

  return headers;
}

const INTERNALS$1 = Symbol('Response internals'); // fix an issue where "STATUS_CODES" aren't a named export for node <10

const STATUS_CODES = external_http_.STATUS_CODES;
/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */

class Response {
  constructor() {
    let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    Body.call(this, body, opts);
    const status = opts.status || 200;
    const headers = new Headers(opts.headers);

    if (body != null && !headers.has('Content-Type')) {
      const contentType = extractContentType(body);

      if (contentType) {
        headers.append('Content-Type', contentType);
      }
    }

    this[INTERNALS$1] = {
      url: opts.url,
      status,
      statusText: opts.statusText || STATUS_CODES[status],
      headers,
      counter: opts.counter
    };
  }

  get url() {
    return this[INTERNALS$1].url || '';
  }

  get status() {
    return this[INTERNALS$1].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */


  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }

  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }

  get statusText() {
    return this[INTERNALS$1].statusText;
  }

  get headers() {
    return this[INTERNALS$1].headers;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */


  clone() {
    return new Response(clone(this), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected
    });
  }

}

Body.mixIn(Response.prototype);
Object.defineProperties(Response.prototype, {
  url: {
    enumerable: true
  },
  status: {
    enumerable: true
  },
  ok: {
    enumerable: true
  },
  redirected: {
    enumerable: true
  },
  statusText: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  clone: {
    enumerable: true
  }
});
Object.defineProperty(Response.prototype, Symbol.toStringTag, {
  value: 'Response',
  writable: false,
  enumerable: false,
  configurable: true
});
const INTERNALS$2 = Symbol('Request internals');
const URL = external_url_.URL || public_api.URL; // fix an issue where "format", "parse" aren't a named export for node <10

const parse_url = external_url_.parse;
const format_url = external_url_.format;
/**
 * Wrapper around `new URL` to handle arbitrary URLs
 *
 * @param  {string} urlStr
 * @return {void}
 */

function parseURL(urlStr) {
  /*
  	Check whether the URL is absolute or not
  		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
  	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
  */
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL(urlStr).toString();
  } // Fallback to old implementation for arbitrary URLs


  return parse_url(urlStr);
}

const streamDestructionSupported = ('destroy' in external_stream_.Readable.prototype);
/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */

function isRequest(input) {
  return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
  const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === 'AbortSignal');
}
/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */


class Request {
  constructor(input) {
    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let parsedURL; // normalize input

    if (!isRequest(input)) {
      if (input && input.href) {
        // in order to support Node.js' Url objects; though WHATWG's URL objects
        // will fall into this branch also (since their `toString()` will return
        // `href` property anyway)
        parsedURL = parseURL(input.href);
      } else {
        // coerce input to a string before attempting to parse
        parsedURL = parseURL(`${input}`);
      }

      input = {};
    } else {
      parsedURL = parseURL(input.url);
    }

    let method = init.method || input.method || 'GET';
    method = method.toUpperCase();

    if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
      throw new TypeError('Request with GET/HEAD method cannot have body');
    }

    let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
    Body.call(this, inputBody, {
      timeout: init.timeout || input.timeout || 0,
      size: init.size || input.size || 0
    });
    const headers = new Headers(init.headers || input.headers || {});

    if (inputBody != null && !headers.has('Content-Type')) {
      const contentType = extractContentType(inputBody);

      if (contentType) {
        headers.append('Content-Type', contentType);
      }
    }

    let signal = isRequest(input) ? input.signal : null;
    if ('signal' in init) signal = init.signal;

    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError('Expected signal to be an instanceof AbortSignal');
    }

    this[INTERNALS$2] = {
      method,
      redirect: init.redirect || input.redirect || 'follow',
      headers,
      parsedURL,
      signal
    }; // node-fetch-only options

    this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
    this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
  }

  get method() {
    return this[INTERNALS$2].method;
  }

  get url() {
    return format_url(this[INTERNALS$2].parsedURL);
  }

  get headers() {
    return this[INTERNALS$2].headers;
  }

  get redirect() {
    return this[INTERNALS$2].redirect;
  }

  get signal() {
    return this[INTERNALS$2].signal;
  }
  /**
   * Clone this request
   *
   * @return  Request
   */


  clone() {
    return new Request(this);
  }

}

Body.mixIn(Request.prototype);
Object.defineProperty(Request.prototype, Symbol.toStringTag, {
  value: 'Request',
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Request.prototype, {
  method: {
    enumerable: true
  },
  url: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  redirect: {
    enumerable: true
  },
  clone: {
    enumerable: true
  },
  signal: {
    enumerable: true
  }
});
/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */

function getNodeRequestOptions(request) {
  const parsedURL = request[INTERNALS$2].parsedURL;
  const headers = new Headers(request[INTERNALS$2].headers); // fetch step 1.3

  if (!headers.has('Accept')) {
    headers.set('Accept', '*/*');
  } // Basic fetch


  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError('Only absolute URLs are supported');
  }

  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError('Only HTTP(S) protocols are supported');
  }

  if (request.signal && request.body instanceof external_stream_.Readable && !streamDestructionSupported) {
    throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
  } // HTTP-network-or-cache fetch steps 2.4-2.7


  let contentLengthValue = null;

  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
    contentLengthValue = '0';
  }

  if (request.body != null) {
    const totalBytes = getTotalBytes(request);

    if (typeof totalBytes === 'number') {
      contentLengthValue = String(totalBytes);
    }
  }

  if (contentLengthValue) {
    headers.set('Content-Length', contentLengthValue);
  } // HTTP-network-or-cache fetch step 2.11


  if (!headers.has('User-Agent')) {
    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
  } // HTTP-network-or-cache fetch step 2.15


  if (request.compress && !headers.has('Accept-Encoding')) {
    headers.set('Accept-Encoding', 'gzip,deflate');
  }

  let agent = request.agent;

  if (typeof agent === 'function') {
    agent = agent(parsedURL);
  }

  if (!headers.has('Connection') && !agent) {
    headers.set('Connection', 'close');
  } // HTTP-network fetch step 4.2
  // chunked encoding is handled by Node.js


  return Object.assign({}, parsedURL, {
    method: request.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */


function AbortError(message) {
  Error.call(this, message);
  this.type = 'aborted';
  this.message = message; // hide custom error implementation details from end-users

  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError'; // fix an issue where "PassThrough", "resolve" aren't a named export for node <10

const PassThrough$1 = external_stream_.PassThrough;
const resolve_url = external_url_.resolve;
/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */

function lib_fetch(url, opts) {
  // allow custom promise
  if (!lib_fetch.Promise) {
    throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
  }

  Body.Promise = lib_fetch.Promise; // wrap http.request into fetch

  return new lib_fetch.Promise(function (resolve, reject) {
    // build request object
    const request = new Request(url, opts);
    const options = getNodeRequestOptions(request);
    const send = (options.protocol === 'https:' ? external_https_ : external_http_).request;
    const signal = request.signal;
    let response = null;

    const abort = function abort() {
      let error = new AbortError('The user aborted a request.');
      reject(error);

      if (request.body && request.body instanceof external_stream_.Readable) {
        request.body.destroy(error);
      }

      if (!response || !response.body) return;
      response.body.emit('error', error);
    };

    if (signal && signal.aborted) {
      abort();
      return;
    }

    const abortAndFinalize = function abortAndFinalize() {
      abort();
      finalize();
    }; // send request


    const req = send(options);
    let reqTimeout;

    if (signal) {
      signal.addEventListener('abort', abortAndFinalize);
    }

    function finalize() {
      req.abort();
      if (signal) signal.removeEventListener('abort', abortAndFinalize);
      clearTimeout(reqTimeout);
    }

    if (request.timeout) {
      req.once('socket', function (socket) {
        reqTimeout = setTimeout(function () {
          reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
          finalize();
        }, request.timeout);
      });
    }

    req.on('error', function (err) {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
      finalize();
    });
    req.on('response', function (res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers); // HTTP fetch step 5

      if (lib_fetch.isRedirect(res.statusCode)) {
        // HTTP fetch step 5.2
        const location = headers.get('Location'); // HTTP fetch step 5.3

        const locationURL = location === null ? null : resolve_url(request.url, location); // HTTP fetch step 5.5

        switch (request.redirect) {
          case 'error':
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
            finalize();
            return;

          case 'manual':
            // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
            if (locationURL !== null) {
              // handle corrupted header
              try {
                headers.set('Location', locationURL);
              } catch (err) {
                // istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
                reject(err);
              }
            }

            break;

          case 'follow':
            // HTTP-redirect fetch step 2
            if (locationURL === null) {
              break;
            } // HTTP-redirect fetch step 5


            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
              finalize();
              return;
            } // HTTP-redirect fetch step 6 (counter increment)
            // Create a new Request object.


            const requestOpts = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              timeout: request.timeout,
              size: request.size
            }; // HTTP-redirect fetch step 9

            if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
              reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
              finalize();
              return;
            } // HTTP-redirect fetch step 11


            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
              requestOpts.method = 'GET';
              requestOpts.body = undefined;
              requestOpts.headers.delete('content-length');
            } // HTTP-redirect fetch step 15


            resolve(lib_fetch(new Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      } // prepare response


      res.once('end', function () {
        if (signal) signal.removeEventListener('abort', abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: headers,
        size: request.size,
        timeout: request.timeout,
        counter: request.counter
      }; // HTTP-network fetch step 12.1.1.3

      const codings = headers.get('Content-Encoding'); // HTTP-network fetch step 12.1.1.4: handle content codings
      // in following scenarios we ignore compression support
      // 1. compression support is disabled
      // 2. HEAD request
      // 3. no Content-Encoding header
      // 4. no content response (204)
      // 5. content not modified response (304)

      if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response(body, response_options);
        resolve(response);
        return;
      } // For Node v6+
      // Be less strict when decoding compressed responses, since sometimes
      // servers send slightly invalid responses that are still accepted
      // by common browsers.
      // Always using Z_SYNC_FLUSH is what cURL does.


      const zlibOptions = {
        flush: external_zlib_.Z_SYNC_FLUSH,
        finishFlush: external_zlib_.Z_SYNC_FLUSH
      }; // for gzip

      if (codings == 'gzip' || codings == 'x-gzip') {
        body = body.pipe(external_zlib_.createGunzip(zlibOptions));
        response = new Response(body, response_options);
        resolve(response);
        return;
      } // for deflate


      if (codings == 'deflate' || codings == 'x-deflate') {
        // handle the infamous raw deflate response from old servers
        // a hack for old IIS and Apache servers
        const raw = res.pipe(new PassThrough$1());
        raw.once('data', function (chunk) {
          // see http://stackoverflow.com/questions/37519828
          if ((chunk[0] & 0x0F) === 0x08) {
            body = body.pipe(external_zlib_.createInflate());
          } else {
            body = body.pipe(external_zlib_.createInflateRaw());
          }

          response = new Response(body, response_options);
          resolve(response);
        });
        return;
      } // for br


      if (codings == 'br' && typeof external_zlib_.createBrotliDecompress === 'function') {
        body = body.pipe(external_zlib_.createBrotliDecompress());
        response = new Response(body, response_options);
        resolve(response);
        return;
      } // otherwise, use response as-is


      response = new Response(body, response_options);
      resolve(response);
    });
    writeToStream(req, request);
  });
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */


lib_fetch.isRedirect = function (code) {
  return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
}; // expose Promise


lib_fetch.Promise = global.Promise;
/* harmony default export */ var lib = (lib_fetch);

// CONCATENATED MODULE: ./node_modules/@commercetools/sdk-client-v2/dist/commercetools-sdk-client-v2.esm.js



function commercetools_sdk_client_v2_esm_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var METHODS = ['ACL', 'BIND', 'CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LINK', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCALENDAR', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REBIND', 'REPORT', 'SEARCH', 'SOURCE', 'SUBSCRIBE', 'TRACE', 'UNBIND', 'UNLINK', 'UNLOCK', 'UNSUBSCRIBE'];
/**
 * @throws {Error}
 */

function validate(funcName, request, options = {
  allowedMethods: METHODS
}) {
  if (!request) throw new Error(`The "${funcName}" function requires a "Request" object as an argument. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest`);
  if (typeof request.uri !== 'string') throw new Error(`The "${funcName}" Request object requires a valid uri. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest`);
  if (!options.allowedMethods.includes(request.method)) throw new Error(`The "${funcName}" Request object requires a valid method. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest`);
}

function compose(...funcs) {
  funcs = funcs.filter(func => typeof func === 'function');
  if (funcs.length === 1) return funcs[0];
  return funcs.reduce((a, b) => (...args) => a(b(...args)));
}

function createClient(options) {
  if (!options) throw new Error('Missing required options');
  if (options.middlewares && !Array.isArray(options.middlewares)) throw new Error('Middlewares should be an array');
  if (!options.middlewares || !Array.isArray(options.middlewares) || !options.middlewares.length) throw new Error('You need to provide at least one middleware');
  return {
    /**
     * Given a request object,
     */
    execute(request) {
      validate('exec', request);
      return new Promise((resolve, reject) => {
        const resolver = (rq, rs) => {
          // Note: pick the promise `resolve` and `reject` function from
          // the response object. This is not necessary the same function
          // given from the `new Promise` constructor, as middlewares could
          // override those functions for custom behaviours.
          if (rs.error) rs.reject(rs.error);else {
            const resObj = {
              body: rs.body || {},
              statusCode: rs.statusCode
            };
            if (rs.headers) resObj.headers = rs.headers;
            if (rs.request) resObj.request = rs.request;
            rs.resolve(resObj);
          }
        };

        const dispatch = compose(...options.middlewares)(resolver);
        dispatch(request, // Initial response shape
        {
          resolve,
          reject,
          body: undefined,
          error: undefined
        });
      });
    },

    process(request, fn, processOpt) {
      validate('process', request, {
        allowedMethods: ['GET']
      });
      if (typeof fn !== 'function') throw new Error('The "process" function accepts a "Function" as a second argument that returns a Promise. See https://commercetools.github.io/nodejs/sdk/api/sdkClient.html#processrequest-processfn-options'); // Set default process options

      const opt = {
        total: Number.POSITIVE_INFINITY,
        accumulate: true,
        ...processOpt
      };
      return new Promise((resolve, reject) => {
        let _path,
            _queryString = '';

        if (request && request.uri) {
          const [path, queryString] = request.uri.split('?');
          _path = path;
          _queryString = queryString;
        }

        const requestQuery = { ...external_querystring_default.a.parse(_queryString)
        };
        const query = {
          // defaults
          limit: 20,
          // merge given query params
          ...requestQuery
        };
        let hasFirstPageBeenProcessed = false;
        let itemsToGet = opt.total;

        const processPage = async (lastId, acc = []) => {
          // Use the lesser value between limit and itemsToGet in query
          const limit = query.limit < itemsToGet ? query.limit : itemsToGet;
          const originalQueryString = external_querystring_default.a.stringify({ ...query,
            limit
          });
          const enhancedQuery = {
            sort: 'id asc',
            withTotal: false,
            ...(lastId ? {
              where: `id > "${lastId}"`
            } : {})
          };
          const enhancedQueryString = external_querystring_default.a.stringify(enhancedQuery);
          const enhancedRequest = { ...request,
            uri: `${_path}?${enhancedQueryString}&${originalQueryString}`
          };

          try {
            const payload = await this.execute(enhancedRequest);
            const {
              results,
              count: resultsLength
            } = payload.body;

            if (!resultsLength && hasFirstPageBeenProcessed) {
              return resolve(acc || []);
            }

            const result = await Promise.resolve(fn(payload));
            let accumulated;
            hasFirstPageBeenProcessed = true;
            if (opt.accumulate) accumulated = acc.concat(result || []);
            itemsToGet -= resultsLength; // If there are no more items to get, it means the total number
            // of items in the original request have been fetched so we
            // resolve the promise.
            // Also, if we get less results in a page then the limit set it
            // means that there are no more pages and that we can finally
            // resolve the promise.

            if (resultsLength < query.limit || !itemsToGet) {
              return resolve(accumulated || []);
            }

            const last = results[resultsLength - 1];
            const newLastId = last && last.id;
            processPage(newLastId, accumulated);
          } catch (error) {
            reject(error);
          }
        }; // Start iterating through pages


        processPage();
      });
    }

  };
} // POST https://{host}/oauth/token?grant_type=client_credentials&scope={scope}
// Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==


function buildRequestForClientCredentialsFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.host) throw new Error('Missing required option (host)');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  if (!options.credentials) throw new Error('Missing required option (credentials)');
  const {
    clientId,
    clientSecret
  } = options.credentials;
  if (!(clientId && clientSecret)) throw new Error('Missing required credentials (clientId, clientSecret)');
  const scope = options.scopes ? options.scopes.join(' ') : undefined;
  const basicAuth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64'); // This is mostly useful for internal testing purposes to be able to check
  // other oauth endpoints.

  const oauthUri = options.oauthUri || '/oauth/token';
  const url = options.host.replace(/\/$/, '') + oauthUri;
  const body = `grant_type=client_credentials${scope ? `&scope=${scope}` : ''}`;
  return {
    basicAuth,
    url,
    body
  };
}

function buildRequestForPasswordFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.host) throw new Error('Missing required option (host)');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  if (!options.credentials) throw new Error('Missing required option (credentials)');
  const {
    clientId,
    clientSecret,
    user
  } = options.credentials;
  const pKey = options.projectKey;
  if (!(clientId && clientSecret && user)) throw new Error('Missing required credentials (clientId, clientSecret, user)');
  const {
    username,
    password
  } = user;
  if (!(username && password)) throw new Error('Missing required user credentials (username, password)');
  const scope = (options.scopes || []).join(' ');
  const scopeStr = scope ? `&scope=${scope}` : '';
  const basicAuth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');
  /**
   * This is mostly useful for internal testing purposes to be able to check
   * other oauth endpoints.
   */

  const oauthUri = options.oauthUri || `/oauth/${pKey}/customers/token`;
  const url = options.host.replace(/\/$/, '') + oauthUri; // encode username and password as requested by platform

  const body = `grant_type=password&username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}${scopeStr}`;
  return {
    basicAuth,
    url,
    body
  };
}

function buildRequestForRefreshTokenFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.host) throw new Error('Missing required option (host)');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  if (!options.credentials) throw new Error('Missing required option (credentials)');
  if (!options.refreshToken) throw new Error('Missing required option (refreshToken)');
  const {
    clientId,
    clientSecret
  } = options.credentials;
  if (!(clientId && clientSecret)) throw new Error('Missing required credentials (clientId, clientSecret)');
  const basicAuth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64'); // This is mostly useful for internal testing purposes to be able to check
  // other oauth endpoints.

  const oauthUri = options.oauthUri || '/oauth/token';
  const url = options.host.replace(/\/$/, '') + oauthUri;
  const body = `grant_type=refresh_token&refresh_token=${encodeURIComponent(options.refreshToken)}`;
  return {
    basicAuth,
    url,
    body
  };
}

function buildRequestForAnonymousSessionFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  const pKey = options.projectKey;
  options.oauthUri = options.oauthUri || `/oauth/${pKey}/anonymous/token`;
  const result = buildRequestForClientCredentialsFlow(options);
  if (options.credentials.anonymousId) result.body += `&anonymous_id=${options.credentials.anonymousId}`;
  return { ...result
  };
}

function mergeAuthHeader(token, req) {
  return { ...req,
    headers: { ...req.headers,
      Authorization: `Bearer ${token}`
    }
  };
}

function calculateExpirationTime(expiresIn) {
  return Date.now() + // Add a gap of 2 hours before expiration time.
  expiresIn * 1000 - 2 * 60 * 60 * 1000;
}

async function executeRequest({
  fetcher,
  url,
  basicAuth,
  body,
  tokenCache,
  requestState,
  pendingTasks,
  response,
  tokenCacheKey
}) {
  try {
    const _res = await fetcher(url, {
      method: 'POST',
      headers: {
        Authorization: `Basic ${basicAuth}`,
        'Content-Length': Buffer.byteLength(body).toString(),
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body
    });

    if (_res.ok) {
      const {
        access_token: token,
        expires_in: expiresIn,
        refresh_token: refreshToken
      } = await _res.json();
      const expirationTime = calculateExpirationTime(expiresIn); // cache new generated token

      tokenCache.set({
        token,
        expirationTime,
        refreshToken
      }, tokenCacheKey); // Dispatch all pending requests

      requestState.set(false);
      /**
       * Freeze and copy pending queue, reset original one for accepting
       * new pending tasks
       */

      const executionQueue = pendingTasks.slice();
      pendingTasks = [];
      executionQueue.forEach(task => {
        // Assign the new token in the request header
        const requestWithAuth = mergeAuthHeader(token, task.request);
        /**
         * console.log('test', cache, pendingTasks)
         * Continue by calling the task's own next function
         */

        task.next(requestWithAuth, task.response);
      });
      return;
    } // Handle error response


    let parsed;
    const text = await _res.text();

    try {
      parsed = JSON.parse(text);
    } catch (error) {
      /* noop */
    }

    const error = new Error(parsed ? parsed.message : text);
    if (parsed) error.body = parsed;
    /**
     * to notify that token is either fetched or failed
     * in the below case token failed to be fetched
     * and reset requestState to false
     * so requestState could be shared between multi authMiddlewareBase functions
     */

    requestState.set(false);
    response.reject(error);
  } catch (error) {
    /**
     * to notify that token is either fetched or failed
     * in the below case token failed to be fetched
     * and reset requestState to false
     * so requestState could be shared between multi authMiddlewareBase functions
     */
    requestState.set(false);
    if (response && typeof response.reject === 'function') response.reject(error);
  }
}

function authMiddlewareBase({
  request,
  response,
  url,
  basicAuth,
  body,
  pendingTasks,
  requestState,
  tokenCache,
  tokenCacheKey,
  fetch: fetcher
}, next, userOptions) {
  if (!fetcher && typeof fetch === 'undefined') throw new Error('`fetch` is not available. Please pass in `fetch` as an option or have it globally available.');
  if (!fetcher) fetcher = fetch; // Check if there is already a `Authorization` header in the request.
  // If so, then go directly to the next middleware.

  if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
    next(request, response);
    return;
  } // If there was a token in the tokenCache, and it's not expired, append
  // the token in the `Authorization` header.


  const tokenObj = tokenCache.get(tokenCacheKey);

  if (tokenObj && tokenObj.token && Date.now() < tokenObj.expirationTime) {
    const requestWithAuth = mergeAuthHeader(tokenObj.token, request);
    next(requestWithAuth, response);
    return;
  }
  /**
   * Keep pending tasks until a token is fetched
   * Save next function as well, to call it once the token has been fetched, which prevents
   * unexpected behaviour in a context in which the next function uses global vars
   * or Promises to capture the token to hand it to other libraries, e.g. Apollo
   */


  pendingTasks.push({
    request,
    response,
    next
  }); // If a token is currently being fetched, just wait ;)

  if (requestState.get()) return; // Mark that a token is being fetched

  requestState.set(true);
  /**
   * If there was a refreshToken in the tokenCache, and there was an expired
   * token or no token in the tokenCache, use the refreshToken flow
   */

  if (tokenObj && tokenObj.refreshToken && (!tokenObj.token || tokenObj.token && Date.now() > tokenObj.expirationTime)) {
    if (!userOptions) throw new Error('Missing required options');
    executeRequest({
      fetcher,
      ...buildRequestForRefreshTokenFlow({ ...userOptions,
        refreshToken: tokenObj.refreshToken
      }),
      tokenCacheKey,
      tokenCache,
      requestState,
      pendingTasks,
      response
    });
    return;
  } // Token and refreshToken are not present or invalid. Request a new token...


  executeRequest({
    fetcher,
    url,
    basicAuth,
    body,
    tokenCacheKey,
    tokenCache,
    requestState,
    pendingTasks,
    response
  });
}

function store(initVal) {
  let value = initVal;
  return {
    get: () => value,
    set: val => {
      value = val;
      return value;
    }
  };
}

function createAuthMiddlewareForAnonymousSessionFlow$1(options) {
  const tokenCache = store({});
  const pendingTasks = [];
  const requestState = store(false);
  return next => (request, response) => {
    // Check if there is already a `Authorization` header in the request.
    // If so, then go directly to the next middleware.
    if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
      next(request, response);
      return;
    }

    const params = {
      request,
      response,
      ...buildRequestForAnonymousSessionFlow(options),
      pendingTasks,
      requestState,
      tokenCache,
      fetch: options.fetch
    };
    authMiddlewareBase(params, next, options);
  };
}

function buildTokenCacheKey(options) {
  return {
    clientId: options.credentials.clientId,
    host: options.host,
    projectKey: options.projectKey
  };
}

function createAuthMiddlewareForClientCredentialsFlow$1(options) {
  const tokenCache = options.tokenCache || store({
    token: '',
    expirationTime: -1
  });
  const requestState = store(false);
  const pendingTasks = [];
  return next => (request, response) => {
    // Check if there is already a `Authorization` header in the request.
    // If so, then go directly to the next middleware.
    if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
      next(request, response);
      return;
    }

    const params = {
      request,
      response,
      ...buildRequestForClientCredentialsFlow(options),
      pendingTasks,
      requestState,
      tokenCache,
      tokenCacheKey: buildTokenCacheKey(options),
      fetch: options.fetch
    };
    authMiddlewareBase(params, next);
  };
}

function createAuthMiddlewareWithExistingToken$1(authorization = '', options = {}) {
  return next => (request, response) => {
    if (typeof authorization !== 'string') throw new Error('authorization must be a string');
    const force = options.force === undefined ? true : options.force;
    /** The request will not be modified if:
     *  1. no argument is passed
     *  2. force is false and authorization header exists
     */

    if (!authorization || (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) && force === false) {
      return next(request, response);
    }

    const requestWithAuth = { ...request,
      headers: { ...request.headers,
        Authorization: authorization
      }
    };
    return next(requestWithAuth, response);
  };
}

function createAuthMiddlewareForPasswordFlow$1(options) {
  const tokenCache = store({});
  const pendingTasks = [];
  const requestState = store(false);
  return next => (request, response) => {
    // Check if there is already a `Authorization` header in the request.
    // If so, then go directly to the next middleware.
    if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
      next(request, response);
      return;
    }

    const params = {
      request,
      response,
      ...buildRequestForPasswordFlow(options),
      pendingTasks,
      requestState,
      tokenCache,
      fetch: options.fetch
    };
    authMiddlewareBase(params, next, options);
  };
}

function createAuthMiddlewareForRefreshTokenFlow$1(options) {
  const tokenCache = store({});
  const pendingTasks = [];
  const requestState = store(false);
  return next => (request, response) => {
    // Check if there is already a `Authorization` header in the request.
    // If so, then go directly to the next middleware.
    if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
      next(request, response);
      return;
    }

    const params = {
      request,
      response,
      ...buildRequestForRefreshTokenFlow(options),
      pendingTasks,
      requestState,
      tokenCache,
      fetch: options.fetch
    };
    authMiddlewareBase(params, next);
  };
}

var authMiddlewares = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAuthMiddlewareForAnonymousSessionFlow: createAuthMiddlewareForAnonymousSessionFlow$1,
  createAuthMiddlewareForClientCredentialsFlow: createAuthMiddlewareForClientCredentialsFlow$1,
  createAuthMiddlewareWithExistingToken: createAuthMiddlewareWithExistingToken$1,
  createAuthMiddlewareForPasswordFlow: createAuthMiddlewareForPasswordFlow$1,
  createAuthMiddlewareForRefreshTokenFlow: createAuthMiddlewareForRefreshTokenFlow$1
});

function createCorrelationIdMiddleware(options) {
  return next => (request, response) => {
    const nextRequest = { ...request,
      headers: { ...request.headers,
        'X-Correlation-ID': options.generate()
      }
    };
    next(nextRequest, response);
  };
}

function defineError(statusCode, message, meta = {}) {
  this.status = this.statusCode = this.code = statusCode;
  this.message = message;
  Object.assign(this, meta);
  this.name = this.constructor.name;
  this.constructor.prototype.__proto__ = Error.prototype;
  if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
}

function NetworkError(...args) {
  defineError.call(this, 0
  /* special code to indicate network errors */
  , ...args);
}

function HttpError(...args) {
  defineError.call(this,
  /* code will be passed as arg */
  ...args);
}

function BadRequest(...args) {
  defineError.call(this, 400, ...args);
}

function Unauthorized(...args) {
  defineError.call(this, 401, ...args);
}

function Forbidden(...args) {
  defineError.call(this, 403, ...args);
}

function NotFound(...args) {
  defineError.call(this, 404, ...args);
}

function ConcurrentModification(...args) {
  defineError.call(this, 409, ...args);
}

function InternalServerError(...args) {
  defineError.call(this, 500, ...args);
}

function ServiceUnavailable(...args) {
  defineError.call(this, 503, ...args);
}

function getErrorByCode(code) {
  switch (code) {
    case 0:
      return NetworkError;

    case 400:
      return BadRequest;

    case 401:
      return Unauthorized;

    case 403:
      return Forbidden;

    case 404:
      return NotFound;

    case 409:
      return ConcurrentModification;

    case 500:
      return InternalServerError;

    case 503:
      return ServiceUnavailable;

    default:
      return undefined;
  }
}

function parseHeaders(headers) {
  if (headers.raw) // node-fetch
    return headers.raw(); // Tmp fix for Firefox until it supports iterables

  if (!headers.forEach) return {}; // whatwg-fetch

  const map = {};
  headers.forEach((value, name) => {
    map[name] = value;
  });
  return map;
}

function createError({
  statusCode,
  message,
  ...rest
}) {
  let errorMessage = message || 'Unexpected non-JSON error response';
  if (statusCode === 404) errorMessage = `URI not found: ${rest.originalRequest.uri}`;
  const ResponseError = getErrorByCode(statusCode);
  if (ResponseError) return new ResponseError(errorMessage, rest);
  return new HttpError(statusCode, errorMessage, rest);
} // calculates the delay duration exponentially
// More info about the algorithm use here https://goo.gl/Xk8h5f


function calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay) {
  if (backoff) return retryCount !== 0 // do not increase if it's the first retry
  ? Math.min(Math.round((Math.random() + 1) * retryDelay * 2 ** retryCount), maxDelay) : retryDelay;
  return retryDelay;
}

function maskAuthData(request, maskSensitiveHeaderData) {
  if (maskSensitiveHeaderData) {
    if (request && request.headers && request.headers.authorization) request.headers.authorization = 'Bearer ********';
    if (request && request.headers && request.headers.Authorization) request.headers.Authorization = 'Bearer ********';
  }
}

function createHttpMiddleware({
  host,
  credentialsMode,
  includeResponseHeaders,
  includeOriginalRequest,
  maskSensitiveHeaderData = true,
  enableRetry,
  timeout,
  retryConfig: {
    // encourage exponential backoff to prevent spamming the server if down
    maxRetries = 10,
    backoff = true,
    retryDelay = 200,
    maxDelay = Infinity
  } = {},
  fetch: fetcher,
  getAbortController
}) {
  if (!fetcher && typeof fetch === 'undefined') throw new Error('`fetch` is not available. Please pass in `fetch` as an option or have it globally available.');
  if (timeout && !getAbortController && typeof AbortController === 'undefined') throw new Error('`AbortController` is not available. Please pass in `getAbortController` as an option or have AbortController globally available when using timeout.');
  let fetchFunction;

  if (fetcher) {
    fetchFunction = fetcher;
  } else {
    // `fetcher` is set here rather than the destructuring to ensure fetch is
    // declared before referencing it otherwise it would cause a `ReferenceError`.
    // For reference of this pattern: https://github.com/apollographql/apollo-link/blob/498b413a5b5199b0758ce898b3bb55451f57a2fa/packages/apollo-link-http/src/httpLink.ts#L49
    fetchFunction = fetch;
  }

  return next => (request, response) => {
    let abortController;
    if (timeout || getAbortController) abortController = (getAbortController ? getAbortController() : null) || new AbortController();
    const url = host.replace(/\/$/, '') + request.uri;
    const body = typeof request.body === 'string' || Buffer.isBuffer(request.body) ? request.body : // NOTE: `stringify` of `null` gives the String('null')
    JSON.stringify(request.body || undefined);
    const requestHeader = { ...request.headers
    };

    if (!Object.prototype.hasOwnProperty.call(requestHeader, 'Content-Type')) {
      requestHeader['Content-Type'] = 'application/json';
    }

    if (body) {
      requestHeader['Content-Length'] = Buffer.byteLength(body).toString();
    }

    const fetchOptions = {
      method: request.method,
      headers: requestHeader
    };

    if (credentialsMode) {
      fetchOptions.credentialsMode = credentialsMode;
    }

    if (abortController) {
      fetchOptions.signal = abortController.signal;
    }

    if (body) {
      fetchOptions.body = body;
    }

    let retryCount = 0; // wrap in a fn so we can retry if error occur

    function executeFetch() {
      // Kick off timer for abortController directly before fetch.
      let timer;
      if (timeout) timer = setTimeout(() => {
        abortController.abort();
      }, timeout);
      fetchFunction(url, fetchOptions).then(res => {
        if (res.ok) {
          if (fetchOptions.method === 'HEAD') {
            next(request, { ...response,
              statusCode: res.status
            });
            return;
          }

          res.text().then(result => {
            // Try to parse the response as JSON
            let parsed;

            try {
              parsed = result.length > 0 ? JSON.parse(result) : {};
            } catch (err) {
              if (enableRetry && retryCount < maxRetries) {
                setTimeout(executeFetch, calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay));
                retryCount += 1;
                return;
              }

              parsed = result;
            }

            const parsedResponse = { ...response,
              body: parsed,
              statusCode: res.status
            };
            if (includeResponseHeaders) parsedResponse.headers = parseHeaders(res.headers);

            if (includeOriginalRequest) {
              parsedResponse.request = { ...fetchOptions
              };
              maskAuthData(parsedResponse.request, maskSensitiveHeaderData);
            }

            next(request, parsedResponse);
          });
          return;
        }

        if (res.status === 503 && enableRetry) if (retryCount < maxRetries) {
          setTimeout(executeFetch, calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay));
          retryCount += 1;
          return;
        } // Server responded with an error. Try to parse it as JSON, then
        // return a proper error type with all necessary meta information.

        res.text().then(text => {
          // Try to parse the error response as JSON
          let parsed;

          try {
            parsed = JSON.parse(text);
          } catch (error) {
            parsed = text;
          }

          const error = createError({
            statusCode: res.status,
            originalRequest: request,
            retryCount,
            headers: parseHeaders(res.headers),
            ...(typeof parsed === 'object' ? {
              message: parsed.message,
              body: parsed
            } : {
              message: parsed,
              body: parsed
            })
          });
          maskAuthData(error.originalRequest, maskSensitiveHeaderData); // Let the final resolver to reject the promise

          const parsedResponse = { ...response,
            error,
            statusCode: res.status
          };
          next(request, parsedResponse);
        });
      }, // We know that this is a "network" error thrown by the `fetch` library
      e => {
        if (enableRetry) if (retryCount < maxRetries) {
          setTimeout(executeFetch, calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay));
          retryCount += 1;
          return;
        }
        const error = new NetworkError(e.message, {
          originalRequest: request,
          retryCount
        });
        maskAuthData(error.originalRequest, maskSensitiveHeaderData);
        next(request, { ...response,
          error,
          statusCode: 0
        });
      }).finally(() => {
        clearTimeout(timer);
      });
    }

    executeFetch();
  };
}

function createLoggerMiddleware() {
  return next => (request, response) => {
    const {
      error,
      body,
      statusCode
    } = response;
    console.log('Request: ', request);
    console.log('Response: ', {
      error,
      body,
      statusCode
    });
    next(request, response);
  };
}

function createQueueMiddleware({
  concurrency = 20
}) {
  const queue = [];
  let runningCount = 0;

  const dequeue = next => {
    // We assume here that this task has been completed
    runningCount -= 1; // Check if there are any other pending tasks and execute them

    if (queue.length && runningCount <= concurrency) {
      const nextTask = queue.shift();
      runningCount += 1;
      next(nextTask.request, nextTask.response);
    }
  };

  return next => (request, response) => {
    // Override response `resolve` and `reject` to know when the request has
    // been completed and therefore trigger a pending task in the queue.
    const patchedResponse = { ...response,

      resolve(data) {
        // Resolve original promise
        response.resolve(data);
        dequeue(next);
      },

      reject(error) {
        // Reject original promise
        response.reject(error);
        dequeue(next);
      }

    }; // Add task to the queue

    queue.push({
      request,
      response: patchedResponse
    }); // If possible, run the task straight away

    if (runningCount < concurrency) {
      const nextTask = queue.shift();
      runningCount += 1;
      next(nextTask.request, nextTask.response);
    }
  };
}

var packageJson = {
  name: "@commercetools/sdk-client-v2",
  version: "0.2.0",
  description: "commercetools TypeScript SDK client.",
  keywords: ["commercetools", "sdk", "typescript", "client", "middleware", "http", "oauth", "auth"],
  homepage: "https://github.com/commercetools/commercetools-sdk-typescript",
  license: "MIT",
  directories: {
    lib: "lib",
    test: "test"
  },
  publishConfig: {
    access: "public"
  },
  repository: {
    type: "git",
    url: "git+https://github.com/commercetools/commercetools-sdk-typescript.git"
  },
  bugs: {
    url: "https://github.com/commercetools/commercetools-sdk-typescript/issues"
  },
  dependencies: {
    "node-fetch": "^2.6.1",
    querystring: "^0.2.1"
  },
  files: ["dist", "CHANGELOG.md"],
  author: "Chukwuemeka Ajima <meeky.ae@gmail.com>",
  main: "dist/commercetools-sdk-client-v2.cjs.js",
  module: "dist/commercetools-sdk-client-v2.esm.js",
  browser: {
    "./dist/commercetools-sdk-client-v2.cjs.js": "./dist/commercetools-sdk-client-v2.browser.cjs.js",
    "./dist/commercetools-sdk-client-v2.esm.js": "./dist/commercetools-sdk-client-v2.browser.esm.js"
  },
  devDependencies: {
    "abort-controller": "3.0.0",
    "common-tags": "1.8.2",
    dotenv: "10.0.0",
    jest: "27.3.1",
    nock: "12.0.3",
    "organize-imports-cli": "0.8.0"
  },
  scripts: {
    organize_imports: "find src -type f -name '*.ts' | xargs organize-imports-cli",
    postbuild: "yarn organize_imports",
    post_process_generate: "yarn organize_imports"
  }
};
/*
  This is the easiest way, for this use case, to detect if we're running in
  Node.js or in a browser environment. In other cases, this won't be even a
  problem as Rollup will provide the correct polyfill in the bundle.
  The main advantage by doing it this way is that it allows to easily test
  the code running in both environments, by overriding `global.window` in
  the specific test.
*/

const isBrowser = () => typeof window !== 'undefined' && window.document && window.document.nodeType === 9;

function getSystemInfo() {
  if (isBrowser()) return window.navigator.userAgent;
  const nodeVersion = process.version.slice(1); // const platformInfo = `(${process.platform}; ${process.arch})`
  // return `Node.js/${nodeVersion} ${platformInfo}`

  return `node.js/${nodeVersion}`;
}

function createUserAgent(options) {
  if (!options || Object.keys(options).length === 0 || !{}.hasOwnProperty.call(options, 'name')) throw new Error('Missing required option `name`'); // Main info

  const baseInfo = options.version ? `${options.name}/${options.version}` : options.name; // Library info

  let libraryInfo = null;
  if (options.libraryName && !options.libraryVersion) libraryInfo = options.libraryName;else if (options.libraryName && options.libraryVersion) libraryInfo = `${options.libraryName}/${options.libraryVersion}`; // Contact info

  let contactInfo = null;
  if (options.contactUrl && !options.contactEmail) contactInfo = `(+${options.contactUrl})`;else if (!options.contactUrl && options.contactEmail) contactInfo = `(+${options.contactEmail})`;else if (options.contactUrl && options.contactEmail) contactInfo = `(+${options.contactUrl}; +${options.contactEmail})`; // System info

  const systemInfo = getSystemInfo();
  return [baseInfo, systemInfo, libraryInfo, contactInfo].filter(Boolean).join(' ');
}

function createUserAgentMiddleware() {
  const userAgent = createUserAgent({
    name: `commercetools-sdk-javascript-v2/${packageJson.version}`
  });
  return next => (request, response) => {
    const requestWithUserAgent = { ...request,
      headers: { ...request.headers,
        'User-Agent': userAgent
      }
    };
    next(requestWithUserAgent, response);
  };
}

const {
  createAuthMiddlewareForPasswordFlow,
  createAuthMiddlewareForAnonymousSessionFlow,
  createAuthMiddlewareForClientCredentialsFlow,
  createAuthMiddlewareForRefreshTokenFlow,
  createAuthMiddlewareWithExistingToken
} = authMiddlewares;

class commercetools_sdk_client_v2_esm_ClientBuilder {
  constructor() {
    commercetools_sdk_client_v2_esm_defineProperty(this, "projectKey", void 0);

    commercetools_sdk_client_v2_esm_defineProperty(this, "authMiddleware", void 0);

    commercetools_sdk_client_v2_esm_defineProperty(this, "httpMiddleware", void 0);

    commercetools_sdk_client_v2_esm_defineProperty(this, "userAgentMiddleware", void 0);

    commercetools_sdk_client_v2_esm_defineProperty(this, "correlationIdMiddleware", void 0);

    commercetools_sdk_client_v2_esm_defineProperty(this, "loggerMiddleware", void 0);

    commercetools_sdk_client_v2_esm_defineProperty(this, "queueMiddleware", void 0);

    commercetools_sdk_client_v2_esm_defineProperty(this, "middlewares", []);
  }

  withProjectKey(key) {
    this.projectKey = key;
    return this;
  }

  defaultClient(baseUri, credentials, oauthUri, projectKey) {
    return this.withClientCredentialsFlow({
      host: oauthUri,
      projectKey: projectKey || this.projectKey,
      credentials
    }).withHttpMiddleware({
      host: baseUri,
      fetch: lib
    }).withLoggerMiddleware();
  }

  withAuthMiddleware(authMiddleware) {
    this.authMiddleware = authMiddleware;
    return this;
  }

  withMiddleware(middleware) {
    this.middlewares.push(middleware);
    return this;
  }

  withClientCredentialsFlow(options) {
    return this.withAuthMiddleware(createAuthMiddlewareForClientCredentialsFlow({
      host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
      projectKey: options.projectKey || this.projectKey,
      credentials: {
        clientId: options.credentials.clientId || '',
        clientSecret: options.credentials.clientSecret || ''
      },
      oauthUri: options.oauthUri || '',
      scopes: options.scopes,
      fetch: options.fetch || lib,
      ...options
    }));
  }

  withPasswordFlow(options) {
    return this.withAuthMiddleware(createAuthMiddlewareForPasswordFlow({
      host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
      projectKey: options.projectKey || this.projectKey,
      credentials: {
        clientId: process.env.myClientId,
        clientSecret: process.env.myClientSecret,
        user: {
          username: options.credentials.user.username || '',
          password: options.credentials.user.password || ''
        }
      },
      fetch: options.fetch || lib,
      ...options
    }));
  }

  withAnonymousSessionFlow(options) {
    return this.withAuthMiddleware(createAuthMiddlewareForAnonymousSessionFlow({
      host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
      projectKey: this.projectKey || options.projectKey,
      credentials: {
        clientId: options.credentials.clientId || '',
        clientSecret: options.credentials.clientSecret || '',
        anonymousId: options.credentials.anonymousId || ''
      },
      fetch: options.fetch || lib,
      ...options
    }));
  }

  withRefreshTokenFlow(options) {
    return this.withAuthMiddleware(createAuthMiddlewareForRefreshTokenFlow({
      host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
      projectKey: this.projectKey || options.projectKey,
      credentials: {
        clientId: options.credentials.clientId || '',
        clientSecret: options.credentials.clientSecret || ''
      },
      fetch: options.fetch || lib,
      refreshToken: options.refreshToken || '',
      ...options
    }));
  }

  withExistingTokenFlow(authorization, options) {
    return this.withAuthMiddleware(createAuthMiddlewareWithExistingToken(authorization, {
      force: options.force || true,
      ...options
    }));
  }

  withHttpMiddleware(options) {
    this.httpMiddleware = createHttpMiddleware({
      host: options.host || 'https://api.europe-west1.gcp.commercetools.com',
      fetch: options.fetch || lib,
      ...options
    });
    return this;
  }

  withUserAgentMiddleware() {
    this.userAgentMiddleware = createUserAgentMiddleware();
    return this;
  }

  withQueueMiddleware(options) {
    this.queueMiddleware = createQueueMiddleware({
      concurrency: options.concurrency || 20,
      ...options
    });
    return this;
  }

  withLoggerMiddleware() {
    this.loggerMiddleware = createLoggerMiddleware();
    return this;
  }

  withCorrelationIdMiddleware(options) {
    this.correlationIdMiddleware = createCorrelationIdMiddleware({
      generate: options.generate || null,
      ...options
    });
    return this;
  }

  build() {
    const middlewares = this.middlewares.slice();
    if (this.correlationIdMiddleware) middlewares.push(this.correlationIdMiddleware);
    if (this.userAgentMiddleware) middlewares.push(this.userAgentMiddleware);
    if (this.authMiddleware) middlewares.push(this.authMiddleware);
    if (this.loggerMiddleware) middlewares.push(this.loggerMiddleware);
    if (this.queueMiddleware) middlewares.push(this.queueMiddleware);
    if (this.httpMiddleware) middlewares.push(this.httpMiddleware);
    return createClient({
      middlewares
    });
  }

}


// CONCATENATED MODULE: ./node_modules/node-fetch/lib/index.mjs





 // Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js
// fix for "Readable" isn't a named export issue

const lib_Readable = external_stream_.Readable;
const lib_BUFFER = Symbol('buffer');
const lib_TYPE = Symbol('type');

class lib_Blob {
  constructor() {
    this[lib_TYPE] = '';
    const blobParts = arguments[0];
    const options = arguments[1];
    const buffers = [];
    let size = 0;

    if (blobParts) {
      const a = blobParts;
      const length = Number(a.length);

      for (let i = 0; i < length; i++) {
        const element = a[i];
        let buffer;

        if (element instanceof Buffer) {
          buffer = element;
        } else if (ArrayBuffer.isView(element)) {
          buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
        } else if (element instanceof ArrayBuffer) {
          buffer = Buffer.from(element);
        } else if (element instanceof lib_Blob) {
          buffer = element[lib_BUFFER];
        } else {
          buffer = Buffer.from(typeof element === 'string' ? element : String(element));
        }

        size += buffer.length;
        buffers.push(buffer);
      }
    }

    this[lib_BUFFER] = Buffer.concat(buffers);
    let type = options && options.type !== undefined && String(options.type).toLowerCase();

    if (type && !/[^\u0020-\u007E]/.test(type)) {
      this[lib_TYPE] = type;
    }
  }

  get size() {
    return this[lib_BUFFER].length;
  }

  get type() {
    return this[lib_TYPE];
  }

  text() {
    return Promise.resolve(this[lib_BUFFER].toString());
  }

  arrayBuffer() {
    const buf = this[lib_BUFFER];
    const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    return Promise.resolve(ab);
  }

  stream() {
    const readable = new lib_Readable();

    readable._read = function () {};

    readable.push(this[lib_BUFFER]);
    readable.push(null);
    return readable;
  }

  toString() {
    return '[object Blob]';
  }

  slice() {
    const size = this.size;
    const start = arguments[0];
    const end = arguments[1];
    let relativeStart, relativeEnd;

    if (start === undefined) {
      relativeStart = 0;
    } else if (start < 0) {
      relativeStart = Math.max(size + start, 0);
    } else {
      relativeStart = Math.min(start, size);
    }

    if (end === undefined) {
      relativeEnd = size;
    } else if (end < 0) {
      relativeEnd = Math.max(size + end, 0);
    } else {
      relativeEnd = Math.min(end, size);
    }

    const span = Math.max(relativeEnd - relativeStart, 0);
    const buffer = this[lib_BUFFER];
    const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
    const blob = new lib_Blob([], {
      type: arguments[2]
    });
    blob[lib_BUFFER] = slicedBuffer;
    return blob;
  }

}

Object.defineProperties(lib_Blob.prototype, {
  size: {
    enumerable: true
  },
  type: {
    enumerable: true
  },
  slice: {
    enumerable: true
  }
});
Object.defineProperty(lib_Blob.prototype, Symbol.toStringTag, {
  value: 'Blob',
  writable: false,
  enumerable: false,
  configurable: true
});
/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */

function lib_FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type; // when err.type is `system`, err.code contains system error code

  if (systemError) {
    this.code = this.errno = systemError.code;
  } // hide custom error implementation details from end-users


  Error.captureStackTrace(this, this.constructor);
}

lib_FetchError.prototype = Object.create(Error.prototype);
lib_FetchError.prototype.constructor = lib_FetchError;
lib_FetchError.prototype.name = 'FetchError';
let lib_convert;

try {
  lib_convert = require('encoding').convert;
} catch (e) {}

const lib_INTERNALS = Symbol('Body internals'); // fix an issue where "PassThrough" isn't a named export for node <10

const lib_PassThrough = external_stream_.PassThrough;
/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */

function lib_Body(body) {
  var _this = this;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$size = _ref.size;

  let size = _ref$size === undefined ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

  if (body == null) {
    // body is undefined or null
    body = null;
  } else if (lib_isURLSearchParams(body)) {
    // body is a URLSearchParams
    body = Buffer.from(body.toString());
  } else if (lib_isBlob(body)) ;else if (Buffer.isBuffer(body)) ;else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
    // body is ArrayBuffer
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    // body is ArrayBufferView
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof external_stream_) ;else {
    // none of the above
    // coerce to string then buffer
    body = Buffer.from(String(body));
  }

  this[lib_INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;

  if (body instanceof external_stream_) {
    body.on('error', function (err) {
      const error = err.name === 'AbortError' ? err : new lib_FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
      _this[lib_INTERNALS].error = error;
    });
  }
}

lib_Body.prototype = {
  get body() {
    return this[lib_INTERNALS].body;
  },

  get bodyUsed() {
    return this[lib_INTERNALS].disturbed;
  },

  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  arrayBuffer() {
    return lib_consumeBody.call(this).then(function (buf) {
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    });
  },

  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  blob() {
    let ct = this.headers && this.headers.get('content-type') || '';
    return lib_consumeBody.call(this).then(function (buf) {
      return Object.assign( // Prevent copying
      new lib_Blob([], {
        type: ct.toLowerCase()
      }), {
        [lib_BUFFER]: buf
      });
    });
  },

  /**
   * Decode response as json
   *
   * @return  Promise
   */
  json() {
    var _this2 = this;

    return lib_consumeBody.call(this).then(function (buffer) {
      try {
        return JSON.parse(buffer.toString());
      } catch (err) {
        return lib_Body.Promise.reject(new lib_FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
      }
    });
  },

  /**
   * Decode response as text
   *
   * @return  Promise
   */
  text() {
    return lib_consumeBody.call(this).then(function (buffer) {
      return buffer.toString();
    });
  },

  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return lib_consumeBody.call(this);
  },

  /**
   * Decode response as text, while automatically detecting the encoding and
   * trying to decode to UTF-8 (non-spec api)
   *
   * @return  Promise
   */
  textConverted() {
    var _this3 = this;

    return lib_consumeBody.call(this).then(function (buffer) {
      return lib_convertBody(buffer, _this3.headers);
    });
  }

}; // In browsers, all properties are enumerable.

Object.defineProperties(lib_Body.prototype, {
  body: {
    enumerable: true
  },
  bodyUsed: {
    enumerable: true
  },
  arrayBuffer: {
    enumerable: true
  },
  blob: {
    enumerable: true
  },
  json: {
    enumerable: true
  },
  text: {
    enumerable: true
  }
});

lib_Body.mixIn = function (proto) {
  for (const name of Object.getOwnPropertyNames(lib_Body.prototype)) {
    // istanbul ignore else: future proof
    if (!(name in proto)) {
      const desc = Object.getOwnPropertyDescriptor(lib_Body.prototype, name);
      Object.defineProperty(proto, name, desc);
    }
  }
};
/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */


function lib_consumeBody() {
  var _this4 = this;

  if (this[lib_INTERNALS].disturbed) {
    return lib_Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }

  this[lib_INTERNALS].disturbed = true;

  if (this[lib_INTERNALS].error) {
    return lib_Body.Promise.reject(this[lib_INTERNALS].error);
  }

  let body = this.body; // body is null

  if (body === null) {
    return lib_Body.Promise.resolve(Buffer.alloc(0));
  } // body is blob


  if (lib_isBlob(body)) {
    body = body.stream();
  } // body is buffer


  if (Buffer.isBuffer(body)) {
    return lib_Body.Promise.resolve(body);
  } // istanbul ignore if: should never happen


  if (!(body instanceof external_stream_)) {
    return lib_Body.Promise.resolve(Buffer.alloc(0));
  } // body is stream
  // get ready to actually consume the body


  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new lib_Body.Promise(function (resolve, reject) {
    let resTimeout; // allow timeout on slow response body

    if (_this4.timeout) {
      resTimeout = setTimeout(function () {
        abort = true;
        reject(new lib_FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
      }, _this4.timeout);
    } // handle stream errors


    body.on('error', function (err) {
      if (err.name === 'AbortError') {
        // if the request was aborted, reject with this Error
        abort = true;
        reject(err);
      } else {
        // other errors, such as incorrect content-encoding
        reject(new lib_FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
      }
    });
    body.on('data', function (chunk) {
      if (abort || chunk === null) {
        return;
      }

      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new lib_FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
        return;
      }

      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on('end', function () {
      if (abort) {
        return;
      }

      clearTimeout(resTimeout);

      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        // handle streams that have accumulated too much data (issue #414)
        reject(new lib_FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
      }
    });
  });
}
/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */


function lib_convertBody(buffer, headers) {
  if (typeof lib_convert !== 'function') {
    throw new Error('The package `encoding` must be installed to use the textConverted() function');
  }

  const ct = headers.get('content-type');
  let charset = 'utf-8';
  let res, str; // header

  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  } // no charset in content type, peek at response body for at most 1024 bytes


  str = buffer.slice(0, 1024).toString(); // html5

  if (!res && str) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
  } // html4


  if (!res && str) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);

      if (res) {
        res.pop(); // drop last quote
      }
    }

    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  } // xml


  if (!res && str) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
  } // found charset


  if (res) {
    charset = res.pop(); // prevent decode issues when sites use incorrect encoding
    // ref: https://hsivonen.fi/encoding-menu/

    if (charset === 'gb2312' || charset === 'gbk') {
      charset = 'gb18030';
    }
  } // turn raw buffers into a single utf-8 buffer


  return lib_convert(buffer, 'UTF-8', charset).toString();
}
/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */


function lib_isURLSearchParams(obj) {
  // Duck-typing as a necessary condition.
  if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
    return false;
  } // Brand-checking and more duck-typing as optional condition.


  return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}
/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */


function lib_isBlob(obj) {
  return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */


function lib_clone(instance) {
  let p1, p2;
  let body = instance.body; // don't allow cloning a used body

  if (instance.bodyUsed) {
    throw new Error('cannot clone body after it is used');
  } // check that body is a stream and not form-data object
  // note: we can't clone the form-data object without having it as a dependency


  if (body instanceof external_stream_ && typeof body.getBoundary !== 'function') {
    // tee instance body
    p1 = new lib_PassThrough();
    p2 = new lib_PassThrough();
    body.pipe(p1);
    body.pipe(p2); // set instance body to teed body and return the other teed body

    instance[lib_INTERNALS].body = p1;
    body = p2;
  }

  return body;
}
/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */


function lib_extractContentType(body) {
  if (body === null) {
    // body is null
    return null;
  } else if (typeof body === 'string') {
    // body is string
    return 'text/plain;charset=UTF-8';
  } else if (lib_isURLSearchParams(body)) {
    // body is a URLSearchParams
    return 'application/x-www-form-urlencoded;charset=UTF-8';
  } else if (lib_isBlob(body)) {
    // body is blob
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    // body is buffer
    return null;
  } else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
    // body is ArrayBuffer
    return null;
  } else if (ArrayBuffer.isView(body)) {
    // body is ArrayBufferView
    return null;
  } else if (typeof body.getBoundary === 'function') {
    // detect form data input from form-data module
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof external_stream_) {
    // body is stream
    // can't really do much about this
    return null;
  } else {
    // Body constructor defaults other things to string
    return 'text/plain;charset=UTF-8';
  }
}
/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */


function lib_getTotalBytes(instance) {
  const body = instance.body;

  if (body === null) {
    // body is null
    return 0;
  } else if (lib_isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    // body is buffer
    return body.length;
  } else if (body && typeof body.getLengthSync === 'function') {
    // detect form data input from form-data module
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
    body.hasKnownLength && body.hasKnownLength()) {
      // 2.x
      return body.getLengthSync();
    }

    return null;
  } else {
    // body is stream
    return null;
  }
}
/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */


function lib_writeToStream(dest, instance) {
  const body = instance.body;

  if (body === null) {
    // body is null
    dest.end();
  } else if (lib_isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    // body is buffer
    dest.write(body);
    dest.end();
  } else {
    // body is stream
    body.pipe(dest);
  }
} // expose Promise


lib_Body.Promise = global.Promise;
/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const lib_invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const lib_invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function lib_validateName(name) {
  name = `${name}`;

  if (lib_invalidTokenRegex.test(name) || name === '') {
    throw new TypeError(`${name} is not a legal HTTP header name`);
  }
}

function lib_validateValue(value) {
  value = `${value}`;

  if (lib_invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */


function lib_find(map, name) {
  name = name.toLowerCase();

  for (const key in map) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }

  return undefined;
}

const lib_MAP = Symbol('map');

class lib_Headers {
  /**
   * Headers class
   *
   * @param   Object  headers  Response headers
   * @return  Void
   */
  constructor() {
    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    this[lib_MAP] = Object.create(null);

    if (init instanceof lib_Headers) {
      const rawHeaders = init.raw();
      const headerNames = Object.keys(rawHeaders);

      for (const headerName of headerNames) {
        for (const value of rawHeaders[headerName]) {
          this.append(headerName, value);
        }
      }

      return;
    } // We don't worry about converting prop to ByteString here as append()
    // will handle it.


    if (init == null) ;else if (typeof init === 'object') {
      const method = init[Symbol.iterator];

      if (method != null) {
        if (typeof method !== 'function') {
          throw new TypeError('Header pairs must be iterable');
        } // sequence<sequence<ByteString>>
        // Note: per spec we have to first exhaust the lists then process them


        const pairs = [];

        for (const pair of init) {
          if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
            throw new TypeError('Each header pair must be iterable');
          }

          pairs.push(Array.from(pair));
        }

        for (const pair of pairs) {
          if (pair.length !== 2) {
            throw new TypeError('Each header pair must be a name/value tuple');
          }

          this.append(pair[0], pair[1]);
        }
      } else {
        // record<ByteString, ByteString>
        for (const key of Object.keys(init)) {
          const value = init[key];
          this.append(key, value);
        }
      }
    } else {
      throw new TypeError('Provided initializer must be an object');
    }
  }
  /**
   * Return combined header value given name
   *
   * @param   String  name  Header name
   * @return  Mixed
   */


  get(name) {
    name = `${name}`;
    lib_validateName(name);
    const key = lib_find(this[lib_MAP], name);

    if (key === undefined) {
      return null;
    }

    return this[lib_MAP][key].join(', ');
  }
  /**
   * Iterate over all headers
   *
   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
   * @param   Boolean   thisArg   `this` context for callback function
   * @return  Void
   */


  forEach(callback) {
    let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    let pairs = lib_getHeaders(this);
    let i = 0;

    while (i < pairs.length) {
      var _pairs$i = pairs[i];
      const name = _pairs$i[0],
            value = _pairs$i[1];
      callback.call(thisArg, value, name, this);
      pairs = lib_getHeaders(this);
      i++;
    }
  }
  /**
   * Overwrite header values given name
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */


  set(name, value) {
    name = `${name}`;
    value = `${value}`;
    lib_validateName(name);
    lib_validateValue(value);
    const key = lib_find(this[lib_MAP], name);
    this[lib_MAP][key !== undefined ? key : name] = [value];
  }
  /**
   * Append a value onto existing header
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */


  append(name, value) {
    name = `${name}`;
    value = `${value}`;
    lib_validateName(name);
    lib_validateValue(value);
    const key = lib_find(this[lib_MAP], name);

    if (key !== undefined) {
      this[lib_MAP][key].push(value);
    } else {
      this[lib_MAP][name] = [value];
    }
  }
  /**
   * Check for header name existence
   *
   * @param   String   name  Header name
   * @return  Boolean
   */


  has(name) {
    name = `${name}`;
    lib_validateName(name);
    return lib_find(this[lib_MAP], name) !== undefined;
  }
  /**
   * Delete all header values given name
   *
   * @param   String  name  Header name
   * @return  Void
   */


  delete(name) {
    name = `${name}`;
    lib_validateName(name);
    const key = lib_find(this[lib_MAP], name);

    if (key !== undefined) {
      delete this[lib_MAP][key];
    }
  }
  /**
   * Return raw headers (non-spec api)
   *
   * @return  Object
   */


  raw() {
    return this[lib_MAP];
  }
  /**
   * Get an iterator on keys.
   *
   * @return  Iterator
   */


  keys() {
    return lib_createHeadersIterator(this, 'key');
  }
  /**
   * Get an iterator on values.
   *
   * @return  Iterator
   */


  values() {
    return lib_createHeadersIterator(this, 'value');
  }
  /**
   * Get an iterator on entries.
   *
   * This is the default iterator of the Headers object.
   *
   * @return  Iterator
   */


  [Symbol.iterator]() {
    return lib_createHeadersIterator(this, 'key+value');
  }

}

lib_Headers.prototype.entries = lib_Headers.prototype[Symbol.iterator];
Object.defineProperty(lib_Headers.prototype, Symbol.toStringTag, {
  value: 'Headers',
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(lib_Headers.prototype, {
  get: {
    enumerable: true
  },
  forEach: {
    enumerable: true
  },
  set: {
    enumerable: true
  },
  append: {
    enumerable: true
  },
  has: {
    enumerable: true
  },
  delete: {
    enumerable: true
  },
  keys: {
    enumerable: true
  },
  values: {
    enumerable: true
  },
  entries: {
    enumerable: true
  }
});

function lib_getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
  const keys = Object.keys(headers[lib_MAP]).sort();
  return keys.map(kind === 'key' ? function (k) {
    return k.toLowerCase();
  } : kind === 'value' ? function (k) {
    return headers[lib_MAP][k].join(', ');
  } : function (k) {
    return [k.toLowerCase(), headers[lib_MAP][k].join(', ')];
  });
}

const lib_INTERNAL = Symbol('internal');

function lib_createHeadersIterator(target, kind) {
  const iterator = Object.create(lib_HeadersIteratorPrototype);
  iterator[lib_INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator;
}

const lib_HeadersIteratorPrototype = Object.setPrototypeOf({
  next() {
    // istanbul ignore if
    if (!this || Object.getPrototypeOf(this) !== lib_HeadersIteratorPrototype) {
      throw new TypeError('Value of `this` is not a HeadersIterator');
    }

    var _INTERNAL = this[lib_INTERNAL];
    const target = _INTERNAL.target,
          kind = _INTERNAL.kind,
          index = _INTERNAL.index;
    const values = lib_getHeaders(target, kind);
    const len = values.length;

    if (index >= len) {
      return {
        value: undefined,
        done: true
      };
    }

    this[lib_INTERNAL].index = index + 1;
    return {
      value: values[index],
      done: false
    };
  }

}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(lib_HeadersIteratorPrototype, Symbol.toStringTag, {
  value: 'HeadersIterator',
  writable: false,
  enumerable: false,
  configurable: true
});
/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */

function lib_exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({
    __proto__: null
  }, headers[lib_MAP]); // http.request() only supports string as Host header. This hack makes
  // specifying custom Host header possible.

  const hostHeaderKey = lib_find(headers[lib_MAP], 'Host');

  if (hostHeaderKey !== undefined) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }

  return obj;
}
/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */


function lib_createHeadersLenient(obj) {
  const headers = new lib_Headers();

  for (const name of Object.keys(obj)) {
    if (lib_invalidTokenRegex.test(name)) {
      continue;
    }

    if (Array.isArray(obj[name])) {
      for (const val of obj[name]) {
        if (lib_invalidHeaderCharRegex.test(val)) {
          continue;
        }

        if (headers[lib_MAP][name] === undefined) {
          headers[lib_MAP][name] = [val];
        } else {
          headers[lib_MAP][name].push(val);
        }
      }
    } else if (!lib_invalidHeaderCharRegex.test(obj[name])) {
      headers[lib_MAP][name] = [obj[name]];
    }
  }

  return headers;
}

const lib_INTERNALS$1 = Symbol('Response internals'); // fix an issue where "STATUS_CODES" aren't a named export for node <10

const lib_STATUS_CODES = external_http_.STATUS_CODES;
/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */

class lib_Response {
  constructor() {
    let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    lib_Body.call(this, body, opts);
    const status = opts.status || 200;
    const headers = new lib_Headers(opts.headers);

    if (body != null && !headers.has('Content-Type')) {
      const contentType = lib_extractContentType(body);

      if (contentType) {
        headers.append('Content-Type', contentType);
      }
    }

    this[lib_INTERNALS$1] = {
      url: opts.url,
      status,
      statusText: opts.statusText || lib_STATUS_CODES[status],
      headers,
      counter: opts.counter
    };
  }

  get url() {
    return this[lib_INTERNALS$1].url || '';
  }

  get status() {
    return this[lib_INTERNALS$1].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */


  get ok() {
    return this[lib_INTERNALS$1].status >= 200 && this[lib_INTERNALS$1].status < 300;
  }

  get redirected() {
    return this[lib_INTERNALS$1].counter > 0;
  }

  get statusText() {
    return this[lib_INTERNALS$1].statusText;
  }

  get headers() {
    return this[lib_INTERNALS$1].headers;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */


  clone() {
    return new lib_Response(lib_clone(this), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected
    });
  }

}

lib_Body.mixIn(lib_Response.prototype);
Object.defineProperties(lib_Response.prototype, {
  url: {
    enumerable: true
  },
  status: {
    enumerable: true
  },
  ok: {
    enumerable: true
  },
  redirected: {
    enumerable: true
  },
  statusText: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  clone: {
    enumerable: true
  }
});
Object.defineProperty(lib_Response.prototype, Symbol.toStringTag, {
  value: 'Response',
  writable: false,
  enumerable: false,
  configurable: true
});
const lib_INTERNALS$2 = Symbol('Request internals');
const lib_URL = external_url_.URL || public_api.URL; // fix an issue where "format", "parse" aren't a named export for node <10

const lib_parse_url = external_url_.parse;
const lib_format_url = external_url_.format;
/**
 * Wrapper around `new URL` to handle arbitrary URLs
 *
 * @param  {string} urlStr
 * @return {void}
 */

function lib_parseURL(urlStr) {
  /*
  	Check whether the URL is absolute or not
  		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
  	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
  */
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new lib_URL(urlStr).toString();
  } // Fallback to old implementation for arbitrary URLs


  return lib_parse_url(urlStr);
}

const lib_streamDestructionSupported = ('destroy' in external_stream_.Readable.prototype);
/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */

function lib_isRequest(input) {
  return typeof input === 'object' && typeof input[lib_INTERNALS$2] === 'object';
}

function lib_isAbortSignal(signal) {
  const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === 'AbortSignal');
}
/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */


class lib_Request {
  constructor(input) {
    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let parsedURL; // normalize input

    if (!lib_isRequest(input)) {
      if (input && input.href) {
        // in order to support Node.js' Url objects; though WHATWG's URL objects
        // will fall into this branch also (since their `toString()` will return
        // `href` property anyway)
        parsedURL = lib_parseURL(input.href);
      } else {
        // coerce input to a string before attempting to parse
        parsedURL = lib_parseURL(`${input}`);
      }

      input = {};
    } else {
      parsedURL = lib_parseURL(input.url);
    }

    let method = init.method || input.method || 'GET';
    method = method.toUpperCase();

    if ((init.body != null || lib_isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
      throw new TypeError('Request with GET/HEAD method cannot have body');
    }

    let inputBody = init.body != null ? init.body : lib_isRequest(input) && input.body !== null ? lib_clone(input) : null;
    lib_Body.call(this, inputBody, {
      timeout: init.timeout || input.timeout || 0,
      size: init.size || input.size || 0
    });
    const headers = new lib_Headers(init.headers || input.headers || {});

    if (inputBody != null && !headers.has('Content-Type')) {
      const contentType = lib_extractContentType(inputBody);

      if (contentType) {
        headers.append('Content-Type', contentType);
      }
    }

    let signal = lib_isRequest(input) ? input.signal : null;
    if ('signal' in init) signal = init.signal;

    if (signal != null && !lib_isAbortSignal(signal)) {
      throw new TypeError('Expected signal to be an instanceof AbortSignal');
    }

    this[lib_INTERNALS$2] = {
      method,
      redirect: init.redirect || input.redirect || 'follow',
      headers,
      parsedURL,
      signal
    }; // node-fetch-only options

    this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
    this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
  }

  get method() {
    return this[lib_INTERNALS$2].method;
  }

  get url() {
    return lib_format_url(this[lib_INTERNALS$2].parsedURL);
  }

  get headers() {
    return this[lib_INTERNALS$2].headers;
  }

  get redirect() {
    return this[lib_INTERNALS$2].redirect;
  }

  get signal() {
    return this[lib_INTERNALS$2].signal;
  }
  /**
   * Clone this request
   *
   * @return  Request
   */


  clone() {
    return new lib_Request(this);
  }

}

lib_Body.mixIn(lib_Request.prototype);
Object.defineProperty(lib_Request.prototype, Symbol.toStringTag, {
  value: 'Request',
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(lib_Request.prototype, {
  method: {
    enumerable: true
  },
  url: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  redirect: {
    enumerable: true
  },
  clone: {
    enumerable: true
  },
  signal: {
    enumerable: true
  }
});
/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */

function lib_getNodeRequestOptions(request) {
  const parsedURL = request[lib_INTERNALS$2].parsedURL;
  const headers = new lib_Headers(request[lib_INTERNALS$2].headers); // fetch step 1.3

  if (!headers.has('Accept')) {
    headers.set('Accept', '*/*');
  } // Basic fetch


  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError('Only absolute URLs are supported');
  }

  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError('Only HTTP(S) protocols are supported');
  }

  if (request.signal && request.body instanceof external_stream_.Readable && !lib_streamDestructionSupported) {
    throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
  } // HTTP-network-or-cache fetch steps 2.4-2.7


  let contentLengthValue = null;

  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
    contentLengthValue = '0';
  }

  if (request.body != null) {
    const totalBytes = lib_getTotalBytes(request);

    if (typeof totalBytes === 'number') {
      contentLengthValue = String(totalBytes);
    }
  }

  if (contentLengthValue) {
    headers.set('Content-Length', contentLengthValue);
  } // HTTP-network-or-cache fetch step 2.11


  if (!headers.has('User-Agent')) {
    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
  } // HTTP-network-or-cache fetch step 2.15


  if (request.compress && !headers.has('Accept-Encoding')) {
    headers.set('Accept-Encoding', 'gzip,deflate');
  }

  let agent = request.agent;

  if (typeof agent === 'function') {
    agent = agent(parsedURL);
  }

  if (!headers.has('Connection') && !agent) {
    headers.set('Connection', 'close');
  } // HTTP-network fetch step 4.2
  // chunked encoding is handled by Node.js


  return Object.assign({}, parsedURL, {
    method: request.method,
    headers: lib_exportNodeCompatibleHeaders(headers),
    agent
  });
}
/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */


function lib_AbortError(message) {
  Error.call(this, message);
  this.type = 'aborted';
  this.message = message; // hide custom error implementation details from end-users

  Error.captureStackTrace(this, this.constructor);
}

lib_AbortError.prototype = Object.create(Error.prototype);
lib_AbortError.prototype.constructor = lib_AbortError;
lib_AbortError.prototype.name = 'AbortError';
const URL$1 = external_url_.URL || public_api.URL; // fix an issue where "PassThrough", "resolve" aren't a named export for node <10

const lib_PassThrough$1 = external_stream_.PassThrough;

const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
  const orig = new URL$1(original).hostname;
  const dest = new URL$1(destination).hostname;
  return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
};
/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */


function node_fetch_lib_fetch(url, opts) {
  // allow custom promise
  if (!node_fetch_lib_fetch.Promise) {
    throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
  }

  lib_Body.Promise = node_fetch_lib_fetch.Promise; // wrap http.request into fetch

  return new node_fetch_lib_fetch.Promise(function (resolve, reject) {
    // build request object
    const request = new lib_Request(url, opts);
    const options = lib_getNodeRequestOptions(request);
    const send = (options.protocol === 'https:' ? external_https_ : external_http_).request;
    const signal = request.signal;
    let response = null;

    const abort = function abort() {
      let error = new lib_AbortError('The user aborted a request.');
      reject(error);

      if (request.body && request.body instanceof external_stream_.Readable) {
        request.body.destroy(error);
      }

      if (!response || !response.body) return;
      response.body.emit('error', error);
    };

    if (signal && signal.aborted) {
      abort();
      return;
    }

    const abortAndFinalize = function abortAndFinalize() {
      abort();
      finalize();
    }; // send request


    const req = send(options);
    let reqTimeout;

    if (signal) {
      signal.addEventListener('abort', abortAndFinalize);
    }

    function finalize() {
      req.abort();
      if (signal) signal.removeEventListener('abort', abortAndFinalize);
      clearTimeout(reqTimeout);
    }

    if (request.timeout) {
      req.once('socket', function (socket) {
        reqTimeout = setTimeout(function () {
          reject(new lib_FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
          finalize();
        }, request.timeout);
      });
    }

    req.on('error', function (err) {
      reject(new lib_FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
      finalize();
    });
    req.on('response', function (res) {
      clearTimeout(reqTimeout);
      const headers = lib_createHeadersLenient(res.headers); // HTTP fetch step 5

      if (node_fetch_lib_fetch.isRedirect(res.statusCode)) {
        // HTTP fetch step 5.2
        const location = headers.get('Location'); // HTTP fetch step 5.3

        let locationURL = null;

        try {
          locationURL = location === null ? null : new URL$1(location, request.url).toString();
        } catch (err) {
          // error here can only be invalid URL in Location: header
          // do not throw when options.redirect == manual
          // let the user extract the errorneous redirect URL
          if (request.redirect !== 'manual') {
            reject(new lib_FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
            finalize();
            return;
          }
        } // HTTP fetch step 5.5


        switch (request.redirect) {
          case 'error':
            reject(new lib_FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
            finalize();
            return;

          case 'manual':
            // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
            if (locationURL !== null) {
              // handle corrupted header
              try {
                headers.set('Location', locationURL);
              } catch (err) {
                // istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
                reject(err);
              }
            }

            break;

          case 'follow':
            // HTTP-redirect fetch step 2
            if (locationURL === null) {
              break;
            } // HTTP-redirect fetch step 5


            if (request.counter >= request.follow) {
              reject(new lib_FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
              finalize();
              return;
            } // HTTP-redirect fetch step 6 (counter increment)
            // Create a new Request object.


            const requestOpts = {
              headers: new lib_Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              timeout: request.timeout,
              size: request.size
            };

            if (!isDomainOrSubdomain(request.url, locationURL)) {
              for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
                requestOpts.headers.delete(name);
              }
            } // HTTP-redirect fetch step 9


            if (res.statusCode !== 303 && request.body && lib_getTotalBytes(request) === null) {
              reject(new lib_FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
              finalize();
              return;
            } // HTTP-redirect fetch step 11


            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
              requestOpts.method = 'GET';
              requestOpts.body = undefined;
              requestOpts.headers.delete('content-length');
            } // HTTP-redirect fetch step 15


            resolve(node_fetch_lib_fetch(new lib_Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      } // prepare response


      res.once('end', function () {
        if (signal) signal.removeEventListener('abort', abortAndFinalize);
      });
      let body = res.pipe(new lib_PassThrough$1());
      const response_options = {
        url: request.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: headers,
        size: request.size,
        timeout: request.timeout,
        counter: request.counter
      }; // HTTP-network fetch step 12.1.1.3

      const codings = headers.get('Content-Encoding'); // HTTP-network fetch step 12.1.1.4: handle content codings
      // in following scenarios we ignore compression support
      // 1. compression support is disabled
      // 2. HEAD request
      // 3. no Content-Encoding header
      // 4. no content response (204)
      // 5. content not modified response (304)

      if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new lib_Response(body, response_options);
        resolve(response);
        return;
      } // For Node v6+
      // Be less strict when decoding compressed responses, since sometimes
      // servers send slightly invalid responses that are still accepted
      // by common browsers.
      // Always using Z_SYNC_FLUSH is what cURL does.


      const zlibOptions = {
        flush: external_zlib_.Z_SYNC_FLUSH,
        finishFlush: external_zlib_.Z_SYNC_FLUSH
      }; // for gzip

      if (codings == 'gzip' || codings == 'x-gzip') {
        body = body.pipe(external_zlib_.createGunzip(zlibOptions));
        response = new lib_Response(body, response_options);
        resolve(response);
        return;
      } // for deflate


      if (codings == 'deflate' || codings == 'x-deflate') {
        // handle the infamous raw deflate response from old servers
        // a hack for old IIS and Apache servers
        const raw = res.pipe(new lib_PassThrough$1());
        raw.once('data', function (chunk) {
          // see http://stackoverflow.com/questions/37519828
          if ((chunk[0] & 0x0F) === 0x08) {
            body = body.pipe(external_zlib_.createInflate());
          } else {
            body = body.pipe(external_zlib_.createInflateRaw());
          }

          response = new lib_Response(body, response_options);
          resolve(response);
        });
        return;
      } // for br


      if (codings == 'br' && typeof external_zlib_.createBrotliDecompress === 'function') {
        body = body.pipe(external_zlib_.createBrotliDecompress());
        response = new lib_Response(body, response_options);
        resolve(response);
        return;
      } // otherwise, use response as-is


      response = new lib_Response(body, response_options);
      resolve(response);
    });
    lib_writeToStream(req, request);
  });
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */


node_fetch_lib_fetch.isRedirect = function (code) {
  return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
}; // expose Promise


node_fetch_lib_fetch.Promise = global.Promise;
/* harmony default export */ var node_fetch_lib = (node_fetch_lib_fetch);

// CONCATENATED MODULE: ./commerce-commercetools/ClientFactory.ts


class ClientFactory {
}
ClientFactory.factor = (clientConfig, environment) => {
    const authMiddlewareOptions = {
        host: clientConfig.authUrl,
        projectKey: clientConfig.projectKey,
        credentials: {
            clientId: clientConfig.clientId,
            clientSecret: clientConfig.clientSecret,
        },
        fetch: node_fetch_lib,
    };
    const httpMiddlewareOptions = {
        host: clientConfig.hostUrl,
        fetch: node_fetch_lib,
    };
    let clientBuilder = new commercetools_sdk_client_v2_esm_ClientBuilder()
        .withClientCredentialsFlow(authMiddlewareOptions)
        .withHttpMiddleware(httpMiddlewareOptions);
    if (environment !== undefined && environment !== 'prod' && environment !== 'production') {
        clientBuilder = clientBuilder.withLoggerMiddleware();
    }
    return clientBuilder.build();
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/GetConfig.ts
const getConfig = (project, engine, locale) => {
    var _a, _b, _c, _d, _e;
    if (!project.configuration[engine]) {
        throw `Configuration details are not available for ${engine}`;
    }
    return {
        authUrl: (_a = project.configuration) === null || _a === void 0 ? void 0 : _a[engine].authUrl,
        clientId: (_b = project.configuration) === null || _b === void 0 ? void 0 : _b[engine].clientId,
        clientSecret: (_c = project.configuration) === null || _c === void 0 ? void 0 : _c[engine].clientSecret,
        hostUrl: (_d = project.configuration) === null || _d === void 0 ? void 0 : _d[engine].hostUrl,
        projectKey: (_e = project.configuration) === null || _e === void 0 ? void 0 : _e[engine].projectKey,
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/BaseApi.ts



const localeRegex = /^(?<language>[a-z]{2,})(?:_(?<territory>[A-Z]{2,}))?(?:\.(?<codeset>[A-Z0-9_+-]+))?(?:@(?<modifier>[A-Za-z]+))?$/;
const languageToTerritory = {
    en: 'GB',
};
const modifierToCurrency = {
    euro: 'EUR',
};
const territoryToCurrency = {
    AD: 'EUR',
    AE: 'AED',
    AF: 'AFN',
    AG: 'XCD',
    AI: 'XCD',
    AL: 'ALL',
    AM: 'AMD',
    AN: 'ANG',
    AO: 'AOA',
    AQ: 'AQD',
    AR: 'ARS',
    AS: 'EUR',
    AT: 'EUR',
    AU: 'AUD',
    AW: 'ANG',
    AX: 'EUR',
    AZ: 'AZN',
    BA: 'BAM',
    BB: 'BBD',
    BD: 'BDT',
    BE: 'EUR',
    BF: 'XOF',
    BG: 'BGN',
    BH: 'BHD',
    BI: 'BIF',
    BJ: 'XOF',
    BL: 'EUR',
    BM: 'BMD',
    BN: 'BND',
    BO: 'BOB',
    BR: 'BRL',
    BS: 'BSD',
    BT: 'INR',
    BV: 'NOK',
    BW: 'BWP',
    BY: 'BYR',
    BZ: 'BZD',
    CA: 'CAD',
    CC: 'AUD',
    CD: 'CDF',
    CF: 'XAF',
    CG: 'XAF',
    CH: 'CHF',
    CI: 'XOF',
    CK: 'NZD',
    CL: 'CLP',
    CM: 'XAF',
    CN: 'CNY',
    CO: 'COP',
    CR: 'CRC',
    CU: 'CUP',
    CV: 'CVE',
    CX: 'AUD',
    CY: 'CYP',
    CZ: 'CZK',
    DE: 'EUR',
    DJ: 'DJF',
    DK: 'DKK',
    DM: 'XCD',
    DO: 'DOP',
    DZ: 'DZD',
    EC: 'ECS',
    EE: 'EEK',
    EG: 'EGP',
    EH: 'MAD',
    ER: 'ETB',
    ES: 'EUR',
    ET: 'ETB',
    FI: 'EUR',
    FJ: 'FJD',
    FK: 'FKP',
    FM: 'USD',
    FO: 'DKK',
    FR: 'EUR',
    GA: 'XAF',
    GB: 'GBP',
    GD: 'XCD',
    GE: 'GEL',
    GF: 'EUR',
    GG: 'GGP',
    GH: 'GHS',
    GI: 'GIP',
    GL: 'DKK',
    GM: 'GMD',
    GN: 'GNF',
    GP: 'EUR',
    GQ: 'XAF',
    GR: 'EUR',
    GS: 'GBP',
    GT: 'GTQ',
    GU: 'USD',
    GW: 'XOF',
    GY: 'GYD',
    HK: 'HKD',
    HM: 'AUD',
    HN: 'HNL',
    HR: 'HRK',
    HT: 'HTG',
    HU: 'HUF',
    ID: 'IDR',
    IE: 'EUR',
    IL: 'ILS',
    IM: 'GBP',
    IN: 'INR',
    IO: 'USD',
    IQ: 'IQD',
    IR: 'IRR',
    IS: 'ISK',
    IT: 'EUR',
    JE: 'GBP',
    JM: 'JMD',
    JO: 'JOD',
    JP: 'JPY',
    KE: 'KES',
    KG: 'KGS',
    KH: 'KHR',
    KI: 'AUD',
    KM: 'KMF',
    KN: 'XCD',
    KP: 'KPW',
    KR: 'KRW',
    KW: 'KWD',
    KY: 'KYD',
    KZ: 'KZT',
    LA: 'LAK',
    LB: 'LBP',
    LC: 'XCD',
    LI: 'CHF',
    LK: 'LKR',
    LR: 'LRD',
    LS: 'LSL',
    LT: 'LTL',
    LU: 'EUR',
    LV: 'LVL',
    LY: 'LYD',
    MA: 'MAD',
    MC: 'EUR',
    MD: 'MDL',
    ME: 'EUR',
    MF: 'ANG',
    MG: 'MGA',
    MH: 'USD',
    MK: 'MKD',
    ML: 'XOF',
    MM: 'MMK',
    MN: 'MNT',
    MO: 'MOP',
    MP: 'USD',
    MQ: 'EUR',
    MR: 'MRO',
    MS: 'XCD',
    MT: 'MTL',
    MU: 'MUR',
    MV: 'MVR',
    MW: 'MWK',
    MX: 'MXN',
    MY: 'MYR',
    MZ: 'MZN',
    NA: 'NAD',
    NC: 'XPF',
    NE: 'XOF',
    NF: 'AUD',
    NG: 'NGN',
    NI: 'NIO',
    NL: 'EUR',
    NO: 'NOK',
    NP: 'NPR',
    NR: 'AUD',
    NU: 'NZD',
    NZ: 'NZD',
    OM: 'OMR',
    PA: 'PAB',
    PE: 'PEN',
    PF: 'XPF',
    PG: 'PGK',
    PH: 'PHP',
    PK: 'PKR',
    PL: 'PLN',
    PM: 'EUR',
    PN: 'NZD',
    PR: 'USD',
    PS: 'JOD',
    PT: 'EUR',
    PW: 'USD',
    PY: 'PYG',
    QA: 'QAR',
    RE: 'EUR',
    RO: 'RON',
    RS: 'RSD',
    RU: 'RUB',
    RW: 'RWF',
    SA: 'SAR',
    SB: 'SBD',
    SC: 'SCR',
    SD: 'SDG',
    SE: 'SEK',
    SG: 'SGD',
    SH: 'GBP',
    SI: 'EUR',
    SJ: 'NOK',
    SK: 'SKK',
    SL: 'SLL',
    SM: 'EUR',
    SN: 'XOF',
    SO: 'SOS',
    SR: 'SRD',
    ST: 'STD',
    SV: 'SVC',
    SY: 'SYP',
    SZ: 'SZL',
    TC: 'USD',
    TD: 'XAF',
    TF: 'EUR',
    TG: 'XOF',
    TH: 'THB',
    TJ: 'TJS',
    TK: 'NZD',
    TM: 'TMT',
    TN: 'TND',
    TO: 'TOP',
    TP: 'IDR',
    TR: 'TRY',
    TT: 'TTD',
    TV: 'AUD',
    TW: 'TWD',
    TZ: 'TZS',
    UA: 'UAH',
    UG: 'UGX',
    UM: 'USD',
    USAF: 'USD',
    US: 'USD',
    UY: 'UYU',
    UZ: 'UZS',
    VA: 'EUR',
    VC: 'XCD',
    VE: 'VEF',
    VG: 'USD',
    VI: 'USD',
    VN: 'VND',
    VU: 'VUV',
    WF: 'XPF',
    WS: 'EUR',
    YE: 'YER',
    YT: 'EUR',
    ZA: 'ZAR',
    ZM: 'ZMK',
    ZW: 'ZWD',
};
const parseLocale = (locale) => {
    const matches = locale.match(localeRegex);
    if (matches === null) {
        throw new Error(`Invalid locale: ${locale}`);
    }
    const language = matches.groups.language;
    let territory = matches.groups.territory;
    if (territory === undefined) {
        if (language in languageToTerritory) {
            territory = languageToTerritory[language];
        }
        else {
            territory = language.toUpperCase();
        }
    }
    let currency = undefined;
    const modifier = matches.groups.modifier;
    if (modifier !== undefined) {
        if (modifier in modifierToCurrency) {
            currency = modifierToCurrency[modifier];
        }
        else {
            const foundCurrency = Object.values(territoryToCurrency).find((currency) => currency === modifier.toUpperCase());
            if (foundCurrency !== undefined) {
                currency = foundCurrency;
            }
        }
    }
    if (currency === undefined) {
        if (territory in territoryToCurrency) {
            currency = territoryToCurrency[territory];
        }
        else {
            currency = 'USD';
        }
    }
    return {
        language,
        territory,
        currency,
    };
};
const projectCacheTtlMilliseconds = 10 * 60 * 1000;
const projectCache = {};
const productTypesCache = {};
const pickCandidate = (candidates, availableOptions) => {
    for (const candidate of candidates) {
        const found = availableOptions.find((option) => option.toLowerCase() === candidate.toLowerCase());
        if (found !== undefined) {
            return found;
        }
    }
    return undefined;
};
const pickCommercetoolsLanguage = (parsedLocale, availableLanguages) => {
    const candidates = [`${parsedLocale.language}-${parsedLocale.territory}`, parsedLocale.language];
    const foundCandidate = pickCandidate(candidates, availableLanguages);
    if (foundCandidate !== undefined) {
        return foundCandidate;
    }
    const prefix = `${parsedLocale.language.toLowerCase()}-`;
    const foundPrefix = availableLanguages.find((option) => option.toLowerCase().startsWith(prefix));
    if (foundPrefix !== undefined) {
        return foundPrefix;
    }
    return availableLanguages[0];
};
const pickCommercetoolsCountry = (parsedLocale, language, availableCountries) => {
    const candidates = [parsedLocale.territory, parsedLocale.language, language];
    const foundCandidate = pickCandidate(candidates, availableCountries);
    if (foundCandidate !== undefined) {
        return foundCandidate;
    }
    return availableCountries[0];
};
const pickCommercetoolsCurrency = (parsedLocale, availableCurrencies) => {
    const candidates = [
        parsedLocale.currency,
        parseLocale(`${parsedLocale.language}_${parsedLocale.territory}`).currency,
    ];
    const foundCandidate = pickCandidate(candidates, availableCurrencies);
    if (foundCandidate !== undefined) {
        return foundCandidate;
    }
    return availableCurrencies[0];
};
class BaseApi_BaseApi {
    constructor(frontasticContext, locale) {
        const engine = 'commercetools';
        const clientSettings = getConfig(frontasticContext.project, engine, locale);
        const client = ClientFactory.factor(clientSettings, frontasticContext.environment);
        this.apiRoot = createApiBuilderFromCtpClient(client);
        this.projectKey = clientSettings.projectKey;
        this.locale = locale;
    }
    getApiForProject() {
        return this.apiRoot.withProjectKey({ projectKey: this.projectKey });
    }
    async getCommercetoolsLocal() {
        const parsedLocale = parseLocale(this.locale);
        const project = await this.getProject();
        const language = pickCommercetoolsLanguage(parsedLocale, project.languages);
        const country = pickCommercetoolsCountry(parsedLocale, language, project.countries);
        const currency = pickCommercetoolsCurrency(parsedLocale, project.currencies);
        return Promise.resolve({
            language,
            country,
            currency,
        });
    }
    async getProductTypes() {
        const now = new Date();
        if (this.projectKey in productTypesCache) {
            const cacheEntry = productTypesCache[this.projectKey];
            if (cacheEntry.expiryTime < now) {
                return cacheEntry.productTypes;
            }
        }
        const response = await this.getApiForProject().productTypes().get().execute();
        const productTypes = response.body.results;
        productTypesCache[this.projectKey] = {
            productTypes,
            expiryTime: new Date(now.getMilliseconds() + projectCacheTtlMilliseconds),
        };
        return productTypes;
    }
    async getProject() {
        const now = new Date();
        if (this.projectKey in projectCache) {
            const cacheEntry = projectCache[this.projectKey];
            if (cacheEntry.expiryTime < now) {
                return cacheEntry.project;
            }
        }
        const response = await this.getApiForProject().get().execute();
        const project = response.body;
        projectCache[this.projectKey] = {
            project,
            expiryTime: new Date(now.getMilliseconds() + projectCacheTtlMilliseconds),
        };
        return project;
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/mappers/AccontMapper.ts
class AccountMapper {
}
AccountMapper.commercetoolsCustomerToAccount = (commercetoolsCustomer, locale) => {
    return {
        accountId: commercetoolsCustomer.id,
        email: commercetoolsCustomer.email,
        salutation: commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.salutation,
        firstName: commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.firstName,
        lastName: commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.lastName,
        birthday: (commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.dateOfBirth) ? new Date(commercetoolsCustomer.dateOfBirth) : undefined,
        confirmed: commercetoolsCustomer.isEmailVerified,
        addresses: AccountMapper.commercetoolsCustomerToAddresses(commercetoolsCustomer, locale),
    };
};
AccountMapper.commercetoolsCustomerToAddresses = (commercetoolsCustomer, locale) => {
    const addresses = [];
    commercetoolsCustomer.addresses.forEach((commercetoolsAddress) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        addresses.push({
            addressId: commercetoolsAddress.id,
            salutation: (_a = commercetoolsAddress.salutation) !== null && _a !== void 0 ? _a : undefined,
            firstName: (_b = commercetoolsAddress.firstName) !== null && _b !== void 0 ? _b : undefined,
            lastName: (_c = commercetoolsAddress.lastName) !== null && _c !== void 0 ? _c : undefined,
            streetName: (_d = commercetoolsAddress.streetName) !== null && _d !== void 0 ? _d : undefined,
            streetNumber: (_e = commercetoolsAddress.streetNumber) !== null && _e !== void 0 ? _e : undefined,
            additionalStreetInfo: (_f = commercetoolsAddress.additionalStreetInfo) !== null && _f !== void 0 ? _f : undefined,
            additionalAddressInfo: (_g = commercetoolsAddress.additionalAddressInfo) !== null && _g !== void 0 ? _g : undefined,
            postalCode: (_h = commercetoolsAddress.postalCode) !== null && _h !== void 0 ? _h : undefined,
            city: (_j = commercetoolsAddress.city) !== null && _j !== void 0 ? _j : undefined,
            country: (_k = commercetoolsAddress.country) !== null && _k !== void 0 ? _k : undefined,
            state: (_l = commercetoolsAddress.state) !== null && _l !== void 0 ? _l : undefined,
            phone: (_m = commercetoolsAddress.phone) !== null && _m !== void 0 ? _m : undefined,
            isDefaultBillingAddress: commercetoolsAddress.id === commercetoolsCustomer.defaultBillingAddressId,
            isDefaultShippingAddress: commercetoolsAddress.id === commercetoolsCustomer.defaultShippingAddressId,
        });
    });
    return addresses;
};
AccountMapper.addressToCommercetoolsAddress = (address) => {
    return {
        id: address.addressId,
        salutation: address.salutation,
        firstName: address.firstName,
        lastName: address.lastName,
        streetName: address.streetName,
        streetNumber: address.streetNumber,
        additionalStreetInfo: address.additionalStreetInfo,
        additionalAddressInfo: address.additionalAddressInfo,
        postalCode: address.postalCode,
        city: address.city,
        country: address.country,
        state: address.state,
        phone: address.phone,
    };
};

// EXTERNAL MODULE: ./node_modules/performance-now/lib/performance-now.js
var performance_now = __webpack_require__(17);
var performance_now_default = /*#__PURE__*/__webpack_require__.n(performance_now);

// CONCATENATED MODULE: ./commerce-commercetools/utils/Guid.ts

class Guid {
}
Guid.newGuid = (noHyphens) => {
    let d = new Date().getTime();
    if (typeof performance_now_default.a === 'function') {
        d += performance_now_default()();
    }
    const shellGuid = noHyphens ? 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx' : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    return shellGuid.replace(/[xy]/g, function (c) {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : r & (0x3 | 0x8)).toString(16);
    });
};
Guid.empty = '00000000-0000-0000-0000-000000000000';

// CONCATENATED MODULE: ./commerce-commercetools/apis/AccountApi.ts



class AccountApi_AccountApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.create = async (account, cart) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const { commercetoolsAddresses, billingAddresses, shippingAddresses, defaultBillingAddress, defaultShippingAddress, } = this.extractAddresses(account);
                const customerDraft = {
                    email: account.email,
                    password: account.password,
                    salutation: account === null || account === void 0 ? void 0 : account.salutation,
                    firstName: account === null || account === void 0 ? void 0 : account.firstName,
                    lastName: account === null || account === void 0 ? void 0 : account.lastName,
                    dateOfBirth: (account === null || account === void 0 ? void 0 : account.birthday)
                        ? account.birthday.getFullYear() + '-' + account.birthday.getMonth() + '-' + account.birthday.getDate()
                        : undefined,
                    isEmailVerified: account === null || account === void 0 ? void 0 : account.confirmed,
                    addresses: commercetoolsAddresses.length > 0 ? commercetoolsAddresses : undefined,
                    defaultBillingAddress: defaultBillingAddress,
                    defaultShippingAddress: defaultShippingAddress,
                    billingAddresses: billingAddresses.length > 0 ? billingAddresses : undefined,
                    shippingAddresses: shippingAddresses.length > 0 ? shippingAddresses : undefined,
                    anonymousCart: cart !== undefined
                        ? {
                            typeId: 'cart',
                            id: cart.cartId,
                        }
                        : undefined,
                };
                account = await this.getApiForProject()
                    .customers()
                    .post({
                    body: customerDraft,
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body.customer, locale);
                })
                    .catch((error) => {
                    var _a, _b, _c;
                    if (error.code && error.code === 400) {
                        if (error.body && ((_c = (_b = (_a = error.body) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.code) === 'DuplicateField') {
                            throw new Error(`The account ${account.email} does already exist.`);
                        }
                        if (cart) {
                            return this.create(account, undefined);
                        }
                    }
                    throw error;
                });
                const token = await this.generateToken(account);
                if (token) {
                    account.confirmationToken = token.value;
                    account.tokenValidUntil = new Date(token.expiresAt);
                }
                return account;
            }
            catch (error) {
                throw new Error(`create failed. ${error}`);
            }
        };
        this.generateToken = async (account) => {
            const token = await this.getApiForProject()
                .customers()
                .emailToken()
                .post({
                body: {
                    id: account.accountId,
                    ttlMinutes: 2 * 7 * 24 * 60,
                },
            })
                .execute();
            return token.body;
        };
        this.confirmEmail = async (token) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                return await this.getApiForProject()
                    .customers()
                    .emailConfirm()
                    .post({
                    body: {
                        tokenValue: token,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
                })
                    .catch((error) => {
                    throw new Error(`Failed to confirm email with token ${token}. ${error}`);
                });
            }
            catch (error) {
                throw new Error(`Confirm email failed. ${error}`);
            }
        };
        this.login = async (account, cart, reverify = false) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                account = await this.getApiForProject()
                    .login()
                    .post({
                    body: {
                        email: account.email,
                        password: account.password,
                        anonymousCart: cart !== undefined
                            ? {
                                typeId: 'cart',
                                id: cart.cartId,
                            }
                            : undefined,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body.customer, locale);
                })
                    .catch((error) => {
                    var _a, _b, _c;
                    if (error.code && error.code === 400) {
                        if (error.body && ((_c = (_b = (_a = error.body) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.code) === 'InvalidCredentials') {
                            throw new Error(`Invalid credentials to login with the account ${account.email}`);
                        }
                        if (cart) {
                            return this.login(account, undefined, reverify);
                        }
                    }
                    throw new Error(`Failed to login account  ${account.email}.`);
                });
                if (reverify) {
                    const token = await this.generateToken(account);
                    account.confirmationToken = token.value;
                    account.tokenValidUntil = new Date(token.expiresAt);
                }
                else if (!account.confirmed) {
                    throw new Error(`Your account ${account.email} is not activated yet!`);
                }
                return account;
            }
            catch (error) {
                throw new Error(`login failed. ${error}`);
            }
        };
        this.updatePassword = async (account, oldPassword, newPassword) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const accountVersion = await this.fetchAccountVersion(account);
                account = await this.getApiForProject()
                    .customers()
                    .password()
                    .post({
                    body: {
                        id: account.accountId,
                        version: accountVersion,
                        currentPassword: oldPassword,
                        newPassword: newPassword,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
                })
                    .catch((error) => {
                    throw new Error(`Failed to update password for account ${account.email}. ${error}`);
                });
                return account;
            }
            catch (error) {
                throw new Error(`updateAccount failed. ${error}`);
            }
        };
        this.generatePasswordResetToken = async (email) => {
            try {
                return await this.getApiForProject()
                    .customers()
                    .passwordToken()
                    .post({
                    body: {
                        email: email,
                        ttlMinutes: 2 * 24 * 60,
                    },
                })
                    .execute()
                    .then((response) => {
                    return {
                        email: email,
                        confirmationToken: response.body.value,
                        tokenValidUntil: new Date(response.body.expiresAt),
                    };
                })
                    .catch((error) => {
                    throw new Error(`Failed to generate reset token for account ${email}. ${error}`);
                });
            }
            catch (error) {
                throw new Error(`generatePasswordResetToken failed. ${error}`);
            }
        };
        this.resetPassword = async (token, newPassword) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                return await this.getApiForProject()
                    .customers()
                    .passwordReset()
                    .post({
                    body: {
                        tokenValue: token,
                        newPassword: newPassword,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
                })
                    .catch((error) => {
                    throw new Error(`Failed to reset password with token ${token}. ${error}`);
                });
            }
            catch (error) {
                throw new Error(`resetPassword failed. ${error}`);
            }
        };
        this.update = async (account) => {
            try {
                const customerUpdateActions = [];
                if (account.firstName) {
                    customerUpdateActions.push({ action: 'setFirstName', firstName: account.firstName });
                }
                if (account.lastName) {
                    customerUpdateActions.push({ action: 'setLastName', lastName: account.lastName });
                }
                if (account.salutation) {
                    customerUpdateActions.push({ action: 'setSalutation', salutation: account.salutation });
                }
                if (account.birthday) {
                    customerUpdateActions.push({
                        action: 'setDateOfBirth',
                        dateOfBirth: account.birthday.getFullYear() + '-' + account.birthday.getMonth() + '-' + account.birthday.getDate(),
                    });
                }
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`update failed. ${error}`);
            }
        };
        this.addAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                let addressData = AccountMapper.addressToCommercetoolsAddress(address);
                if (addressData.id !== undefined) {
                    addressData = {
                        ...addressData,
                        id: undefined,
                    };
                }
                if (address.isDefaultBillingAddress || address.isDefaultShippingAddress) {
                    addressData = {
                        ...addressData,
                        key: Guid.newGuid(),
                    };
                }
                customerUpdateActions.push({ action: 'addAddress', address: addressData });
                if (address.isDefaultBillingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultBillingAddress', addressKey: addressData.key });
                }
                if (address.isDefaultShippingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultShippingAddress', addressKey: addressData.key });
                }
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`addAddress failed. ${error}`);
            }
        };
        this.updateAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                let addressData = AccountMapper.addressToCommercetoolsAddress(address);
                if (addressData.id !== undefined) {
                    addressData = {
                        ...addressData,
                        id: undefined,
                    };
                }
                if (address.isDefaultBillingAddress || address.isDefaultShippingAddress) {
                    addressData = {
                        ...addressData,
                        key: Guid.newGuid(),
                    };
                }
                customerUpdateActions.push({ action: 'changeAddress', addressId: address.addressId, address: addressData });
                if (address.isDefaultBillingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultBillingAddress', addressKey: addressData.key });
                }
                if (address.isDefaultShippingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultShippingAddress', addressKey: addressData.key });
                }
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`updateAddress failed. ${error}`);
            }
        };
        this.removeAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                const addressData = AccountMapper.addressToCommercetoolsAddress(address);
                if (addressData.id === undefined) {
                    throw new Error(`The address passed doesn't contain an id.`);
                }
                customerUpdateActions.push({ action: 'removeAddress', addressId: address.addressId });
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`removeAddress failed. ${error}`);
            }
        };
        this.setDefaultBillingAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                const addressData = AccountMapper.addressToCommercetoolsAddress(address);
                customerUpdateActions.push({ action: 'setDefaultBillingAddress', addressId: addressData.id });
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`setDefaultBillingAddress failed. ${error}`);
            }
        };
        this.setDefaultShippingAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                const addressData = AccountMapper.addressToCommercetoolsAddress(address);
                customerUpdateActions.push({ action: 'setDefaultShippingAddress', addressId: addressData.id });
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`setDefaultShippingAddress failed. ${error}`);
            }
        };
    }
    extractAddresses(account) {
        const commercetoolsAddresses = [];
        const billingAddresses = [];
        const shippingAddresses = [];
        let defaultBillingAddress;
        let defaultShippingAddress;
        account.addresses.forEach((address, key) => {
            const addressData = AccountMapper.addressToCommercetoolsAddress(address);
            commercetoolsAddresses.push(addressData);
            if (address.isDefaultBillingAddress) {
                billingAddresses.push(key);
                defaultBillingAddress = key;
            }
            if (address.isDefaultShippingAddress) {
                shippingAddresses.push(key);
                defaultShippingAddress = key;
            }
        });
        return {
            commercetoolsAddresses,
            billingAddresses,
            shippingAddresses,
            defaultBillingAddress,
            defaultShippingAddress,
        };
    }
    async fetchAccountVersion(account) {
        var _a;
        const commercetoolsAccount = await this.getApiForProject()
            .customers()
            .withId({ ID: account.accountId })
            .get()
            .execute();
        return (_a = commercetoolsAccount.body) === null || _a === void 0 ? void 0 : _a.version;
    }
    async updateAccount(account, customerUpdateActions) {
        const locale = await this.getCommercetoolsLocal();
        const accountVersion = await this.fetchAccountVersion(account);
        const customerUpdate = {
            version: accountVersion,
            actions: customerUpdateActions,
        };
        return await this.getApiForProject()
            .customers()
            .withId({ ID: account.accountId })
            .post({
            body: customerUpdate,
        })
            .execute()
            .then((response) => {
            return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
        })
            .catch((error) => {
            throw error;
        });
    }
}

// CONCATENATED MODULE: ../types/product/FilterField.ts
var FilterFieldTypes;
(function (FilterFieldTypes) {
    FilterFieldTypes["BOOLEAN"] = "boolean";
    FilterFieldTypes["ENUM"] = "enum";
    FilterFieldTypes["TEXT"] = "text";
    FilterFieldTypes["NUMBER"] = "number";
})(FilterFieldTypes || (FilterFieldTypes = {}));

// CONCATENATED MODULE: ../types/result/Facet.ts
var FacetTypes;
(function (FacetTypes) {
    FacetTypes["BOOLEAN"] = "boolean";
    FacetTypes["TERM"] = "term";
    FacetTypes["RANGE"] = "range";
})(FacetTypes || (FacetTypes = {}));

// CONCATENATED MODULE: ../types/query/Filter.ts
var FilterTypes;
(function (FilterTypes) {
    FilterTypes["BOOLEAN"] = "boolean";
    FilterTypes["TERM"] = "term";
    FilterTypes["RANGE"] = "range";
})(FilterTypes || (FilterTypes = {}));

// CONCATENATED MODULE: ./commerce-commercetools/mappers/ProductMapper.ts




const TypeMap = new Map([
    ['boolean', FilterFieldTypes.BOOLEAN],
    ['enum', FilterFieldTypes.ENUM],
    ['text', FilterFieldTypes.TEXT],
    ['number', FilterFieldTypes.NUMBER],
    ['lenum', FilterFieldTypes.ENUM],
    ['ltext', FilterFieldTypes.TEXT],
]);
class ProductMapper_ProductMapper {
    static extractAttributeValue(commercetoolsAttributeValue, locale) {
        if (commercetoolsAttributeValue['key'] !== undefined && commercetoolsAttributeValue['label'] !== undefined) {
            return {
                key: commercetoolsAttributeValue['key'],
                label: ProductMapper_ProductMapper.extractAttributeValue(commercetoolsAttributeValue['label'], locale),
            };
        }
        if (commercetoolsAttributeValue instanceof Array) {
            return commercetoolsAttributeValue.map((value) => ProductMapper_ProductMapper.extractAttributeValue(value, locale));
        }
        return commercetoolsAttributeValue[locale.language] || commercetoolsAttributeValue;
    }
    static extractPriceAndDiscounts(commercetoolsVariant, locale) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        let price = undefined;
        let discountedPrice = undefined;
        let discounts = undefined;
        if (commercetoolsVariant === null || commercetoolsVariant === void 0 ? void 0 : commercetoolsVariant.scopedPrice) {
            price = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_a = commercetoolsVariant.scopedPrice) === null || _a === void 0 ? void 0 : _a.value);
            discountedPrice = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_c = (_b = commercetoolsVariant.scopedPrice) === null || _b === void 0 ? void 0 : _b.discounted) === null || _c === void 0 ? void 0 : _c.value);
            discounts = [(_g = (_f = (_e = (_d = commercetoolsVariant.scopedPrice) === null || _d === void 0 ? void 0 : _d.discounted) === null || _e === void 0 ? void 0 : _e.discount) === null || _f === void 0 ? void 0 : _f.obj) === null || _g === void 0 ? void 0 : _g.description[locale.language]];
            return { price, discountedPrice, discounts };
        }
        if (commercetoolsVariant === null || commercetoolsVariant === void 0 ? void 0 : commercetoolsVariant.price) {
            price = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_h = commercetoolsVariant.price) === null || _h === void 0 ? void 0 : _h.value);
            discountedPrice = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_k = (_j = commercetoolsVariant.price) === null || _j === void 0 ? void 0 : _j.discounted) === null || _k === void 0 ? void 0 : _k.value);
            discounts = [(_p = (_o = (_m = (_l = commercetoolsVariant.price) === null || _l === void 0 ? void 0 : _l.discounted) === null || _m === void 0 ? void 0 : _m.discount) === null || _o === void 0 ? void 0 : _o.obj) === null || _p === void 0 ? void 0 : _p.description[locale.language]];
            return { price, discountedPrice, discounts };
        }
        return { price, discountedPrice, discounts };
    }
    static commercetoolsMoneyToMoney(commercetoolsMoney) {
        if (commercetoolsMoney === undefined) {
            return undefined;
        }
        return {
            fractionDigits: commercetoolsMoney.hasOwnProperty('fractionDigits') &&
                commercetoolsMoney.fractionDigits !== undefined
                ? commercetoolsMoney.fractionDigits
                : 2,
            centAmount: commercetoolsMoney.centAmount,
            currencyCode: commercetoolsMoney.currencyCode,
        };
    }
    static commercetoolsProductTypesToFilterFields(commercetoolsProductTypes, locale) {
        const filterFields = [];
        commercetoolsProductTypes === null || commercetoolsProductTypes === void 0 ? void 0 : commercetoolsProductTypes.forEach((productType) => {
            var _a;
            (_a = productType.attributes) === null || _a === void 0 ? void 0 : _a.forEach((attribute) => {
                if (!attribute.isSearchable) {
                    return;
                }
                filterFields.push(ProductMapper_ProductMapper.commercetoolsAttributeDefinitionToFilterField(attribute, locale));
            });
        });
        return filterFields;
    }
    static commercetoolsAttributeDefinitionToFilterField(commercetoolsAttributeDefinition, locale) {
        var _a, _b, _c, _d, _e, _f;
        let commercetoolsAttributeType = commercetoolsAttributeDefinition.type.name;
        let commercetoolsAttributeValues = ((_a = commercetoolsAttributeDefinition.type) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('values'))
            ? commercetoolsAttributeDefinition.type.values
            : [];
        if (commercetoolsAttributeType === 'set' && ((_b = commercetoolsAttributeDefinition.type) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('elementType'))) {
            const elementType = commercetoolsAttributeDefinition.type.elementType;
            commercetoolsAttributeType = elementType.name;
            commercetoolsAttributeValues = (elementType === null || elementType === void 0 ? void 0 : elementType.hasOwnProperty('values'))
                ? elementType.values
                : [];
        }
        const filterFieldValues = [];
        for (const value of commercetoolsAttributeValues) {
            filterFieldValues.push({
                value: value.key,
                name: (_d = (_c = value.label) === null || _c === void 0 ? void 0 : _c[locale.language]) !== null && _d !== void 0 ? _d : value.label,
            });
        }
        return {
            field: `variants.attributes.${commercetoolsAttributeDefinition.name}`,
            type: TypeMap.has(commercetoolsAttributeType)
                ? TypeMap.get(commercetoolsAttributeType)
                : commercetoolsAttributeType,
            label: (_f = (_e = commercetoolsAttributeDefinition.label) === null || _e === void 0 ? void 0 : _e[locale.language]) !== null && _f !== void 0 ? _f : commercetoolsAttributeDefinition.name,
            values: filterFieldValues.length > 0 ? filterFieldValues : undefined,
        };
    }
    static commercetoolsProductTypesToFacetDefinitions(commercetoolsProductTypes, locale) {
        const facetDefinitionsIndex = {};
        const facetDefinitions = [];
        commercetoolsProductTypes === null || commercetoolsProductTypes === void 0 ? void 0 : commercetoolsProductTypes.forEach((productType) => {
            var _a;
            (_a = productType.attributes) === null || _a === void 0 ? void 0 : _a.forEach((attribute) => {
                if (!attribute.isSearchable) {
                    return;
                }
                const facetDefinition = {
                    attributeType: attribute.type.name,
                    attributeId: `variants.attributes.${attribute.name}`,
                };
                facetDefinitionsIndex[facetDefinition.attributeId] = facetDefinition;
            });
        });
        for (const [attributeId, facetDefinition] of Object.entries(facetDefinitionsIndex)) {
            facetDefinitions.push(facetDefinition);
        }
        return facetDefinitions;
    }
    static facetDefinitionsToCommercetoolsQueryArgFacets(facetDefinitions, locale) {
        const queryArgFacets = [];
        facetDefinitions === null || facetDefinitions === void 0 ? void 0 : facetDefinitions.forEach((facetDefinition) => {
            let facet;
            switch (facetDefinition.attributeType) {
                case 'money':
                    facet = `${facetDefinition.attributeId}.centAmount:range (0 to *)`;
                    break;
                case 'enum':
                    facet = `${facetDefinition.attributeId}.label`;
                    break;
                case 'lenum':
                    facet = `${facetDefinition.attributeId}.label.${locale.language}`;
                    break;
                case 'ltext':
                    facet = `${facetDefinition.attributeId}.${locale.language}`;
                    break;
                case 'number':
                case 'boolean':
                case 'text':
                case 'reference':
                default:
                    facet = facetDefinition.attributeId;
                    break;
            }
            queryArgFacets.push(`${facet} as ${facetDefinition.attributeId}`);
        });
        return queryArgFacets;
    }
    static facetDefinitionsToFilterFacets(queryFacets, facetDefinitions, locale) {
        const filterFacets = [];
        const typeLookup = {};
        if (facetDefinitions.length === 0) {
            return filterFacets;
        }
        facetDefinitions.forEach((facetDefinition) => {
            typeLookup[facetDefinition.attributeId] = facetDefinition.attributeType;
        });
        queryFacets.forEach((queryFacet) => {
            if (!(typeLookup === null || typeLookup === void 0 ? void 0 : typeLookup.hasOwnProperty(queryFacet.identifier))) {
                return;
            }
            switch (typeLookup[queryFacet.identifier]) {
                case 'money':
                    filterFacets.push(`${queryFacet.identifier}.centAmount:range (${queryFacet.min} to ${queryFacet.max})`);
                    break;
                case 'enum':
                    filterFacets.push(`${queryFacet.identifier}.label:"${queryFacet.terms.join('","')}"`);
                    break;
                case 'lenum':
                    filterFacets.push(`${queryFacet.identifier}.label.${locale.language}:"${queryFacet.terms.join('","')}"`);
                    break;
                case 'ltext':
                    filterFacets.push(`${queryFacet.identifier}.${locale.language}:"${queryFacet.terms.join('","')}"`);
                    break;
                case 'number':
                case 'boolean':
                case 'text':
                case 'reference':
                default:
                    if (queryFacet.type === FilterTypes.TERM || queryFacet.type === FilterTypes.BOOLEAN) {
                        filterFacets.push(`${queryFacet.identifier}:"${queryFacet.terms.join('","')}"`);
                    }
                    else {
                        filterFacets.push(`${queryFacet.identifier}:range (${queryFacet.min} to ${queryFacet.max})`);
                    }
                    break;
            }
        });
        return filterFacets;
    }
    static commercetoolsFacetResultsToFacets(commercetoolsFacetResults, productQuery, locale) {
        const facets = [];
        for (const [facetKey, facetResult] of Object.entries(commercetoolsFacetResults)) {
            const facetQuery = this.findFacetQuery(productQuery, facetKey);
            switch (facetResult.type) {
                case 'range':
                    facets.push(ProductMapper_ProductMapper.commercetoolsRangeFacetResultToRangeFacet(facetKey, facetResult, facetQuery));
                    break;
                case 'terms':
                    if (facetResult.dataType === 'number') {
                        facets.push(ProductMapper_ProductMapper.commercetoolsTermNumberFacetResultToRangeFacet(facetKey, facetResult, facetQuery));
                        break;
                    }
                    facets.push(ProductMapper_ProductMapper.commercetoolsTermFacetResultToTermFacet(facetKey, facetResult, facetQuery));
                    break;
                case 'filter':
                default:
                    break;
            }
        }
        return facets;
    }
    static commercetoolsRangeFacetResultToRangeFacet(facetKey, facetResult, facetQuery) {
        const rangeFacet = {
            type: FacetTypes.RANGE,
            identifier: facetKey,
            label: facetKey,
            key: facetKey,
            min: facetResult.ranges[0].min,
            max: facetResult.ranges[0].max,
            selected: facetQuery !== undefined,
            minSelected: facetQuery ? facetQuery.min : undefined,
            maxSelected: facetQuery ? facetQuery.max : undefined,
        };
        return rangeFacet;
    }
    static commercetoolsTermFacetResultToTermFacet(facetKey, facetResult, facetQuery) {
        const termFacet = {
            type: FacetTypes.TERM,
            identifier: facetKey,
            label: facetKey,
            key: facetKey,
            selected: facetQuery !== undefined,
            terms: facetResult.terms.map((facetResultTerm) => {
                const term = {
                    identifier: facetResultTerm.term.toString(),
                    label: facetResultTerm.term.toString(),
                    count: facetResultTerm.count,
                    key: facetResultTerm.term.toString(),
                    selected: facetQuery !== undefined && facetQuery.terms.includes(facetResultTerm.term.toString()),
                };
                return term;
            }),
        };
        return termFacet;
    }
    static commercetoolsTermNumberFacetResultToRangeFacet(facetKey, facetResult, facetQuery) {
        var _a, _b;
        const rangeFacet = {
            type: FacetTypes.RANGE,
            identifier: facetKey,
            label: facetKey,
            key: facetKey,
            count: facetResult.total,
            min: (_a = Math.min(...facetResult.terms.map((facetResultTerm) => facetResultTerm.term))) !== null && _a !== void 0 ? _a : Number.MIN_SAFE_INTEGER,
            max: (_b = Math.max(...facetResult.terms.map((facetResultTerm) => facetResultTerm.term))) !== null && _b !== void 0 ? _b : Number.MAX_SAFE_INTEGER,
        };
        if (facetQuery) {
            rangeFacet.selected = true;
            rangeFacet.minSelected = facetQuery.min;
            rangeFacet.maxSelected = facetQuery.max;
        }
        return rangeFacet;
    }
    static calculatePreviousCursor(offset, count) {
        return offset - count >= 0 ? `offset:${offset - count}` : undefined;
    }
    static calculateNextCursor(offset, count, total) {
        return offset + count < total ? `offset:${offset + count}` : undefined;
    }
    static findFacetQuery(productQuery, facetKey) {
        if (productQuery.facets !== undefined) {
            for (const facet of productQuery.facets) {
                if (facet.identifier === facetKey) {
                    return facet;
                }
            }
        }
        return undefined;
    }
}
ProductMapper_ProductMapper.commercetoolsProductProjectionToProduct = (commercetoolsProduct, locale) => {
    var _a, _b, _c, _d;
    const product = {
        productId: commercetoolsProduct.id,
        version: (_a = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.version) === null || _a === void 0 ? void 0 : _a.toString(),
        name: (_b = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.name) === null || _b === void 0 ? void 0 : _b[locale.language],
        slug: (_c = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.slug) === null || _c === void 0 ? void 0 : _c[locale.language],
        description: (_d = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.description) === null || _d === void 0 ? void 0 : _d[locale.language],
        categories: ProductMapper_ProductMapper.commercetoolsCategoryReferencesToCategories(commercetoolsProduct.categories, locale),
        variants: ProductMapper_ProductMapper.commercetoolsProductProjectionToVariants(commercetoolsProduct, locale),
    };
    product._url = ProductRouter_ProductRouter.generateUrlFor(product);
    return product;
};
ProductMapper_ProductMapper.commercetoolsProductProjectionToVariants = (commercetoolsProduct, locale) => {
    const variants = [];
    if (commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.masterVariant) {
        variants.push(ProductMapper_ProductMapper.commercetoolsProductVariantToVariant(commercetoolsProduct.masterVariant, locale));
    }
    for (let i = 0; i < commercetoolsProduct.variants.length; i++) {
        variants.push(ProductMapper_ProductMapper.commercetoolsProductVariantToVariant(commercetoolsProduct.variants[i], locale));
    }
    return variants;
};
ProductMapper_ProductMapper.commercetoolsProductVariantToVariant = (commercetoolsVariant, locale) => {
    var _a, _b, _c;
    const attributes = ProductMapper_ProductMapper.commercetoolsAttributesToAttributes(commercetoolsVariant.attributes, locale);
    const { price, discountedPrice, discounts } = ProductMapper_ProductMapper.extractPriceAndDiscounts(commercetoolsVariant, locale);
    return {
        id: (_a = commercetoolsVariant.id) === null || _a === void 0 ? void 0 : _a.toString(),
        sku: (_b = commercetoolsVariant.sku) === null || _b === void 0 ? void 0 : _b.toString(),
        images: [
            ...commercetoolsVariant.assets.map((asset) => { var _a; return (_a = asset.sources) === null || _a === void 0 ? void 0 : _a[0].uri; }),
            ...commercetoolsVariant.images.map((image) => image.url),
        ],
        groupId: (attributes === null || attributes === void 0 ? void 0 : attributes.baseId) || undefined,
        attributes: attributes,
        price: price,
        discountedPrice: discountedPrice,
        discounts: discounts,
        isOnStock: ((_c = commercetoolsVariant.availability) === null || _c === void 0 ? void 0 : _c.isOnStock) || undefined,
    };
};
ProductMapper_ProductMapper.commercetoolsAttributesToAttributes = (commercetoolsAttributes, locale) => {
    const attributes = {};
    commercetoolsAttributes === null || commercetoolsAttributes === void 0 ? void 0 : commercetoolsAttributes.forEach((commercetoolsAttribute) => {
        attributes[commercetoolsAttribute.name] = ProductMapper_ProductMapper.extractAttributeValue(commercetoolsAttribute.value, locale);
    });
    return attributes;
};
ProductMapper_ProductMapper.commercetoolsCategoryReferencesToCategories = (commercetoolsCategoryReferences, locale) => {
    const categories = [];
    commercetoolsCategoryReferences.forEach((commercetoolsCategory) => {
        let category = {
            categoryId: commercetoolsCategory.id,
        };
        if (commercetoolsCategory.obj) {
            category = ProductMapper_ProductMapper.commercetoolsCategoryToCategory(commercetoolsCategory.obj, locale);
        }
        categories.push(category);
    });
    return categories;
};
ProductMapper_ProductMapper.commercetoolsCategoryToCategory = (commercetoolsCategory, locale) => {
    var _a, _b, _c, _d;
    return {
        categoryId: commercetoolsCategory.id,
        name: (_b = (_a = commercetoolsCategory.name) === null || _a === void 0 ? void 0 : _a[locale.language]) !== null && _b !== void 0 ? _b : undefined,
        slug: (_d = (_c = commercetoolsCategory.slug) === null || _c === void 0 ? void 0 : _c[locale.language]) !== null && _d !== void 0 ? _d : undefined,
        depth: commercetoolsCategory.ancestors.length,
        path: commercetoolsCategory.ancestors.length > 0
            ? `/${commercetoolsCategory.ancestors
                .map((ancestor) => {
                return ancestor.id;
            })
                .join('/')}/${commercetoolsCategory.id}`
            : `/${commercetoolsCategory.id}`,
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/ProductApi.ts




class ProductApi_ProductApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getOffsetFromCursor = (cursor) => {
            if (cursor === undefined) {
                return undefined;
            }
            const offsetMach = cursor.match(/(?<=offset:).+/);
            return offsetMach !== null ? +Object.values(offsetMach)[0] : undefined;
        };
        this.query = async (productQuery) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const limit = +productQuery.limit || 24;
                const filterQuery = [];
                const filterFacets = [];
                const sortAttributes = [];
                const facetDefinitions = [
                    ...ProductMapper_ProductMapper.commercetoolsProductTypesToFacetDefinitions(await this.getProductTypes(), locale),
                    {
                        attributeId: 'variants.scopedPrice.value',
                        attributeType: 'money',
                    },
                    {
                        attributeId: 'variants.price',
                        attributeType: 'money',
                    },
                ];
                const queryArgFacets = ProductMapper_ProductMapper.facetDefinitionsToCommercetoolsQueryArgFacets(facetDefinitions, locale);
                if (productQuery.productIds !== undefined && productQuery.productIds.length !== 0) {
                    filterQuery.push(`id:"${productQuery.productIds.join('","')}"`);
                }
                if (productQuery.skus !== undefined && productQuery.skus.length !== 0) {
                    filterQuery.push(`variants.sku:"${productQuery.skus.join('","')}"`);
                }
                if (productQuery.category !== undefined && productQuery.category !== '') {
                    filterQuery.push(`categories.id:subtree("${productQuery.category}")`);
                }
                if (productQuery.filters !== undefined) {
                    productQuery.filters.forEach((filter) => {
                        var _a, _b, _c;
                        switch (filter.type) {
                            case FilterTypes.TERM:
                                filterQuery.push(`${filter.identifier}.key:"${filter.terms.join('","')}"`);
                                break;
                            case FilterTypes.BOOLEAN:
                                filterQuery.push(`${filter.identifier}:${((_a = filter.terms[0]) === null || _a === void 0 ? void 0 : _a.toString().toLowerCase()) === 'true'}`);
                                break;
                            case FilterTypes.RANGE:
                                if (filter.identifier === 'price') {
                                    filterQuery.push(`variants.scopedPrice.value.centAmount:range (${(_b = filter.min) !== null && _b !== void 0 ? _b : '*'} to ${(_c = filter.max) !== null && _c !== void 0 ? _c : '*'})`);
                                }
                                break;
                        }
                    });
                }
                if (productQuery.facets !== undefined) {
                    filterFacets.push(...ProductMapper_ProductMapper.facetDefinitionsToFilterFacets(productQuery.facets, facetDefinitions, locale));
                }
                if (productQuery.sortAttributes !== undefined) {
                    Object.keys(productQuery.sortAttributes).map((field, directionIndex) => {
                        sortAttributes.push(`${field} ${Object.values(productQuery.sortAttributes)[directionIndex]}`);
                    });
                }
                const methodArgs = {
                    queryArgs: {
                        sort: sortAttributes,
                        limit: limit,
                        offset: this.getOffsetFromCursor(productQuery.cursor),
                        priceCurrency: locale.currency,
                        priceCountry: locale.country,
                        facet: queryArgFacets.length > 0 ? queryArgFacets : undefined,
                        filter: filterFacets.length > 0 ? filterFacets : undefined,
                        'filter.facets': filterFacets.length > 0 ? filterFacets : undefined,
                        'filter.query': filterQuery.length > 0 ? filterQuery : undefined,
                        [`text.${locale.language}`]: productQuery.query,
                    },
                };
                return await this.getApiForProject()
                    .productProjections()
                    .search()
                    .get(methodArgs)
                    .execute()
                    .then((response) => {
                    const items = response.body.results.map((product) => ProductMapper_ProductMapper.commercetoolsProductProjectionToProduct(product, locale));
                    const result = {
                        total: response.body.total,
                        items: items,
                        count: response.body.count,
                        facets: ProductMapper_ProductMapper.commercetoolsFacetResultsToFacets(response.body.facets, productQuery, locale),
                        previousCursor: ProductMapper_ProductMapper.calculatePreviousCursor(response.body.offset, response.body.count),
                        nextCursor: ProductMapper_ProductMapper.calculateNextCursor(response.body.offset, response.body.count, response.body.total),
                        query: productQuery,
                    };
                    return result;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch (error) {
                throw new Error(`query failed. ${error}`);
            }
        };
        this.getProduct = async (productQuery) => {
            try {
                const result = await this.query(productQuery);
                return result.items.shift();
            }
            catch (error) {
                throw new Error(`getProduct failed. ${error}`);
            }
        };
        this.getSearchableAttributes = async () => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject().productTypes().get().execute();
                const filterFields = ProductMapper_ProductMapper.commercetoolsProductTypesToFilterFields(response.body.results, locale);
                filterFields.push({
                    field: 'categoryId',
                    type: FilterFieldTypes.ENUM,
                    label: 'Category ID',
                    values: await this.queryCategories({ limit: 250 }).then((result) => {
                        return result.items.map((item) => {
                            return {
                                value: item.categoryId,
                                name: item.name,
                            };
                        });
                    }),
                });
                return filterFields;
            }
            catch (error) {
                throw new Error(`getSearchableAttributes failed. ${error}`);
            }
        };
        this.queryCategories = async (categoryQuery) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const limit = +categoryQuery.limit || 24;
                const where = [];
                if (categoryQuery.slug) {
                    where.push(`slug(${locale.language}="${categoryQuery.slug}")`);
                }
                if (categoryQuery.parentId) {
                    where.push(`parent(id="${categoryQuery.parentId}")`);
                }
                const methodArgs = {
                    queryArgs: {
                        limit: limit,
                        offset: this.getOffsetFromCursor(categoryQuery.cursor),
                        where: where.length > 0 ? where : undefined,
                    },
                };
                return await this.getApiForProject()
                    .categories()
                    .get(methodArgs)
                    .execute()
                    .then((response) => {
                    const items = response.body.results.map((category) => ProductMapper_ProductMapper.commercetoolsCategoryToCategory(category, locale));
                    const result = {
                        total: response.body.total,
                        items: items,
                        count: response.body.count,
                        previousCursor: ProductMapper_ProductMapper.calculatePreviousCursor(response.body.offset, response.body.count),
                        nextCursor: ProductMapper_ProductMapper.calculateNextCursor(response.body.offset, response.body.count, response.body.total),
                        query: categoryQuery,
                    };
                    return result;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch (error) {
                throw new Error(`queryCategories failed. ${error}`);
            }
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/utils/Request.ts
const getPath = (request) => {
    var _a;
    return (_a = getHeader(request, 'frontastic-path')) !== null && _a !== void 0 ? _a : request.query.path;
};
const getLocale = (request) => {
    var _a, _b;
    const locale = (_a = getHeader(request, 'frontastic-locale')) !== null && _a !== void 0 ? _a : request.query.locale;
    if (locale !== undefined) {
        return (_b = getHeader(request, 'frontastic-locale')) !== null && _b !== void 0 ? _b : request.query.locale;
    }
    throw new Error(`Locale is missing from request ${request}`);
};
const getHeader = (request, header) => {
    if (header in request.headers) {
        const foundHeader = request.headers[header];
        if (Array.isArray(foundHeader)) {
            return foundHeader[0];
        }
        return foundHeader;
    }
    return null;
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/ProductRouter.ts
var ProductRouter_a;


class ProductRouter_ProductRouter {
    static isProduct(product) {
        return product.productId !== undefined;
    }
    static generateUrlFor(item) {
        if (ProductRouter_ProductRouter.isProduct(item)) {
            return `/${item.slug}/p/${item.variants[0].sku}`;
        }
        return `/slug/p/${item.variant.sku}`;
    }
    static identifyFrom(request) {
        var _b;
        if ((_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/p\/([^\/]+)/)) {
            return true;
        }
        return false;
    }
}
ProductRouter_a = ProductRouter_ProductRouter;
ProductRouter_ProductRouter.loadFor = async (request, frontasticContext) => {
    var _b;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/p\/([^\/]+)/);
    if (urlMatches) {
        const productQuery = {
            skus: [urlMatches[1]],
        };
        return productApi.getProduct(productQuery);
    }
    return null;
};

// CONCATENATED MODULE: ./commerce-commercetools/mappers/CartMapper.ts


class CartMapper {
}
CartMapper.commercetoolsCartToCart = (commercetoolsCart, locale) => {
    return {
        cartId: commercetoolsCart.id,
        cartVersion: commercetoolsCart.version.toString(),
        lineItems: CartMapper.commercetoolsLineItemsToLineItems(commercetoolsCart.lineItems, locale),
        email: commercetoolsCart === null || commercetoolsCart === void 0 ? void 0 : commercetoolsCart.customerEmail,
        sum: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsCart.totalPrice),
        shippingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsCart.shippingAddress),
        billingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsCart.billingAddress),
        shippingInfo: CartMapper.commercetoolsShippingInfoToShippingInfo(commercetoolsCart.shippingInfo, locale),
        payments: CartMapper.commercetoolsPaymentInfoToPayments(commercetoolsCart.paymentInfo, locale),
        discountCodes: CartMapper.commercetoolsDiscountCodesInfoToDiscountCodes(commercetoolsCart.discountCodes, locale),
        taxed: CartMapper.commercetoolsTaxedPriceToTaxed(commercetoolsCart.taxedPrice, locale),
    };
};
CartMapper.commercetoolsLineItemsToLineItems = (commercetoolsLineItems, locale) => {
    const lineItems = [];
    commercetoolsLineItems === null || commercetoolsLineItems === void 0 ? void 0 : commercetoolsLineItems.forEach((commercetoolsLineItem) => {
        var _a, _b, _c;
        const item = {
            lineItemId: commercetoolsLineItem.id,
            name: (commercetoolsLineItem === null || commercetoolsLineItem === void 0 ? void 0 : commercetoolsLineItem.name[locale.language]) || '',
            type: 'variant',
            count: commercetoolsLineItem.quantity,
            price: ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_a = commercetoolsLineItem.price) === null || _a === void 0 ? void 0 : _a.value),
            discountedPrice: ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_c = (_b = commercetoolsLineItem.price) === null || _b === void 0 ? void 0 : _b.discounted) === null || _c === void 0 ? void 0 : _c.value),
            discountTexts: CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscountTexts(commercetoolsLineItem.discountedPricePerQuantity, locale),
            discounts: CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscounts(commercetoolsLineItem.discountedPricePerQuantity, locale),
            totalPrice: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsLineItem.totalPrice),
            variant: ProductMapper_ProductMapper.commercetoolsProductVariantToVariant(commercetoolsLineItem.variant, locale),
            isGift: (commercetoolsLineItem === null || commercetoolsLineItem === void 0 ? void 0 : commercetoolsLineItem.lineItemMode) !== undefined && commercetoolsLineItem.lineItemMode === 'GiftLineItem',
        };
        item._url = ProductRouter_ProductRouter.generateUrlFor(item);
        lineItems.push(item);
    });
    return lineItems;
};
CartMapper.commercetoolsAddressToAddress = (commercetoolsAddress) => {
    return {
        addressId: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.id,
        salutation: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.salutation,
        firstName: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.firstName,
        lastName: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.lastName,
        streetName: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.streetName,
        streetNumber: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.streetNumber,
        additionalStreetInfo: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.additionalStreetInfo,
        additionalAddressInfo: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.additionalAddressInfo,
        postalCode: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.postalCode,
        city: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.city,
        country: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.country,
        state: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.state,
        phone: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.phone,
    };
};
CartMapper.addressToCommercetoolsAddress = (address) => {
    return {
        id: address === null || address === void 0 ? void 0 : address.addressId,
        salutation: address === null || address === void 0 ? void 0 : address.salutation,
        firstName: address === null || address === void 0 ? void 0 : address.firstName,
        lastName: address === null || address === void 0 ? void 0 : address.lastName,
        streetName: address === null || address === void 0 ? void 0 : address.streetName,
        streetNumber: address === null || address === void 0 ? void 0 : address.streetNumber,
        additionalStreetInfo: address === null || address === void 0 ? void 0 : address.additionalStreetInfo,
        additionalAddressInfo: address === null || address === void 0 ? void 0 : address.additionalAddressInfo,
        postalCode: address === null || address === void 0 ? void 0 : address.postalCode,
        city: address === null || address === void 0 ? void 0 : address.city,
        country: address === null || address === void 0 ? void 0 : address.country,
        state: address === null || address === void 0 ? void 0 : address.state,
        phone: address === null || address === void 0 ? void 0 : address.phone,
    };
};
CartMapper.commercetoolsOrderToOrder = (commercetoolsOrder, locale) => {
    return {
        cartId: commercetoolsOrder.id,
        orderState: commercetoolsOrder.orderState,
        orderId: commercetoolsOrder.orderNumber,
        orderVersion: commercetoolsOrder.version.toString(),
        lineItems: CartMapper.commercetoolsLineItemsToLineItems(commercetoolsOrder.lineItems, locale),
        email: commercetoolsOrder === null || commercetoolsOrder === void 0 ? void 0 : commercetoolsOrder.customerEmail,
        shippingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsOrder.shippingAddress),
        billingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsOrder.billingAddress),
        sum: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsOrder.totalPrice),
    };
};
CartMapper.commercetoolsShippingInfoToShippingInfo = (commercetoolsShippingInfo, locale) => {
    var _a;
    if (commercetoolsShippingInfo === undefined) {
        return undefined;
    }
    let shippingMethod = {
        shippingMethodId: (_a = commercetoolsShippingInfo === null || commercetoolsShippingInfo === void 0 ? void 0 : commercetoolsShippingInfo.shippingMethod) === null || _a === void 0 ? void 0 : _a.id,
    };
    if (commercetoolsShippingInfo.shippingMethod.obj) {
        shippingMethod = {
            ...CartMapper.commercetoolsShippingMethodToShippingMethod(commercetoolsShippingInfo.shippingMethod.obj, locale),
        };
    }
    return {
        ...shippingMethod,
        price: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsShippingInfo.price),
    };
};
CartMapper.commercetoolsShippingMethodToShippingMethod = (commercetoolsShippingMethod, locale) => {
    var _a, _b;
    return {
        shippingMethodId: (commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.id) || undefined,
        name: ((_a = commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.localizedName) === null || _a === void 0 ? void 0 : _a[locale.language]) || (commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.name) || undefined,
        description: ((_b = commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.localizedDescription) === null || _b === void 0 ? void 0 : _b[locale.language]) ||
            (commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.description) ||
            undefined,
        rates: CartMapper.commercetoolsZoneRatesToRates(commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.zoneRates, locale),
    };
};
CartMapper.commercetoolsZoneRatesToRates = (commercetoolsZoneRates, locale) => {
    if (commercetoolsZoneRates === undefined) {
        return undefined;
    }
    const shippingRates = [];
    commercetoolsZoneRates.forEach((commercetoolsZoneRate) => {
        var _a, _b, _c, _d, _e;
        const shippingRateId = commercetoolsZoneRate.zone.id;
        const name = ((_b = (_a = commercetoolsZoneRate.zone) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.name) || undefined;
        const locations = (_e = (_d = (_c = commercetoolsZoneRate.zone) === null || _c === void 0 ? void 0 : _c.obj) === null || _d === void 0 ? void 0 : _d.locations) === null || _e === void 0 ? void 0 : _e.map((location) => {
            return {
                country: location.country,
                state: location.state,
            };
        });
        const matchingShippingRates = commercetoolsZoneRate.shippingRates.filter(function (shippingRate) {
            if (shippingRate.isMatching !== undefined && shippingRate.isMatching !== true) {
                return false;
            }
            return true;
        });
        matchingShippingRates.forEach((matchingShippingRates) => {
            shippingRates.push({
                shippingRateId: shippingRateId,
                name: name,
                locations: locations,
                price: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(matchingShippingRates.price),
            });
        });
    });
    return shippingRates;
};
CartMapper.commercetoolsPaymentInfoToPayments = (commercetoolsPaymentInfo, locale) => {
    var _a;
    const payments = [];
    (_a = commercetoolsPaymentInfo === null || commercetoolsPaymentInfo === void 0 ? void 0 : commercetoolsPaymentInfo.payments) === null || _a === void 0 ? void 0 : _a.forEach((commercetoolsPayment) => {
        if (commercetoolsPayment.obj) {
            payments.push(CartMapper.commercetoolsPaymentToPayment(commercetoolsPayment.obj, locale));
        }
    });
    return payments;
};
CartMapper.commercetoolsPaymentToPayment = (commercetoolsPayment, locale) => {
    var _a, _b, _c, _d, _e, _f;
    return {
        id: (_a = commercetoolsPayment.key) !== null && _a !== void 0 ? _a : null,
        paymentId: (_b = commercetoolsPayment.interfaceId) !== null && _b !== void 0 ? _b : null,
        paymentProvider: (_c = commercetoolsPayment.paymentMethodInfo.paymentInterface) !== null && _c !== void 0 ? _c : null,
        paymentMethod: (_d = commercetoolsPayment.paymentMethodInfo.method) !== null && _d !== void 0 ? _d : null,
        amountPlanned: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsPayment.amountPlanned),
        debug: JSON.stringify(commercetoolsPayment),
        paymentStatus: (_e = commercetoolsPayment.paymentStatus.interfaceCode) !== null && _e !== void 0 ? _e : null,
        version: (_f = commercetoolsPayment.version) !== null && _f !== void 0 ? _f : 0,
    };
};
CartMapper.commercetoolsDiscountCodesInfoToDiscountCodes = (commercetoolsDiscountCodesInfo, locale) => {
    const discounts = [];
    commercetoolsDiscountCodesInfo === null || commercetoolsDiscountCodesInfo === void 0 ? void 0 : commercetoolsDiscountCodesInfo.forEach((commercetoolsDiscountCodeInfo) => {
        discounts.push(CartMapper.commercetoolsDiscountCodeInfoToDiscountCode(commercetoolsDiscountCodeInfo, locale));
    });
    return discounts;
};
CartMapper.commercetoolsDiscountCodeInfoToDiscountCode = (commercetoolsDiscountCodeInfo, locale) => {
    var _a, _b;
    let discount = {
        state: commercetoolsDiscountCodeInfo.state,
    };
    if (commercetoolsDiscountCodeInfo.discountCode.obj) {
        const commercetoolsDiscountCode = commercetoolsDiscountCodeInfo.discountCode.obj;
        discount = {
            ...discount,
            discountId: commercetoolsDiscountCode.id,
            code: commercetoolsDiscountCode.code,
            name: (_a = commercetoolsDiscountCode.name[locale.language]) !== null && _a !== void 0 ? _a : undefined,
            description: (_b = commercetoolsDiscountCode.description[locale.language]) !== null && _b !== void 0 ? _b : undefined,
        };
    }
    return discount;
};
CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscountTexts = (commercetoolsDiscountedLineItemPricesForQuantity, locale) => {
    const discountTexts = [];
    commercetoolsDiscountedLineItemPricesForQuantity === null || commercetoolsDiscountedLineItemPricesForQuantity === void 0 ? void 0 : commercetoolsDiscountedLineItemPricesForQuantity.forEach((commercetoolsDiscountedLineItemPriceForQuantity) => {
        commercetoolsDiscountedLineItemPriceForQuantity.discountedPrice.includedDiscounts.forEach((commercetoolsDiscountedLineItemPortion) => {
            var _a;
            discountTexts.push((_a = commercetoolsDiscountedLineItemPortion.discount.obj) === null || _a === void 0 ? void 0 : _a.name[locale.language]);
        });
    });
    return discountTexts;
};
CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscounts = (commercetoolsDiscountedLineItemPricesForQuantity, locale) => {
    const discounts = [];
    commercetoolsDiscountedLineItemPricesForQuantity === null || commercetoolsDiscountedLineItemPricesForQuantity === void 0 ? void 0 : commercetoolsDiscountedLineItemPricesForQuantity.forEach((commercetoolsDiscountedLineItemPriceForQuantity) => {
        commercetoolsDiscountedLineItemPriceForQuantity.discountedPrice.includedDiscounts.forEach((commercetoolsDiscountedLineItemPortion) => {
            discounts.push(CartMapper.commercetoolsDiscountedLineItemPortionToDiscount(commercetoolsDiscountedLineItemPortion, locale));
        });
    });
    return discounts;
};
CartMapper.commercetoolsDiscountedLineItemPortionToDiscount = (commercetoolsDiscountedLineItemPortion, locale) => {
    var _a, _b;
    let discount = {
        discountedAmount: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsDiscountedLineItemPortion.discountedAmount),
    };
    if (commercetoolsDiscountedLineItemPortion.discount.obj) {
        const commercetoolsCartDiscount = commercetoolsDiscountedLineItemPortion.discount.obj;
        discount = {
            ...discount,
            discountId: commercetoolsCartDiscount.id,
            name: (_a = commercetoolsCartDiscount.name[locale.language]) !== null && _a !== void 0 ? _a : undefined,
            description: (_b = commercetoolsCartDiscount.description[locale.language]) !== null && _b !== void 0 ? _b : undefined,
        };
    }
    return discount;
};
CartMapper.commercetoolsTaxedPriceToTaxed = (commercetoolsTaxedPrice, locale) => {
    if (commercetoolsTaxedPrice === undefined) {
        return undefined;
    }
    return {
        amount: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsTaxedPrice.totalNet),
        taxPortions: commercetoolsTaxedPrice.taxPortions.map((commercetoolsTaxPortion) => {
            const taxPortion = {
                amount: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsTaxPortion.amount),
                name: commercetoolsTaxPortion.name,
                rate: commercetoolsTaxPortion.rate,
            };
            return taxPortion;
        }),
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/Cart.ts
const hasUser = (cart) => {
    return cart.email !== undefined;
};
const hasShippingAddress = (cart) => {
    return (cart.shippingAddress !== undefined &&
        cart.shippingAddress.firstName !== undefined &&
        cart.shippingAddress.lastName !== undefined &&
        cart.shippingAddress.postalCode !== undefined &&
        cart.shippingAddress.city !== undefined &&
        cart.shippingAddress.country !== undefined);
};
const hasBillingAddress = (cart) => {
    return (cart.billingAddress !== undefined &&
        cart.billingAddress.firstName !== undefined &&
        cart.billingAddress.lastName !== undefined &&
        cart.billingAddress.postalCode !== undefined &&
        cart.billingAddress.city !== undefined &&
        cart.billingAddress.country !== undefined);
};
const hasAddresses = (cart) => {
    return hasShippingAddress(cart) && hasBillingAddress(cart);
};
const isReadyForCheckout = (cart) => {
    return hasUser(cart) && hasAddresses(cart);
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/CartApi.ts




class CartApi_CartApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getForUser = async (account) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .carts()
                    .get({
                    queryArgs: {
                        limit: 1,
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                        where: [`customerId="${account.accountId}"`, `cartState="Active"`],
                        sort: 'createdAt desc',
                    },
                })
                    .execute();
                if (response.body.count >= 1) {
                    return this.buildCartWithAvailableShippingMethods(response.body.results[0], locale);
                }
                const cartDraft = {
                    currency: locale.currency,
                    country: locale.country,
                    locale: locale.language,
                    customerId: account.accountId,
                    inventoryMode: 'ReserveOnOrder',
                };
                const commercetoolsCart = await this.getApiForProject()
                    .carts()
                    .post({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                    body: cartDraft,
                })
                    .execute();
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart.body, locale);
            }
            catch (error) {
                throw new Error(`getForUser failed. ${error}`);
            }
        };
        this.getAnonymous = async (anonymousId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .carts()
                    .get({
                    queryArgs: {
                        limit: 1,
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                        where: [`anonymousId="${anonymousId}"`, `cartState="Active"`],
                        sort: 'createdAt desc',
                    },
                })
                    .execute();
                if (response.body.count >= 1) {
                    return this.buildCartWithAvailableShippingMethods(response.body.results[0], locale);
                }
                const cartDraft = {
                    currency: locale.currency,
                    country: locale.country,
                    locale: locale.language,
                    anonymousId: anonymousId,
                    inventoryMode: 'ReserveOnOrder',
                };
                const commercetoolsCart = await this.getApiForProject()
                    .carts()
                    .post({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                    body: cartDraft,
                })
                    .execute();
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart.body, locale);
            }
            catch (error) {
                throw new Error(`getAnonymous failed. ${error}`);
            }
        };
        this.getById = async (cartId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .carts()
                    .withId({
                    ID: cartId,
                })
                    .get({
                    queryArgs: {
                        limit: 1,
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                })
                    .execute();
                return this.buildCartWithAvailableShippingMethods(response.body, locale);
            }
            catch (error) {
                throw new Error(`getById failed. ${error}`);
            }
        };
        this.addToCart = async (cart, lineItem) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'addLineItem',
                            sku: lineItem.variant.sku,
                            quantity: +lineItem.count,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`addToCart failed. ${error}`);
            }
        };
        this.updateLineItem = async (cart, lineItem) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'changeLineItemQuantity',
                            lineItemId: lineItem.lineItemId,
                            quantity: +lineItem.count,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`updateLineItem failed. ${error}`);
            }
        };
        this.removeLineItem = async (cart, lineItem) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'removeLineItem',
                            lineItemId: lineItem.lineItemId,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`removeLineItem failed. ${error}`);
            }
        };
        this.setEmail = async (cart, email) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setCustomerEmail',
                            email: email,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setEmail failed. ${error}`);
            }
        };
        this.setShippingAddress = async (cart, address) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setShippingAddress',
                            address: CartMapper.addressToCommercetoolsAddress(address),
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setShippingAddress failed. ${error}`);
            }
        };
        this.setBillingAddress = async (cart, address) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setBillingAddress',
                            address: CartMapper.addressToCommercetoolsAddress(address),
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setBillingAddress failed. ${error}`);
            }
        };
        this.setShippingMethod = async (cart, shippingMethod) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setShippingMethod',
                            shippingMethod: {
                                typeId: 'shipping-method',
                                id: shippingMethod.shippingMethodId,
                            },
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setShippingMethod failed. ${error}`);
            }
        };
        this.order = async (cart) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const orderFromCartDraft = {
                    id: cart.cartId,
                    version: +cart.cartVersion,
                    orderNumber: Guid.newGuid(),
                };
                if (!isReadyForCheckout(cart)) {
                    throw new Error('Cart not complete yet.');
                }
                const response = await this.getApiForProject()
                    .orders()
                    .post({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                    body: orderFromCartDraft,
                })
                    .execute();
                return CartMapper.commercetoolsOrderToOrder(response.body, locale);
            }
            catch (error) {
                throw new Error(`order failed. ${error}`);
            }
        };
        this.getOrders = async (account) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .orders()
                    .get({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                        where: `customerId="${account.accountId}"`,
                        sort: 'createdAt desc',
                    },
                })
                    .execute();
                return response.body.results.map((order) => CartMapper.commercetoolsOrderToOrder(order, locale));
            }
            catch (error) {
                throw new Error(`get orders failed. ${error}`);
            }
        };
        this.getShippingMethods = async (onlyMatching) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const methodArgs = {
                    queryArgs: {
                        expand: ['zoneRates[*].zone'],
                        country: undefined,
                    },
                };
                let requestBuilder = this.getApiForProject().shippingMethods().get(methodArgs);
                if (onlyMatching) {
                    methodArgs.queryArgs.country = locale.country;
                    requestBuilder = this.getApiForProject().shippingMethods().matchingLocation().get(methodArgs);
                }
                const response = await requestBuilder.execute();
                return response.body.results.map((shippingMethod) => CartMapper.commercetoolsShippingMethodToShippingMethod(shippingMethod, locale));
            }
            catch (error) {
                throw new Error(`getShippingMethods failed. ${error}`);
            }
        };
        this.getAvailableShippingMethods = async (cart) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shippingMethods()
                    .matchingCart()
                    .get({
                    queryArgs: {
                        expand: ['zoneRates[*].zone'],
                        cartId: cart.cartId,
                    },
                })
                    .execute();
                return response.body.results.map((shippingMethod) => CartMapper.commercetoolsShippingMethodToShippingMethod(shippingMethod, locale));
            }
            catch (error) {
                throw new Error(`getAvailableShippingMethods failed. ${error}`);
            }
        };
        this.addPayment = async (cart, payment) => {
            let paymentDraft;
            try {
                const locale = await this.getCommercetoolsLocal();
                paymentDraft = {
                    key: payment.id,
                    amountPlanned: {
                        centAmount: payment.amountPlanned.centAmount,
                        currencyCode: payment.amountPlanned.currencyCode,
                    },
                    interfaceId: payment.paymentId,
                    paymentMethodInfo: {
                        paymentInterface: payment.paymentProvider,
                        method: payment.paymentMethod,
                    },
                    paymentStatus: {
                        interfaceCode: payment.paymentStatus,
                        interfaceText: payment.debug,
                    },
                };
                const paymentResponse = await this.getApiForProject()
                    .payments()
                    .post({
                    body: paymentDraft,
                })
                    .execute();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'addPayment',
                            payment: {
                                typeId: 'payment',
                                id: paymentResponse.body.id,
                            },
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`addPayment failed. ${error}, ${JSON.stringify(paymentDraft)}`);
            }
        };
        this.updatePayment = async (cart, payment) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const originalPayment = cart.payments.find((cartPayment) => cartPayment.id === payment.id);
                if (originalPayment === undefined) {
                    throw new Error(`Payment ${payment.id} not found in cart ${cart.cartId}`);
                }
                const paymentUpdateActions = [];
                if (payment.paymentStatus) {
                    paymentUpdateActions.push({
                        action: 'setStatusInterfaceCode',
                        interfaceCode: payment.paymentStatus,
                    });
                }
                if (payment.debug) {
                    paymentUpdateActions.push({
                        action: 'setStatusInterfaceText',
                        interfaceText: payment.debug,
                    });
                }
                if (payment.paymentId) {
                    paymentUpdateActions.push({
                        action: 'setInterfaceId',
                        interfaceId: payment.paymentId,
                    });
                }
                if (paymentUpdateActions.length === 0) {
                    return payment;
                }
                const response = await this.getApiForProject()
                    .payments()
                    .withKey({
                    key: originalPayment.id,
                })
                    .post({
                    body: {
                        version: originalPayment.version,
                        actions: paymentUpdateActions,
                    },
                })
                    .execute();
                return CartMapper.commercetoolsPaymentToPayment(response.body, locale);
            }
            catch (error) {
                throw new Error(`updatePayment failed. ${error}`);
            }
        };
        this.redeemDiscountCode = async (cart, code) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'addDiscountCode',
                            code: code,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                const data = await this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
                return { statusCode: 200, data };
            }
            catch (error) {
                return {
                    statusCode: error.statusCode,
                    error: error.message,
                };
            }
        };
        this.removeDiscountCode = async (cart, discount) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'removeDiscountCode',
                            discountCode: {
                                typeId: 'discount-code',
                                id: discount.discountId,
                            },
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`removeDiscountCode failed. ${error}`);
            }
        };
        this.buildCartWithAvailableShippingMethods = async (commercetoolsCart, locale) => {
            const cart = await this.assertCorrectLocale(commercetoolsCart, locale);
            try {
                if (cart.shippingAddress !== undefined && cart.shippingAddress.country !== undefined) {
                    cart.availableShippingMethods = await this.getAvailableShippingMethods(cart);
                }
            }
            catch (error) {
                throw new Error(`buildCartWithAvailableShippingMethods failed. ${error}`);
            }
            return cart;
        };
        this.assertCorrectLocale = async (commercetoolsCart, locale) => {
            if (commercetoolsCart.totalPrice.currencyCode !== locale.currency.toLocaleUpperCase()) {
                return this.recreate(commercetoolsCart, locale);
            }
            if (this.doesCartNeedLocaleUpdate(commercetoolsCart, locale)) {
                const cartUpdate = {
                    version: commercetoolsCart.version,
                    actions: [
                        {
                            action: 'setCountry',
                            country: locale.country,
                        },
                        {
                            action: 'setLocale',
                            country: locale.language,
                        },
                    ],
                };
                commercetoolsCart = await this.updateCart(commercetoolsCart.id, cartUpdate, locale);
                return CartMapper.commercetoolsCartToCart(commercetoolsCart, locale);
            }
            return CartMapper.commercetoolsCartToCart(commercetoolsCart, locale);
        };
        this.recreate = async (primaryCommercetoolsCart, locale) => {
            const primaryCartId = primaryCommercetoolsCart.id;
            const cartVersion = primaryCommercetoolsCart.version;
            const lineItems = primaryCommercetoolsCart.lineItems;
            const cartDraft = {
                currency: locale.currency,
                country: locale.country,
                locale: locale.language,
            };
            const propertyList = [
                'customerId',
                'customerEmail',
                'customerGroup',
                'anonymousId',
                'store',
                'inventoryMode',
                'taxMode',
                'taxRoundingMode',
                'taxCalculationMode',
                'shippingAddress',
                'billingAddress',
                'shippingMethod',
                'externalTaxRateForShippingMethod',
                'deleteDaysAfterLastModification',
                'origin',
                'shippingRateInput',
                'itemShippingAddresses',
            ];
            for (const key of propertyList) {
                if (primaryCommercetoolsCart.hasOwnProperty(key)) {
                    cartDraft[key] = primaryCommercetoolsCart[key];
                }
            }
            let replicatedCommercetoolsCart = await this.getApiForProject()
                .carts()
                .post({
                queryArgs: {
                    expand: [
                        'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                        'discountCodes[*].discountCode',
                        'paymentInfo.payments[*]',
                    ],
                },
                body: cartDraft,
            })
                .execute()
                .then((response) => {
                return response.body;
            });
            for (const lineItem of lineItems) {
                try {
                    const cartUpdate = {
                        version: +replicatedCommercetoolsCart.version,
                        actions: [
                            {
                                action: 'addLineItem',
                                sku: lineItem.variant.sku,
                                quantity: +lineItem.quantity,
                            },
                        ],
                    };
                    replicatedCommercetoolsCart = await this.updateCart(replicatedCommercetoolsCart.id, cartUpdate, locale);
                }
                catch (error) {
                }
            }
            await this.getApiForProject()
                .carts()
                .withId({
                ID: primaryCartId,
            })
                .delete({
                queryArgs: {
                    version: cartVersion,
                },
            })
                .execute();
            return CartMapper.commercetoolsCartToCart(replicatedCommercetoolsCart, locale);
        };
        this.doesCartNeedLocaleUpdate = (commercetoolsCart, locale) => {
            if (commercetoolsCart.country === undefined) {
                return true;
            }
            if (commercetoolsCart.locale === undefined) {
                return true;
            }
            return commercetoolsCart.country !== locale.country || commercetoolsCart.locale !== locale.language;
        };
    }
    async updateCart(cartId, cartUpdate, locale) {
        return await this.getApiForProject()
            .carts()
            .withId({
            ID: cartId,
        })
            .post({
            queryArgs: {
                expand: [
                    'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                    'discountCodes[*].discountCode',
                    'paymentInfo.payments[*]',
                ],
            },
            body: cartUpdate,
        })
            .execute()
            .then((response) => {
            return response.body;
        });
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/utils/CartFetcher.ts



class CartFetcher_CartFetcher {
    static async fetchCart(request, actionContext) {
        var _a, _b;
        const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
        if (((_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== undefined) {
            return await cartApi.getForUser(request.sessionData.account);
        }
        if (((_b = request.sessionData) === null || _b === void 0 ? void 0 : _b.cartId) !== undefined) {
            try {
                return await cartApi.getById(request.sessionData.cartId);
            }
            catch (error) {
                console.info(`Error fetching the cart ${request.sessionData.cartId}, creating a new one. ${error}`);
            }
        }
        return await cartApi.getAnonymous(Guid.newGuid());
    }
}

// EXTERNAL MODULE: ./node_modules/nodemailer/lib/nodemailer.js
var nodemailer = __webpack_require__(30);

// CONCATENATED MODULE: ./commerce-commercetools/apis/EmailApi.ts

class EmailApi_EmailApi {
    constructor(credentials) {
        this.client_host = credentials.client_host;
        this.sender = credentials.sender;
        this.transport = nodemailer["createTransport"]({
            host: credentials.host,
            port: +credentials.port,
            secure: credentials.port == 465,
            auth: {
                user: credentials.user,
                pass: credentials.password,
            },
        });
    }
    async initTest() {
        const testAccount = await nodemailer["createTestAccount"]();
        this.transport = nodemailer["createTransport"]({
            host: 'smtp.ethereal.email',
            port: 587,
            secure: false,
            auth: {
                user: testAccount.user,
                pass: testAccount.pass,
            },
        });
    }
    getUrl(token, relPath, host) {
        const path = `${relPath}?token=${token}`;
        const url = `${host}/${path}`;
        return url;
    }
    async sendEmail(data) {
        const from = this.sender;
        const { to, text, html, subject } = data;
        return await this.transport.sendMail({ from, to, subject, text, html });
    }
    async sendVerificationEmail(account, host) {
        if (!account.confirmationToken)
            return;
        const url = this.getUrl(account.confirmationToken, 'verify', host);
        const html = `
                  <h1>Thanks for your registration!</h1>
                  <p style="margin-top: 10px;color:gray;">Please activate your account by clicking the below link</p>
                  <a href="${url}">${url}</a>
                `;
        try {
            await this.sendEmail({
                to: account.email,
                subject: 'Account Verification',
                html,
            });
        }
        catch (error) { }
    }
    async sendPasswordResetEmail(token, email, host) {
        if (!token)
            return;
        const url = this.getUrl(token, 'reset-password', host);
        const html = `
                  <h1>You requested a password reset!</h1>
                  <p style="margin-top: 10px;color:gray;">Please click the link below to proceed.</p>
                  <a href="${url}">${url}</a>
                `;
        await this.sendEmail({
            to: email,
            subject: 'Password Reset',
            html,
        });
    }
    async sendPaymentConfirmationEmail(email) {
        const html = `
                  <h1>Thanks for your order!</h1>
                  <p style="margin-top: 10px;color:gray;">Your payment has been confirmed.</p>
                `;
        try {
            await this.sendEmail({
                to: email,
                subject: 'Payment confirmed',
                html,
            });
        }
        catch (error) { }
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/AccountController.ts




async function loginAccount(request, actionContext, account, reverify = false) {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    return await accountApi.login(account, cart, reverify);
}
function assertIsAuthenticated(request) {
    const account = fetchAccountFromSession(request);
    if (account === undefined) {
        throw new Error('Not logged in.');
    }
}
function fetchAccountFromSession(request) {
    var _a;
    if (((_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== undefined) {
        return request.sessionData.account;
    }
    return undefined;
}
function parseBirthday(accountRegisterBody) {
    var _a, _b;
    if (accountRegisterBody.birthdayYear) {
        return new Date(+accountRegisterBody.birthdayYear, (_a = +(accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.birthdayMonth)) !== null && _a !== void 0 ? _a : 1, (_b = +(accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.birthdayDay)) !== null && _b !== void 0 ? _b : 1);
    }
    return null;
}
function mapRequestToAccount(request) {
    const accountRegisterBody = JSON.parse(request.body);
    const account = {
        email: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.email,
        password: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.password,
        salutation: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.salutation,
        firstName: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.firstName,
        lastName: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.lastName,
        birthday: parseBirthday(accountRegisterBody),
        addresses: [],
    };
    if (accountRegisterBody.billingAddress) {
        accountRegisterBody.billingAddress.isDefaultBillingAddress = true;
        accountRegisterBody.billingAddress.isDefaultShippingAddress = !(accountRegisterBody.shippingAddress !== undefined);
        account.addresses.push(accountRegisterBody.billingAddress);
    }
    if (accountRegisterBody.shippingAddress) {
        accountRegisterBody.shippingAddress.isDefaultShippingAddress = true;
        accountRegisterBody.shippingAddress.isDefaultBillingAddress = !(accountRegisterBody.billingAddress !== undefined);
        account.addresses.push(accountRegisterBody.shippingAddress);
    }
    return account;
}
const getAccount = async (request, actionContext) => {
    const account = fetchAccountFromSession(request);
    if (account === undefined) {
        return {
            statusCode: 200,
            body: JSON.stringify({
                loggedIn: false,
            }),
        };
    }
    const response = {
        statusCode: 200,
        body: JSON.stringify({
            loggedIn: true,
            account,
        }),
        sessionData: {
            ...request.sessionData,
            account: account,
        },
    };
    return response;
};
const register = async (request, actionContext) => {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    const accountData = mapRequestToAccount(request);
    const host = JSON.parse(request.body).host;
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext).catch(() => undefined);
    const account = await accountApi.create(accountData, cart);
    if (!account.confirmed)
        await emailApi.sendVerificationEmail(account, host);
    const response = {
        statusCode: 200,
        body: JSON.stringify({ accountId: account.accountId }),
        sessionData: {
            ...request.sessionData,
        },
    };
    return response;
};
const resendVerificationEmail = async (request, actionContext) => {
    const data = JSON.parse(request.body);
    const host = JSON.parse(request.body).host;
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    const reverify = true;
    const account = await loginAccount(request, actionContext, data, reverify);
    await emailApi.sendVerificationEmail(account, host);
    const response = {
        statusCode: 200,
    };
    return response;
};
const AccountController_confirm = async (request, actionContext) => {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const accountConfirmBody = JSON.parse(request.body);
    const account = await accountApi.confirmEmail(accountConfirmBody.token);
    const response = {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account: account,
        },
    };
    return response;
};
const login = async (request, actionContext) => {
    const accountLoginBody = JSON.parse(request.body);
    let account = {
        email: accountLoginBody.email,
        password: accountLoginBody.password,
    };
    account = await loginAccount(request, actionContext, account);
    const response = {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account: account,
        },
    };
    return response;
};
const logout = async (request, actionContext) => {
    return {
        statusCode: 200,
        body: JSON.stringify({}),
        sessionData: {
            ...request.sessionData,
            account: undefined,
        },
    };
};
const AccountController_password = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const accountChangePasswordBody = JSON.parse(request.body);
    account = await accountApi.updatePassword(account, accountChangePasswordBody.oldPassword, accountChangePasswordBody.newPassword);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const requestReset = async (request, actionContext) => {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    const accountRequestResetBody = JSON.parse(request.body);
    const passwordResetToken = await accountApi.generatePasswordResetToken(accountRequestResetBody.email);
    await emailApi.sendPasswordResetEmail(passwordResetToken.confirmationToken, accountRequestResetBody.email, accountRequestResetBody.host);
    return {
        statusCode: 200,
        body: JSON.stringify({}),
        sessionData: {
            ...request.sessionData,
            account: undefined,
        },
    };
};
const AccountController_reset = async (request, actionContext) => {
    const accountResetBody = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    let account = await accountApi.resetPassword(accountResetBody.token, accountResetBody.newPassword);
    account.password = accountResetBody.newPassword;
    account = await loginAccount(request, actionContext, account);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account: account,
        },
    };
};
const update = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = {
        ...account,
        ...mapRequestToAccount(request),
    };
    account = await accountApi.update(account);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const addAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.addAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const updateAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.updateAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const removeAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.removeAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const setDefaultBillingAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.setDefaultBillingAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const setDefaultShippingAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.setDefaultShippingAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};

// CONCATENATED MODULE: ../types/query/ProductQuery.ts
var SortOrder;
(function (SortOrder) {
    SortOrder["ASCENDING"] = "ascending";
    SortOrder["DESCENDING"] = "descending";
})(SortOrder || (SortOrder = {}));

// CONCATENATED MODULE: ./commerce-commercetools/utils/ProductQueryFactory.ts



class ProductQueryFactory_ProductQueryFactory {
    static queryParamsToFacets(queryParams) {
        const facets = [];
        let key;
        let facetData;
        for ([key, facetData] of Object.entries(queryParams.facets)) {
            if ((facetData === null || facetData === void 0 ? void 0 : facetData.terms) && !Array.isArray(facetData.terms)) {
                facetData.terms = Object.values(facetData.terms);
            }
            switch (true) {
                case facetData.min !== undefined && facetData.max !== undefined:
                    facets.push({
                        type: FilterTypes.RANGE,
                        identifier: key,
                        min: +facetData.min,
                        max: +facetData.max,
                    });
                    break;
                case facetData.terms !== undefined:
                    facets.push({
                        type: FilterTypes.TERM,
                        identifier: key,
                        terms: facetData.terms.map((facetValueData) => facetValueData),
                    });
                    break;
                case facetData.boolean !== undefined:
                    facets.push({
                        type: FilterTypes.BOOLEAN,
                        identifier: key,
                        terms: [facetData.boolean],
                    });
                    break;
                default:
                    break;
            }
        }
        return facets;
    }
    static mergeProductFiltersAndValues(queryParams) {
        var _a, _b;
        const filtersData = [];
        if (((_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.productFilters) === null || _a === void 0 ? void 0 : _a.filters) === undefined) {
            return filtersData;
        }
        if (((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.productFilters) === null || _b === void 0 ? void 0 : _b.values) === undefined) {
            return queryParams.productFilters.filters;
        }
        queryParams.productFilters.filters.forEach((filter) => {
            var _a;
            if (filter === null || filter === void 0 ? void 0 : filter.field) {
                const filterValues = [(_a = queryParams.productFilters) === null || _a === void 0 ? void 0 : _a.values[filter.field]] || false;
                const filterData = {
                    ...filter,
                    values: filterValues,
                };
                filtersData.push(filterData);
            }
        });
        return filtersData;
    }
    static mergeCategoryFiltersAndValues(queryParams) {
        var _a, _b;
        const filtersData = [];
        if (((_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.categoryFilters) === null || _a === void 0 ? void 0 : _a.filters) === undefined) {
            return filtersData;
        }
        if (((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.categoryFilters) === null || _b === void 0 ? void 0 : _b.values) === undefined) {
            return queryParams.categoryFilters.filters;
        }
        queryParams.categoryFilters.filters.forEach((filter) => {
            if (filter === null || filter === void 0 ? void 0 : filter.field) {
                const filterValues = [queryParams.categoryFilters.values[filter.field]] || false;
                const filterData = {
                    ...filter,
                    values: filterValues,
                };
                filtersData.push(filterData);
            }
        });
        return filtersData;
    }
}
ProductQueryFactory_ProductQueryFactory.queryFromParams = (request, config) => {
    var _a, _b, _c, _d;
    let queryParams;
    const filters = [];
    const productQuery = {
        productIds: [],
        skus: [],
    };
    const productIds = (_b = (_a = config === null || config === void 0 ? void 0 : config.configuration) === null || _a === void 0 ? void 0 : _a.productIds) === null || _b === void 0 ? void 0 : _b.split(',').map((val) => val.trim());
    const productSkus = (_d = (_c = config === null || config === void 0 ? void 0 : config.configuration) === null || _c === void 0 ? void 0 : _c.productSkus) === null || _d === void 0 ? void 0 : _d.split(',').map((val) => val.trim());
    if (request === null || request === void 0 ? void 0 : request.query) {
        queryParams = request.query;
    }
    if (config === null || config === void 0 ? void 0 : config.configuration) {
        queryParams = {
            ...queryParams,
            ...config.configuration,
        };
    }
    if (productSkus && productSkus.length > 0)
        queryParams.skus = productSkus;
    if (productIds && productIds.length > 0)
        queryParams.productIds = productIds;
    productQuery.query = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.query) || undefined;
    productQuery.category = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.category) || undefined;
    if ((queryParams === null || queryParams === void 0 ? void 0 : queryParams.productIds) && Array.isArray(queryParams === null || queryParams === void 0 ? void 0 : queryParams.productIds)) {
        queryParams === null || queryParams === void 0 ? void 0 : queryParams.productIds.map((productId) => {
            productQuery.productIds.push(productId.toString());
        });
    }
    if ((queryParams === null || queryParams === void 0 ? void 0 : queryParams.skus) && Array.isArray(queryParams === null || queryParams === void 0 ? void 0 : queryParams.skus)) {
        queryParams === null || queryParams === void 0 ? void 0 : queryParams.skus.map((sku) => {
            productQuery.skus.push(sku.toString());
        });
    }
    const configFiltersData = [];
    configFiltersData.push(...ProductQueryFactory_ProductQueryFactory.mergeProductFiltersAndValues(queryParams));
    configFiltersData.push(...ProductQueryFactory_ProductQueryFactory.mergeCategoryFiltersAndValues(queryParams));
    let key;
    let configFilterData;
    if (configFiltersData instanceof Array) {
        for ([key, configFilterData] of Object.entries(configFiltersData)) {
            if ((configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field) === 'categoryId') {
                productQuery.category = configFilterData.values[0];
                continue;
            }
            switch (configFilterData.type) {
                case FilterFieldTypes.NUMBER:
                    const rangeFilter = {
                        identifier: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field,
                        type: FilterTypes.RANGE,
                        min: +(configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.min) || undefined,
                        max: +(configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.max) || undefined,
                    };
                    filters.push(rangeFilter);
                    break;
                case FilterFieldTypes.ENUM:
                    const enumFilter = {
                        identifier: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field,
                        type: FilterTypes.TERM,
                        terms: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.values.map((term) => term),
                    };
                    filters.push(enumFilter);
                    break;
                case FilterFieldTypes.BOOLEAN:
                    const booleanFilter = {
                        identifier: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field,
                        type: FilterTypes.BOOLEAN,
                        terms: [configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.values[0]],
                    };
                    filters.push(booleanFilter);
                    break;
                default:
                    break;
            }
        }
        productQuery.filters = filters;
    }
    if (queryParams.facets) {
        productQuery.facets = ProductQueryFactory_ProductQueryFactory.queryParamsToFacets(queryParams);
    }
    if (queryParams.sortAttributes) {
        const sortAttributes = {};
        let sortAttribute;
        for (sortAttribute of Object.values(queryParams.sortAttributes)) {
            const key = Object.keys(sortAttribute)[0];
            sortAttributes[key] = sortAttribute[key] ? sortAttribute[key] : SortOrder.ASCENDING;
        }
        productQuery.sortAttributes = sortAttributes;
    }
    productQuery.limit = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.limit) || undefined;
    productQuery.cursor = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.cursor) || undefined;
    return productQuery;
};

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/ProductController.ts



const getProduct = async (request, actionContext) => {
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    let productQuery = {};
    if ('id' in request.query) {
        productQuery = {
            productIds: [request.query['id']],
        };
    }
    if ('sku' in request.query) {
        productQuery = {
            skus: [request.query['sku']],
        };
    }
    const product = await productApi.getProduct(productQuery);
    const response = {
        statusCode: 200,
        body: JSON.stringify(product),
        sessionData: request.sessionData,
    };
    return response;
};
const ProductController_query = async (request, actionContext) => {
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams(request);
    const queryResult = await productApi.query(productQuery);
    const response = {
        statusCode: 200,
        body: JSON.stringify(queryResult),
        sessionData: request.sessionData,
    };
    return response;
};
const queryCategories = async (request, actionContext) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    const categoryQuery = {
        limit: (_b = (_a = request.query) === null || _a === void 0 ? void 0 : _a.limit) !== null && _b !== void 0 ? _b : undefined,
        cursor: (_d = (_c = request.query) === null || _c === void 0 ? void 0 : _c.cursor) !== null && _d !== void 0 ? _d : undefined,
        slug: (_f = (_e = request.query) === null || _e === void 0 ? void 0 : _e.slug) !== null && _f !== void 0 ? _f : undefined,
        parentId: (_h = (_g = request.query) === null || _g === void 0 ? void 0 : _g.parentId) !== null && _h !== void 0 ? _h : undefined,
    };
    const queryResult = await productApi.queryCategories(categoryQuery);
    const response = {
        statusCode: 200,
        body: JSON.stringify(queryResult),
        sessionData: request.sessionData,
    };
    return response;
};
const searchableAttributes = async (request, actionContext) => {
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    const result = await productApi.getSearchableAttributes();
    const response = {
        statusCode: 200,
        body: JSON.stringify(result),
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ../types/cart/Payment.ts
var PaymentStatuses;
(function (PaymentStatuses) {
    PaymentStatuses["INIT"] = "init";
    PaymentStatuses["PENDING"] = "pending";
    PaymentStatuses["PAID"] = "paid";
    PaymentStatuses["FAILED"] = "failed";
})(PaymentStatuses || (PaymentStatuses = {}));

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/CartController.ts





async function updateCartFromRequest(request, actionContext) {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    if ((request === null || request === void 0 ? void 0 : request.body) === undefined || (request === null || request === void 0 ? void 0 : request.body) === '') {
        return cart;
    }
    const body = JSON.parse(request.body);
    if (((_a = body === null || body === void 0 ? void 0 : body.account) === null || _a === void 0 ? void 0 : _a.email) !== undefined) {
        cart = await cartApi.setEmail(cart, body.account.email);
    }
    if ((body === null || body === void 0 ? void 0 : body.shipping) !== undefined || (body === null || body === void 0 ? void 0 : body.billing) !== undefined) {
        const shippingAddress = (body === null || body === void 0 ? void 0 : body.shipping) !== undefined ? body.shipping : body.billing;
        const billingAddress = (body === null || body === void 0 ? void 0 : body.billing) !== undefined ? body.billing : body.shipping;
        cart = await cartApi.setShippingAddress(cart, shippingAddress);
        cart = await cartApi.setBillingAddress(cart, billingAddress);
    }
    return cart;
}
const getCart = async (request, actionContext) => {
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const addToCart = async (request, actionContext) => {
    var _a, _b;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const body = JSON.parse(request.body);
    const lineItem = {
        variant: {
            sku: ((_a = body.variant) === null || _a === void 0 ? void 0 : _a.sku) || undefined,
            price: undefined,
        },
        count: +((_b = body.variant) === null || _b === void 0 ? void 0 : _b.count) || 1,
    };
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    cart = await cartApi.addToCart(cart, lineItem);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const updateLineItem = async (request, actionContext) => {
    var _a, _b;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const body = JSON.parse(request.body);
    const lineItem = {
        lineItemId: (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id,
        count: +((_b = body.lineItem) === null || _b === void 0 ? void 0 : _b.count) || 1,
    };
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    cart = await cartApi.updateLineItem(cart, lineItem);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const removeLineItem = async (request, actionContext) => {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const body = JSON.parse(request.body);
    const lineItem = {
        lineItemId: (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id,
    };
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    cart = await cartApi.removeLineItem(cart, lineItem);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const updateCart = async (request, actionContext) => {
    const cart = await updateCartFromRequest(request, actionContext);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const checkout = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    const { account } = JSON.parse(request.body);
    let cart = await updateCartFromRequest(request, actionContext);
    cart = await cartApi.order(cart);
    if (cart)
        await emailApi.sendPaymentConfirmationEmail(account.email);
    const cartId = undefined;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const getOrders = async (request, actionContext) => {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const account = ((_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== undefined ? request.sessionData.account : undefined;
    if (account === undefined) {
        throw new Error('Not logged in.');
    }
    const orders = await cartApi.getOrders(account);
    const response = {
        statusCode: 200,
        body: JSON.stringify(orders),
        sessionData: {
            ...request.sessionData,
        },
    };
    return response;
};
const getShippingMethods = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const onlyMatching = request.query.onlyMatching === 'true';
    const shippingMethods = await cartApi.getShippingMethods(onlyMatching);
    const response = {
        statusCode: 200,
        body: JSON.stringify(shippingMethods),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const getAvailableShippingMethods = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const availableShippingMethods = await cartApi.getAvailableShippingMethods(cart);
    const response = {
        statusCode: 200,
        body: JSON.stringify(availableShippingMethods),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const setShippingMethod = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const shippingMethod = {
        shippingMethodId: request.query.shippingMethodId,
    };
    cart = await cartApi.setShippingMethod(cart, shippingMethod);
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const addPaymentByInvoice = async (request, actionContext) => {
    var _a, _b, _c, _d;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const payment = {
        ...body.payment,
        paymentProvider: 'frontastic',
        paymentMethod: 'invoice',
        paymentStatus: PaymentStatuses.PENDING,
    };
    if (payment.amountPlanned === undefined) {
        payment.amountPlanned = {};
    }
    payment.amountPlanned.centAmount = (_b = (_a = payment.amountPlanned.centAmount) !== null && _a !== void 0 ? _a : cart.sum.centAmount) !== null && _b !== void 0 ? _b : undefined;
    payment.amountPlanned.currencyCode = (_d = (_c = payment.amountPlanned.currencyCode) !== null && _c !== void 0 ? _c : cart.sum.currencyCode) !== null && _d !== void 0 ? _d : undefined;
    cart = await cartApi.addPayment(cart, payment);
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const updatePayment = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const payment = await cartApi.updatePayment(cart, body.payment);
    const response = {
        statusCode: 200,
        body: JSON.stringify(payment),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const redeemDiscount = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const result = await cartApi.redeemDiscountCode(cart, body.code);
    let response;
    if (result.data) {
        response = {
            statusCode: 200,
            body: JSON.stringify(result.data),
            sessionData: {
                ...request.sessionData,
                cartId: result.data.cartId,
            },
        };
    }
    if (result.error) {
        response = {
            statusCode: result.statusCode,
            errorCode: 101,
            error: result.error,
        };
    }
    return response;
};
const removeDiscount = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const discount = {
        discountId: body === null || body === void 0 ? void 0 : body.discountId,
    };
    cart = await cartApi.removeDiscountCode(cart, discount);
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};

// CONCATENATED MODULE: ./commerce-commercetools/mappers/WishlistMapper.ts

class WishlistMapper {
}
WishlistMapper.commercetoolsShoppingListToWishlist = (commercetoolsShoppingList, locale) => {
    var _a, _b;
    return {
        wishlistId: commercetoolsShoppingList.id,
        wishlistVersion: commercetoolsShoppingList.version.toString(),
        anonymousId: commercetoolsShoppingList.anonymousId,
        accountId: (_b = (_a = commercetoolsShoppingList.customer) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : undefined,
        name: commercetoolsShoppingList.name[locale.language],
        lineItems: (commercetoolsShoppingList.lineItems || []).map((lineItem) => WishlistMapper.commercetoolsLineItemToLineItem(lineItem, locale)),
    };
};
WishlistMapper.commercetoolsLineItemToLineItem = (commercetoolsLineItem, locale) => {
    var _a, _b;
    const lineItem = {
        lineItemId: commercetoolsLineItem.id,
        name: commercetoolsLineItem.name[locale.language],
        type: 'variant',
        addedAt: new Date(commercetoolsLineItem.addedAt),
        count: commercetoolsLineItem.quantity,
        variant: {
            sku: commercetoolsLineItem.variant.sku,
            images: (_b = (_a = commercetoolsLineItem.variant) === null || _a === void 0 ? void 0 : _a.images) === null || _b === void 0 ? void 0 : _b.map((image) => image.url),
        },
    };
    lineItem._url = ProductRouter_ProductRouter.generateUrlFor(lineItem);
    return lineItem;
};
WishlistMapper.wishlistToCommercetoolsShoppingListDraft = (wishlist, locale) => {
    return {
        anonymousId: wishlist.anonymousId,
        customer: wishlist.accountId === undefined ? undefined : { typeId: 'customer', id: wishlist.accountId },
        name: { [locale.language]: wishlist.name || '' },
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/WishlistApi.ts


const expandVariants = ['lineItems[*].variant'];
class WishlistApi_WishlistApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getById = async (wishlistId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlistId })
                    .get({
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Get wishlist by ID failed: ${error}`);
            }
        };
        this.getForAccount = async (accountId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .get({
                    queryArgs: {
                        where: `customer(id="${accountId}")`,
                        expand: expandVariants,
                    },
                })
                    .execute();
                return response.body.results.map((shoppingList) => WishlistMapper.commercetoolsShoppingListToWishlist(shoppingList, locale));
            }
            catch (error) {
                throw new Error(`Get wishlist for account failed: ${error}`);
            }
        };
        this.getByIdForAccount = async (wishlistId, accountId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlistId })
                    .get({
                    queryArgs: {
                        where: `customer(id="${accountId}")`,
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Get wishlist by ID failed: ${error}`);
            }
        };
        this.create = async (wishlist) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const body = WishlistMapper.wishlistToCommercetoolsShoppingListDraft(wishlist, locale);
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .post({
                    body: body,
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Create wishlist failed: ${error}`);
            }
        };
        this.addToWishlist = async (wishlist, request) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlist.wishlistId })
                    .post({
                    body: {
                        version: +wishlist.wishlistVersion,
                        actions: [
                            {
                                action: 'addLineItem',
                                sku: request.sku,
                                quantity: request.count,
                            },
                        ],
                    },
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Add to wishlist failed: ${error}`);
            }
        };
        this.removeLineItem = async (wishlist, lineItemId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlist.wishlistId })
                    .post({
                    body: {
                        version: +wishlist.wishlistVersion,
                        actions: [
                            {
                                action: 'removeLineItem',
                                lineItemId,
                            },
                        ],
                    },
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Add to wishlist failed: ${error}`);
            }
        };
        this.updateLineItemCount = async (wishlist, lineItemId, count) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlist.wishlistId })
                    .post({
                    body: {
                        version: +wishlist.wishlistVersion,
                        actions: [
                            {
                                action: 'changeLineItemQuantity',
                                lineItemId,
                                quantity: count,
                            },
                        ],
                    },
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Update line item count: ${error}`);
            }
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/WishlistController.ts



function getWishlistApi(request, actionContext) {
    return new WishlistApi_WishlistApi(actionContext.frontasticContext, getLocale(request));
}
function WishlistController_fetchAccountFromSession(request) {
    var _a;
    return (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account;
}
function fetchAccountFromSessionEnsureLoggedIn(request) {
    const account = WishlistController_fetchAccountFromSession(request);
    if (!account) {
        throw new Error('Not logged in.');
    }
    return account;
}
async function fetchWishlist(request, wishlistApi) {
    var _a, _b;
    if (((_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.wishlistId) !== undefined) {
        return await wishlistApi.getById((_b = request.sessionData) === null || _b === void 0 ? void 0 : _b.wishlistId);
    }
    const account = WishlistController_fetchAccountFromSession(request);
    if (account) {
        const wishlistId = request.query.id;
        if (wishlistId !== undefined) {
            return await wishlistApi.getByIdForAccount(wishlistId, account.accountId);
        }
        const accountWishlists = await wishlistApi.getForAccount(account.accountId);
        if (accountWishlists.length > 0) {
            return accountWishlists[0];
        }
        return await wishlistApi.create({ accountId: account.accountId, name: 'Wishlist' });
    }
    return await wishlistApi.create({ anonymousId: Guid.newGuid(), name: 'Wishlist' });
}
const getWishlist = async (request, actionContext) => {
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlist = await fetchWishlist(request, wishlistApi);
    return {
        statusCode: 200,
        body: JSON.stringify(wishlist),
        sessionData: {
            ...request.sessionData,
            wishlistId: wishlist.wishlistId,
        },
    };
};
const createWishlist = async (request, actionContext) => {
    var _a;
    const wishlistApi = getWishlistApi(request, actionContext);
    const body = JSON.parse(request.body);
    const account = fetchAccountFromSessionEnsureLoggedIn(request);
    const wishlist = await wishlistApi.create({ accountId: account.accountId, name: (_a = body.name) !== null && _a !== void 0 ? _a : 'Wishlist' });
    return {
        statusCode: 200,
        body: JSON.stringify(wishlist),
        sessionData: {
            ...request.sessionData,
            wishlistId: wishlist.wishlistId,
        },
    };
};
const addToWishlist = async (request, actionContext) => {
    var _a;
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlist = await fetchWishlist(request, wishlistApi);
    const body = JSON.parse(request.body);
    const updatedWishlist = await wishlistApi.addToWishlist(wishlist, {
        sku: ((_a = body === null || body === void 0 ? void 0 : body.variant) === null || _a === void 0 ? void 0 : _a.sku) || undefined,
        count: body.count || 1,
    });
    return {
        statusCode: 200,
        body: JSON.stringify(updatedWishlist),
        sessionData: {
            ...request.sessionData,
            wishlistId: updatedWishlist.wishlistId,
        },
    };
};
const WishlistController_removeLineItem = async (request, actionContext) => {
    var _a, _b;
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlist = await fetchWishlist(request, wishlistApi);
    const body = JSON.parse(request.body);
    const updatedWishlist = await wishlistApi.removeLineItem(wishlist, (_b = (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : undefined);
    return {
        statusCode: 200,
        body: JSON.stringify(updatedWishlist),
        sessionData: {
            ...request.sessionData,
            wishlistId: updatedWishlist.wishlistId,
        },
    };
};
const updateLineItemCount = async (request, actionContext) => {
    var _a, _b;
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlist = await fetchWishlist(request, wishlistApi);
    const body = JSON.parse(request.body);
    const updatedWishlist = await wishlistApi.updateLineItemCount(wishlist, (_b = (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : undefined, body.count || 1);
    return {
        statusCode: 200,
        body: JSON.stringify(updatedWishlist),
        sessionData: {
            ...request.sessionData,
            wishlistId: updatedWishlist.wishlistId,
        },
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/ProjectApi.ts

class ProjectApi_ProjectApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getProjectSettings = async () => {
            const project = await this.getProject();
            return Promise.resolve({
                name: project.name,
                countries: project.countries,
                currencies: project.currencies,
                languages: project.languages,
            });
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/ProjectController.ts


const getProjectSettings = async (request, actionContext) => {
    const projectApi = new ProjectApi_ProjectApi(actionContext.frontasticContext, getLocale(request));
    const project = await projectApi.getProjectSettings();
    const response = {
        statusCode: 200,
        body: JSON.stringify(project),
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/SearchRouter.ts
var SearchRouter_a;



class SearchRouter_SearchRouter {
    static identifyFrom(request) {
        var _b;
        const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/^\/search/);
        if (urlMatches) {
            return true;
        }
        return false;
    }
}
SearchRouter_a = SearchRouter_SearchRouter;
SearchRouter_SearchRouter.loadFor = async (request, frontasticContext) => {
    var _b;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/search/);
    if (urlMatches) {
        const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams({
            ...request,
            query: { ...request.query, query: request.query.query || request.query.q },
        });
        return productApi.query(productQuery);
    }
    return null;
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/CategoryRouter.ts
var CategoryRouter_a;



class CategoryRouter_CategoryRouter {
    static identifyFrom(request) {
        var _b;
        if ((_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/.+/)) {
            return true;
        }
        return false;
    }
}
CategoryRouter_a = CategoryRouter_CategoryRouter;
CategoryRouter_CategoryRouter.loadFor = async (request, frontasticContext) => {
    var _b;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/[^\/]+/);
    if (urlMatches) {
        const categoryQuery = {
            slug: urlMatches[0],
        };
        const categoryQueryResult = await productApi.queryCategories(categoryQuery);
        if (categoryQueryResult.items.length == 0)
            return null;
        request.query.category = categoryQueryResult.items[0].categoryId;
        const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams({
            ...request,
        });
        return await productApi.query(productQuery);
    }
    return null;
};

// CONCATENATED MODULE: ./commerce-commercetools/index.ts











/* harmony default export */ var commerce_commercetools = ({
    'dynamic-page-handler': async (request, context) => {
        var _a;
        const staticPageMatch = (_a = getPath(request)) === null || _a === void 0 ? void 0 : _a.match(/^\/(cart|checkout|wishlist|account|login|register|reset-password|thank-you)/);
        if (staticPageMatch) {
            return {
                dynamicPageType: `frontastic${staticPageMatch[0]}`,
                dataSourcePayload: {},
                pageMatchingPayload: {},
            };
        }
        if (ProductRouter_ProductRouter.identifyFrom(request)) {
            return ProductRouter_ProductRouter.loadFor(request, context.frontasticContext).then((product) => {
                if (product) {
                    return {
                        dynamicPageType: 'frontastic/product-detail-page',
                        dataSourcePayload: {
                            product: product,
                        },
                        pageMatchingPayload: {
                            product: product,
                        },
                    };
                }
                return null;
            });
        }
        if (SearchRouter_SearchRouter.identifyFrom(request)) {
            return SearchRouter_SearchRouter.loadFor(request, context.frontasticContext).then((result) => {
                if (result) {
                    return {
                        dynamicPageType: 'frontastic/search',
                        dataSourcePayload: result,
                        pageMatchingPayload: {
                            query: result.query,
                        },
                    };
                }
                return null;
            });
        }
        if (CategoryRouter_CategoryRouter.identifyFrom(request)) {
            return CategoryRouter_CategoryRouter.loadFor(request, context.frontasticContext).then((result) => {
                if (result) {
                    return {
                        dynamicPageType: 'frontastic/category',
                        dataSourcePayload: {
                            totalItems: result.total,
                            items: result.items,
                            facets: result.facets,
                            previousCursor: result.previousCursor,
                            nextCursor: result.nextCursor,
                            category: getPath(request),
                        },
                        pageMatchingPayload: {
                            totalItems: result.total,
                            items: result.items,
                            facets: result.facets,
                            previousCursor: result.previousCursor,
                            nextCursor: result.nextCursor,
                            category: getPath(request),
                        },
                    };
                }
                return null;
            });
        }
        return null;
    },
    'data-sources': {
        'frontastic/product-list': async (config, context) => {
            const productApi = new ProductApi_ProductApi(context.frontasticContext, context.request ? getLocale(context.request) : null);
            const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams(context === null || context === void 0 ? void 0 : context.request, config);
            return await productApi.query(productQuery).then((queryResult) => {
                return {
                    dataSourcePayload: queryResult,
                };
            });
        },
        'frontastic/similar-products': async (config, context) => {
            var _a, _b, _c, _d, _e;
            if (!context.hasOwnProperty('request')) {
                throw new Error(`Request is not defined in context ${context}`);
            }
            const productApi = new ProductApi_ProductApi(context.frontasticContext, getLocale(context.request));
            const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams(context.request, config);
            const queryWithCategoryId = {
                ...productQuery,
                category: (_e = (_d = (_c = (_b = (_a = context.pageFolder.dataSourceConfigurations.find((stream) => stream.streamId === '__master')) === null || _a === void 0 ? void 0 : _a.preloadedValue) === null || _b === void 0 ? void 0 : _b.product) === null || _c === void 0 ? void 0 : _c.categories) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.categoryId,
            };
            return await productApi.query(queryWithCategoryId).then((queryResult) => {
                return {
                    dataSourcePayload: queryResult,
                };
            });
        },
        'frontastic/product': async (config, context) => {
            const productApi = new ProductApi_ProductApi(context.frontasticContext, context.request ? getLocale(context.request) : null);
            const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams(context === null || context === void 0 ? void 0 : context.request, config);
            return await productApi.getProduct(productQuery).then((queryResult) => {
                return {
                    dataSourcePayload: {
                        product: queryResult,
                    },
                };
            });
        },
    },
    actions: {
        account: AccountController_namespaceObject,
        cart: CartController_namespaceObject,
        product: ProductController_namespaceObject,
        wishlist: WishlistController_namespaceObject,
        project: ProjectController_namespaceObject,
    },
});

// EXTERNAL MODULE: ./node_modules/axios/index.js
var axios = __webpack_require__(79);
var axios_default = /*#__PURE__*/__webpack_require__.n(axios);

// CONCATENATED MODULE: ./payment-adyen/mappers/AdyenMapper.ts
class AdyenMapper {
    static adyenSessionResponseToSessionResponse(sessionResponse) {
        return sessionResponse;
    }
    static adyenPaymentDetailsToDetails(paymentDetails) {
        return paymentDetails;
    }
}

// CONCATENATED MODULE: ./payment-adyen/BaseApi.ts


class payment_adyen_BaseApi_BaseApi {
    constructor(config) {
        this.instance = axios_default.a.create({
            baseURL: config.baseUrl,
            headers: {
                'x-API-key': config.apiKey,
                'content-type': 'application/json',
            },
        });
        this.instance.interceptors.request.use((req) => {
            req.data = { ...(req.data || {}), merchantAccount: config.merchantAccount };
            return req;
        });
    }
    async createSession(payload) {
        const response = await this.instance.post('/sessions', payload);
        return AdyenMapper.adyenSessionResponseToSessionResponse(response.data);
    }
    async paymentDetails(payload) {
        const response = await this.instance.post('/payments/details', payload);
        return AdyenMapper.adyenPaymentDetailsToDetails(response.data);
    }
}
/* harmony default export */ var payment_adyen_BaseApi = (payment_adyen_BaseApi_BaseApi);

// CONCATENATED MODULE: ./payment-adyen/utils/Guid.ts

class Guid_Guid {
}
Guid_Guid.newGuid = (noHyphens) => {
    let d = new Date().getTime();
    if (typeof performance_now_default.a === 'function') {
        d += performance_now_default()();
    }
    const shellGuid = noHyphens ? 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx' : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    return shellGuid.replace(/[xy]/g, function (c) {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : r & (0x3 | 0x8)).toString(16);
    });
};
Guid_Guid.empty = '00000000-0000-0000-0000-000000000000';

// CONCATENATED MODULE: ./payment-adyen/utils/Request.ts
const Request_getPath = (request) => {
    var _a;
    return (_a = Request_getHeader(request, 'frontastic-path')) !== null && _a !== void 0 ? _a : request.query.path;
};
const Request_getLocale = (request) => {
    var _a, _b;
    const locale = (_a = Request_getHeader(request, 'frontastic-locale')) !== null && _a !== void 0 ? _a : request.query.locale;
    if (locale !== undefined) {
        return (_b = Request_getHeader(request, 'frontastic-locale')) !== null && _b !== void 0 ? _b : request.query.locale;
    }
    throw new Error(`Locale is missing from request ${request}`);
};
const Request_getHeader = (request, header) => {
    if (header in request.headers) {
        const foundHeader = request.headers[header];
        if (Array.isArray(foundHeader)) {
            return foundHeader[0];
        }
        return foundHeader;
    }
    return null;
};

// CONCATENATED MODULE: ./payment-adyen/actionControllers/AdyenController.ts








const createSession = async (request, actionContext) => {
    var _a, _b;
    const adyenApi = new payment_adyen_BaseApi(actionContext.frontasticContext.project.configuration.payment.adyen);
    const account = ((_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== null && _b !== void 0 ? _b : {});
    const sessionDTO = JSON.parse(request.body);
    const sessionPayload = {
        reference: request.sessionData.cartId,
        shopperEmail: account.email,
        shopperLocale: Request_getLocale(request),
        shopperReference: account.accountId,
        ...sessionDTO,
    };
    const data = await adyenApi.createSession(sessionPayload);
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};
const createPayment = async (request, actionContext, data) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, Request_getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    let cart = await cartApi.getById(data.merchantReference);
    if (isReadyForCheckout(cart)) {
        const payment = {
            id: Guid_Guid.newGuid(),
            paymentId: data.merchantReference,
            paymentMethod: 'method',
            paymentStatus: PaymentStatuses.PENDING,
            paymentProvider: data.pspReference,
            amountPlanned: {
                centAmount: cart.sum.centAmount,
                currencyCode: cart.sum.currencyCode
            }
        };
        cart = await cartApi.addPayment(cart, payment);
        cart = await cartApi.order(cart);
        await emailApi.sendPaymentConfirmationEmail(cart.email);
    }
};
const AdyenController_checkout = async (request, actionContext) => {
    const adyenApi = new payment_adyen_BaseApi(actionContext.frontasticContext.project.configuration.payment.adyen);
    const payload = {
        details: {
            redirectResult: JSON.parse(request.body).redirectResult
        }
    };
    const data = await adyenApi.paymentDetails(payload);
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};
const notifications = async (request, actionContext) => {
    console.log('NOTIFICATIONS INCOMMING');
    const params = new external_url_["URLSearchParams"](request.body);
    console.log('eventCode: ', params.get('eventCode'));
    console.log('pspReference: ', params.get('pspReference'));
    console.log('merchantReference: ', params.get('merchantReference'));
    if (params.get('eventCode') === 'AUTHORISATION') {
    }
    const response = {
        statusCode: 200,
        body: '[accepted]',
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./payment-adyen/index.ts

/* harmony default export */ var payment_adyen = ({
    actions: {
        adyen: AdyenController_namespaceObject,
    },
});

// EXTERNAL MODULE: ./node_modules/contentful/dist/es-modules/contentful.js
var contentful = __webpack_require__(80);

// CONCATENATED MODULE: ./content-contentful/mappers/ContentfulMapper.ts
class ContentfulMapper {
    static contentfulEntriesToFrontasticEntries(entries) {
        return entries;
    }
    static contentfulEntryToFrontasticEntry(entry) {
        return entry;
    }
}

// CONCATENATED MODULE: ./content-contentful/apis/BaseApi.ts


class apis_BaseApi_BaseApi {
    constructor(params, locale) {
        this.client = Object(contentful["createClient"])(params);
        this.locale = this.mapLocale(locale);
    }
    mapLocale(locale) {
        var _a;
        return (_a = { en: 'en-US' }[locale !== null && locale !== void 0 ? locale : ""]) !== null && _a !== void 0 ? _a : 'en-US';
    }
    async getEntries() {
        const data = await this.client.getEntries({ locale: this.locale });
        return ContentfulMapper.contentfulEntriesToFrontasticEntries(data);
    }
    async getEntry(id) {
        const data = await this.client.getEntry(id, { locale: this.locale });
        return ContentfulMapper.contentfulEntryToFrontasticEntry(data);
    }
}

// CONCATENATED MODULE: ./content-contentful/utils/Request.ts
const utils_Request_getPath = (request) => {
    var _a;
    return (_a = utils_Request_getHeader(request, 'frontastic-path')) !== null && _a !== void 0 ? _a : request.query.path;
};
const utils_Request_getLocale = (request) => {
    var _a, _b;
    if (!request)
        return '';
    const locale = (_a = utils_Request_getHeader(request, 'frontastic-locale')) !== null && _a !== void 0 ? _a : request.query.locale;
    if (locale !== undefined) {
        return (_b = utils_Request_getHeader(request, 'frontastic-locale')) !== null && _b !== void 0 ? _b : request.query.locale;
    }
    throw new Error(`Locale is missing from request ${request}`);
};
const utils_Request_getHeader = (request, header) => {
    if (request.headers && header in request.headers) {
        const foundHeader = request.headers[header];
        if (Array.isArray(foundHeader)) {
            return foundHeader[0];
        }
        return foundHeader;
    }
    return null;
};

// CONCATENATED MODULE: ./content-contentful/actionControllers/ContenfulController.ts


const getEntries = async (request, actionContext) => {
    var _a;
    const config = (_a = actionContext.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
    const api = new apis_BaseApi_BaseApi({ space: config.spaceId, accessToken: config.accessToken }, utils_Request_getLocale(request));
    const data = await api.getEntries();
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};
const getEntry = async (request, actionContext) => {
    var _a;
    const config = (_a = actionContext.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
    const api = new apis_BaseApi_BaseApi({ space: config.spaceId, accessToken: config.accessToken }, utils_Request_getLocale(request));
    const data = await api.getEntry(request.query.id);
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./content-contentful/index.ts



/* harmony default export */ var content_contentful = ({
    'data-sources': {
        'contentful/entries': async (config, context) => {
            var _a;
            const clientConfig = (_a = context.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
            const contentfulApi = new apis_BaseApi_BaseApi({ space: clientConfig.spaceId, accessToken: clientConfig.accessToken }, utils_Request_getLocale(context.request));
            return {
                dataSourcePayload: await contentfulApi.getEntries(),
            };
        },
        'contentful/entry': async (config, context) => {
            var _a;
            const clientConfig = (_a = context.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
            const contentfulApi = new apis_BaseApi_BaseApi({ space: clientConfig.spaceId, accessToken: clientConfig.accessToken }, utils_Request_getLocale(context.request));
            return {
                dataSourcePayload: await contentfulApi.getEntry(config.configuration.entryId),
            };
        },
    },
    actions: {
        contentful: ContenfulController_namespaceObject,
    },
});

// CONCATENATED MODULE: ./index.ts



const extensionsToMerge = [
    commerce_commercetools,
    payment_adyen,
    content_contentful,
];
const mergeActions = (extensions) => {
    const actionNamespaces = {};
    for (const extension of extensions) {
        for (const actionNamespace in extension['actions'] || {}) {
            if (!actionNamespaces[actionNamespace]) {
                actionNamespaces[actionNamespace] = {};
            }
            actionNamespaces[actionNamespace] = Object.assign({}, actionNamespaces[actionNamespace], extension['actions'][actionNamespace]);
        }
    }
    return actionNamespaces;
};
const mergeDynamicPageHandlers = (extensions) => {
    return async (request, dynamicPageContext) => {
        for (const extension of extensions) {
            if (extension['dynamic-page-handler']) {
                const result = await extension['dynamic-page-handler'](request, dynamicPageContext);
                if (result !== null) {
                    return result;
                }
            }
        }
        return null;
    };
};
/* harmony default export */ var index = __webpack_exports__["default"] = ({
    'dynamic-page-handler': mergeDynamicPageHandlers(extensionsToMerge),
    'data-sources': extensionsToMerge.map((extension) => extension['data-sources'] || {}).reduce(Object.assign, {}),
    actions: mergeActions(extensionsToMerge),
});


/***/ })
/******/ ]);
});
//# sourceMappingURL=bundle.min.js.map